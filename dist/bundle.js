!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=129)}([function(t,e,n){(function(t){t.exports=function(){"use strict";var e,r;function a(){return e.apply(null,arguments)}function i(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function s(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function o(t){return void 0===t}function u(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function d(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function c(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function l(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function f(t,e){for(var n in e)l(e,n)&&(t[n]=e[n]);return l(e,"toString")&&(t.toString=e.toString),l(e,"valueOf")&&(t.valueOf=e.valueOf),t}function _(t,e,n,r){return Pe(t,e,n,r,!0).utc()}function h(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}function m(t){if(null==t._isValid){var e=h(t),n=r.call(e.parsedDateParts,(function(t){return null!=t})),a=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n);if(t._strict&&(a=a&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return a;t._isValid=a}return t._isValid}function p(t){var e=_(NaN);return null!=t?f(h(e),t):h(e).userInvalidated=!0,e}r=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,r=0;r<n;r++)if(r in e&&t.call(this,e[r],r,e))return!0;return!1};var y=a.momentProperties=[];function M(t,e){var n,r,a;if(o(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),o(e._i)||(t._i=e._i),o(e._f)||(t._f=e._f),o(e._l)||(t._l=e._l),o(e._strict)||(t._strict=e._strict),o(e._tzm)||(t._tzm=e._tzm),o(e._isUTC)||(t._isUTC=e._isUTC),o(e._offset)||(t._offset=e._offset),o(e._pf)||(t._pf=h(e)),o(e._locale)||(t._locale=e._locale),y.length>0)for(n=0;n<y.length;n++)o(a=e[r=y[n]])||(t[r]=a);return t}var g=!1;function L(t){M(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,a.updateOffset(this),g=!1)}function v(t){return t instanceof L||null!=t&&null!=t._isAMomentObject}function Y(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function b(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=Y(e)),n}function w(t,e,n){var r,a=Math.min(t.length,e.length),i=Math.abs(t.length-e.length),s=0;for(r=0;r<a;r++)(n&&t[r]!==e[r]||!n&&b(t[r])!==b(e[r]))&&s++;return s+i}function k(t){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function D(t,e){var n=!0;return f((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,t),n){for(var r,i=[],s=0;s<arguments.length;s++){if(r="","object"==typeof arguments[s]){for(var o in r+="\n["+s+"] ",arguments[0])r+=o+": "+arguments[0][o]+", ";r=r.slice(0,-2)}else r=arguments[s];i.push(r)}k(t+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return e.apply(this,arguments)}),e)}var T,x={};function S(t,e){null!=a.deprecationHandler&&a.deprecationHandler(t,e),x[t]||(k(e),x[t]=!0)}function H(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function j(t,e){var n,r=f({},t);for(n in e)l(e,n)&&(s(t[n])&&s(e[n])?(r[n]={},f(r[n],t[n]),f(r[n],e[n])):null!=e[n]?r[n]=e[n]:delete r[n]);for(n in t)l(t,n)&&!l(e,n)&&s(t[n])&&(r[n]=f({},r[n]));return r}function A(t){null!=t&&this.set(t)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,T=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)l(t,e)&&n.push(e);return n};var P={};function E(t,e){var n=t.toLowerCase();P[n]=P[n+"s"]=P[e]=t}function O(t){return"string"==typeof t?P[t]||P[t.toLowerCase()]:void 0}function N(t){var e,n,r={};for(n in t)l(t,n)&&(e=O(n))&&(r[e]=t[n]);return r}var W={};function z(t,e){W[t]=e}function F(t,e,n){var r=""+Math.abs(t),a=e-r.length;return(t>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var C=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,U={},I={};function J(t,e,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),t&&(I[t]=a),e&&(I[e[0]]=function(){return F(a.apply(this,arguments),e[1],e[2])}),n&&(I[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),t)})}function q(t,e){return t.isValid()?(e=G(e,t.localeData()),U[e]=U[e]||function(t){var e,n,r,a=t.match(C);for(e=0,n=a.length;e<n;e++)I[a[e]]?a[e]=I[a[e]]:a[e]=(r=a[e]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(e){var r,i="";for(r=0;r<n;r++)i+=H(a[r])?a[r].call(e,t):a[r];return i}}(e),U[e](t)):t.localeData().invalidDate()}function G(t,e){var n=5;function r(t){return e.longDateFormat(t)||t}for(R.lastIndex=0;n>=0&&R.test(t);)t=t.replace(R,r),R.lastIndex=0,n-=1;return t}var B=/\d/,V=/\d\d/,$=/\d{3}/,Z=/\d{4}/,K=/[+-]?\d{6}/,X=/\d\d?/,Q=/\d\d\d\d?/,tt=/\d\d\d\d\d\d?/,et=/\d{1,3}/,nt=/\d{1,4}/,rt=/[+-]?\d{1,6}/,at=/\d+/,it=/[+-]?\d+/,st=/Z|[+-]\d\d:?\d\d/gi,ot=/Z|[+-]\d\d(?::?\d\d)?/gi,ut=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,dt={};function ct(t,e,n){dt[t]=H(e)?e:function(t,r){return t&&n?n:e}}function lt(t,e){return l(dt,t)?dt[t](e._strict,e._locale):new RegExp(ft(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(t,e,n,r,a){return e||n||r||a}))))}function ft(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var _t={};function ht(t,e){var n,r=e;for("string"==typeof t&&(t=[t]),u(e)&&(r=function(t,n){n[e]=b(t)}),n=0;n<t.length;n++)_t[t[n]]=r}function mt(t,e){ht(t,(function(t,n,r,a){r._w=r._w||{},e(t,r._w,r,a)}))}function pt(t,e,n){null!=e&&l(_t,t)&&_t[t](e,n._a,n,t)}var yt=0,Mt=1,gt=2,Lt=3,vt=4,Yt=5,bt=6,wt=7,kt=8;function Dt(t){return Tt(t)?366:365}function Tt(t){return t%4==0&&t%100!=0||t%400==0}J("Y",0,0,(function(){var t=this.year();return t<=9999?""+t:"+"+t})),J(0,["YY",2],0,(function(){return this.year()%100})),J(0,["YYYY",4],0,"year"),J(0,["YYYYY",5],0,"year"),J(0,["YYYYYY",6,!0],0,"year"),E("year","y"),z("year",1),ct("Y",it),ct("YY",X,V),ct("YYYY",nt,Z),ct("YYYYY",rt,K),ct("YYYYYY",rt,K),ht(["YYYYY","YYYYYY"],yt),ht("YYYY",(function(t,e){e[yt]=2===t.length?a.parseTwoDigitYear(t):b(t)})),ht("YY",(function(t,e){e[yt]=a.parseTwoDigitYear(t)})),ht("Y",(function(t,e){e[yt]=parseInt(t,10)})),a.parseTwoDigitYear=function(t){return b(t)+(b(t)>68?1900:2e3)};var xt,St=Ht("FullYear",!0);function Ht(t,e){return function(n){return null!=n?(At(this,t,n),a.updateOffset(this,e),this):jt(this,t)}}function jt(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function At(t,e,n){t.isValid()&&!isNaN(n)&&("FullYear"===e&&Tt(t.year())&&1===t.month()&&29===t.date()?t._d["set"+(t._isUTC?"UTC":"")+e](n,t.month(),Pt(n,t.month())):t._d["set"+(t._isUTC?"UTC":"")+e](n))}function Pt(t,e){if(isNaN(t)||isNaN(e))return NaN;var n,r=(e%(n=12)+n)%n;return t+=(e-r)/12,1===r?Tt(t)?29:28:31-r%7%2}xt=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1},J("M",["MM",2],"Mo",(function(){return this.month()+1})),J("MMM",0,0,(function(t){return this.localeData().monthsShort(this,t)})),J("MMMM",0,0,(function(t){return this.localeData().months(this,t)})),E("month","M"),z("month",8),ct("M",X),ct("MM",X,V),ct("MMM",(function(t,e){return e.monthsShortRegex(t)})),ct("MMMM",(function(t,e){return e.monthsRegex(t)})),ht(["M","MM"],(function(t,e){e[Mt]=b(t)-1})),ht(["MMM","MMMM"],(function(t,e,n,r){var a=n._locale.monthsParse(t,r,n._strict);null!=a?e[Mt]=a:h(n).invalidMonth=t}));var Et=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ot="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Nt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Wt(t,e,n){var r,a,i,s=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(a=xt.call(this._shortMonthsParse,s))?a:null:-1!==(a=xt.call(this._longMonthsParse,s))?a:null:"MMM"===e?-1!==(a=xt.call(this._shortMonthsParse,s))?a:-1!==(a=xt.call(this._longMonthsParse,s))?a:null:-1!==(a=xt.call(this._longMonthsParse,s))?a:-1!==(a=xt.call(this._shortMonthsParse,s))?a:null}function zt(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=b(e);else if(!u(e=t.localeData().monthsParse(e)))return t;return n=Math.min(t.date(),Pt(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function Ft(t){return null!=t?(zt(this,t),a.updateOffset(this,!0),this):jt(this,"Month")}var Ct=ut,Rt=ut;function Ut(){function t(t,e){return e.length-t.length}var e,n,r=[],a=[],i=[];for(e=0;e<12;e++)n=_([2e3,e]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(t),a.sort(t),i.sort(t),e=0;e<12;e++)r[e]=ft(r[e]),a[e]=ft(a[e]);for(e=0;e<24;e++)i[e]=ft(i[e]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function It(t,e,n,r,a,i,s){var o;return t<100&&t>=0?(o=new Date(t+400,e,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(t)):o=new Date(t,e,n,r,a,i,s),o}function Jt(t){var e;if(t<100&&t>=0){var n=Array.prototype.slice.call(arguments);n[0]=t+400,e=new Date(Date.UTC.apply(null,n)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)}else e=new Date(Date.UTC.apply(null,arguments));return e}function qt(t,e,n){var r=7+e-n;return-(7+Jt(t,0,r).getUTCDay()-e)%7+r-1}function Gt(t,e,n,r,a){var i,s,o=1+7*(e-1)+(7+n-r)%7+qt(t,r,a);return o<=0?s=Dt(i=t-1)+o:o>Dt(t)?(i=t+1,s=o-Dt(t)):(i=t,s=o),{year:i,dayOfYear:s}}function Bt(t,e,n){var r,a,i=qt(t.year(),e,n),s=Math.floor((t.dayOfYear()-i-1)/7)+1;return s<1?r=s+Vt(a=t.year()-1,e,n):s>Vt(t.year(),e,n)?(r=s-Vt(t.year(),e,n),a=t.year()+1):(a=t.year(),r=s),{week:r,year:a}}function Vt(t,e,n){var r=qt(t,e,n),a=qt(t+1,e,n);return(Dt(t)-r+a)/7}function $t(t,e){return t.slice(e,7).concat(t.slice(0,e))}J("w",["ww",2],"wo","week"),J("W",["WW",2],"Wo","isoWeek"),E("week","w"),E("isoWeek","W"),z("week",5),z("isoWeek",5),ct("w",X),ct("ww",X,V),ct("W",X),ct("WW",X,V),mt(["w","ww","W","WW"],(function(t,e,n,r){e[r.substr(0,1)]=b(t)})),J("d",0,"do","day"),J("dd",0,0,(function(t){return this.localeData().weekdaysMin(this,t)})),J("ddd",0,0,(function(t){return this.localeData().weekdaysShort(this,t)})),J("dddd",0,0,(function(t){return this.localeData().weekdays(this,t)})),J("e",0,0,"weekday"),J("E",0,0,"isoWeekday"),E("day","d"),E("weekday","e"),E("isoWeekday","E"),z("day",11),z("weekday",11),z("isoWeekday",11),ct("d",X),ct("e",X),ct("E",X),ct("dd",(function(t,e){return e.weekdaysMinRegex(t)})),ct("ddd",(function(t,e){return e.weekdaysShortRegex(t)})),ct("dddd",(function(t,e){return e.weekdaysRegex(t)})),mt(["dd","ddd","dddd"],(function(t,e,n,r){var a=n._locale.weekdaysParse(t,r,n._strict);null!=a?e.d=a:h(n).invalidWeekday=t})),mt(["d","e","E"],(function(t,e,n,r){e[r]=b(t)}));var Zt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Kt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Xt="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Qt(t,e,n){var r,a,i,s=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(a=xt.call(this._weekdaysParse,s))?a:null:"ddd"===e?-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:null:"dddd"===e?-1!==(a=xt.call(this._weekdaysParse,s))?a:-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:null:"ddd"===e?-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:-1!==(a=xt.call(this._weekdaysParse,s))?a:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:null:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:-1!==(a=xt.call(this._weekdaysParse,s))?a:-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:null}var te=ut,ee=ut,ne=ut;function re(){function t(t,e){return e.length-t.length}var e,n,r,a,i,s=[],o=[],u=[],d=[];for(e=0;e<7;e++)n=_([2e3,1]).day(e),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),s.push(r),o.push(a),u.push(i),d.push(r),d.push(a),d.push(i);for(s.sort(t),o.sort(t),u.sort(t),d.sort(t),e=0;e<7;e++)o[e]=ft(o[e]),u[e]=ft(u[e]),d[e]=ft(d[e]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function ae(){return this.hours()%12||12}function ie(t,e){J(t,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)}))}function se(t,e){return e._meridiemParse}J("H",["HH",2],0,"hour"),J("h",["hh",2],0,ae),J("k",["kk",2],0,(function(){return this.hours()||24})),J("hmm",0,0,(function(){return""+ae.apply(this)+F(this.minutes(),2)})),J("hmmss",0,0,(function(){return""+ae.apply(this)+F(this.minutes(),2)+F(this.seconds(),2)})),J("Hmm",0,0,(function(){return""+this.hours()+F(this.minutes(),2)})),J("Hmmss",0,0,(function(){return""+this.hours()+F(this.minutes(),2)+F(this.seconds(),2)})),ie("a",!0),ie("A",!1),E("hour","h"),z("hour",13),ct("a",se),ct("A",se),ct("H",X),ct("h",X),ct("k",X),ct("HH",X,V),ct("hh",X,V),ct("kk",X,V),ct("hmm",Q),ct("hmmss",tt),ct("Hmm",Q),ct("Hmmss",tt),ht(["H","HH"],Lt),ht(["k","kk"],(function(t,e,n){var r=b(t);e[Lt]=24===r?0:r})),ht(["a","A"],(function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t})),ht(["h","hh"],(function(t,e,n){e[Lt]=b(t),h(n).bigHour=!0})),ht("hmm",(function(t,e,n){var r=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r)),h(n).bigHour=!0})),ht("hmmss",(function(t,e,n){var r=t.length-4,a=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r,2)),e[Yt]=b(t.substr(a)),h(n).bigHour=!0})),ht("Hmm",(function(t,e,n){var r=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r))})),ht("Hmmss",(function(t,e,n){var r=t.length-4,a=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r,2)),e[Yt]=b(t.substr(a))}));var oe,ue=Ht("Hours",!0),de={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ot,monthsShort:Nt,week:{dow:0,doy:6},weekdays:Zt,weekdaysMin:Xt,weekdaysShort:Kt,meridiemParse:/[ap]\.?m?\.?/i},ce={},le={};function fe(t){return t?t.toLowerCase().replace("_","-"):t}function _e(e){var r=null;if(!ce[e]&&void 0!==t&&t&&t.exports)try{r=oe._abbr,n(140)("./"+e),he(r)}catch(t){}return ce[e]}function he(t,e){var n;return t&&((n=o(e)?pe(t):me(t,e))?oe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),oe._abbr}function me(t,e){if(null!==e){var n,r=de;if(e.abbr=t,null!=ce[t])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ce[t]._config;else if(null!=e.parentLocale)if(null!=ce[e.parentLocale])r=ce[e.parentLocale]._config;else{if(null==(n=_e(e.parentLocale)))return le[e.parentLocale]||(le[e.parentLocale]=[]),le[e.parentLocale].push({name:t,config:e}),null;r=n._config}return ce[t]=new A(j(r,e)),le[t]&&le[t].forEach((function(t){me(t.name,t.config)})),he(t),ce[t]}return delete ce[t],null}function pe(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return oe;if(!i(t)){if(e=_e(t))return e;t=[t]}return function(t){for(var e,n,r,a,i=0;i<t.length;){for(e=(a=fe(t[i]).split("-")).length,n=(n=fe(t[i+1]))?n.split("-"):null;e>0;){if(r=_e(a.slice(0,e).join("-")))return r;if(n&&n.length>=e&&w(a,n,!0)>=e-1)break;e--}i++}return oe}(t)}function ye(t){var e,n=t._a;return n&&-2===h(t).overflow&&(e=n[Mt]<0||n[Mt]>11?Mt:n[gt]<1||n[gt]>Pt(n[yt],n[Mt])?gt:n[Lt]<0||n[Lt]>24||24===n[Lt]&&(0!==n[vt]||0!==n[Yt]||0!==n[bt])?Lt:n[vt]<0||n[vt]>59?vt:n[Yt]<0||n[Yt]>59?Yt:n[bt]<0||n[bt]>999?bt:-1,h(t)._overflowDayOfYear&&(e<yt||e>gt)&&(e=gt),h(t)._overflowWeeks&&-1===e&&(e=wt),h(t)._overflowWeekday&&-1===e&&(e=kt),h(t).overflow=e),t}function Me(t,e,n){return null!=t?t:null!=e?e:n}function ge(t){var e,n,r,i,s,o=[];if(!t._d){for(r=function(t){var e=new Date(a.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}(t),t._w&&null==t._a[gt]&&null==t._a[Mt]&&function(t){var e,n,r,a,i,s,o,u;if(null!=(e=t._w).GG||null!=e.W||null!=e.E)i=1,s=4,n=Me(e.GG,t._a[yt],Bt(Ee(),1,4).year),r=Me(e.W,1),((a=Me(e.E,1))<1||a>7)&&(u=!0);else{i=t._locale._week.dow,s=t._locale._week.doy;var d=Bt(Ee(),i,s);n=Me(e.gg,t._a[yt],d.year),r=Me(e.w,d.week),null!=e.d?((a=e.d)<0||a>6)&&(u=!0):null!=e.e?(a=e.e+i,(e.e<0||e.e>6)&&(u=!0)):a=i}r<1||r>Vt(n,i,s)?h(t)._overflowWeeks=!0:null!=u?h(t)._overflowWeekday=!0:(o=Gt(n,r,a,i,s),t._a[yt]=o.year,t._dayOfYear=o.dayOfYear)}(t),null!=t._dayOfYear&&(s=Me(t._a[yt],r[yt]),(t._dayOfYear>Dt(s)||0===t._dayOfYear)&&(h(t)._overflowDayOfYear=!0),n=Jt(s,0,t._dayOfYear),t._a[Mt]=n.getUTCMonth(),t._a[gt]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=o[e]=r[e];for(;e<7;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[Lt]&&0===t._a[vt]&&0===t._a[Yt]&&0===t._a[bt]&&(t._nextDay=!0,t._a[Lt]=0),t._d=(t._useUTC?Jt:It).apply(null,o),i=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Lt]=24),t._w&&void 0!==t._w.d&&t._w.d!==i&&(h(t).weekdayMismatch=!0)}}var Le=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ve=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ye=/Z|[+-]\d\d(?::?\d\d)?/,be=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],we=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ke=/^\/?Date\((\-?\d+)/i;function De(t){var e,n,r,a,i,s,o=t._i,u=Le.exec(o)||ve.exec(o);if(u){for(h(t).iso=!0,e=0,n=be.length;e<n;e++)if(be[e][1].exec(u[1])){a=be[e][0],r=!1!==be[e][2];break}if(null==a)return void(t._isValid=!1);if(u[3]){for(e=0,n=we.length;e<n;e++)if(we[e][1].exec(u[3])){i=(u[2]||" ")+we[e][0];break}if(null==i)return void(t._isValid=!1)}if(!r&&null!=i)return void(t._isValid=!1);if(u[4]){if(!Ye.exec(u[4]))return void(t._isValid=!1);s="Z"}t._f=a+(i||"")+(s||""),je(t)}else t._isValid=!1}var Te=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function xe(t){var e=parseInt(t,10);return e<=49?2e3+e:e<=999?1900+e:e}var Se={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function He(t){var e,n,r,a,i,s,o,u=Te.exec(t._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){var d=(e=u[4],n=u[3],r=u[2],a=u[5],i=u[6],s=u[7],o=[xe(e),Nt.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],s&&o.push(parseInt(s,10)),o);if(!function(t,e,n){return!t||Kt.indexOf(t)===new Date(e[0],e[1],e[2]).getDay()||(h(n).weekdayMismatch=!0,n._isValid=!1,!1)}(u[1],d,t))return;t._a=d,t._tzm=function(t,e,n){if(t)return Se[t];if(e)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(u[8],u[9],u[10]),t._d=Jt.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),h(t).rfc2822=!0}else t._isValid=!1}function je(t){if(t._f!==a.ISO_8601)if(t._f!==a.RFC_2822){t._a=[],h(t).empty=!0;var e,n,r,i,s,o=""+t._i,u=o.length,d=0;for(r=G(t._f,t._locale).match(C)||[],e=0;e<r.length;e++)i=r[e],(n=(o.match(lt(i,t))||[])[0])&&((s=o.substr(0,o.indexOf(n))).length>0&&h(t).unusedInput.push(s),o=o.slice(o.indexOf(n)+n.length),d+=n.length),I[i]?(n?h(t).empty=!1:h(t).unusedTokens.push(i),pt(i,n,t)):t._strict&&!n&&h(t).unusedTokens.push(i);h(t).charsLeftOver=u-d,o.length>0&&h(t).unusedInput.push(o),t._a[Lt]<=12&&!0===h(t).bigHour&&t._a[Lt]>0&&(h(t).bigHour=void 0),h(t).parsedDateParts=t._a.slice(0),h(t).meridiem=t._meridiem,t._a[Lt]=function(t,e,n){var r;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?((r=t.isPM(n))&&e<12&&(e+=12),r||12!==e||(e=0),e):e}(t._locale,t._a[Lt],t._meridiem),ge(t),ye(t)}else He(t);else De(t)}function Ae(t){var e=t._i,n=t._f;return t._locale=t._locale||pe(t._l),null===e||void 0===n&&""===e?p({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),v(e)?new L(ye(e)):(d(e)?t._d=e:i(n)?function(t){var e,n,r,a,i;if(0===t._f.length)return h(t).invalidFormat=!0,void(t._d=new Date(NaN));for(a=0;a<t._f.length;a++)i=0,e=M({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[a],je(e),m(e)&&(i+=h(e).charsLeftOver,i+=10*h(e).unusedTokens.length,h(e).score=i,(null==r||i<r)&&(r=i,n=e));f(t,n||e)}(t):n?je(t):function(t){var e=t._i;o(e)?t._d=new Date(a.now()):d(e)?t._d=new Date(e.valueOf()):"string"==typeof e?function(t){var e=ke.exec(t._i);null===e?(De(t),!1===t._isValid&&(delete t._isValid,He(t),!1===t._isValid&&(delete t._isValid,a.createFromInputFallback(t)))):t._d=new Date(+e[1])}(t):i(e)?(t._a=c(e.slice(0),(function(t){return parseInt(t,10)})),ge(t)):s(e)?function(t){if(!t._d){var e=N(t._i);t._a=c([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],(function(t){return t&&parseInt(t,10)})),ge(t)}}(t):u(e)?t._d=new Date(e):a.createFromInputFallback(t)}(t),m(t)||(t._d=null),t))}function Pe(t,e,n,r,a){var o,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(s(t)&&function(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(t.hasOwnProperty(e))return!1;return!0}(t)||i(t)&&0===t.length)&&(t=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=t,u._f=e,u._strict=r,(o=new L(ye(Ae(u))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Ee(t,e,n,r){return Pe(t,e,n,r,!1)}a.createFromInputFallback=D("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Oe=D("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=Ee.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:p()})),Ne=D("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=Ee.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:p()}));function We(t,e){var n,r;if(1===e.length&&i(e[0])&&(e=e[0]),!e.length)return Ee();for(n=e[0],r=1;r<e.length;++r)e[r].isValid()&&!e[r][t](n)||(n=e[r]);return n}var ze=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Fe(t){var e=N(t),n=e.year||0,r=e.quarter||0,a=e.month||0,i=e.week||e.isoWeek||0,s=e.day||0,o=e.hour||0,u=e.minute||0,d=e.second||0,c=e.millisecond||0;this._isValid=function(t){for(var e in t)if(-1===xt.call(ze,e)||null!=t[e]&&isNaN(t[e]))return!1;for(var n=!1,r=0;r<ze.length;++r)if(t[ze[r]]){if(n)return!1;parseFloat(t[ze[r]])!==b(t[ze[r]])&&(n=!0)}return!0}(e),this._milliseconds=+c+1e3*d+6e4*u+1e3*o*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=pe(),this._bubble()}function Ce(t){return t instanceof Fe}function Re(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function Ue(t,e){J(t,0,0,(function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+F(~~(t/60),2)+e+F(~~t%60,2)}))}Ue("Z",":"),Ue("ZZ",""),ct("Z",ot),ct("ZZ",ot),ht(["Z","ZZ"],(function(t,e,n){n._useUTC=!0,n._tzm=Je(ot,t)}));var Ie=/([\+\-]|\d\d)/gi;function Je(t,e){var n=(e||"").match(t);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(Ie)||["-",0,0],a=60*r[1]+b(r[2]);return 0===a?0:"+"===r[0]?a:-a}function qe(t,e){var n,r;return e._isUTC?(n=e.clone(),r=(v(t)||d(t)?t.valueOf():Ee(t).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Ee(t).local()}function Ge(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Be(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Ve=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,$e=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ze(t,e){var n,r,a,i,s,o,d=t,c=null;return Ce(t)?d={ms:t._milliseconds,d:t._days,M:t._months}:u(t)?(d={},e?d[e]=t:d.milliseconds=t):(c=Ve.exec(t))?(n="-"===c[1]?-1:1,d={y:0,d:b(c[gt])*n,h:b(c[Lt])*n,m:b(c[vt])*n,s:b(c[Yt])*n,ms:b(Re(1e3*c[bt]))*n}):(c=$e.exec(t))?(n="-"===c[1]?-1:1,d={y:Ke(c[2],n),M:Ke(c[3],n),w:Ke(c[4],n),d:Ke(c[5],n),h:Ke(c[6],n),m:Ke(c[7],n),s:Ke(c[8],n)}):null==d?d={}:"object"==typeof d&&("from"in d||"to"in d)&&(i=Ee(d.from),s=Ee(d.to),a=i.isValid()&&s.isValid()?(s=qe(s,i),i.isBefore(s)?o=Xe(i,s):((o=Xe(s,i)).milliseconds=-o.milliseconds,o.months=-o.months),o):{milliseconds:0,months:0},(d={}).ms=a.milliseconds,d.M=a.months),r=new Fe(d),Ce(t)&&l(t,"_locale")&&(r._locale=t._locale),r}function Ke(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Xe(t,e){var n={};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Qe(t,e){return function(n,r){var a;return null===r||isNaN(+r)||(S(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),tn(this,Ze(n="string"==typeof n?+n:n,r),t),this}}function tn(t,e,n,r){var i=e._milliseconds,s=Re(e._days),o=Re(e._months);t.isValid()&&(r=null==r||r,o&&zt(t,jt(t,"Month")+o*n),s&&At(t,"Date",jt(t,"Date")+s*n),i&&t._d.setTime(t._d.valueOf()+i*n),r&&a.updateOffset(t,s||o))}Ze.fn=Fe.prototype,Ze.invalid=function(){return Ze(NaN)};var en=Qe(1,"add"),nn=Qe(-1,"subtract");function rn(t,e){var n=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(n,"months");return-(n+(e-r<0?(e-r)/(r-t.clone().add(n-1,"months")):(e-r)/(t.clone().add(n+1,"months")-r)))||0}function an(t){var e;return void 0===t?this._locale._abbr:(null!=(e=pe(t))&&(this._locale=e),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var sn=D("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(t){return void 0===t?this.localeData():this.locale(t)}));function on(){return this._locale}var un=1e3,dn=60*un,cn=60*dn,ln=3506328*cn;function fn(t,e){return(t%e+e)%e}function _n(t,e,n){return t<100&&t>=0?new Date(t+400,e,n)-ln:new Date(t,e,n).valueOf()}function hn(t,e,n){return t<100&&t>=0?Date.UTC(t+400,e,n)-ln:Date.UTC(t,e,n)}function mn(t,e){J(0,[t,t.length],0,e)}function pn(t,e,n,r,a){var i;return null==t?Bt(this,r,a).year:(e>(i=Vt(t,r,a))&&(e=i),yn.call(this,t,e,n,r,a))}function yn(t,e,n,r,a){var i=Gt(t,e,n,r,a),s=Jt(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}J(0,["gg",2],0,(function(){return this.weekYear()%100})),J(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),mn("gggg","weekYear"),mn("ggggg","weekYear"),mn("GGGG","isoWeekYear"),mn("GGGGG","isoWeekYear"),E("weekYear","gg"),E("isoWeekYear","GG"),z("weekYear",1),z("isoWeekYear",1),ct("G",it),ct("g",it),ct("GG",X,V),ct("gg",X,V),ct("GGGG",nt,Z),ct("gggg",nt,Z),ct("GGGGG",rt,K),ct("ggggg",rt,K),mt(["gggg","ggggg","GGGG","GGGGG"],(function(t,e,n,r){e[r.substr(0,2)]=b(t)})),mt(["gg","GG"],(function(t,e,n,r){e[r]=a.parseTwoDigitYear(t)})),J("Q",0,"Qo","quarter"),E("quarter","Q"),z("quarter",7),ct("Q",B),ht("Q",(function(t,e){e[Mt]=3*(b(t)-1)})),J("D",["DD",2],"Do","date"),E("date","D"),z("date",9),ct("D",X),ct("DD",X,V),ct("Do",(function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient})),ht(["D","DD"],gt),ht("Do",(function(t,e){e[gt]=b(t.match(X)[0])}));var Mn=Ht("Date",!0);J("DDD",["DDDD",3],"DDDo","dayOfYear"),E("dayOfYear","DDD"),z("dayOfYear",4),ct("DDD",et),ct("DDDD",$),ht(["DDD","DDDD"],(function(t,e,n){n._dayOfYear=b(t)})),J("m",["mm",2],0,"minute"),E("minute","m"),z("minute",14),ct("m",X),ct("mm",X,V),ht(["m","mm"],vt);var gn=Ht("Minutes",!1);J("s",["ss",2],0,"second"),E("second","s"),z("second",15),ct("s",X),ct("ss",X,V),ht(["s","ss"],Yt);var Ln,vn=Ht("Seconds",!1);for(J("S",0,0,(function(){return~~(this.millisecond()/100)})),J(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),J(0,["SSS",3],0,"millisecond"),J(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),J(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),J(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),J(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),J(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),J(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),E("millisecond","ms"),z("millisecond",16),ct("S",et,B),ct("SS",et,V),ct("SSS",et,$),Ln="SSSS";Ln.length<=9;Ln+="S")ct(Ln,at);function Yn(t,e){e[bt]=b(1e3*("0."+t))}for(Ln="S";Ln.length<=9;Ln+="S")ht(Ln,Yn);var bn=Ht("Milliseconds",!1);J("z",0,0,"zoneAbbr"),J("zz",0,0,"zoneName");var wn=L.prototype;function kn(t){return t}wn.add=en,wn.calendar=function(t,e){var n=t||Ee(),r=qe(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",s=e&&(H(e[i])?e[i].call(this,n):e[i]);return this.format(s||this.localeData().calendar(i,this,Ee(n)))},wn.clone=function(){return new L(this)},wn.diff=function(t,e,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=qe(t,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),e=O(e)){case"year":i=rn(this,r)/12;break;case"month":i=rn(this,r);break;case"quarter":i=rn(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:Y(i)},wn.endOf=function(t){var e;if(void 0===(t=O(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?hn:_n;switch(t){case"year":e=n(this.year()+1,0,1)-1;break;case"quarter":e=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=n(this.year(),this.month()+1,1)-1;break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=cn-fn(e+(this._isUTC?0:this.utcOffset()*dn),cn)-1;break;case"minute":e=this._d.valueOf(),e+=dn-fn(e,dn)-1;break;case"second":e=this._d.valueOf(),e+=un-fn(e,un)-1}return this._d.setTime(e),a.updateOffset(this,!0),this},wn.format=function(t){t||(t=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var e=q(this,t);return this.localeData().postformat(e)},wn.from=function(t,e){return this.isValid()&&(v(t)&&t.isValid()||Ee(t).isValid())?Ze({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},wn.fromNow=function(t){return this.from(Ee(),t)},wn.to=function(t,e){return this.isValid()&&(v(t)&&t.isValid()||Ee(t).isValid())?Ze({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},wn.toNow=function(t){return this.to(Ee(),t)},wn.get=function(t){return H(this[t=O(t)])?this[t]():this},wn.invalidAt=function(){return h(this).overflow},wn.isAfter=function(t,e){var n=v(t)?t:Ee(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=O(e)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},wn.isBefore=function(t,e){var n=v(t)?t:Ee(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=O(e)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},wn.isBetween=function(t,e,n,r){var a=v(t)?t:Ee(t),i=v(e)?e:Ee(e);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},wn.isSame=function(t,e){var n,r=v(t)?t:Ee(t);return!(!this.isValid()||!r.isValid())&&("millisecond"===(e=O(e)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},wn.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},wn.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},wn.isValid=function(){return m(this)},wn.lang=sn,wn.locale=an,wn.localeData=on,wn.max=Ne,wn.min=Oe,wn.parsingFlags=function(){return f({},h(this))},wn.set=function(t,e){if("object"==typeof t)for(var n=function(t){var e=[];for(var n in t)e.push({unit:n,priority:W[n]});return e.sort((function(t,e){return t.priority-e.priority})),e}(t=N(t)),r=0;r<n.length;r++)this[n[r].unit](t[n[r].unit]);else if(H(this[t=O(t)]))return this[t](e);return this},wn.startOf=function(t){var e;if(void 0===(t=O(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?hn:_n;switch(t){case"year":e=n(this.year(),0,1);break;case"quarter":e=n(this.year(),this.month()-this.month()%3,1);break;case"month":e=n(this.year(),this.month(),1);break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=n(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=fn(e+(this._isUTC?0:this.utcOffset()*dn),cn);break;case"minute":e=this._d.valueOf(),e-=fn(e,dn);break;case"second":e=this._d.valueOf(),e-=fn(e,un)}return this._d.setTime(e),a.updateOffset(this,!0),this},wn.subtract=nn,wn.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},wn.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},wn.toDate=function(){return new Date(this.valueOf())},wn.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,n=e?this.clone().utc():this;return n.year()<0||n.year()>9999?q(n,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):H(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",q(n,"Z")):q(n,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},wn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t="moment",e="";this.isLocal()||(t=0===this.utcOffset()?"moment.utc":"moment.parseZone",e="Z");var n="["+t+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=e+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},wn.toJSON=function(){return this.isValid()?this.toISOString():null},wn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},wn.unix=function(){return Math.floor(this.valueOf()/1e3)},wn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},wn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},wn.year=St,wn.isLeapYear=function(){return Tt(this.year())},wn.weekYear=function(t){return pn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},wn.isoWeekYear=function(t){return pn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},wn.quarter=wn.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},wn.month=Ft,wn.daysInMonth=function(){return Pt(this.year(),this.month())},wn.week=wn.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},wn.isoWeek=wn.isoWeeks=function(t){var e=Bt(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},wn.weeksInYear=function(){var t=this.localeData()._week;return Vt(this.year(),t.dow,t.doy)},wn.isoWeeksInYear=function(){return Vt(this.year(),1,4)},wn.date=Mn,wn.day=wn.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}(t,this.localeData()),this.add(t-e,"d")):e},wn.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},wn.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=function(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7},wn.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},wn.hour=wn.hours=ue,wn.minute=wn.minutes=gn,wn.second=wn.seconds=vn,wn.millisecond=wn.milliseconds=bn,wn.utcOffset=function(t,e,n){var r,i=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=Je(ot,t)))return this}else Math.abs(t)<16&&!n&&(t*=60);return!this._isUTC&&e&&(r=Ge(this)),this._offset=t,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==t&&(!e||this._changeInProgress?tn(this,Ze(t-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Ge(this)},wn.utc=function(t){return this.utcOffset(0,t)},wn.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Ge(this),"m")),this},wn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=Je(st,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},wn.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Ee(t).utcOffset():0,(this.utcOffset()-t)%60==0)},wn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},wn.isLocal=function(){return!!this.isValid()&&!this._isUTC},wn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},wn.isUtc=Be,wn.isUTC=Be,wn.zoneAbbr=function(){return this._isUTC?"UTC":""},wn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},wn.dates=D("dates accessor is deprecated. Use date instead.",Mn),wn.months=D("months accessor is deprecated. Use month instead",Ft),wn.years=D("years accessor is deprecated. Use year instead",St),wn.zone=D("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()})),wn.isDSTShifted=D("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var t={};if(M(t,this),(t=Ae(t))._a){var e=t._isUTC?_(t._a):Ee(t._a);this._isDSTShifted=this.isValid()&&w(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var Dn=A.prototype;function Tn(t,e,n,r){var a=pe(),i=_().set(r,e);return a[n](i,t)}function xn(t,e,n){if(u(t)&&(e=t,t=void 0),t=t||"",null!=e)return Tn(t,e,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Tn(t,r,n,"month");return a}function Sn(t,e,n,r){"boolean"==typeof t?(u(e)&&(n=e,e=void 0),e=e||""):(n=e=t,t=!1,u(e)&&(n=e,e=void 0),e=e||"");var a,i=pe(),s=t?i._week.dow:0;if(null!=n)return Tn(e,(n+s)%7,r,"day");var o=[];for(a=0;a<7;a++)o[a]=Tn(e,(a+s)%7,r,"day");return o}Dn.calendar=function(t,e,n){var r=this._calendar[t]||this._calendar.sameElse;return H(r)?r.call(e,n):r},Dn.longDateFormat=function(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,(function(t){return t.slice(1)})),this._longDateFormat[t])},Dn.invalidDate=function(){return this._invalidDate},Dn.ordinal=function(t){return this._ordinal.replace("%d",t)},Dn.preparse=kn,Dn.postformat=kn,Dn.relativeTime=function(t,e,n,r){var a=this._relativeTime[n];return H(a)?a(t,e,n,r):a.replace(/%d/i,t)},Dn.pastFuture=function(t,e){var n=this._relativeTime[t>0?"future":"past"];return H(n)?n(e):n.replace(/%s/i,e)},Dn.set=function(t){var e,n;for(n in t)H(e=t[n])?this[n]=e:this["_"+n]=e;this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Dn.months=function(t,e){return t?i(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||Et).test(e)?"format":"standalone"][t.month()]:i(this._months)?this._months:this._months.standalone},Dn.monthsShort=function(t,e){return t?i(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[Et.test(e)?"format":"standalone"][t.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Dn.monthsParse=function(t,e,n){var r,a,i;if(this._monthsParseExact)return Wt.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}},Dn.monthsRegex=function(t){return this._monthsParseExact?(l(this,"_monthsRegex")||Ut.call(this),t?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=Rt),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},Dn.monthsShortRegex=function(t){return this._monthsParseExact?(l(this,"_monthsRegex")||Ut.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=Ct),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},Dn.week=function(t){return Bt(t,this._week.dow,this._week.doy).week},Dn.firstDayOfYear=function(){return this._week.doy},Dn.firstDayOfWeek=function(){return this._week.dow},Dn.weekdays=function(t,e){var n=i(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?$t(n,this._week.dow):t?n[t.day()]:n},Dn.weekdaysMin=function(t){return!0===t?$t(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin},Dn.weekdaysShort=function(t){return!0===t?$t(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort},Dn.weekdaysParse=function(t,e,n){var r,a,i;if(this._weekdaysParseExact)return Qt.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[r].test(t))return r;if(n&&"ddd"===e&&this._shortWeekdaysParse[r].test(t))return r;if(n&&"dd"===e&&this._minWeekdaysParse[r].test(t))return r;if(!n&&this._weekdaysParse[r].test(t))return r}},Dn.weekdaysRegex=function(t){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||re.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=te),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},Dn.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||re.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=ee),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Dn.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||re.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=ne),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Dn.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},Dn.meridiem=function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},he("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1===b(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}}),a.lang=D("moment.lang is deprecated. Use moment.locale instead.",he),a.langData=D("moment.langData is deprecated. Use moment.localeData instead.",pe);var Hn=Math.abs;function jn(t,e,n,r){var a=Ze(e,n);return t._milliseconds+=r*a._milliseconds,t._days+=r*a._days,t._months+=r*a._months,t._bubble()}function An(t){return t<0?Math.floor(t):Math.ceil(t)}function Pn(t){return 4800*t/146097}function En(t){return 146097*t/4800}function On(t){return function(){return this.as(t)}}var Nn=On("ms"),Wn=On("s"),zn=On("m"),Fn=On("h"),Cn=On("d"),Rn=On("w"),Un=On("M"),In=On("Q"),Jn=On("y");function qn(t){return function(){return this.isValid()?this._data[t]:NaN}}var Gn=qn("milliseconds"),Bn=qn("seconds"),Vn=qn("minutes"),$n=qn("hours"),Zn=qn("days"),Kn=qn("months"),Xn=qn("years"),Qn=Math.round,tr={ss:44,s:45,m:45,h:22,d:26,M:11};function er(t,e,n,r,a){return a.relativeTime(e||1,!!n,t,r)}var nr=Math.abs;function rr(t){return(t>0)-(t<0)||+t}function ar(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n=nr(this._milliseconds)/1e3,r=nr(this._days),a=nr(this._months);t=Y(n/60),e=Y(t/60),n%=60,t%=60;var i=Y(a/12),s=a%=12,o=r,u=e,d=t,c=n?n.toFixed(3).replace(/\.?0+$/,""):"",l=this.asSeconds();if(!l)return"P0D";var f=l<0?"-":"",_=rr(this._months)!==rr(l)?"-":"",h=rr(this._days)!==rr(l)?"-":"",m=rr(this._milliseconds)!==rr(l)?"-":"";return f+"P"+(i?_+i+"Y":"")+(s?_+s+"M":"")+(o?h+o+"D":"")+(u||d||c?"T":"")+(u?m+u+"H":"")+(d?m+d+"M":"")+(c?m+c+"S":"")}var ir=Fe.prototype;return ir.isValid=function(){return this._isValid},ir.abs=function(){var t=this._data;return this._milliseconds=Hn(this._milliseconds),this._days=Hn(this._days),this._months=Hn(this._months),t.milliseconds=Hn(t.milliseconds),t.seconds=Hn(t.seconds),t.minutes=Hn(t.minutes),t.hours=Hn(t.hours),t.months=Hn(t.months),t.years=Hn(t.years),this},ir.add=function(t,e){return jn(this,t,e,1)},ir.subtract=function(t,e){return jn(this,t,e,-1)},ir.as=function(t){if(!this.isValid())return NaN;var e,n,r=this._milliseconds;if("month"===(t=O(t))||"quarter"===t||"year"===t)switch(e=this._days+r/864e5,n=this._months+Pn(e),t){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(e=this._days+Math.round(En(this._months)),t){case"week":return e/7+r/6048e5;case"day":return e+r/864e5;case"hour":return 24*e+r/36e5;case"minute":return 1440*e+r/6e4;case"second":return 86400*e+r/1e3;case"millisecond":return Math.floor(864e5*e)+r;default:throw new Error("Unknown unit "+t)}},ir.asMilliseconds=Nn,ir.asSeconds=Wn,ir.asMinutes=zn,ir.asHours=Fn,ir.asDays=Cn,ir.asWeeks=Rn,ir.asMonths=Un,ir.asQuarters=In,ir.asYears=Jn,ir.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*b(this._months/12):NaN},ir._bubble=function(){var t,e,n,r,a,i=this._milliseconds,s=this._days,o=this._months,u=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*An(En(o)+s),s=0,o=0),u.milliseconds=i%1e3,t=Y(i/1e3),u.seconds=t%60,e=Y(t/60),u.minutes=e%60,n=Y(e/60),u.hours=n%24,s+=Y(n/24),a=Y(Pn(s)),o+=a,s-=An(En(a)),r=Y(o/12),o%=12,u.days=s,u.months=o,u.years=r,this},ir.clone=function(){return Ze(this)},ir.get=function(t){return t=O(t),this.isValid()?this[t+"s"]():NaN},ir.milliseconds=Gn,ir.seconds=Bn,ir.minutes=Vn,ir.hours=$n,ir.days=Zn,ir.weeks=function(){return Y(this.days()/7)},ir.months=Kn,ir.years=Xn,ir.humanize=function(t){if(!this.isValid())return this.localeData().invalidDate();var e=this.localeData(),n=function(t,e,n){var r=Ze(t).abs(),a=Qn(r.as("s")),i=Qn(r.as("m")),s=Qn(r.as("h")),o=Qn(r.as("d")),u=Qn(r.as("M")),d=Qn(r.as("y")),c=a<=tr.ss&&["s",a]||a<tr.s&&["ss",a]||i<=1&&["m"]||i<tr.m&&["mm",i]||s<=1&&["h"]||s<tr.h&&["hh",s]||o<=1&&["d"]||o<tr.d&&["dd",o]||u<=1&&["M"]||u<tr.M&&["MM",u]||d<=1&&["y"]||["yy",d];return c[2]=e,c[3]=+t>0,c[4]=n,er.apply(null,c)}(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)},ir.toISOString=ar,ir.toString=ar,ir.toJSON=ar,ir.locale=an,ir.localeData=on,ir.toIsoString=D("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ar),ir.lang=sn,J("X",0,0,"unix"),J("x",0,0,"valueOf"),ct("x",it),ct("X",/[+-]?\d+(\.\d{1,3})?/),ht("X",(function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))})),ht("x",(function(t,e,n){n._d=new Date(b(t))})),a.version="2.24.0",e=Ee,a.fn=wn,a.min=function(){return We("isBefore",[].slice.call(arguments,0))},a.max=function(){return We("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=_,a.unix=function(t){return Ee(1e3*t)},a.months=function(t,e){return xn(t,e,"months")},a.isDate=d,a.locale=he,a.invalid=p,a.duration=Ze,a.isMoment=v,a.weekdays=function(t,e,n){return Sn(t,e,n,"weekdays")},a.parseZone=function(){return Ee.apply(null,arguments).parseZone()},a.localeData=pe,a.isDuration=Ce,a.monthsShort=function(t,e){return xn(t,e,"monthsShort")},a.weekdaysMin=function(t,e,n){return Sn(t,e,n,"weekdaysMin")},a.defineLocale=me,a.updateLocale=function(t,e){if(null!=e){var n,r,a=de;null!=(r=_e(t))&&(a=r._config),e=j(a,e),(n=new A(e)).parentLocale=ce[t],ce[t]=n,he(t)}else null!=ce[t]&&(null!=ce[t].parentLocale?ce[t]=ce[t].parentLocale:null!=ce[t]&&delete ce[t]);return ce[t]},a.locales=function(){return T(ce)},a.weekdaysShort=function(t,e,n){return Sn(t,e,n,"weekdaysShort")},a.normalizeUnits=O,a.relativeTimeRounding=function(t){return void 0===t?Qn:"function"==typeof t&&(Qn=t,!0)},a.relativeTimeThreshold=function(t,e){return void 0!==tr[t]&&(void 0===e?tr[t]:(tr[t]=e,"s"===t&&(tr.ss=e-1),!0))},a.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=wn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(139)(t))},function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},a=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,a){for(null==r&&(r=0),null==a&&(a=e.length);r<a;){var i=r+a>>>1;t(e[i],n)<0?r=i+1:a=i}return r},right:function(e,n,r,a){for(null==r&&(r=0),null==a&&(a=e.length);r<a;){var i=r+a>>>1;t(e[i],n)>0?a=i:r=i+1}return r}}};var i=a(r),s=i.right,o=i.left,u=s,d=function(t,e){null==e&&(e=c);for(var n=0,r=t.length-1,a=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(a,a=t[++n]);return i};function c(t,e){return[t,e]}var l=function(t,e,n){var r,a,i,s,o=t.length,u=e.length,d=new Array(o*u);for(null==n&&(n=c),r=i=0;r<o;++r)for(s=t[r],a=0;a<u;++a,++i)d[i]=n(s,e[a]);return d},f=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},_=function(t){return null===t?NaN:+t},h=function(t,e){var n,r,a=t.length,i=0,s=-1,o=0,u=0;if(null==e)for(;++s<a;)isNaN(n=_(t[s]))||(u+=(r=n-o)*(n-(o+=r/++i)));else for(;++s<a;)isNaN(n=_(e(t[s],s,t)))||(u+=(r=n-o)*(n-(o+=r/++i)));if(i>1)return u/(i-1)},m=function(t,e){var n=h(t,e);return n?Math.sqrt(n):n},p=function(t,e){var n,r,a,i=t.length,s=-1;if(null==e){for(;++s<i;)if(null!=(n=t[s])&&n>=n)for(r=a=n;++s<i;)null!=(n=t[s])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++s<i;)if(null!=(n=e(t[s],s,t))&&n>=n)for(r=a=n;++s<i;)null!=(n=e(t[s],s,t))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]},y=Array.prototype,M=y.slice,g=y.map,L=function(t){return function(){return t}},v=function(t){return t},Y=function(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i},b=Math.sqrt(50),w=Math.sqrt(10),k=Math.sqrt(2),D=function(t,e,n){var r,a,i,s,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(s=T(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),i=new Array(a=Math.ceil(e-t+1));++o<a;)i[o]=(t+o)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),i=new Array(a=Math.ceil(t-e+1));++o<a;)i[o]=(t-o)/s;return r&&i.reverse(),i};function T(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=b?10:i>=w?5:i>=k?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=b?10:i>=w?5:i>=k?2:1)}function x(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=b?a*=10:i>=w?a*=5:i>=k&&(a*=2),e<t?-a:a}var S=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},H=function(){var t=v,e=p,n=S;function r(r){var a,i,s=r.length,o=new Array(s);for(a=0;a<s;++a)o[a]=t(r[a],a,r);var d=e(o),c=d[0],l=d[1],f=n(o,c,l);Array.isArray(f)||(f=x(c,l,f),f=Y(Math.ceil(c/f)*f,l,f));for(var _=f.length;f[0]<=c;)f.shift(),--_;for(;f[_-1]>l;)f.pop(),--_;var h,m=new Array(_+1);for(a=0;a<=_;++a)(h=m[a]=[]).x0=a>0?f[a-1]:c,h.x1=a<_?f[a]:l;for(a=0;a<s;++a)c<=(i=o[a])&&i<=l&&m[u(f,i,0,_)].push(r[a]);return m}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:L(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:L([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?L(M.call(t)):L(t),r):n},r},j=function(t,e,n){if(null==n&&(n=_),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,a=(r-1)*e,i=Math.floor(a),s=+n(t[i],i,t);return s+(+n(t[i+1],i+1,t)-s)*(a-i)}},A=function(t,e,n){return t=g.call(t,_).sort(r),Math.ceil((n-e)/(2*(j(t,.75)-j(t,.25))*Math.pow(t.length,-1/3)))},P=function(t,e,n){return Math.ceil((n-e)/(3.5*m(t)*Math.pow(t.length,-1/3)))},E=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},O=function(t,e){var n,r=t.length,a=r,i=-1,s=0;if(null==e)for(;++i<r;)isNaN(n=_(t[i]))?--a:s+=n;else for(;++i<r;)isNaN(n=_(e(t[i],i,t)))?--a:s+=n;if(a)return s/a},N=function(t,e){var n,a=t.length,i=-1,s=[];if(null==e)for(;++i<a;)isNaN(n=_(t[i]))||s.push(n);else for(;++i<a;)isNaN(n=_(e(t[i],i,t)))||s.push(n);return j(s.sort(r),.5)},W=function(t){for(var e,n,r,a=t.length,i=-1,s=0;++i<a;)s+=t[i].length;for(n=new Array(s);--a>=0;)for(e=(r=t[a]).length;--e>=0;)n[--s]=r[e];return n},z=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},F=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},C=function(t,e){if(n=t.length){var n,a,i=0,s=0,o=t[s];for(null==e&&(e=r);++i<n;)(e(a=t[i],o)<0||0!==e(o,o))&&(o=a,s=i);return 0===e(o,o)?s:void 0}},R=function(t,e,n){for(var r,a,i=(null==n?t.length:n)-(e=null==e?0:+e);i;)a=Math.random()*i--|0,r=t[i+e],t[i+e]=t[a+e],t[a+e]=r;return t},U=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i},I=function(t){if(!(a=t.length))return[];for(var e=-1,n=z(t,J),r=new Array(n);++e<n;)for(var a,i=-1,s=r[e]=new Array(a);++i<a;)s[i]=t[i][e];return r};function J(t){return t.length}var q=function(){return I(arguments)},G=Array.prototype.slice,B=function(t){return t},V=1,$=2,Z=3,K=4,X=1e-6;function Q(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function et(t){return function(e){return+t(e)}}function nt(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function rt(){return!this.__axis}function at(t,e){var n=[],r=null,a=null,i=6,s=6,o=3,u=t===V||t===K?-1:1,d=t===K||t===$?"x":"y",c=t===V||t===Z?Q:tt;function l(l){var f=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,_=null==a?e.tickFormat?e.tickFormat.apply(e,n):B:a,h=Math.max(i,0)+o,m=e.range(),p=+m[0]+.5,y=+m[m.length-1]+.5,M=(e.bandwidth?nt:et)(e.copy()),g=l.selection?l.selection():l,L=g.selectAll(".domain").data([null]),v=g.selectAll(".tick").data(f,e).order(),Y=v.exit(),b=v.enter().append("g").attr("class","tick"),w=v.select("line"),k=v.select("text");L=L.merge(L.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),v=v.merge(b),w=w.merge(b.append("line").attr("stroke","currentColor").attr(d+"2",u*i)),k=k.merge(b.append("text").attr("fill","currentColor").attr(d,u*h).attr("dy",t===V?"0em":t===Z?"0.71em":"0.32em")),l!==g&&(L=L.transition(l),v=v.transition(l),w=w.transition(l),k=k.transition(l),Y=Y.transition(l).attr("opacity",X).attr("transform",(function(t){return isFinite(t=M(t))?c(t):this.getAttribute("transform")})),b.attr("opacity",X).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:M(t))}))),Y.remove(),L.attr("d",t===K||t==$?s?"M"+u*s+","+p+"H0.5V"+y+"H"+u*s:"M0.5,"+p+"V"+y:s?"M"+p+","+u*s+"V0.5H"+y+"V"+u*s:"M"+p+",0.5H"+y),v.attr("opacity",1).attr("transform",(function(t){return c(M(t))})),w.attr(d+"2",u*i),k.attr(d,u*h).text(_),g.filter(rt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===$?"start":t===K?"end":"middle"),g.each((function(){this.__axis=M}))}return l.scale=function(t){return arguments.length?(e=t,l):e},l.ticks=function(){return n=G.call(arguments),l},l.tickArguments=function(t){return arguments.length?(n=null==t?[]:G.call(t),l):n.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:G.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(a=t,l):a},l.tickSize=function(t){return arguments.length?(i=s=+t,l):i},l.tickSizeInner=function(t){return arguments.length?(i=+t,l):i},l.tickSizeOuter=function(t){return arguments.length?(s=+t,l):s},l.tickPadding=function(t){return arguments.length?(o=+t,l):o},l}function it(t){return at(V,t)}function st(t){return at($,t)}function ot(t){return at(Z,t)}function ut(t){return at(K,t)}var dt={value:function(){}};function ct(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new lt(r)}function lt(t){this._=t}function ft(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function _t(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function ht(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=dt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}lt.prototype=ct.prototype={constructor:lt,on:function(t,e){var n,r=this._,a=ft(t+"",r),i=-1,s=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=a[i]).type)r[n]=ht(r[n],t.name,e);else if(null==e)for(n in r)r[n]=ht(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=a[i]).type)&&(n=_t(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new lt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var mt=ct,pt="http://www.w3.org/1999/xhtml",yt={svg:"http://www.w3.org/2000/svg",xhtml:pt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Mt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),yt.hasOwnProperty(e)?{space:yt[e],local:t}:t};function gt(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===pt&&e.documentElement.namespaceURI===pt?e.createElement(t):e.createElementNS(n,t)}}function Lt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var vt=function(t){var e=Mt(t);return(e.local?Lt:gt)(e)};function Yt(){}var bt=function(t){return null==t?Yt:function(){return this.querySelector(t)}};function wt(){return[]}var kt=function(t){return null==t?wt:function(){return this.querySelectorAll(t)}},Dt=function(t){return function(){return this.matches(t)}},Tt=function(t){return new Array(t.length)};function xt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}xt.prototype={constructor:xt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var St="$";function Ht(t,e,n,r,a,i){for(var s,o=0,u=e.length,d=i.length;o<d;++o)(s=e[o])?(s.__data__=i[o],r[o]=s):n[o]=new xt(t,i[o]);for(;o<u;++o)(s=e[o])&&(a[o]=s)}function jt(t,e,n,r,a,i,s){var o,u,d,c={},l=e.length,f=i.length,_=new Array(l);for(o=0;o<l;++o)(u=e[o])&&(_[o]=d=St+s.call(u,u.__data__,o,e),d in c?a[o]=u:c[d]=u);for(o=0;o<f;++o)(u=c[d=St+s.call(t,i[o],o,i)])?(r[o]=u,u.__data__=i[o],c[d]=null):n[o]=new xt(t,i[o]);for(o=0;o<l;++o)(u=e[o])&&c[_[o]]===u&&(a[o]=u)}function At(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Pt(t){return function(){this.removeAttribute(t)}}function Et(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ot(t,e){return function(){this.setAttribute(t,e)}}function Nt(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Wt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function zt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var Ft=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Ct(t){return function(){this.style.removeProperty(t)}}function Rt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Ut(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function It(t,e){return t.style.getPropertyValue(e)||Ft(t).getComputedStyle(t,null).getPropertyValue(e)}function Jt(t){return function(){delete this[t]}}function qt(t,e){return function(){this[t]=e}}function Gt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Bt(t){return t.trim().split(/^|\s+/)}function Vt(t){return t.classList||new $t(t)}function $t(t){this._node=t,this._names=Bt(t.getAttribute("class")||"")}function Zt(t,e){for(var n=Vt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function Kt(t,e){for(var n=Vt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Xt(t){return function(){Zt(this,t)}}function Qt(t){return function(){Kt(this,t)}}function te(t,e){return function(){(e.apply(this,arguments)?Zt:Kt)(this,t)}}$t.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ee(){this.textContent=""}function ne(t){return function(){this.textContent=t}}function re(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function ae(){this.innerHTML=""}function ie(t){return function(){this.innerHTML=t}}function se(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function oe(){this.nextSibling&&this.parentNode.appendChild(this)}function ue(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function de(){return null}function ce(){var t=this.parentNode;t&&t.removeChild(this)}function le(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function fe(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var _e={},he=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(_e={mouseenter:"mouseover",mouseleave:"mouseout"}));function me(t,e,n){return t=pe(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function pe(t,e,n){return function(r){var a=he;he=r;try{t.call(this,this.__data__,e,n)}finally{he=a}}}function ye(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Me(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function ge(t,e,n){var r=_e.hasOwnProperty(t.type)?me:pe;return function(a,i,s){var o,u=this.__on,d=r(e,i,s);if(u)for(var c=0,l=u.length;c<l;++c)if((o=u[c]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=d,o.capture=n),void(o.value=e);this.addEventListener(t.type,d,n),o={type:t.type,name:t.name,value:e,listener:d,capture:n},u?u.push(o):this.__on=[o]}}function Le(t,e,n,r){var a=he;t.sourceEvent=he,he=t;try{return e.apply(n,r)}finally{he=a}}function ve(t,e,n){var r=Ft(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Ye(t,e){return function(){return ve(this,t,e)}}function be(t,e){return function(){return ve(this,t,e.apply(this,arguments))}}var we=[null];function ke(t,e){this._groups=t,this._parents=e}function De(){return new ke([[document.documentElement]],we)}ke.prototype=De.prototype={constructor:ke,select:function(t){"function"!=typeof t&&(t=bt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,s,o=e[a],u=o.length,d=r[a]=new Array(u),c=0;c<u;++c)(i=o[c])&&(s=t.call(i,i.__data__,c,o))&&("__data__"in i&&(s.__data__=i.__data__),d[c]=s);return new ke(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=kt(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var s,o=e[i],u=o.length,d=0;d<u;++d)(s=o[d])&&(r.push(t.call(s,s.__data__,d,o)),a.push(s));return new ke(r,a)},filter:function(t){"function"!=typeof t&&(t=Dt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,s=e[a],o=s.length,u=r[a]=[],d=0;d<o;++d)(i=s[d])&&t.call(i,i.__data__,d,s)&&u.push(i);return new ke(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),c=-1,this.each((function(t){h[++c]=t})),h;var n,r=e?jt:Ht,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,o=new Array(s),u=new Array(s),d=new Array(s),c=0;c<s;++c){var l=a[c],f=i[c],_=f.length,h=t.call(l,l&&l.__data__,c,a),m=h.length,p=u[c]=new Array(m),y=o[c]=new Array(m);r(l,f,p,y,d[c]=new Array(_),h,e);for(var M,g,L=0,v=0;L<m;++L)if(M=p[L]){for(L>=v&&(v=L+1);!(g=y[v])&&++v<m;);M._next=g||null}}return(o=new ke(o,a))._enter=u,o._exit=d,o},enter:function(){return new ke(this._enter||this._groups.map(Tt),this._parents)},exit:function(){return new ke(this._exit||this._groups.map(Tt),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),s=new Array(r),o=0;o<i;++o)for(var u,d=e[o],c=n[o],l=d.length,f=s[o]=new Array(l),_=0;_<l;++_)(u=d[_]||c[_])&&(f[_]=u);for(;o<r;++o)s[o]=e[o];return new ke(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,s=a[i];--i>=0;)(r=a[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=At);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var s,o=n[i],u=o.length,d=a[i]=new Array(u),c=0;c<u;++c)(s=o[c])&&(d[c]=s);d.sort(e)}return new ke(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var s=r[a];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],s=0,o=i.length;s<o;++s)(a=i[s])&&t.call(a,a.__data__,s,i);return this},attr:function(t,e){var n=Mt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Et:Pt:"function"==typeof e?n.local?zt:Wt:n.local?Nt:Ot)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ct:"function"==typeof e?Ut:Rt)(t,e,null==n?"":n)):It(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Jt:"function"==typeof e?Gt:qt)(t,e)):this.node()[t]},classed:function(t,e){var n=Bt(t+"");if(arguments.length<2){for(var r=Vt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?te:e?Xt:Qt)(n,e))},text:function(t){return arguments.length?this.each(null==t?ee:("function"==typeof t?re:ne)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ae:("function"==typeof t?se:ie)(t)):this.node().innerHTML},raise:function(){return this.each(oe)},lower:function(){return this.each(ue)},append:function(t){var e="function"==typeof t?t:vt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:vt(t),r=null==e?de:"function"==typeof e?e:bt(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ce)},clone:function(t){return this.select(t?fe:le)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=ye(t+""),s=i.length;if(!(arguments.length<2)){for(o=e?ge:Me,null==n&&(n=!1),r=0;r<s;++r)this.each(o(i[r],e,n));return this}var o=this.node().__on;if(o)for(var u,d=0,c=o.length;d<c;++d)for(r=0,u=o[d];r<s;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?be:Ye)(t,e))}};var Te=De,xe=function(t){return"string"==typeof t?new ke([[document.querySelector(t)]],[document.documentElement]):new ke([[t]],we)},Se=function(t){return xe(vt(t).call(document.documentElement))},He=0;function je(){return new Ae}function Ae(){this._="@"+(++He).toString(36)}Ae.prototype=je.prototype={constructor:Ae,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Pe=function(){for(var t,e=he;t=e.sourceEvent;)e=t;return e},Ee=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]},Oe=function(t){var e=Pe();return e.changedTouches&&(e=e.changedTouches[0]),Ee(t,e)},Ne=function(t){return"string"==typeof t?new ke([document.querySelectorAll(t)],[document.documentElement]):new ke([null==t?[]:t],we)},We=function(t,e,n){arguments.length<3&&(n=e,e=Pe().changedTouches);for(var r,a=0,i=e?e.length:0;a<i;++a)if((r=e[a]).identifier===n)return Ee(t,r);return null},ze=function(t,e){null==e&&(e=Pe().touches);for(var n=0,r=e?e.length:0,a=new Array(r);n<r;++n)a[n]=Ee(t,e[n]);return a};function Fe(){he.stopImmediatePropagation()}var Ce=function(){he.preventDefault(),he.stopImmediatePropagation()},Re=function(t){var e=t.document.documentElement,n=xe(t).on("dragstart.drag",Ce,!0);"onselectstart"in e?n.on("selectstart.drag",Ce,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function Ue(t,e){var n=t.document.documentElement,r=xe(t).on("dragstart.drag",null);e&&(r.on("click.drag",Ce,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var Ie=function(t){return function(){return t}};function Je(t,e,n,r,a,i,s,o,u,d){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=a,this.x=i,this.y=s,this.dx=o,this.dy=u,this._=d}function qe(){return!he.ctrlKey&&!he.button}function Ge(){return this.parentNode}function Be(t){return null==t?{x:he.x,y:he.y}:t}function Ve(){return navigator.maxTouchPoints||"ontouchstart"in this}Je.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var $e=function(){var t,e,n,r,a=qe,i=Ge,s=Be,o=Ve,u={},d=mt("start","drag","end"),c=0,l=0;function f(t){t.on("mousedown.drag",_).filter(o).on("touchstart.drag",p).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",M).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(){if(!r&&a.apply(this,arguments)){var s=g("mouse",i.apply(this,arguments),Oe,this,arguments);s&&(xe(he.view).on("mousemove.drag",h,!0).on("mouseup.drag",m,!0),Re(he.view),Fe(),n=!1,t=he.clientX,e=he.clientY,s("start"))}}function h(){if(Ce(),!n){var r=he.clientX-t,a=he.clientY-e;n=r*r+a*a>l}u.mouse("drag")}function m(){xe(he.view).on("mousemove.drag mouseup.drag",null),Ue(he.view,n),Ce(),u.mouse("end")}function p(){if(a.apply(this,arguments)){var t,e,n=he.changedTouches,r=i.apply(this,arguments),s=n.length;for(t=0;t<s;++t)(e=g(n[t].identifier,r,We,this,arguments))&&(Fe(),e("start"))}}function y(){var t,e,n=he.changedTouches,r=n.length;for(t=0;t<r;++t)(e=u[n[t].identifier])&&(Ce(),e("drag"))}function M(){var t,e,n=he.changedTouches,a=n.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<a;++t)(e=u[n[t].identifier])&&(Fe(),e("end"))}function g(t,e,n,r,a){var i,o,l,_=n(e,t),h=d.copy();if(Le(new Je(f,"beforestart",i,t,c,_[0],_[1],0,0,h),(function(){return null!=(he.subject=i=s.apply(r,a))&&(o=i.x-_[0]||0,l=i.y-_[1]||0,!0)})))return function s(d){var m,p=_;switch(d){case"start":u[t]=s,m=c++;break;case"end":delete u[t],--c;case"drag":_=n(e,t),m=c}Le(new Je(f,d,i,t,m,_[0]+o,_[1]+l,_[0]-p[0],_[1]-p[1],h),h.apply,h,[d,r,a])}}return f.filter=function(t){return arguments.length?(a="function"==typeof t?t:Ie(!!t),f):a},f.container=function(t){return arguments.length?(i="function"==typeof t?t:Ie(t),f):i},f.subject=function(t){return arguments.length?(s="function"==typeof t?t:Ie(t),f):s},f.touchable=function(t){return arguments.length?(o="function"==typeof t?t:Ie(!!t),f):o},f.on=function(){var t=d.on.apply(d,arguments);return t===d?f:t},f.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,f):Math.sqrt(l)},f},Ze=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Ke(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Xe(){}var Qe="\\s*([+-]?\\d+)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",en="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nn=/^#([0-9a-f]{3})$/,rn=/^#([0-9a-f]{6})$/,an=new RegExp("^rgb\\("+[Qe,Qe,Qe]+"\\)$"),sn=new RegExp("^rgb\\("+[en,en,en]+"\\)$"),on=new RegExp("^rgba\\("+[Qe,Qe,Qe,tn]+"\\)$"),un=new RegExp("^rgba\\("+[en,en,en,tn]+"\\)$"),dn=new RegExp("^hsl\\("+[tn,en,en]+"\\)$"),cn=new RegExp("^hsla\\("+[tn,en,en,tn]+"\\)$"),ln={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fn(){return this.rgb().formatHex()}function _n(){return this.rgb().formatRgb()}function hn(t){var e;return t=(t+"").trim().toLowerCase(),(e=nn.exec(t))?new gn((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=rn.exec(t))?mn(parseInt(e[1],16)):(e=an.exec(t))?new gn(e[1],e[2],e[3],1):(e=sn.exec(t))?new gn(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=on.exec(t))?pn(e[1],e[2],e[3],e[4]):(e=un.exec(t))?pn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=dn.exec(t))?bn(e[1],e[2]/100,e[3]/100,1):(e=cn.exec(t))?bn(e[1],e[2]/100,e[3]/100,e[4]):ln.hasOwnProperty(t)?mn(ln[t]):"transparent"===t?new gn(NaN,NaN,NaN,0):null}function mn(t){return new gn(t>>16&255,t>>8&255,255&t,1)}function pn(t,e,n,r){return r<=0&&(t=e=n=NaN),new gn(t,e,n,r)}function yn(t){return t instanceof Xe||(t=hn(t)),t?new gn((t=t.rgb()).r,t.g,t.b,t.opacity):new gn}function Mn(t,e,n,r){return 1===arguments.length?yn(t):new gn(t,e,n,null==r?1:r)}function gn(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ln(){return"#"+Yn(this.r)+Yn(this.g)+Yn(this.b)}function vn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Yn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function bn(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Dn(t,e,n,r)}function wn(t){if(t instanceof Dn)return new Dn(t.h,t.s,t.l,t.opacity);if(t instanceof Xe||(t=hn(t)),!t)return new Dn;if(t instanceof Dn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,o=i-a,u=(i+a)/2;return o?(s=e===i?(n-r)/o+6*(n<r):n===i?(r-e)/o+2:(e-n)/o+4,o/=u<.5?i+a:2-i-a,s*=60):o=u>0&&u<1?0:s,new Dn(s,o,u,t.opacity)}function kn(t,e,n,r){return 1===arguments.length?wn(t):new Dn(t,e,n,null==r?1:r)}function Dn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Tn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Ze(Xe,hn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:fn,formatHex:fn,formatHsl:function(){return wn(this).formatHsl()},formatRgb:_n,toString:_n}),Ze(gn,Mn,Ke(Xe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new gn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new gn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ln,formatHex:Ln,formatRgb:vn,toString:vn})),Ze(Dn,kn,Ke(Xe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Dn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Dn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new gn(Tn(t>=240?t-240:t+120,a,r),Tn(t,a,r),Tn(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var xn=Math.PI/180,Sn=180/Math.PI,Hn=.96422,jn=1,An=.82521,Pn=4/29,En=6/29,On=3*En*En,Nn=En*En*En;function Wn(t){if(t instanceof Cn)return new Cn(t.l,t.a,t.b,t.opacity);if(t instanceof Vn)return $n(t);t instanceof gn||(t=yn(t));var e,n,r=Jn(t.r),a=Jn(t.g),i=Jn(t.b),s=Rn((.2225045*r+.7168786*a+.0606169*i)/jn);return r===a&&a===i?e=n=s:(e=Rn((.4360747*r+.3850649*a+.1430804*i)/Hn),n=Rn((.0139322*r+.0971045*a+.7141733*i)/An)),new Cn(116*s-16,500*(e-s),200*(s-n),t.opacity)}function zn(t,e){return new Cn(t,0,0,null==e?1:e)}function Fn(t,e,n,r){return 1===arguments.length?Wn(t):new Cn(t,e,n,null==r?1:r)}function Cn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Rn(t){return t>Nn?Math.pow(t,1/3):t/On+Pn}function Un(t){return t>En?t*t*t:On*(t-Pn)}function In(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Jn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function qn(t){if(t instanceof Vn)return new Vn(t.h,t.c,t.l,t.opacity);if(t instanceof Cn||(t=Wn(t)),0===t.a&&0===t.b)return new Vn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Sn;return new Vn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Gn(t,e,n,r){return 1===arguments.length?qn(t):new Vn(n,e,t,null==r?1:r)}function Bn(t,e,n,r){return 1===arguments.length?qn(t):new Vn(t,e,n,null==r?1:r)}function Vn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function $n(t){if(isNaN(t.h))return new Cn(t.l,0,0,t.opacity);var e=t.h*xn;return new Cn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Ze(Cn,Fn,Ke(Xe,{brighter:function(t){return new Cn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Cn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new gn(In(3.1338561*(e=Hn*Un(e))-1.6168667*(t=jn*Un(t))-.4906146*(n=An*Un(n))),In(-.9787684*e+1.9161415*t+.033454*n),In(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Ze(Vn,Bn,Ke(Xe,{brighter:function(t){return new Vn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Vn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return $n(this).rgb()}}));var Zn=-.29227,Kn=-.90649,Xn=1.97294,Qn=Xn*Kn,tr=1.78277*Xn,er=1.78277*Zn- -.14861*Kn;function nr(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof rr)return new rr(t.h,t.s,t.l,t.opacity);t instanceof gn||(t=yn(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(er*r+Qn*e-tr*n)/(er+Qn-tr),i=r-a,s=(Xn*(n-a)-Zn*i)/Kn,o=Math.sqrt(s*s+i*i)/(Xn*a*(1-a)),u=o?Math.atan2(s,i)*Sn-120:NaN;return new rr(u<0?u+360:u,o,a,t.opacity)}(t):new rr(t,e,n,null==r?1:r)}function rr(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ar(t,e,n,r,a){var i=t*t,s=i*t;return((1-3*t+3*i-s)*e+(4-6*i+3*s)*n+(1+3*t+3*i-3*s)*r+s*a)/6}Ze(rr,nr,Ke(Xe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rr(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rr(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*xn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new gn(255*(e+n*(-.14861*r+1.78277*a)),255*(e+n*(Zn*r+Kn*a)),255*(e+n*(Xn*r)),this.opacity)}}));var ir=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],s=r>0?t[r-1]:2*a-i,o=r<e-1?t[r+2]:2*i-a;return ar((n-r/e)*e,s,a,i,o)}},sr=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],s=t[(r+1)%e],o=t[(r+2)%e];return ar((n-r/e)*e,a,i,s,o)}},or=function(t){return function(){return t}};function ur(t,e){return function(n){return t+n*e}}function dr(t,e){var n=e-t;return n?ur(t,n>180||n<-180?n-360*Math.round(n/360):n):or(isNaN(t)?e:t)}function cr(t){return 1==(t=+t)?lr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):or(isNaN(e)?n:e)}}function lr(t,e){var n=e-t;return n?ur(t,n):or(isNaN(t)?e:t)}var fr=function t(e){var n=cr(e);function r(t,e){var r=n((t=Mn(t)).r,(e=Mn(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),s=lr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function _r(t){return function(e){var n,r,a=e.length,i=new Array(a),s=new Array(a),o=new Array(a);for(n=0;n<a;++n)r=Mn(e[n]),i[n]=r.r||0,s[n]=r.g||0,o[n]=r.b||0;return i=t(i),s=t(s),o=t(o),r.opacity=1,function(t){return r.r=i(t),r.g=s(t),r.b=o(t),r+""}}}var hr=_r(ir),mr=_r(sr),pr=function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),s=new Array(r);for(n=0;n<a;++n)i[n]=Tr(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<a;++n)s[n]=i[n](t);return s}},yr=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Mr=function(t,e){return e-=t=+t,function(n){return t+e*n}},gr=function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Tr(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}},Lr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,vr=new RegExp(Lr.source,"g");var Yr,br,wr,kr,Dr=function(t,e){var n,r,a,i=Lr.lastIndex=vr.lastIndex=0,s=-1,o=[],u=[];for(t+="",e+="";(n=Lr.exec(t))&&(r=vr.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),o[s]?o[s]+=a:o[++s]=a),(n=n[0])===(r=r[0])?o[s]?o[s]+=r:o[++s]=r:(o[++s]=null,u.push({i:s,x:Mr(n,r)})),i=vr.lastIndex;return i<e.length&&(a=e.slice(i),o[s]?o[s]+=a:o[++s]=a),o.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)o[(n=u[r]).i]=n.x(t);return o.join("")})},Tr=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?or(e):("number"===r?Mr:"string"===r?(n=hn(e))?(e=n,fr):Dr:e instanceof hn?fr:e instanceof Date?yr:Array.isArray(e)?pr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?gr:Mr)(t,e)},xr=function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},Sr=function(t,e){var n=dr(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},Hr=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},jr=180/Math.PI,Ar={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Pr=function(t,e,n,r,a,i){var s,o,u;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(o=Math.sqrt(n*n+r*r))&&(n/=o,r/=o,u/=o),t*r<e*n&&(t=-t,e=-e,u=-u,s=-s),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*jr,skewX:Math.atan(u)*jr,scaleX:s,scaleY:o}};function Er(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,s){var o=[],u=[];return i=t(i),s=t(s),function(t,r,a,i,s,o){if(t!==a||r!==i){var u=s.push("translate(",null,e,null,n);o.push({i:u-4,x:Mr(t,a)},{i:u-2,x:Mr(r,i)})}else(a||i)&&s.push("translate("+a+e+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,o,u),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Mr(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,s.rotate,o,u),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Mr(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,s.skewX,o,u),function(t,e,n,r,i,s){if(t!==n||e!==r){var o=i.push(a(i)+"scale(",null,",",null,")");s.push({i:o-4,x:Mr(t,n)},{i:o-2,x:Mr(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,o,u),i=s=null,function(t){for(var e,n=-1,r=u.length;++n<r;)o[(e=u[n]).i]=e.x(t);return o.join("")}}}var Or=Er((function(t){return"none"===t?Ar:(Yr||(Yr=document.createElement("DIV"),br=document.documentElement,wr=document.defaultView),Yr.style.transform=t,t=wr.getComputedStyle(br.appendChild(Yr),null).getPropertyValue("transform"),br.removeChild(Yr),t=t.slice(7,-1).split(","),Pr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Nr=Er((function(t){return null==t?Ar:(kr||(kr=document.createElementNS("http://www.w3.org/2000/svg","g")),kr.setAttribute("transform",t),(t=kr.transform.baseVal.consolidate())?(t=t.matrix,Pr(t.a,t.b,t.c,t.d,t.e,t.f)):Ar)}),", ",")",")"),Wr=Math.SQRT2;function zr(t){return((t=Math.exp(t))+1/t)/2}var Fr=function(t,e){var n,r,a=t[0],i=t[1],s=t[2],o=e[0],u=e[1],d=e[2],c=o-a,l=u-i,f=c*c+l*l;if(f<1e-12)r=Math.log(d/s)/Wr,n=function(t){return[a+t*c,i+t*l,s*Math.exp(Wr*t*r)]};else{var _=Math.sqrt(f),h=(d*d-s*s+4*f)/(2*s*2*_),m=(d*d-s*s-4*f)/(2*d*2*_),p=Math.log(Math.sqrt(h*h+1)-h),y=Math.log(Math.sqrt(m*m+1)-m);r=(y-p)/Wr,n=function(t){var e,n=t*r,o=zr(p),u=s/(2*_)*(o*(e=Wr*n+p,((e=Math.exp(2*e))-1)/(e+1))-function(t){return((t=Math.exp(t))-1/t)/2}(p));return[a+u*c,i+u*l,s*o/zr(Wr*n+p)]}}return n.duration=1e3*r,n};function Cr(t){return function(e,n){var r=t((e=kn(e)).h,(n=kn(n)).h),a=lr(e.s,n.s),i=lr(e.l,n.l),s=lr(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=a(t),e.l=i(t),e.opacity=s(t),e+""}}}var Rr=Cr(dr),Ur=Cr(lr);function Ir(t,e){var n=lr((t=Fn(t)).l,(e=Fn(e)).l),r=lr(t.a,e.a),a=lr(t.b,e.b),i=lr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}function Jr(t){return function(e,n){var r=t((e=Bn(e)).h,(n=Bn(n)).h),a=lr(e.c,n.c),i=lr(e.l,n.l),s=lr(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=a(t),e.l=i(t),e.opacity=s(t),e+""}}}var qr=Jr(dr),Gr=Jr(lr);function Br(t){return function e(n){function r(e,r){var a=t((e=nr(e)).h,(r=nr(r)).h),i=lr(e.s,r.s),s=lr(e.l,r.l),o=lr(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=s(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,r.gamma=e,r}(1)}var Vr=Br(dr),$r=Br(lr);function Zr(t,e){for(var n=0,r=e.length-1,a=e[0],i=new Array(r<0?0:r);n<r;)i[n]=t(a,a=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return i[e](t-e)}}var Kr,Xr,Qr=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},ta=0,ea=0,na=0,ra=1e3,aa=0,ia=0,sa=0,oa="object"==typeof performance&&performance.now?performance:Date,ua="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function da(){return ia||(ua(ca),ia=oa.now()+sa)}function ca(){ia=0}function la(){this._call=this._time=this._next=null}function fa(t,e,n){var r=new la;return r.restart(t,e,n),r}function _a(){da(),++ta;for(var t,e=Kr;e;)(t=ia-e._time)>=0&&e._call.call(null,t),e=e._next;--ta}function ha(){ia=(aa=oa.now())+sa,ta=ea=0;try{_a()}finally{ta=0,function(){var t,e,n=Kr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Kr=e);Xr=t,pa(r)}(),ia=0}}function ma(){var t=oa.now(),e=t-aa;e>ra&&(sa-=e,aa=t)}function pa(t){ta||(ea&&(ea=clearTimeout(ea)),t-ia>24?(t<1/0&&(ea=setTimeout(ha,t-oa.now()-sa)),na&&(na=clearInterval(na))):(na||(aa=oa.now(),na=setInterval(ma,ra)),ta=1,ua(ha)))}la.prototype=fa.prototype={constructor:la,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?da():+n)+(null==e?0:+e),this._next||Xr===this||(Xr?Xr._next=this:Kr=this,Xr=this),this._call=t,this._time=n,pa()},stop:function(){this._call&&(this._call=null,this._time=1/0,pa())}};var ya=function(t,e,n){var r=new la;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},Ma=function(t,e,n){var r=new la,a=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?da():+n,r.restart((function i(s){s+=a,r.restart(i,a+=e,n),t(s)}),e,n),r)},ga=mt("start","end","cancel","interrupt"),La=[],va=0,Ya=1,ba=2,wa=3,ka=4,Da=5,Ta=6,xa=function(t,e,n,r,a,i){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(u){var d,c,l,f;if(n.state!==Ya)return o();for(d in a)if((f=a[d]).name===n.name){if(f.state===wa)return ya(i);f.state===ka?(f.state=Ta,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete a[d]):+d<e&&(f.state=Ta,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete a[d])}if(ya((function(){n.state===wa&&(n.state=ka,n.timer.restart(s,n.delay,n.time),s(u))})),n.state=ba,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ba){for(n.state=wa,r=new Array(l=n.tween.length),d=0,c=-1;d<l;++d)(f=n.tween[d].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function s(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=Da,1),i=-1,s=r.length;++i<s;)r[i].call(t,a);n.state===Da&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var r in n.state=Ta,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=fa((function(t){n.state=Ya,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:a,on:ga,tween:La,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:va})};function Sa(t,e){var n=ja(t,e);if(n.state>va)throw new Error("too late; already scheduled");return n}function Ha(t,e){var n=ja(t,e);if(n.state>wa)throw new Error("too late; already running");return n}function ja(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Aa=function(t,e){var n,r,a,i=t.__transition,s=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>ba&&n.state<Da,n.state=Ta,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):s=!1;s&&delete t.__transition}};function Pa(t,e){var n,r;return function(){var a=Ha(this,t),i=a.tween;if(i!==n)for(var s=0,o=(r=n=i).length;s<o;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}a.tween=r}}function Ea(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Ha(this,t),s=i.tween;if(s!==r){a=(r=s).slice();for(var o={name:e,value:n},u=0,d=a.length;u<d;++u)if(a[u].name===e){a[u]=o;break}u===d&&a.push(o)}i.tween=a}}function Oa(t,e,n){var r=t._id;return t.each((function(){var t=Ha(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return ja(t,r).value[e]}}var Na=function(t,e){var n;return("number"==typeof e?Mr:e instanceof hn?fr:(n=hn(e))?(e=n,fr):Dr)(t,e)};function Wa(t){return function(){this.removeAttribute(t)}}function za(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Fa(t,e,n){var r,a,i=n+"";return function(){var s=this.getAttribute(t);return s===i?null:s===r?a:a=e(r=s,n)}}function Ca(t,e,n){var r,a,i=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===i?null:s===r?a:a=e(r=s,n)}}function Ra(t,e,n){var r,a,i;return function(){var s,o,u=n(this);if(null!=u)return(s=this.getAttribute(t))===(o=u+"")?null:s===r&&o===a?i:(a=o,i=e(r=s,u));this.removeAttribute(t)}}function Ua(t,e,n){var r,a,i;return function(){var s,o,u=n(this);if(null!=u)return(s=this.getAttributeNS(t.space,t.local))===(o=u+"")?null:s===r&&o===a?i:(a=o,i=e(r=s,u));this.removeAttributeNS(t.space,t.local)}}function Ia(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,a)),n}return a._value=e,a}function Ja(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,a)),n}return a._value=e,a}function qa(t,e){return function(){Sa(this,t).delay=+e.apply(this,arguments)}}function Ga(t,e){return e=+e,function(){Sa(this,t).delay=e}}function Ba(t,e){return function(){Ha(this,t).duration=+e.apply(this,arguments)}}function Va(t,e){return e=+e,function(){Ha(this,t).duration=e}}function $a(t,e){if("function"!=typeof e)throw new Error;return function(){Ha(this,t).ease=e}}function Za(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Sa:Ha;return function(){var s=i(this,t),o=s.on;o!==r&&(a=(r=o).copy()).on(e,n),s.on=a}}var Ka=Te.prototype.constructor;function Xa(t){return function(){this.style.removeProperty(t)}}function Qa(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,i,n)),r}return i._value=e,i}var ti=0;function ei(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function ni(t){return Te().transition(t)}function ri(){return++ti}var ai=Te.prototype;function ii(t){return+t}function si(t){return t*t}function oi(t){return t*(2-t)}function ui(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function di(t){return t*t*t}function ci(t){return--t*t*t+1}function li(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}ei.prototype=ni.prototype={constructor:ei,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=bt(t));for(var r=this._groups,a=r.length,i=new Array(a),s=0;s<a;++s)for(var o,u,d=r[s],c=d.length,l=i[s]=new Array(c),f=0;f<c;++f)(o=d[f])&&(u=t.call(o,o.__data__,f,d))&&("__data__"in o&&(u.__data__=o.__data__),l[f]=u,xa(l[f],e,n,f,l,ja(o,n)));return new ei(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=kt(t));for(var r=this._groups,a=r.length,i=[],s=[],o=0;o<a;++o)for(var u,d=r[o],c=d.length,l=0;l<c;++l)if(u=d[l]){for(var f,_=t.call(u,u.__data__,l,d),h=ja(u,n),m=0,p=_.length;m<p;++m)(f=_[m])&&xa(f,e,n,m,_,h);i.push(_),s.push(u)}return new ei(i,s,e,n)},filter:function(t){"function"!=typeof t&&(t=Dt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,s=e[a],o=s.length,u=r[a]=[],d=0;d<o;++d)(i=s[d])&&t.call(i,i.__data__,d,s)&&u.push(i);return new ei(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),s=new Array(r),o=0;o<i;++o)for(var u,d=e[o],c=n[o],l=d.length,f=s[o]=new Array(l),_=0;_<l;++_)(u=d[_]||c[_])&&(f[_]=u);for(;o<r;++o)s[o]=e[o];return new ei(s,this._parents,this._name,this._id)},selection:function(){return new Ka(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ri(),r=this._groups,a=r.length,i=0;i<a;++i)for(var s,o=r[i],u=o.length,d=0;d<u;++d)if(s=o[d]){var c=ja(s,e);xa(s,t,n,d,o,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ei(r,this._parents,t,n)},call:ai.call,nodes:ai.nodes,node:ai.node,size:ai.size,empty:ai.empty,each:ai.each,on:function(t,e){var n=this._id;return arguments.length<2?ja(this.node(),n).on.on(t):this.each(Za(n,t,e))},attr:function(t,e){var n=Mt(t),r="transform"===n?Nr:Na;return this.attrTween(t,"function"==typeof e?(n.local?Ua:Ra)(n,r,Oa(this,"attr."+t,e)):null==e?(n.local?za:Wa)(n):(n.local?Ca:Fa)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Mt(t);return this.tween(n,(r.local?Ia:Ja)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Or:Na;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=It(this,t),s=(this.style.removeProperty(t),It(this,t));return i===s?null:i===n&&s===r?a:a=e(n=i,r=s)}}(t,r)).on("end.style."+t,Xa(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var s=It(this,t),o=n(this),u=o+"";return null==o&&(this.style.removeProperty(t),u=o=It(this,t)),s===u?null:s===r&&u===a?i:(a=u,i=e(r=s,o))}}(t,r,Oa(this,"style."+t,e))).each(function(t,e){var n,r,a,i,s="style."+e,o="end."+s;return function(){var u=Ha(this,t),d=u.on,c=null==u.value[s]?i||(i=Xa(e)):void 0;d===n&&a===c||(r=(n=d).copy()).on(o,a=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var s=It(this,t);return s===i?null:s===r?a:a=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Qa(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Oa(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=ja(this.node(),n).tween,i=0,s=a.length;i<s;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?Pa:Ea)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?qa:Ga)(e,t)):ja(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ba:Va)(e,t)):ja(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each($a(e,t)):ja(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,s){var o={value:s},u={value:function(){0==--a&&i()}};n.each((function(){var n=Ha(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(o),e._.interrupt.push(o),e._.end.push(u)),n.on=e}))}))}};var fi=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),_i=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),hi=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),mi=Math.PI,pi=mi/2;function yi(t){return 1-Math.cos(t*pi)}function Mi(t){return Math.sin(t*pi)}function gi(t){return(1-Math.cos(mi*t))/2}function Li(t){return Math.pow(2,10*t-10)}function vi(t){return 1-Math.pow(2,-10*t)}function Yi(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function bi(t){return 1-Math.sqrt(1-t*t)}function wi(t){return Math.sqrt(1- --t*t)}function ki(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Di=4/11,Ti=6/11,xi=8/11,Si=.75,Hi=9/11,ji=10/11,Ai=.9375,Pi=21/22,Ei=63/64,Oi=1/Di/Di;function Ni(t){return 1-Wi(1-t)}function Wi(t){return(t=+t)<Di?Oi*t*t:t<xi?Oi*(t-=Ti)*t+Si:t<ji?Oi*(t-=Hi)*t+Ai:Oi*(t-=Pi)*t+Ei}function zi(t){return((t*=2)<=1?1-Wi(1-t):Wi(t-1)+1)/2}var Fi=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),Ci=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),Ri=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),Ui=2*Math.PI,Ii=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Ui);function a(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return a.amplitude=function(e){return t(e,n*Ui)},a.period=function(n){return t(e,n)},a}(1,.3),Ji=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Ui);function a(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return a.amplitude=function(e){return t(e,n*Ui)},a.period=function(n){return t(e,n)},a}(1,.3),qi=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Ui);function a(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return a.amplitude=function(e){return t(e,n*Ui)},a.period=function(n){return t(e,n)},a}(1,.3),Gi={time:null,delay:0,duration:250,ease:li};function Bi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Gi.time=da(),Gi;return n}Te.prototype.interrupt=function(t){return this.each((function(){Aa(this,t)}))},Te.prototype.transition=function(t){var e,n;t instanceof ei?(e=t._id,t=t._name):(e=ri(),(n=Gi).time=da(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var s,o=r[i],u=o.length,d=0;d<u;++d)(s=o[d])&&xa(s,t,e,d,o,n||Bi(s,e));return new ei(r,this._parents,t,e)};var Vi=[null],$i=function(t,e){var n,r,a=t.__transition;if(a)for(r in e=null==e?null:e+"",a)if((n=a[r]).state>Ya&&n.name===e)return new ei([[t]],Vi,e,+r);return null},Zi=function(t){return function(){return t}},Ki=function(t,e,n){this.target=t,this.type=e,this.selection=n};function Xi(){he.stopImmediatePropagation()}var Qi=function(){he.preventDefault(),he.stopImmediatePropagation()},ts={name:"drag"},es={name:"space"},ns={name:"handle"},rs={name:"center"};function as(t){return[+t[0],+t[1]]}function is(t){return[as(t[0]),as(t[1])]}var ss={name:"x",handles:["w","e"].map(hs),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},os={name:"y",handles:["n","s"].map(hs),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},us={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(hs),input:function(t){return null==t?null:is(t)},output:function(t){return t}},ds={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},cs={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},ls={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},fs={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},_s={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function hs(t){return{type:t}}function ms(){return!he.ctrlKey&&!he.button}function ps(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ys(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ms(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function gs(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Ls(){return bs(ss)}function vs(){return bs(os)}var Ys=function(){return bs(us)};function bs(t){var e,n=ps,r=ms,a=ys,i=!0,s=mt(u,"start","brush","end"),o=6;function u(e){var n=e.property("__brush",m).selectAll(".overlay").data([hs("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ds.overlay).merge(n).each((function(){var t=Ms(this).extent;xe(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([hs("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ds.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return ds[t.type]})),e.each(d).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(a).on("touchstart.brush",f).on("touchmove.brush",_).on("touchend.brush touchcancel.brush",h).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){var t=xe(this),e=Ms(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-o/2:e[0][0]-o/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-o/2:e[0][1]-o/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+o:o})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+o:o}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e,n){return!n&&t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function f(){if((!e||he.touches)&&r.apply(this,arguments)){var n,a,s,o,u,l,f,_,h,m,p,y,M=this,g=he.target.__data__.type,L="selection"===(i&&he.metaKey?g="overlay":g)?ts:i&&he.altKey?rs:ns,v=t===os?null:fs[g],Y=t===ss?null:_s[g],b=Ms(M),w=b.extent,k=b.selection,D=w[0][0],T=w[0][1],x=w[1][0],S=w[1][1],H=0,j=0,A=v&&Y&&i&&he.shiftKey,P=he.touches?(y=he.changedTouches[0].identifier,function(t){return We(t,he.touches,y)}):Oe,E=P(M),O=E,N=c(M,arguments,!0).beforestart();"overlay"===g?(k&&(h=!0),b.selection=k=[[n=t===os?D:E[0],s=t===ss?T:E[1]],[u=t===os?x:n,f=t===ss?S:s]]):(n=k[0][0],s=k[0][1],u=k[1][0],f=k[1][1]),a=n,o=s,l=u,_=f;var W=xe(M).attr("pointer-events","none"),z=W.selectAll(".overlay").attr("cursor",ds[g]);if(he.touches)N.moved=C,N.ended=U;else{var F=xe(he.view).on("mousemove.brush",C,!0).on("mouseup.brush",U,!0);i&&F.on("keydown.brush",(function(){switch(he.keyCode){case 16:A=v&&Y;break;case 18:L===ns&&(v&&(u=l-H*v,n=a+H*v),Y&&(f=_-j*Y,s=o+j*Y),L=rs,R());break;case 32:L!==ns&&L!==rs||(v<0?u=l-H:v>0&&(n=a-H),Y<0?f=_-j:Y>0&&(s=o-j),L=es,z.attr("cursor",ds.selection),R());break;default:return}Qi()}),!0).on("keyup.brush",(function(){switch(he.keyCode){case 16:A&&(m=p=A=!1,R());break;case 18:L===rs&&(v<0?u=l:v>0&&(n=a),Y<0?f=_:Y>0&&(s=o),L=ns,R());break;case 32:L===es&&(he.altKey?(v&&(u=l-H*v,n=a+H*v),Y&&(f=_-j*Y,s=o+j*Y),L=rs):(v<0?u=l:v>0&&(n=a),Y<0?f=_:Y>0&&(s=o),L=ns),z.attr("cursor",ds[g]),R());break;default:return}Qi()}),!0),Re(he.view)}Xi(),Aa(M),d.call(M),N.start()}function C(){var t=P(M);!A||m||p||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?p=!0:m=!0),O=t,h=!0,Qi(),R()}function R(){var t;switch(H=O[0]-E[0],j=O[1]-E[1],L){case es:case ts:v&&(H=Math.max(D-n,Math.min(x-u,H)),a=n+H,l=u+H),Y&&(j=Math.max(T-s,Math.min(S-f,j)),o=s+j,_=f+j);break;case ns:v<0?(H=Math.max(D-n,Math.min(x-n,H)),a=n+H,l=u):v>0&&(H=Math.max(D-u,Math.min(x-u,H)),a=n,l=u+H),Y<0?(j=Math.max(T-s,Math.min(S-s,j)),o=s+j,_=f):Y>0&&(j=Math.max(T-f,Math.min(S-f,j)),o=s,_=f+j);break;case rs:v&&(a=Math.max(D,Math.min(x,n-H*v)),l=Math.max(D,Math.min(x,u+H*v))),Y&&(o=Math.max(T,Math.min(S,s-j*Y)),_=Math.max(T,Math.min(S,f+j*Y)))}l<a&&(v*=-1,t=n,n=u,u=t,t=a,a=l,l=t,g in cs&&z.attr("cursor",ds[g=cs[g]])),_<o&&(Y*=-1,t=s,s=f,f=t,t=o,o=_,_=t,g in ls&&z.attr("cursor",ds[g=ls[g]])),b.selection&&(k=b.selection),m&&(a=k[0][0],l=k[1][0]),p&&(o=k[0][1],_=k[1][1]),k[0][0]===a&&k[0][1]===o&&k[1][0]===l&&k[1][1]===_||(b.selection=[[a,o],[l,_]],d.call(M),N.brush())}function U(){if(Xi(),he.touches){if(he.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else Ue(he.view,h),F.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);W.attr("pointer-events","all"),z.attr("cursor",ds.overlay),b.selection&&(k=b.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(k)&&(b.selection=null,d.call(M)),N.end()}}function _(){c(this,arguments).moved()}function h(){c(this,arguments).ended()}function m(){var e=this.__brush||{selection:null};return e.extent=is(n.apply(this,arguments)),e.dim=t,e}return u.move=function(e,n){e.selection?e.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,a=c(e,arguments),i=r.selection,s=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),o=Tr(i,s);function u(t){r.selection=1===t&&null===s?null:o(t),d.call(e),a.brush()}return null!==i&&null!==s?u:u(1)})):e.each((function(){var e=this,r=arguments,a=e.__brush,i=t.input("function"==typeof n?n.apply(e,r):n,a.extent),s=c(e,r).beforestart();Aa(e),a.selection=null===i?null:i,d.call(e),s.start().brush().end()}))},u.clear=function(t){u.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Le(new Ki(u,e,t.output(this.state.selection)),s.apply,s,[e,this.that,this.args])}},u.extent=function(t){return arguments.length?(n="function"==typeof t?t:Zi(is(t)),u):n},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:Zi(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.keyModifiers=function(t){return arguments.length?(i=!!t,u):i},u.on=function(){var t=s.on.apply(s,arguments);return t===s?u:t},u}var ws=Math.cos,ks=Math.sin,Ds=Math.PI,Ts=Ds/2,xs=2*Ds,Ss=Math.max;function Hs(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}var js=function(){var t=0,e=null,n=null,r=null;function a(a){var i,s,o,u,d,c,l=a.length,f=[],_=Y(l),h=[],m=[],p=m.groups=new Array(l),y=new Array(l*l);for(i=0,d=-1;++d<l;){for(s=0,c=-1;++c<l;)s+=a[d][c];f.push(s),h.push(Y(l)),i+=s}for(e&&_.sort((function(t,n){return e(f[t],f[n])})),n&&h.forEach((function(t,e){t.sort((function(t,r){return n(a[e][t],a[e][r])}))})),u=(i=Ss(0,xs-t*l)/i)?t:xs/l,s=0,d=-1;++d<l;){for(o=s,c=-1;++c<l;){var M=_[d],g=h[M][c],L=a[M][g],v=s,b=s+=L*i;y[g*l+M]={index:M,subindex:g,startAngle:v,endAngle:b,value:L}}p[M]={index:M,startAngle:o,endAngle:s,value:f[M]},s+=u}for(d=-1;++d<l;)for(c=d-1;++c<l;){var w=y[c*l+d],k=y[d*l+c];(w.value||k.value)&&m.push(w.value<k.value?{source:k,target:w}:{source:w,target:k})}return r?m.sort(r):m}return a.padAngle=function(e){return arguments.length?(t=Ss(0,e),a):t},a.sortGroups=function(t){return arguments.length?(e=t,a):e},a.sortSubgroups=function(t){return arguments.length?(n=t,a):n},a.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Hs(t))._=t,a):r&&r._},a},As=Array.prototype.slice,Ps=function(t){return function(){return t}},Es=Math.PI,Os=2*Es,Ns=Os-1e-6;function Ws(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function zs(){return new Ws}Ws.prototype=zs.prototype={constructor:Ws,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,s=this._y1,o=n-t,u=r-e,d=i-t,c=s-e,l=d*d+c*c;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(c*o-u*d)>1e-6&&a){var f=n-i,_=r-s,h=o*o+u*u,m=f*f+_*_,p=Math.sqrt(h),y=Math.sqrt(l),M=a*Math.tan((Es-Math.acos((h+l-m)/(2*p*y)))/2),g=M/y,L=M/p;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*d)+","+(e+g*c)),this._+="A"+a+","+a+",0,0,"+ +(c*f>d*_)+","+(this._x1=t+L*o)+","+(this._y1=e+L*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var s=(n=+n)*Math.cos(r),o=n*Math.sin(r),u=t+s,d=e+o,c=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+d:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-d)>1e-6)&&(this._+="L"+u+","+d),n&&(l<0&&(l=l%Os+Os),l>Ns?this._+="A"+n+","+n+",0,1,"+c+","+(t-s)+","+(e-o)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=d):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=Es)+","+c+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Fs=zs;function Cs(t){return t.source}function Rs(t){return t.target}function Us(t){return t.radius}function Is(t){return t.startAngle}function Js(t){return t.endAngle}var qs=function(){var t=Cs,e=Rs,n=Us,r=Is,a=Js,i=null;function s(){var s,o=As.call(arguments),u=t.apply(this,o),d=e.apply(this,o),c=+n.apply(this,(o[0]=u,o)),l=r.apply(this,o)-Ts,f=a.apply(this,o)-Ts,_=c*ws(l),h=c*ks(l),m=+n.apply(this,(o[0]=d,o)),p=r.apply(this,o)-Ts,y=a.apply(this,o)-Ts;if(i||(i=s=Fs()),i.moveTo(_,h),i.arc(0,0,c,l,f),l===p&&f===y||(i.quadraticCurveTo(0,0,m*ws(p),m*ks(p)),i.arc(0,0,m,p,y)),i.quadraticCurveTo(0,0,_,h),i.closePath(),s)return i=null,s+""||null}return s.radius=function(t){return arguments.length?(n="function"==typeof t?t:Ps(+t),s):n},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ps(+t),s):r},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Ps(+t),s):a},s.source=function(e){return arguments.length?(t=e,s):t},s.target=function(t){return arguments.length?(e=t,s):e},s.context=function(t){return arguments.length?(i=null==t?null:t,s):i},s};function Gs(){}function Bs(t,e){var n=new Gs;if(t instanceof Gs)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var s in t)n.set(s,t[s]);return n}Gs.prototype=Bs.prototype={constructor:Gs,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Vs=Bs,$s=function(){var t,e,n,r=[],a=[];function i(n,a,s,o){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var u,d,c,l=-1,f=n.length,_=r[a++],h=Vs(),m=s();++l<f;)(c=h.get(u=_(d=n[l])+""))?c.push(d):h.set(u,[d]);return h.each((function(t,e){o(m,e,i(t,a,s,o))})),m}return n={object:function(t){return i(t,0,Zs,Ks)},map:function(t){return i(t,0,Xs,Qs)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var s,o=a[i-1];return null!=e&&i>=r.length?s=n.entries():(s=[],n.each((function(e,n){s.push({key:n,values:t(e,i)})}))),null!=o?s.sort((function(t,e){return o(t.key,e.key)})):s}(i(t,0,Xs,Qs),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function Zs(){return{}}function Ks(t,e,n){t[e]=n}function Xs(){return Vs()}function Qs(t,e,n){t.set(e,n)}function to(){}var eo=Vs.prototype;function no(t,e){var n=new to;if(t instanceof to)t.each((function(t){n.add(t)}));else if(t){var r=-1,a=t.length;if(null==e)for(;++r<a;)n.add(t[r]);else for(;++r<a;)n.add(e(t[r],r,t))}return n}to.prototype=no.prototype={constructor:to,has:eo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:eo.remove,clear:eo.clear,values:eo.keys,size:eo.size,empty:eo.empty,each:eo.each};var ro=no,ao=function(t){var e=[];for(var n in t)e.push(n);return e},io=function(t){var e=[];for(var n in t)e.push(t[n]);return e},so=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},oo=Array.prototype.slice,uo=function(t,e){return t-e},co=function(t){for(var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r},lo=function(t){return function(){return t}},fo=function(t,e){for(var n,r=-1,a=e.length;++r<a;)if(n=_o(t,e[r]))return n;return 0};function _o(t,e){for(var n=e[0],r=e[1],a=-1,i=0,s=t.length,o=s-1;i<s;o=i++){var u=t[i],d=u[0],c=u[1],l=t[o],f=l[0],_=l[1];if(ho(u,l,e))return 0;c>r!=_>r&&n<(f-d)*(r-c)/(_-c)+d&&(a=-a)}return a}function ho(t,e,n){var r,a,i,s;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(a=t[r=+(t[0]===e[0])],i=n[r],s=e[r],a<=i&&i<=s||s<=i&&i<=a)}var mo=function(){},po=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],yo=function(){var t=1,e=1,n=S,r=o;function a(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(uo);else{var r=p(t),a=r[0],s=r[1];e=x(a,s,e),e=Y(Math.floor(a/e)*e,Math.floor(s/e)*e,e)}return e.map((function(e){return i(t,e)}))}function i(n,a){var i=[],o=[];return function(n,r,a){var i,o,u,d,c,l,f=new Array,_=new Array;i=o=-1,d=n[0]>=r,po[d<<1].forEach(h);for(;++i<t-1;)u=d,d=n[i+1]>=r,po[u|d<<1].forEach(h);po[d<<0].forEach(h);for(;++o<e-1;){for(i=-1,d=n[o*t+t]>=r,c=n[o*t]>=r,po[d<<1|c<<2].forEach(h);++i<t-1;)u=d,d=n[o*t+t+i+1]>=r,l=c,c=n[o*t+i+1]>=r,po[u|d<<1|c<<2|l<<3].forEach(h);po[d|c<<3].forEach(h)}i=-1,c=n[o*t]>=r,po[c<<2].forEach(h);for(;++i<t-1;)l=c,c=n[o*t+i+1]>=r,po[c<<2|l<<3].forEach(h);function h(t){var e,n,r=[t[0][0]+i,t[0][1]+o],u=[t[1][0]+i,t[1][1]+o],d=s(r),c=s(u);(e=_[d])?(n=f[c])?(delete _[e.end],delete f[n.start],e===n?(e.ring.push(u),a(e.ring)):f[e.start]=_[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete _[e.end],e.ring.push(u),_[e.end=c]=e):(e=f[c])?(n=_[d])?(delete f[e.start],delete _[n.end],e===n?(e.ring.push(u),a(e.ring)):f[n.start]=_[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete f[e.start],e.ring.unshift(r),f[e.start=d]=e):f[d]=_[c]={start:d,end:c,ring:[r,u]}}po[c<<3].forEach(h)}(n,a,(function(t){r(t,n,a),co(t)>0?i.push([t]):o.push(t)})),o.forEach((function(t){for(var e,n=0,r=i.length;n<r;++n)if(-1!==fo((e=i[n])[0],t))return void e.push(t)})),{type:"MultiPolygon",value:a,coordinates:i}}function s(e){return 2*e[0]+e[1]*(t+1)*4}function o(n,r,a){n.forEach((function(n){var i,s=n[0],o=n[1],u=0|s,d=0|o,c=r[d*t+u];s>0&&s<t&&u===s&&(i=r[d*t+u-1],n[0]=s+(a-i)/(c-i)-.5),o>0&&o<e&&d===o&&(i=r[(d-1)*t+u],n[1]=o+(a-i)/(c-i)-.5)}))}return a.contour=i,a.size=function(n){if(!arguments.length)return[t,e];var r=Math.ceil(n[0]),i=Math.ceil(n[1]);if(!(r>0&&i>0))throw new Error("invalid size");return t=r,e=i,a},a.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?lo(oo.call(t)):lo(t),a):n},a.smooth=function(t){return arguments.length?(r=t?o:mo,a):r===o},a};function Mo(t,e,n){for(var r=t.width,a=t.height,i=1+(n<<1),s=0;s<a;++s)for(var o=0,u=0;o<r+n;++o)o<r&&(u+=t.data[o+s*r]),o>=n&&(o>=i&&(u-=t.data[o-i+s*r]),e.data[o-n+s*r]=u/Math.min(o+1,r-1+i-o,i))}function go(t,e,n){for(var r=t.width,a=t.height,i=1+(n<<1),s=0;s<r;++s)for(var o=0,u=0;o<a+n;++o)o<a&&(u+=t.data[s+o*r]),o>=n&&(o>=i&&(u-=t.data[s+(o-i)*r]),e.data[s+(o-n)*r]=u/Math.min(o+1,a-1+i-o,i))}function Lo(t){return t[0]}function vo(t){return t[1]}function Yo(){return 1}var bo=function(){var t=Lo,e=vo,n=Yo,r=960,a=500,i=20,s=2,o=3*i,u=r+2*o>>s,d=a+2*o>>s,c=lo(20);function l(r){var a=new Float32Array(u*d),l=new Float32Array(u*d);r.forEach((function(r,i,c){var l=+t(r,i,c)+o>>s,f=+e(r,i,c)+o>>s,_=+n(r,i,c);l>=0&&l<u&&f>=0&&f<d&&(a[l+f*u]+=_)})),Mo({width:u,height:d,data:a},{width:u,height:d,data:l},i>>s),go({width:u,height:d,data:l},{width:u,height:d,data:a},i>>s),Mo({width:u,height:d,data:a},{width:u,height:d,data:l},i>>s),go({width:u,height:d,data:l},{width:u,height:d,data:a},i>>s),Mo({width:u,height:d,data:a},{width:u,height:d,data:l},i>>s),go({width:u,height:d,data:l},{width:u,height:d,data:a},i>>s);var _=c(a);if(!Array.isArray(_)){var h=E(a);_=x(0,h,_),(_=Y(0,Math.floor(h/_)*_,_)).shift()}return yo().thresholds(_).size([u,d])(a).map(f)}function f(t){return t.value*=Math.pow(2,-2*s),t.coordinates.forEach(_),t}function _(t){t.forEach(h)}function h(t){t.forEach(m)}function m(t){t[0]=t[0]*Math.pow(2,s)-o,t[1]=t[1]*Math.pow(2,s)-o}function p(){return u=r+2*(o=3*i)>>s,d=a+2*o>>s,l}return l.x=function(e){return arguments.length?(t="function"==typeof e?e:lo(+e),l):t},l.y=function(t){return arguments.length?(e="function"==typeof t?t:lo(+t),l):e},l.weight=function(t){return arguments.length?(n="function"==typeof t?t:lo(+t),l):n},l.size=function(t){if(!arguments.length)return[r,a];var e=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(e>=0||e>=0))throw new Error("invalid size");return r=e,a=n,p()},l.cellSize=function(t){if(!arguments.length)return 1<<s;if(!((t=+t)>=1))throw new Error("invalid cell size");return s=Math.floor(Math.log(t)/Math.LN2),p()},l.thresholds=function(t){return arguments.length?(c="function"==typeof t?t:Array.isArray(t)?lo(oo.call(t)):lo(t),l):c},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(i*(i+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return i=Math.round((Math.sqrt(4*t*t+1)-1)/2),p()},l},wo={},ko={},Do=34,To=10,xo=13;function So(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function Ho(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function jo(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function Ao(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),a=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+jo(-e,6):e>9999?"+"+jo(e,6):jo(e,4))+"-"+jo(t.getUTCMonth()+1,2)+"-"+jo(t.getUTCDate(),2)+(i?"T"+jo(n,2)+":"+jo(r,2)+":"+jo(a,2)+"."+jo(i,3)+"Z":a?"T"+jo(n,2)+":"+jo(r,2)+":"+jo(a,2)+"Z":r||n?"T"+jo(n,2)+":"+jo(r,2)+"Z":"")}var Po=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,a=[],i=t.length,s=0,o=0,u=i<=0,d=!1;function c(){if(u)return ko;if(d)return d=!1,wo;var e,r,a=s;if(t.charCodeAt(a)===Do){for(;s++<i&&t.charCodeAt(s)!==Do||t.charCodeAt(++s)===Do;);return(e=s)>=i?u=!0:(r=t.charCodeAt(s++))===To?d=!0:r===xo&&(d=!0,t.charCodeAt(s)===To&&++s),t.slice(a+1,e-1).replace(/""/g,'"')}for(;s<i;){if((r=t.charCodeAt(e=s++))===To)d=!0;else if(r===xo)d=!0,t.charCodeAt(s)===To&&++s;else if(r!==n)continue;return t.slice(a,e)}return u=!0,t.slice(a,i)}for(t.charCodeAt(i-1)===To&&--i,t.charCodeAt(i-1)===xo&&--i;(r=c())!==ko;){for(var l=[];r!==wo&&r!==ko;)l.push(r),r=c();e&&null==(l=e(l,o++))||a.push(l)}return a}function a(e,n){return e.map((function(e){return n.map((function(t){return s(e[t])})).join(t)}))}function i(e){return e.map(s).join(t)}function s(t){return null==t?"":t instanceof Date?Ao(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,i=r(t,(function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=So(t);return function(r,a){return e(n(r),a,t)}}(t,e):So(t)}));return i.columns=a||[],i},parseRows:r,format:function(e,n){return null==n&&(n=Ho(e)),[n.map(s).join(t)].concat(a(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Ho(t)),a(t,e).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},Eo=Po(","),Oo=Eo.parse,No=Eo.parseRows,Wo=Eo.format,zo=Eo.formatBody,Fo=Eo.formatRows,Co=Po("\t"),Ro=Co.parse,Uo=Co.parseRows,Io=Co.format,Jo=Co.formatBody,qo=Co.formatRows;function Go(t){for(var e in t){var n,r=t[e].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(n=+r)){if(!/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(r))continue;r=new Date(r)}else r=n;else r=null;t[e]=r}return t}function Bo(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var Vo=function(t,e){return fetch(t,e).then(Bo)};function $o(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var Zo=function(t,e){return fetch(t,e).then($o)};function Ko(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Xo=function(t,e){return fetch(t,e).then(Ko)};function Qo(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Xo(e,n).then((function(e){return t(e,r)}))}}function tu(t,e,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var a=Po(t);return Xo(e,n).then((function(t){return a.parse(t,r)}))}var eu=Qo(Oo),nu=Qo(Ro),ru=function(t,e){return new Promise((function(n,r){var a=new Image;for(var i in e)a[i]=e[i];a.onerror=r,a.onload=function(){n(a)},a.src=t}))};function au(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var iu=function(t,e){return fetch(t,e).then(au)};function su(t){return function(e,n){return Xo(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}var ou=su("application/xml"),uu=su("text/html"),du=su("image/svg+xml"),cu=function(t,e){var n;function r(){var r,a,i=n.length,s=0,o=0;for(r=0;r<i;++r)s+=(a=n[r]).x,o+=a.y;for(s=s/i-t,o=o/i-e,r=0;r<i;++r)(a=n[r]).x-=s,a.y-=o}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},lu=function(t){return function(){return t}},fu=function(){return 1e-6*(Math.random()-.5)};function _u(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var a,i,s,o,u,d,c,l,f,_=t._root,h={data:r},m=t._x0,p=t._y0,y=t._x1,M=t._y1;if(!_)return t._root=h,t;for(;_.length;)if((d=e>=(i=(m+y)/2))?m=i:y=i,(c=n>=(s=(p+M)/2))?p=s:M=s,a=_,!(_=_[l=c<<1|d]))return a[l]=h,t;if(o=+t._x.call(null,_.data),u=+t._y.call(null,_.data),e===o&&n===u)return h.next=_,a?a[l]=h:t._root=h,t;do{a=a?a[l]=new Array(4):t._root=new Array(4),(d=e>=(i=(m+y)/2))?m=i:y=i,(c=n>=(s=(p+M)/2))?p=s:M=s}while((l=c<<1|d)==(f=(u>=s)<<1|o>=i));return a[f]=_,a[l]=h,t}var hu=function(t,e,n,r,a){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=a};function mu(t){return t[0]}function pu(t){return t[1]}function yu(t,e,n){var r=new Mu(null==e?mu:e,null==n?pu:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Mu(t,e,n,r,a,i){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=a,this._y1=i,this._root=void 0}function gu(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Lu=yu.prototype=Mu.prototype;function vu(t){return t.x+t.vx}function Yu(t){return t.y+t.vy}Lu.copy=function(){var t,e,n=new Mu(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=gu(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var a=0;a<4;++a)(e=r.source[a])&&(e.length?t.push({source:e,target:r.target[a]=new Array(4)}):r.target[a]=gu(e));return n},Lu.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return _u(this.cover(e,n),e,n,t)},Lu.addAll=function(t){var e,n,r,a,i=t.length,s=new Array(i),o=new Array(i),u=1/0,d=1/0,c=-1/0,l=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(a=+this._y.call(null,e))||(s[n]=r,o[n]=a,r<u&&(u=r),r>c&&(c=r),a<d&&(d=a),a>l&&(l=a));if(u>c||d>l)return this;for(this.cover(u,d).cover(c,l),n=0;n<i;++n)_u(this,s[n],o[n],t[n]);return this},Lu.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,a=this._x1,i=this._y1;if(isNaN(n))a=(n=Math.floor(t))+1,i=(r=Math.floor(e))+1;else{for(var s,o,u=a-n,d=this._root;n>t||t>=a||r>e||e>=i;)switch(o=(e<r)<<1|t<n,(s=new Array(4))[o]=d,d=s,u*=2,o){case 0:a=n+u,i=r+u;break;case 1:n=a-u,i=r+u;break;case 2:a=n+u,r=i-u;break;case 3:n=a-u,r=i-u}this._root&&this._root.length&&(this._root=d)}return this._x0=n,this._y0=r,this._x1=a,this._y1=i,this},Lu.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Lu.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Lu.find=function(t,e,n){var r,a,i,s,o,u,d,c=this._x0,l=this._y0,f=this._x1,_=this._y1,h=[],m=this._root;for(m&&h.push(new hu(m,c,l,f,_)),null==n?n=1/0:(c=t-n,l=e-n,f=t+n,_=e+n,n*=n);u=h.pop();)if(!(!(m=u.node)||(a=u.x0)>f||(i=u.y0)>_||(s=u.x1)<c||(o=u.y1)<l))if(m.length){var p=(a+s)/2,y=(i+o)/2;h.push(new hu(m[3],p,y,s,o),new hu(m[2],a,y,p,o),new hu(m[1],p,i,s,y),new hu(m[0],a,i,p,y)),(d=(e>=y)<<1|t>=p)&&(u=h[h.length-1],h[h.length-1]=h[h.length-1-d],h[h.length-1-d]=u)}else{var M=t-+this._x.call(null,m.data),g=e-+this._y.call(null,m.data),L=M*M+g*g;if(L<n){var v=Math.sqrt(n=L);c=t-v,l=e-v,f=t+v,_=e+v,r=m.data}}return r},Lu.remove=function(t){if(isNaN(i=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var e,n,r,a,i,s,o,u,d,c,l,f,_=this._root,h=this._x0,m=this._y0,p=this._x1,y=this._y1;if(!_)return this;if(_.length)for(;;){if((d=i>=(o=(h+p)/2))?h=o:p=o,(c=s>=(u=(m+y)/2))?m=u:y=u,e=_,!(_=_[l=c<<1|d]))return this;if(!_.length)break;(e[l+1&3]||e[l+2&3]||e[l+3&3])&&(n=e,f=l)}for(;_.data!==t;)if(r=_,!(_=_.next))return this;return(a=_.next)&&delete _.next,r?(a?r.next=a:delete r.next,this):e?(a?e[l]=a:delete e[l],(_=e[0]||e[1]||e[2]||e[3])&&_===(e[3]||e[2]||e[1]||e[0])&&!_.length&&(n?n[f]=_:this._root=_),this):(this._root=a,this)},Lu.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Lu.root=function(){return this._root},Lu.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Lu.visit=function(t){var e,n,r,a,i,s,o=[],u=this._root;for(u&&o.push(new hu(u,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(u=e.node,r=e.x0,a=e.y0,i=e.x1,s=e.y1)&&u.length){var d=(r+i)/2,c=(a+s)/2;(n=u[3])&&o.push(new hu(n,d,c,i,s)),(n=u[2])&&o.push(new hu(n,r,c,d,s)),(n=u[1])&&o.push(new hu(n,d,a,i,c)),(n=u[0])&&o.push(new hu(n,r,a,d,c))}return this},Lu.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new hu(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var a=e.node;if(a.length){var i,s=e.x0,o=e.y0,u=e.x1,d=e.y1,c=(s+u)/2,l=(o+d)/2;(i=a[0])&&n.push(new hu(i,s,o,c,l)),(i=a[1])&&n.push(new hu(i,c,o,u,l)),(i=a[2])&&n.push(new hu(i,s,l,c,d)),(i=a[3])&&n.push(new hu(i,c,l,u,d))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Lu.x=function(t){return arguments.length?(this._x=t,this):this._x},Lu.y=function(t){return arguments.length?(this._y=t,this):this._y};var bu=function(t){var e,n,r=1,a=1;function i(){for(var t,i,o,u,d,c,l,f=e.length,_=0;_<a;++_)for(i=yu(e,vu,Yu).visitAfter(s),t=0;t<f;++t)o=e[t],c=n[o.index],l=c*c,u=o.x+o.vx,d=o.y+o.vy,i.visit(h);function h(t,e,n,a,i){var s=t.data,f=t.r,_=c+f;if(!s)return e>u+_||a<u-_||n>d+_||i<d-_;if(s.index>o.index){var h=u-s.x-s.vx,m=d-s.y-s.vy,p=h*h+m*m;p<_*_&&(0===h&&(p+=(h=fu())*h),0===m&&(p+=(m=fu())*m),p=(_-(p=Math.sqrt(p)))/p*r,o.vx+=(h*=p)*(_=(f*=f)/(l+f)),o.vy+=(m*=p)*_,s.vx-=h*(_=1-_),s.vy-=m*_)}}}function s(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function o(){if(e){var r,a,i=e.length;for(n=new Array(i),r=0;r<i;++r)a=e[r],n[a.index]=+t(a,r,e)}}return"function"!=typeof t&&(t=lu(null==t?1:+t)),i.initialize=function(t){e=t,o()},i.iterations=function(t){return arguments.length?(a=+t,i):a},i.strength=function(t){return arguments.length?(r=+t,i):r},i.radius=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),o(),i):t},i};function wu(t){return t.index}function ku(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var Du=function(t){var e,n,r,a,i,s=wu,o=function(t){return 1/Math.min(a[t.source.index],a[t.target.index])},u=lu(30),d=1;function c(r){for(var a=0,s=t.length;a<d;++a)for(var o,u,c,l,f,_,h,m=0;m<s;++m)u=(o=t[m]).source,l=(c=o.target).x+c.vx-u.x-u.vx||fu(),f=c.y+c.vy-u.y-u.vy||fu(),l*=_=((_=Math.sqrt(l*l+f*f))-n[m])/_*r*e[m],f*=_,c.vx-=l*(h=i[m]),c.vy-=f*h,u.vx+=l*(h=1-h),u.vy+=f*h}function l(){if(r){var o,u,d=r.length,c=t.length,l=Vs(r,s);for(o=0,a=new Array(d);o<c;++o)(u=t[o]).index=o,"object"!=typeof u.source&&(u.source=ku(l,u.source)),"object"!=typeof u.target&&(u.target=ku(l,u.target)),a[u.source.index]=(a[u.source.index]||0)+1,a[u.target.index]=(a[u.target.index]||0)+1;for(o=0,i=new Array(c);o<c;++o)u=t[o],i[o]=a[u.source.index]/(a[u.source.index]+a[u.target.index]);e=new Array(c),f(),n=new Array(c),_()}}function f(){if(r)for(var n=0,a=t.length;n<a;++n)e[n]=+o(t[n],n,t)}function _(){if(r)for(var e=0,a=t.length;e<a;++e)n[e]=+u(t[e],e,t)}return null==t&&(t=[]),c.initialize=function(t){r=t,l()},c.links=function(e){return arguments.length?(t=e,l(),c):t},c.id=function(t){return arguments.length?(s=t,c):s},c.iterations=function(t){return arguments.length?(d=+t,c):d},c.strength=function(t){return arguments.length?(o="function"==typeof t?t:lu(+t),f(),c):o},c.distance=function(t){return arguments.length?(u="function"==typeof t?t:lu(+t),_(),c):u},c};function Tu(t){return t.x}function xu(t){return t.y}var Su=10,Hu=Math.PI*(3-Math.sqrt(5)),ju=function(t){var e,n=1,r=.001,a=1-Math.pow(r,1/300),i=0,s=.6,o=Vs(),u=fa(c),d=mt("tick","end");function c(){l(),d.call("tick",e),n<r&&(u.stop(),d.call("end",e))}function l(r){var u,d,c=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(n+=(i-n)*a,o.each((function(t){t(n)})),u=0;u<c;++u)null==(d=t[u]).fx?d.x+=d.vx*=s:(d.x=d.fx,d.vx=0),null==d.fy?d.y+=d.vy*=s:(d.y=d.fy,d.vy=0);return e}function f(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var a=Su*Math.sqrt(n),i=n*Hu;e.x=a*Math.cos(i),e.y=a*Math.sin(i)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function _(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),f(),e={tick:l,restart:function(){return u.restart(c),e},stop:function(){return u.stop(),e},nodes:function(n){return arguments.length?(t=n,f(),o.each(_),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(a=+t,e):+a},alphaTarget:function(t){return arguments.length?(i=+t,e):i},velocityDecay:function(t){return arguments.length?(s=1-t,e):1-s},force:function(t,n){return arguments.length>1?(null==n?o.remove(t):o.set(t,_(n)),e):o.get(t)},find:function(e,n,r){var a,i,s,o,u,d=0,c=t.length;for(null==r?r=1/0:r*=r,d=0;d<c;++d)(s=(a=e-(o=t[d]).x)*a+(i=n-o.y)*i)<r&&(u=o,r=s);return u},on:function(t,n){return arguments.length>1?(d.on(t,n),e):d.on(t)}}},Au=function(){var t,e,n,r,a=lu(-30),i=1,s=1/0,o=.81;function u(r){var a,i=t.length,s=yu(t,Tu,xu).visitAfter(c);for(n=r,a=0;a<i;++a)e=t[a],s.visit(l)}function d(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+a(n,e,t)}}function c(t){var e,n,a,i,s,o=0,u=0;if(t.length){for(a=i=s=0;s<4;++s)(e=t[s])&&(n=Math.abs(e.value))&&(o+=e.value,u+=n,a+=n*e.x,i+=n*e.y);t.x=a/u,t.y=i/u}else{(e=t).x=e.data.x,e.y=e.data.y;do{o+=r[e.data.index]}while(e=e.next)}t.value=o}function l(t,a,u,d){if(!t.value)return!0;var c=t.x-e.x,l=t.y-e.y,f=d-a,_=c*c+l*l;if(f*f/o<_)return _<s&&(0===c&&(_+=(c=fu())*c),0===l&&(_+=(l=fu())*l),_<i&&(_=Math.sqrt(i*_)),e.vx+=c*t.value*n/_,e.vy+=l*t.value*n/_),!0;if(!(t.length||_>=s)){(t.data!==e||t.next)&&(0===c&&(_+=(c=fu())*c),0===l&&(_+=(l=fu())*l),_<i&&(_=Math.sqrt(i*_)));do{t.data!==e&&(f=r[t.data.index]*n/_,e.vx+=c*f,e.vy+=l*f)}while(t=t.next)}}return u.initialize=function(e){t=e,d()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:lu(+t),d(),u):a},u.distanceMin=function(t){return arguments.length?(i=t*t,u):Math.sqrt(i)},u.distanceMax=function(t){return arguments.length?(s=t*t,u):Math.sqrt(s)},u.theta=function(t){return arguments.length?(o=t*t,u):Math.sqrt(o)},u},Pu=function(t,e,n){var r,a,i,s=lu(.1);function o(t){for(var s=0,o=r.length;s<o;++s){var u=r[s],d=u.x-e||1e-6,c=u.y-n||1e-6,l=Math.sqrt(d*d+c*c),f=(i[s]-l)*a[s]*t/l;u.vx+=d*f,u.vy+=c*f}}function u(){if(r){var e,n=r.length;for(a=new Array(n),i=new Array(n),e=0;e<n;++e)i[e]=+t(r[e],e,r),a[e]=isNaN(i[e])?0:+s(r[e],e,r)}}return"function"!=typeof t&&(t=lu(+t)),null==e&&(e=0),null==n&&(n=0),o.initialize=function(t){r=t,u()},o.strength=function(t){return arguments.length?(s="function"==typeof t?t:lu(+t),u(),o):s},o.radius=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),u(),o):t},o.x=function(t){return arguments.length?(e=+t,o):e},o.y=function(t){return arguments.length?(n=+t,o):n},o},Eu=function(t){var e,n,r,a=lu(.1);function i(t){for(var a,i=0,s=e.length;i<s;++i)(a=e[i]).vx+=(r[i]-a.x)*n[i]*t}function s(){if(e){var i,s=e.length;for(n=new Array(s),r=new Array(s),i=0;i<s;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+a(e[i],i,e)}}return"function"!=typeof t&&(t=lu(null==t?0:+t)),i.initialize=function(t){e=t,s()},i.strength=function(t){return arguments.length?(a="function"==typeof t?t:lu(+t),s(),i):a},i.x=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),s(),i):t},i},Ou=function(t){var e,n,r,a=lu(.1);function i(t){for(var a,i=0,s=e.length;i<s;++i)(a=e[i]).vy+=(r[i]-a.y)*n[i]*t}function s(){if(e){var i,s=e.length;for(n=new Array(s),r=new Array(s),i=0;i<s;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+a(e[i],i,e)}}return"function"!=typeof t&&(t=lu(null==t?0:+t)),i.initialize=function(t){e=t,s()},i.strength=function(t){return arguments.length?(a="function"==typeof t?t:lu(+t),s(),i):a},i.y=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),s(),i):t},i},Nu=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Wu=function(t){return(t=Nu(Math.abs(t)))?t[1]:NaN},zu=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Fu(t){if(!(e=zu.exec(t)))throw new Error("invalid format: "+t);var e;return new Cu({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Cu(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Fu.prototype=Cu.prototype,Cu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ru,Uu,Iu,Ju,qu=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(a>0){if(!+t[r])break t;a=0}}return a>0?t.slice(0,a)+t.slice(e+1):t},Gu=function(t,e){var n=Nu(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},Bu={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Gu(100*t,e)},r:Gu,s:function(t,e){var n=Nu(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(Ru=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Nu(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Vu=function(t){return t},$u=Array.prototype.map,Zu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Ku=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Vu:(e=$u.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],s=0,o=e[0],u=0;a>0&&o>0&&(u+o+1>r&&(o=Math.max(1,r-u)),i.push(t.substring(a-=o,a+o)),!((u+=o+1)>r));)o=e[s=(s+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",o=void 0===t.numerals?Vu:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}($u.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",d=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function l(t){var e=(t=Fu(t)).fill,n=t.align,l=t.sign,f=t.symbol,_=t.zero,h=t.width,m=t.comma,p=t.precision,y=t.trim,M=t.type;"n"===M?(m=!0,M="g"):Bu[M]||(void 0===p&&(p=12),y=!0,M="g"),(_||"0"===e&&"="===n)&&(_=!0,e="0",n="=");var g="$"===f?a:"#"===f&&/[boxX]/.test(M)?"0"+M.toLowerCase():"",L="$"===f?i:/[%p]/.test(M)?u:"",v=Bu[M],Y=/[defgprs%]/.test(M);function b(t){var a,i,u,f=g,b=L;if("c"===M)b=v(t)+b,t="";else{var w=(t=+t)<0;if(t=isNaN(t)?c:v(Math.abs(t),p),y&&(t=qu(t)),w&&0==+t&&(w=!1),f=(w?"("===l?l:d:"-"===l||"("===l?"":l)+f,b=("s"===M?Zu[8+Ru/3]:"")+b+(w&&"("===l?")":""),Y)for(a=-1,i=t.length;++a<i;)if(48>(u=t.charCodeAt(a))||u>57){b=(46===u?s+t.slice(a+1):t.slice(a))+b,t=t.slice(0,a);break}}m&&!_&&(t=r(t,1/0));var k=f.length+t.length+b.length,D=k<h?new Array(h-k+1).join(e):"";switch(m&&_&&(t=r(D+t,D.length?h-b.length:1/0),D=""),n){case"<":t=f+t+b+D;break;case"=":t=f+D+t+b;break;case"^":t=D.slice(0,k=D.length>>1)+f+t+b+D.slice(k);break;default:t=D+f+t+b}return o(t)}return p=void 0===p?6:/[gprs]/.test(M)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),b.toString=function(){return t+""},b}return{format:l,formatPrefix:function(t,e){var n=l(((t=Fu(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Wu(e)/3))),a=Math.pow(10,-r),i=Zu[8+r/3];return function(t){return n(a*t)+i}}}};function Xu(t){return Uu=Ku(t),Iu=Uu.format,Ju=Uu.formatPrefix,Uu}Xu({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var Qu=function(t){return Math.max(0,-Wu(Math.abs(t)))},td=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wu(e)/3)))-Wu(Math.abs(t)))},ed=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Wu(e)-Wu(t))+1},nd=function(){return new rd};function rd(){this.reset()}rd.prototype={constructor:rd,reset:function(){this.s=this.t=0},add:function(t){id(ad,t,this.t),id(this,ad.s,this.s),this.s?this.t+=ad.t:this.s=ad.t},valueOf:function(){return this.s}};var ad=new rd;function id(t,e,n){var r=t.s=e+n,a=r-e,i=r-a;t.t=e-i+(n-a)}var sd=1e-6,od=1e-12,ud=Math.PI,dd=ud/2,cd=ud/4,ld=2*ud,fd=180/ud,_d=ud/180,hd=Math.abs,md=Math.atan,pd=Math.atan2,yd=Math.cos,Md=Math.ceil,gd=Math.exp,Ld=(Math.floor,Math.log),vd=Math.pow,Yd=Math.sin,bd=Math.sign||function(t){return t>0?1:t<0?-1:0},wd=Math.sqrt,kd=Math.tan;function Dd(t){return t>1?0:t<-1?ud:Math.acos(t)}function Td(t){return t>1?dd:t<-1?-dd:Math.asin(t)}function xd(t){return(t=Yd(t/2))*t}function Sd(){}function Hd(t,e){t&&Ad.hasOwnProperty(t.type)&&Ad[t.type](t,e)}var jd={Feature:function(t,e){Hd(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,a=n.length;++r<a;)Hd(n[r].geometry,e)}},Ad={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Pd(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)Pd(n[r],e,0)},Polygon:function(t,e){Ed(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)Ed(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,a=n.length;++r<a;)Hd(n[r],e)}};function Pd(t,e,n){var r,a=-1,i=t.length-n;for(e.lineStart();++a<i;)r=t[a],e.point(r[0],r[1],r[2]);e.lineEnd()}function Ed(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Pd(t[n],e,1);e.polygonEnd()}var Od,Nd,Wd,zd,Fd,Cd=function(t,e){t&&jd.hasOwnProperty(t.type)?jd[t.type](t,e):Hd(t,e)},Rd=nd(),Ud=nd(),Id={point:Sd,lineStart:Sd,lineEnd:Sd,polygonStart:function(){Rd.reset(),Id.lineStart=Jd,Id.lineEnd=qd},polygonEnd:function(){var t=+Rd;Ud.add(t<0?ld+t:t),this.lineStart=this.lineEnd=this.point=Sd},sphere:function(){Ud.add(ld)}};function Jd(){Id.point=Gd}function qd(){Bd(Od,Nd)}function Gd(t,e){Id.point=Bd,Od=t,Nd=e,Wd=t*=_d,zd=yd(e=(e*=_d)/2+cd),Fd=Yd(e)}function Bd(t,e){var n=(t*=_d)-Wd,r=n>=0?1:-1,a=r*n,i=yd(e=(e*=_d)/2+cd),s=Yd(e),o=Fd*s,u=zd*i+o*yd(a),d=o*r*Yd(a);Rd.add(pd(d,u)),Wd=t,zd=i,Fd=s}var Vd=function(t){return Ud.reset(),Cd(t,Id),2*Ud};function $d(t){return[pd(t[1],t[0]),Td(t[2])]}function Zd(t){var e=t[0],n=t[1],r=yd(n);return[r*yd(e),r*Yd(e),Yd(n)]}function Kd(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Xd(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Qd(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function tc(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function ec(t){var e=wd(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var nc,rc,ac,ic,sc,oc,uc,dc,cc,lc,fc=nd(),_c={point:hc,lineStart:pc,lineEnd:yc,polygonStart:function(){_c.point=Mc,_c.lineStart=gc,_c.lineEnd=Lc,fc.reset(),Id.polygonStart()},polygonEnd:function(){Id.polygonEnd(),_c.point=hc,_c.lineStart=pc,_c.lineEnd=yc,Rd<0?(nc=-(ac=180),rc=-(ic=90)):fc>sd?ic=90:fc<-sd&&(rc=-90),lc[0]=nc,lc[1]=ac},sphere:function(){nc=-(ac=180),rc=-(ic=90)}};function hc(t,e){cc.push(lc=[nc=t,ac=t]),e<rc&&(rc=e),e>ic&&(ic=e)}function mc(t,e){var n=Zd([t*_d,e*_d]);if(dc){var r=Xd(dc,n),a=Xd([r[1],-r[0],0],r);ec(a),a=$d(a);var i,s=t-sc,o=s>0?1:-1,u=a[0]*fd*o,d=hd(s)>180;d^(o*sc<u&&u<o*t)?(i=a[1]*fd)>ic&&(ic=i):d^(o*sc<(u=(u+360)%360-180)&&u<o*t)?(i=-a[1]*fd)<rc&&(rc=i):(e<rc&&(rc=e),e>ic&&(ic=e)),d?t<sc?vc(nc,t)>vc(nc,ac)&&(ac=t):vc(t,ac)>vc(nc,ac)&&(nc=t):ac>=nc?(t<nc&&(nc=t),t>ac&&(ac=t)):t>sc?vc(nc,t)>vc(nc,ac)&&(ac=t):vc(t,ac)>vc(nc,ac)&&(nc=t)}else cc.push(lc=[nc=t,ac=t]);e<rc&&(rc=e),e>ic&&(ic=e),dc=n,sc=t}function pc(){_c.point=mc}function yc(){lc[0]=nc,lc[1]=ac,_c.point=hc,dc=null}function Mc(t,e){if(dc){var n=t-sc;fc.add(hd(n)>180?n+(n>0?360:-360):n)}else oc=t,uc=e;Id.point(t,e),mc(t,e)}function gc(){Id.lineStart()}function Lc(){Mc(oc,uc),Id.lineEnd(),hd(fc)>sd&&(nc=-(ac=180)),lc[0]=nc,lc[1]=ac,dc=null}function vc(t,e){return(e-=t)<0?e+360:e}function Yc(t,e){return t[0]-e[0]}function bc(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var wc,kc,Dc,Tc,xc,Sc,Hc,jc,Ac,Pc,Ec,Oc,Nc,Wc,zc,Fc,Cc=function(t){var e,n,r,a,i,s,o;if(ic=ac=-(nc=rc=1/0),cc=[],Cd(t,_c),n=cc.length){for(cc.sort(Yc),e=1,i=[r=cc[0]];e<n;++e)bc(r,(a=cc[e])[0])||bc(r,a[1])?(vc(r[0],a[1])>vc(r[0],r[1])&&(r[1]=a[1]),vc(a[0],r[1])>vc(r[0],r[1])&&(r[0]=a[0])):i.push(r=a);for(s=-1/0,e=0,r=i[n=i.length-1];e<=n;r=a,++e)a=i[e],(o=vc(r[1],a[0]))>s&&(s=o,nc=a[0],ac=r[1])}return cc=lc=null,nc===1/0||rc===1/0?[[NaN,NaN],[NaN,NaN]]:[[nc,rc],[ac,ic]]},Rc={sphere:Sd,point:Uc,lineStart:Jc,lineEnd:Bc,polygonStart:function(){Rc.lineStart=Vc,Rc.lineEnd=$c},polygonEnd:function(){Rc.lineStart=Jc,Rc.lineEnd=Bc}};function Uc(t,e){t*=_d;var n=yd(e*=_d);Ic(n*yd(t),n*Yd(t),Yd(e))}function Ic(t,e,n){Dc+=(t-Dc)/++wc,Tc+=(e-Tc)/wc,xc+=(n-xc)/wc}function Jc(){Rc.point=qc}function qc(t,e){t*=_d;var n=yd(e*=_d);Wc=n*yd(t),zc=n*Yd(t),Fc=Yd(e),Rc.point=Gc,Ic(Wc,zc,Fc)}function Gc(t,e){t*=_d;var n=yd(e*=_d),r=n*yd(t),a=n*Yd(t),i=Yd(e),s=pd(wd((s=zc*i-Fc*a)*s+(s=Fc*r-Wc*i)*s+(s=Wc*a-zc*r)*s),Wc*r+zc*a+Fc*i);kc+=s,Sc+=s*(Wc+(Wc=r)),Hc+=s*(zc+(zc=a)),jc+=s*(Fc+(Fc=i)),Ic(Wc,zc,Fc)}function Bc(){Rc.point=Uc}function Vc(){Rc.point=Zc}function $c(){Kc(Oc,Nc),Rc.point=Uc}function Zc(t,e){Oc=t,Nc=e,t*=_d,e*=_d,Rc.point=Kc;var n=yd(e);Wc=n*yd(t),zc=n*Yd(t),Fc=Yd(e),Ic(Wc,zc,Fc)}function Kc(t,e){t*=_d;var n=yd(e*=_d),r=n*yd(t),a=n*Yd(t),i=Yd(e),s=zc*i-Fc*a,o=Fc*r-Wc*i,u=Wc*a-zc*r,d=wd(s*s+o*o+u*u),c=Td(d),l=d&&-c/d;Ac+=l*s,Pc+=l*o,Ec+=l*u,kc+=c,Sc+=c*(Wc+(Wc=r)),Hc+=c*(zc+(zc=a)),jc+=c*(Fc+(Fc=i)),Ic(Wc,zc,Fc)}var Xc=function(t){wc=kc=Dc=Tc=xc=Sc=Hc=jc=Ac=Pc=Ec=0,Cd(t,Rc);var e=Ac,n=Pc,r=Ec,a=e*e+n*n+r*r;return a<od&&(e=Sc,n=Hc,r=jc,kc<sd&&(e=Dc,n=Tc,r=xc),(a=e*e+n*n+r*r)<od)?[NaN,NaN]:[pd(n,e)*fd,Td(r/wd(a))*fd]},Qc=function(t){return function(){return t}},tl=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};function el(t,e){return[hd(t)>ud?t+Math.round(-t/ld)*ld:t,e]}function nl(t,e,n){return(t%=ld)?e||n?tl(al(t),il(e,n)):al(t):e||n?il(e,n):el}function rl(t){return function(e,n){return[(e+=t)>ud?e-ld:e<-ud?e+ld:e,n]}}function al(t){var e=rl(t);return e.invert=rl(-t),e}function il(t,e){var n=yd(t),r=Yd(t),a=yd(e),i=Yd(e);function s(t,e){var s=yd(e),o=yd(t)*s,u=Yd(t)*s,d=Yd(e),c=d*n+o*r;return[pd(u*a-c*i,o*n-d*r),Td(c*a+u*i)]}return s.invert=function(t,e){var s=yd(e),o=yd(t)*s,u=Yd(t)*s,d=Yd(e),c=d*a-u*i;return[pd(u*a+d*i,o*n+c*r),Td(c*n-o*r)]},s}el.invert=el;var sl=function(t){function e(e){return(e=t(e[0]*_d,e[1]*_d))[0]*=fd,e[1]*=fd,e}return t=nl(t[0]*_d,t[1]*_d,t.length>2?t[2]*_d:0),e.invert=function(e){return(e=t.invert(e[0]*_d,e[1]*_d))[0]*=fd,e[1]*=fd,e},e};function ol(t,e,n,r,a,i){if(n){var s=yd(e),o=Yd(e),u=r*n;null==a?(a=e+r*ld,i=e-u/2):(a=ul(s,a),i=ul(s,i),(r>0?a<i:a>i)&&(a+=r*ld));for(var d,c=a;r>0?c>i:c<i;c-=u)d=$d([s,-o*yd(c),-o*Yd(c)]),t.point(d[0],d[1])}}function ul(t,e){(e=Zd(e))[0]-=t,ec(e);var n=Dd(-e[1]);return((-e[2]<0?-n:n)+ld-sd)%ld}var dl=function(){var t,e,n=Qc([0,0]),r=Qc(90),a=Qc(6),i={point:function(n,r){t.push(n=e(n,r)),n[0]*=fd,n[1]*=fd}};function s(){var s=n.apply(this,arguments),o=r.apply(this,arguments)*_d,u=a.apply(this,arguments)*_d;return t=[],e=nl(-s[0]*_d,-s[1]*_d,0).invert,ol(i,o,u,1),s={type:"Polygon",coordinates:[t]},t=e=null,s}return s.center=function(t){return arguments.length?(n="function"==typeof t?t:Qc([+t[0],+t[1]]),s):n},s.radius=function(t){return arguments.length?(r="function"==typeof t?t:Qc(+t),s):r},s.precision=function(t){return arguments.length?(a="function"==typeof t?t:Qc(+t),s):a},s},cl=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Sd,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},ll=function(t,e){return hd(t[0]-e[0])<sd&&hd(t[1]-e[1])<sd};function fl(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var _l=function(t,e,n,r,a){var i,s,o=[],u=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],s=t[e];if(ll(r,s)){for(a.lineStart(),i=0;i<e;++i)a.point((r=t[i])[0],r[1]);a.lineEnd()}else o.push(n=new fl(r,t,null,!0)),u.push(n.o=new fl(r,null,n,!1)),o.push(n=new fl(s,t,null,!1)),u.push(n.o=new fl(s,null,n,!0))}})),o.length){for(u.sort(e),hl(o),hl(u),i=0,s=u.length;i<s;++i)u[i].e=n=!n;for(var d,c,l=o[0];;){for(var f=l,_=!0;f.v;)if((f=f.n)===l)return;d=f.z,a.lineStart();do{if(f.v=f.o.v=!0,f.e){if(_)for(i=0,s=d.length;i<s;++i)a.point((c=d[i])[0],c[1]);else r(f.x,f.n.x,1,a);f=f.n}else{if(_)for(d=f.p.z,i=d.length-1;i>=0;--i)a.point((c=d[i])[0],c[1]);else r(f.x,f.p.x,-1,a);f=f.p}d=(f=f.o).z,_=!_}while(!f.v);a.lineEnd()}}};function hl(t){if(e=t.length){for(var e,n,r=0,a=t[0];++r<e;)a.n=n=t[r],n.p=a,a=n;a.n=n=t[0],n.p=a}}var ml=nd();function pl(t){return hd(t[0])<=ud?t[0]:bd(t[0])*((hd(t[0])+ud)%ld-ud)}var yl=function(t,e){var n=pl(e),r=e[1],a=Yd(r),i=[Yd(n),-yd(n),0],s=0,o=0;ml.reset(),1===a?r=dd+sd:-1===a&&(r=-dd-sd);for(var u=0,d=t.length;u<d;++u)if(l=(c=t[u]).length)for(var c,l,f=c[l-1],_=pl(f),h=f[1]/2+cd,m=Yd(h),p=yd(h),y=0;y<l;++y,_=g,m=v,p=Y,f=M){var M=c[y],g=pl(M),L=M[1]/2+cd,v=Yd(L),Y=yd(L),b=g-_,w=b>=0?1:-1,k=w*b,D=k>ud,T=m*v;if(ml.add(pd(T*w*Yd(k),p*Y+T*yd(k))),s+=D?b+w*ld:b,D^_>=n^g>=n){var x=Xd(Zd(f),Zd(M));ec(x);var S=Xd(i,x);ec(S);var H=(D^b>=0?-1:1)*Td(S[2]);(r>H||r===H&&(x[0]||x[1]))&&(o+=D^b>=0?1:-1)}}return(s<-sd||s<sd&&ml<-sd)^1&o},Ml=function(t,e,n,r){return function(a){var i,s,o,u=e(a),d=cl(),c=e(d),l=!1,f={point:_,lineStart:m,lineEnd:p,polygonStart:function(){f.point=y,f.lineStart=M,f.lineEnd=g,s=[],i=[]},polygonEnd:function(){f.point=_,f.lineStart=m,f.lineEnd=p,s=W(s);var t=yl(i,r);s.length?(l||(a.polygonStart(),l=!0),_l(s,Ll,t,n,a)):t&&(l||(a.polygonStart(),l=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),l&&(a.polygonEnd(),l=!1),s=i=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function _(e,n){t(e,n)&&a.point(e,n)}function h(t,e){u.point(t,e)}function m(){f.point=h,u.lineStart()}function p(){f.point=_,u.lineEnd()}function y(t,e){o.push([t,e]),c.point(t,e)}function M(){c.lineStart(),o=[]}function g(){y(o[0][0],o[0][1]),c.lineEnd();var t,e,n,r,u=c.clean(),f=d.result(),_=f.length;if(o.pop(),i.push(o),o=null,_)if(1&u){if((e=(n=f[0]).length-1)>0){for(l||(a.polygonStart(),l=!0),a.lineStart(),t=0;t<e;++t)a.point((r=n[t])[0],r[1]);a.lineEnd()}}else _>1&&2&u&&f.push(f.pop().concat(f.shift())),s.push(f.filter(gl))}return f}};function gl(t){return t.length>1}function Ll(t,e){return((t=t.x)[0]<0?t[1]-dd-sd:dd-t[1])-((e=e.x)[0]<0?e[1]-dd-sd:dd-e[1])}var vl=Ml((function(){return!0}),(function(t){var e,n=NaN,r=NaN,a=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(i,s){var o=i>0?ud:-ud,u=hd(i-n);hd(u-ud)<sd?(t.point(n,r=(r+s)/2>0?dd:-dd),t.point(a,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(i,r),e=0):a!==o&&u>=ud&&(hd(n-a)<sd&&(n-=a*sd),hd(i-o)<sd&&(i-=o*sd),r=function(t,e,n,r){var a,i,s=Yd(t-n);return hd(s)>sd?md((Yd(e)*(i=yd(r))*Yd(n)-Yd(r)*(a=yd(e))*Yd(t))/(a*i*s)):(e+r)/2}(n,r,i,s),t.point(a,r),t.lineEnd(),t.lineStart(),t.point(o,r),e=0),t.point(n=i,r=s),a=o},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var a;if(null==t)a=n*dd,r.point(-ud,a),r.point(0,a),r.point(ud,a),r.point(ud,0),r.point(ud,-a),r.point(0,-a),r.point(-ud,-a),r.point(-ud,0),r.point(-ud,a);else if(hd(t[0]-e[0])>sd){var i=t[0]<e[0]?ud:-ud;a=n*i/2,r.point(-i,a),r.point(0,a),r.point(i,a)}else r.point(e[0],e[1])}),[-ud,-dd]);var Yl=function(t){var e=yd(t),n=6*_d,r=e>0,a=hd(e)>sd;function i(t,n){return yd(t)*yd(n)>e}function s(t,n,r){var a=[1,0,0],i=Xd(Zd(t),Zd(n)),s=Kd(i,i),o=i[0],u=s-o*o;if(!u)return!r&&t;var d=e*s/u,c=-e*o/u,l=Xd(a,i),f=tc(a,d);Qd(f,tc(i,c));var _=l,h=Kd(f,_),m=Kd(_,_),p=h*h-m*(Kd(f,f)-1);if(!(p<0)){var y=wd(p),M=tc(_,(-h-y)/m);if(Qd(M,f),M=$d(M),!r)return M;var g,L=t[0],v=n[0],Y=t[1],b=n[1];v<L&&(g=L,L=v,v=g);var w=v-L,k=hd(w-ud)<sd;if(!k&&b<Y&&(g=Y,Y=b,b=g),k||w<sd?k?Y+b>0^M[1]<(hd(M[0]-L)<sd?Y:b):Y<=M[1]&&M[1]<=b:w>ud^(L<=M[0]&&M[0]<=v)){var D=tc(_,(-h+y)/m);return Qd(D,f),[M,$d(D)]}}}function o(e,n){var a=r?t:ud-t,i=0;return e<-a?i|=1:e>a&&(i|=2),n<-a?i|=4:n>a&&(i|=8),i}return Ml(i,(function(t){var e,n,u,d,c;return{lineStart:function(){d=u=!1,c=1},point:function(l,f){var _,h=[l,f],m=i(l,f),p=r?m?0:o(l,f):m?o(l+(l<0?ud:-ud),f):0;if(!e&&(d=u=m)&&t.lineStart(),m!==u&&(!(_=s(e,h))||ll(e,_)||ll(h,_))&&(h[0]+=sd,h[1]+=sd,m=i(h[0],h[1])),m!==u)c=0,m?(t.lineStart(),_=s(h,e),t.point(_[0],_[1])):(_=s(e,h),t.point(_[0],_[1]),t.lineEnd()),e=_;else if(a&&e&&r^m){var y;p&n||!(y=s(h,e,!0))||(c=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!m||e&&ll(e,h)||t.point(h[0],h[1]),e=h,u=m,n=p},lineEnd:function(){u&&t.lineEnd(),e=null},clean:function(){return c|(d&&u)<<1}}}),(function(e,r,a,i){ol(i,t,n,a,e,r)}),r?[0,-t]:[-ud,t-ud])},bl=function(t,e,n,r,a,i){var s,o=t[0],u=t[1],d=0,c=1,l=e[0]-o,f=e[1]-u;if(s=n-o,l||!(s>0)){if(s/=l,l<0){if(s<d)return;s<c&&(c=s)}else if(l>0){if(s>c)return;s>d&&(d=s)}if(s=a-o,l||!(s<0)){if(s/=l,l<0){if(s>c)return;s>d&&(d=s)}else if(l>0){if(s<d)return;s<c&&(c=s)}if(s=r-u,f||!(s>0)){if(s/=f,f<0){if(s<d)return;s<c&&(c=s)}else if(f>0){if(s>c)return;s>d&&(d=s)}if(s=i-u,f||!(s<0)){if(s/=f,f<0){if(s>c)return;s>d&&(d=s)}else if(f>0){if(s<d)return;s<c&&(c=s)}return d>0&&(t[0]=o+d*l,t[1]=u+d*f),c<1&&(e[0]=o+c*l,e[1]=u+c*f),!0}}}}},wl=1e9,kl=-wl;function Dl(t,e,n,r){function a(a,i){return t<=a&&a<=n&&e<=i&&i<=r}function i(a,i,o,d){var c=0,l=0;if(null==a||(c=s(a,o))!==(l=s(i,o))||u(a,i)<0^o>0)do{d.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+o+4)%4)!==l);else d.point(i[0],i[1])}function s(r,a){return hd(r[0]-t)<sd?a>0?0:3:hd(r[0]-n)<sd?a>0?2:1:hd(r[1]-e)<sd?a>0?1:0:a>0?3:2}function o(t,e){return u(t.x,e.x)}function u(t,e){var n=s(t,1),r=s(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(s){var u,d,c,l,f,_,h,m,p,y,M,g=s,L=cl(),v={point:Y,lineStart:function(){v.point=b,d&&d.push(c=[]);y=!0,p=!1,h=m=NaN},lineEnd:function(){u&&(b(l,f),_&&p&&L.rejoin(),u.push(L.result()));v.point=Y,p&&g.lineEnd()},polygonStart:function(){g=L,u=[],d=[],M=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,a=d.length;n<a;++n)for(var i,s,o=d[n],u=1,c=o.length,l=o[0],f=l[0],_=l[1];u<c;++u)i=f,s=_,l=o[u],f=l[0],_=l[1],s<=r?_>r&&(f-i)*(r-s)>(_-s)*(t-i)&&++e:_<=r&&(f-i)*(r-s)<(_-s)*(t-i)&&--e;return e}(),n=M&&e,a=(u=W(u)).length;(n||a)&&(s.polygonStart(),n&&(s.lineStart(),i(null,null,1,s),s.lineEnd()),a&&_l(u,o,e,i,s),s.polygonEnd());g=s,u=d=c=null}};function Y(t,e){a(t,e)&&g.point(t,e)}function b(i,s){var o=a(i,s);if(d&&c.push([i,s]),y)l=i,f=s,_=o,y=!1,o&&(g.lineStart(),g.point(i,s));else if(o&&p)g.point(i,s);else{var u=[h=Math.max(kl,Math.min(wl,h)),m=Math.max(kl,Math.min(wl,m))],L=[i=Math.max(kl,Math.min(wl,i)),s=Math.max(kl,Math.min(wl,s))];bl(u,L,t,e,n,r)?(p||(g.lineStart(),g.point(u[0],u[1])),g.point(L[0],L[1]),o||g.lineEnd(),M=!1):o&&(g.lineStart(),g.point(i,s),M=!1)}h=i,m=s,p=o}return v}}var Tl,xl,Sl,Hl=function(){var t,e,n,r=0,a=0,i=960,s=500;return n={stream:function(n){return t&&e===n?t:t=Dl(r,a,i,s)(e=n)},extent:function(o){return arguments.length?(r=+o[0][0],a=+o[0][1],i=+o[1][0],s=+o[1][1],t=e=null,n):[[r,a],[i,s]]}}},jl=nd(),Al={sphere:Sd,point:Sd,lineStart:function(){Al.point=El,Al.lineEnd=Pl},lineEnd:Sd,polygonStart:Sd,polygonEnd:Sd};function Pl(){Al.point=Al.lineEnd=Sd}function El(t,e){Tl=t*=_d,xl=Yd(e*=_d),Sl=yd(e),Al.point=Ol}function Ol(t,e){t*=_d;var n=Yd(e*=_d),r=yd(e),a=hd(t-Tl),i=yd(a),s=r*Yd(a),o=Sl*n-xl*r*i,u=xl*n+Sl*r*i;jl.add(pd(wd(s*s+o*o),u)),Tl=t,xl=n,Sl=r}var Nl=function(t){return jl.reset(),Cd(t,Al),+jl},Wl=[null,null],zl={type:"LineString",coordinates:Wl},Fl=function(t,e){return Wl[0]=t,Wl[1]=e,Nl(zl)},Cl={Feature:function(t,e){return Ul(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,a=n.length;++r<a;)if(Ul(n[r].geometry,e))return!0;return!1}},Rl={Sphere:function(){return!0},Point:function(t,e){return Il(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(Il(n[r],e))return!0;return!1},LineString:function(t,e){return Jl(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(Jl(n[r],e))return!0;return!1},Polygon:function(t,e){return ql(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(ql(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,a=n.length;++r<a;)if(Ul(n[r],e))return!0;return!1}};function Ul(t,e){return!(!t||!Rl.hasOwnProperty(t.type))&&Rl[t.type](t,e)}function Il(t,e){return 0===Fl(t,e)}function Jl(t,e){for(var n,r,a,i=0,s=t.length;i<s;i++){if(0===(r=Fl(t[i],e)))return!0;if(i>0&&(a=Fl(t[i],t[i-1]))>0&&n<=a&&r<=a&&(n+r-a)*(1-Math.pow((n-r)/a,2))<od*a)return!0;n=r}return!1}function ql(t,e){return!!yl(t.map(Gl),Bl(e))}function Gl(t){return(t=t.map(Bl)).pop(),t}function Bl(t){return[t[0]*_d,t[1]*_d]}var Vl=function(t,e){return(t&&Cl.hasOwnProperty(t.type)?Cl[t.type]:Ul)(t,e)};function $l(t,e,n){var r=Y(t,e-sd,n).concat(e);return function(t){return r.map((function(e){return[t,e]}))}}function Zl(t,e,n){var r=Y(t,e-sd,n).concat(e);return function(t){return r.map((function(e){return[e,t]}))}}function Kl(){var t,e,n,r,a,i,s,o,u,d,c,l,f=10,_=f,h=90,m=360,p=2.5;function y(){return{type:"MultiLineString",coordinates:M()}}function M(){return Y(Md(r/h)*h,n,h).map(c).concat(Y(Md(o/m)*m,s,m).map(l)).concat(Y(Md(e/f)*f,t,f).filter((function(t){return hd(t%h)>sd})).map(u)).concat(Y(Md(i/_)*_,a,_).filter((function(t){return hd(t%m)>sd})).map(d))}return y.lines=function(){return M().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[c(r).concat(l(s).slice(1),c(n).reverse().slice(1),l(o).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],o=+t[0][1],s=+t[1][1],r>n&&(t=r,r=n,n=t),o>s&&(t=o,o=s,s=t),y.precision(p)):[[r,o],[n,s]]},y.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],i=+n[0][1],a=+n[1][1],e>t&&(n=e,e=t,t=n),i>a&&(n=i,i=a,a=n),y.precision(p)):[[e,i],[t,a]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(h=+t[0],m=+t[1],y):[h,m]},y.stepMinor=function(t){return arguments.length?(f=+t[0],_=+t[1],y):[f,_]},y.precision=function(f){return arguments.length?(p=+f,u=$l(i,a,90),d=Zl(e,t,p),c=$l(o,s,90),l=Zl(r,n,p),y):p},y.extentMajor([[-180,-90+sd],[180,90-sd]]).extentMinor([[-180,-80-sd],[180,80+sd]])}function Xl(){return Kl()()}var Ql,tf,ef,nf,rf=function(t,e){var n=t[0]*_d,r=t[1]*_d,a=e[0]*_d,i=e[1]*_d,s=yd(r),o=Yd(r),u=yd(i),d=Yd(i),c=s*yd(n),l=s*Yd(n),f=u*yd(a),_=u*Yd(a),h=2*Td(wd(xd(i-r)+s*u*xd(a-n))),m=Yd(h),p=h?function(t){var e=Yd(t*=h)/m,n=Yd(h-t)/m,r=n*c+e*f,a=n*l+e*_,i=n*o+e*d;return[pd(a,r)*fd,pd(i,wd(r*r+a*a))*fd]}:function(){return[n*fd,r*fd]};return p.distance=h,p},af=function(t){return t},sf=nd(),of=nd(),uf={point:Sd,lineStart:Sd,lineEnd:Sd,polygonStart:function(){uf.lineStart=df,uf.lineEnd=ff},polygonEnd:function(){uf.lineStart=uf.lineEnd=uf.point=Sd,sf.add(hd(of)),of.reset()},result:function(){var t=sf/2;return sf.reset(),t}};function df(){uf.point=cf}function cf(t,e){uf.point=lf,Ql=ef=t,tf=nf=e}function lf(t,e){of.add(nf*t-ef*e),ef=t,nf=e}function ff(){lf(Ql,tf)}var _f=uf,hf=1/0,mf=hf,pf=-hf,yf=pf;var Mf,gf,Lf,vf,Yf={point:function(t,e){t<hf&&(hf=t);t>pf&&(pf=t);e<mf&&(mf=e);e>yf&&(yf=e)},lineStart:Sd,lineEnd:Sd,polygonStart:Sd,polygonEnd:Sd,result:function(){var t=[[hf,mf],[pf,yf]];return pf=yf=-(mf=hf=1/0),t}},bf=0,wf=0,kf=0,Df=0,Tf=0,xf=0,Sf=0,Hf=0,jf=0,Af={point:Pf,lineStart:Ef,lineEnd:Wf,polygonStart:function(){Af.lineStart=zf,Af.lineEnd=Ff},polygonEnd:function(){Af.point=Pf,Af.lineStart=Ef,Af.lineEnd=Wf},result:function(){var t=jf?[Sf/jf,Hf/jf]:xf?[Df/xf,Tf/xf]:kf?[bf/kf,wf/kf]:[NaN,NaN];return bf=wf=kf=Df=Tf=xf=Sf=Hf=jf=0,t}};function Pf(t,e){bf+=t,wf+=e,++kf}function Ef(){Af.point=Of}function Of(t,e){Af.point=Nf,Pf(Lf=t,vf=e)}function Nf(t,e){var n=t-Lf,r=e-vf,a=wd(n*n+r*r);Df+=a*(Lf+t)/2,Tf+=a*(vf+e)/2,xf+=a,Pf(Lf=t,vf=e)}function Wf(){Af.point=Pf}function zf(){Af.point=Cf}function Ff(){Rf(Mf,gf)}function Cf(t,e){Af.point=Rf,Pf(Mf=Lf=t,gf=vf=e)}function Rf(t,e){var n=t-Lf,r=e-vf,a=wd(n*n+r*r);Df+=a*(Lf+t)/2,Tf+=a*(vf+e)/2,xf+=a,Sf+=(a=vf*t-Lf*e)*(Lf+t),Hf+=a*(vf+e),jf+=3*a,Pf(Lf=t,vf=e)}var Uf=Af;function If(t){this._context=t}If.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,ld)}},result:Sd};var Jf,qf,Gf,Bf,Vf,$f=nd(),Zf={point:Sd,lineStart:function(){Zf.point=Kf},lineEnd:function(){Jf&&Xf(qf,Gf),Zf.point=Sd},polygonStart:function(){Jf=!0},polygonEnd:function(){Jf=null},result:function(){var t=+$f;return $f.reset(),t}};function Kf(t,e){Zf.point=Xf,qf=Bf=t,Gf=Vf=e}function Xf(t,e){Bf-=t,Vf-=e,$f.add(wd(Bf*Bf+Vf*Vf)),Bf=t,Vf=e}var Qf=Zf;function t_(){this._string=[]}function e_(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}t_.prototype={_radius:4.5,_circle:e_(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=e_(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var n_=function(t,e){var n,r,a=4.5;function i(t){return t&&("function"==typeof a&&r.pointRadius(+a.apply(this,arguments)),Cd(t,n(r))),r.result()}return i.area=function(t){return Cd(t,n(_f)),_f.result()},i.measure=function(t){return Cd(t,n(Qf)),Qf.result()},i.bounds=function(t){return Cd(t,n(Yf)),Yf.result()},i.centroid=function(t){return Cd(t,n(Uf)),Uf.result()},i.projection=function(e){return arguments.length?(n=null==e?(t=null,af):(t=e).stream,i):t},i.context=function(t){return arguments.length?(r=null==t?(e=null,new t_):new If(e=t),"function"!=typeof a&&r.pointRadius(a),i):e},i.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(r.pointRadius(+t),+t),i):a},i.projection(t).context(e)},r_=function(t){return{stream:a_(t)}};function a_(t){return function(e){var n=new i_;for(var r in t)n[r]=t[r];return n.stream=e,n}}function i_(){}function s_(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Cd(n,t.stream(Yf)),e(Yf.result()),null!=r&&t.clipExtent(r),t}function o_(t,e,n){return s_(t,(function(n){var r=e[1][0]-e[0][0],a=e[1][1]-e[0][1],i=Math.min(r/(n[1][0]-n[0][0]),a/(n[1][1]-n[0][1])),s=+e[0][0]+(r-i*(n[1][0]+n[0][0]))/2,o=+e[0][1]+(a-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([s,o])}),n)}function u_(t,e,n){return o_(t,[[0,0],e],n)}function d_(t,e,n){return s_(t,(function(n){var r=+e,a=r/(n[1][0]-n[0][0]),i=(r-a*(n[1][0]+n[0][0]))/2,s=-a*n[0][1];t.scale(150*a).translate([i,s])}),n)}function c_(t,e,n){return s_(t,(function(n){var r=+e,a=r/(n[1][1]-n[0][1]),i=-a*n[0][0],s=(r-a*(n[1][1]+n[0][1]))/2;t.scale(150*a).translate([i,s])}),n)}i_.prototype={constructor:i_,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var l_=16,f_=yd(30*_d),__=function(t,e){return+e?function(t,e){function n(r,a,i,s,o,u,d,c,l,f,_,h,m,p){var y=d-r,M=c-a,g=y*y+M*M;if(g>4*e&&m--){var L=s+f,v=o+_,Y=u+h,b=wd(L*L+v*v+Y*Y),w=Td(Y/=b),k=hd(hd(Y)-1)<sd||hd(i-l)<sd?(i+l)/2:pd(v,L),D=t(k,w),T=D[0],x=D[1],S=T-r,H=x-a,j=M*S-y*H;(j*j/g>e||hd((y*S+M*H)/g-.5)>.3||s*f+o*_+u*h<f_)&&(n(r,a,i,s,o,u,T,x,k,L/=b,v/=b,Y,m,p),p.point(T,x),n(T,x,k,L,v,Y,d,c,l,f,_,h,m,p))}}return function(e){var r,a,i,s,o,u,d,c,l,f,_,h,m={point:p,lineStart:y,lineEnd:g,polygonStart:function(){e.polygonStart(),m.lineStart=L},polygonEnd:function(){e.polygonEnd(),m.lineStart=y}};function p(n,r){n=t(n,r),e.point(n[0],n[1])}function y(){c=NaN,m.point=M,e.lineStart()}function M(r,a){var i=Zd([r,a]),s=t(r,a);n(c,l,d,f,_,h,c=s[0],l=s[1],d=r,f=i[0],_=i[1],h=i[2],l_,e),e.point(c,l)}function g(){m.point=p,e.lineEnd()}function L(){y(),m.point=v,m.lineEnd=Y}function v(t,e){M(r=t,e),a=c,i=l,s=f,o=_,u=h,m.point=M}function Y(){n(c,l,d,f,_,h,a,i,r,s,o,u,l_,e),m.lineEnd=g,g()}return m}}(t,e):function(t){return a_({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)};var h_=a_({point:function(t,e){this.stream.point(t*_d,e*_d)}});function m_(t,e,n){function r(r,a){return[e+t*r,n-t*a]}return r.invert=function(r,a){return[(r-e)/t,(n-a)/t]},r}function p_(t,e,n,r){var a=yd(r),i=Yd(r),s=a*t,o=i*t,u=a/t,d=i/t,c=(i*n-a*e)/t,l=(i*e+a*n)/t;function f(t,r){return[s*t-o*r+e,n-o*t-s*r]}return f.invert=function(t,e){return[u*t-d*e+c,l-d*t-u*e]},f}function y_(t){return M_((function(){return t}))()}function M_(t){var e,n,r,a,i,s,o,u,d,c,l=150,f=480,_=250,h=0,m=0,p=0,y=0,M=0,g=0,L=null,v=vl,Y=null,b=af,w=.5;function k(t){return u(t[0]*_d,t[1]*_d)}function D(t){return(t=u.invert(t[0],t[1]))&&[t[0]*fd,t[1]*fd]}function T(){var t=p_(l,0,0,g).apply(null,e(h,m)),r=(g?p_:m_)(l,f-t[0],_-t[1],g);return n=nl(p,y,M),o=tl(e,r),u=tl(n,o),s=__(o,w),x()}function x(){return d=c=null,k}return k.stream=function(t){return d&&c===t?d:d=h_(function(t){return a_({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(v(s(b(c=t)))))},k.preclip=function(t){return arguments.length?(v=t,L=void 0,x()):v},k.postclip=function(t){return arguments.length?(b=t,Y=r=a=i=null,x()):b},k.clipAngle=function(t){return arguments.length?(v=+t?Yl(L=t*_d):(L=null,vl),x()):L*fd},k.clipExtent=function(t){return arguments.length?(b=null==t?(Y=r=a=i=null,af):Dl(Y=+t[0][0],r=+t[0][1],a=+t[1][0],i=+t[1][1]),x()):null==Y?null:[[Y,r],[a,i]]},k.scale=function(t){return arguments.length?(l=+t,T()):l},k.translate=function(t){return arguments.length?(f=+t[0],_=+t[1],T()):[f,_]},k.center=function(t){return arguments.length?(h=t[0]%360*_d,m=t[1]%360*_d,T()):[h*fd,m*fd]},k.rotate=function(t){return arguments.length?(p=t[0]%360*_d,y=t[1]%360*_d,M=t.length>2?t[2]%360*_d:0,T()):[p*fd,y*fd,M*fd]},k.angle=function(t){return arguments.length?(g=t%360*_d,T()):g*fd},k.precision=function(t){return arguments.length?(s=__(o,w=t*t),x()):wd(w)},k.fitExtent=function(t,e){return o_(k,t,e)},k.fitSize=function(t,e){return u_(k,t,e)},k.fitWidth=function(t,e){return d_(k,t,e)},k.fitHeight=function(t,e){return c_(k,t,e)},function(){return e=t.apply(this,arguments),k.invert=e.invert&&D,T()}}function g_(t){var e=0,n=ud/3,r=M_(t),a=r(e,n);return a.parallels=function(t){return arguments.length?r(e=t[0]*_d,n=t[1]*_d):[e*fd,n*fd]},a}function L_(t,e){var n=Yd(t),r=(n+Yd(e))/2;if(hd(r)<sd)return function(t){var e=yd(t);function n(t,n){return[t*e,Yd(n)/e]}return n.invert=function(t,n){return[t/e,Td(n*e)]},n}(t);var a=1+n*(2*r-n),i=wd(a)/r;function s(t,e){var n=wd(a-2*r*Yd(e))/r;return[n*Yd(t*=r),i-n*yd(t)]}return s.invert=function(t,e){var n=i-e;return[pd(t,hd(n))/r*bd(n),Td((a-(t*t+n*n)*r*r)/(2*r))]},s}var v_=function(){return g_(L_).scale(155.424).center([0,33.6442])},Y_=function(){return v_().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var b_=function(){var t,e,n,r,a,i,s=Y_(),o=v_().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=v_().rotate([157,0]).center([-3,19.9]).parallels([8,18]),d={point:function(t,e){i=[t,e]}};function c(t){var e=t[0],s=t[1];return i=null,n.point(e,s),i||(r.point(e,s),i)||(a.point(e,s),i)}function l(){return t=e=null,c}return c.invert=function(t){var e=s.scale(),n=s.translate(),r=(t[0]-n[0])/e,a=(t[1]-n[1])/e;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?o:a>=.166&&a<.234&&r>=-.214&&r<-.115?u:s).invert(t)},c.stream=function(n){return t&&e===n?t:(r=[s.stream(e=n),o.stream(n),u.stream(n)],a=r.length,t={point:function(t,e){for(var n=-1;++n<a;)r[n].point(t,e)},sphere:function(){for(var t=-1;++t<a;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<a;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<a;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<a;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<a;)r[t].polygonEnd()}});var r,a},c.precision=function(t){return arguments.length?(s.precision(t),o.precision(t),u.precision(t),l()):s.precision()},c.scale=function(t){return arguments.length?(s.scale(t),o.scale(.35*t),u.scale(t),c.translate(s.translate())):s.scale()},c.translate=function(t){if(!arguments.length)return s.translate();var e=s.scale(),i=+t[0],c=+t[1];return n=s.translate(t).clipExtent([[i-.455*e,c-.238*e],[i+.455*e,c+.238*e]]).stream(d),r=o.translate([i-.307*e,c+.201*e]).clipExtent([[i-.425*e+sd,c+.12*e+sd],[i-.214*e-sd,c+.234*e-sd]]).stream(d),a=u.translate([i-.205*e,c+.212*e]).clipExtent([[i-.214*e+sd,c+.166*e+sd],[i-.115*e-sd,c+.234*e-sd]]).stream(d),l()},c.fitExtent=function(t,e){return o_(c,t,e)},c.fitSize=function(t,e){return u_(c,t,e)},c.fitWidth=function(t,e){return d_(c,t,e)},c.fitHeight=function(t,e){return c_(c,t,e)},c.scale(1070)};function w_(t){return function(e,n){var r=yd(e),a=yd(n),i=t(r*a);return[i*a*Yd(e),i*Yd(n)]}}function k_(t){return function(e,n){var r=wd(e*e+n*n),a=t(r),i=Yd(a),s=yd(a);return[pd(e*i,r*s),Td(r&&n*i/r)]}}var D_=w_((function(t){return wd(2/(1+t))}));D_.invert=k_((function(t){return 2*Td(t/2)}));var T_=function(){return y_(D_).scale(124.75).clipAngle(179.999)},x_=w_((function(t){return(t=Dd(t))&&t/Yd(t)}));x_.invert=k_((function(t){return t}));var S_=function(){return y_(x_).scale(79.4188).clipAngle(179.999)};function H_(t,e){return[t,Ld(kd((dd+e)/2))]}H_.invert=function(t,e){return[t,2*md(gd(e))-dd]};var j_=function(){return A_(H_).scale(961/ld)};function A_(t){var e,n,r,a=y_(t),i=a.center,s=a.scale,o=a.translate,u=a.clipExtent,d=null;function c(){var i=ud*s(),o=a(sl(a.rotate()).invert([0,0]));return u(null==d?[[o[0]-i,o[1]-i],[o[0]+i,o[1]+i]]:t===H_?[[Math.max(o[0]-i,d),e],[Math.min(o[0]+i,n),r]]:[[d,Math.max(o[1]-i,e)],[n,Math.min(o[1]+i,r)]])}return a.scale=function(t){return arguments.length?(s(t),c()):s()},a.translate=function(t){return arguments.length?(o(t),c()):o()},a.center=function(t){return arguments.length?(i(t),c()):i()},a.clipExtent=function(t){return arguments.length?(null==t?d=e=n=r=null:(d=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),c()):null==d?null:[[d,e],[n,r]]},c()}function P_(t){return kd((dd+t)/2)}function E_(t,e){var n=yd(t),r=t===e?Yd(t):Ld(n/yd(e))/Ld(P_(e)/P_(t)),a=n*vd(P_(t),r)/r;if(!r)return H_;function i(t,e){a>0?e<-dd+sd&&(e=-dd+sd):e>dd-sd&&(e=dd-sd);var n=a/vd(P_(e),r);return[n*Yd(r*t),a-n*yd(r*t)]}return i.invert=function(t,e){var n=a-e,i=bd(r)*wd(t*t+n*n);return[pd(t,hd(n))/r*bd(n),2*md(vd(a/i,1/r))-dd]},i}var O_=function(){return g_(E_).scale(109.5).parallels([30,30])};function N_(t,e){return[t,e]}N_.invert=N_;var W_=function(){return y_(N_).scale(152.63)};function z_(t,e){var n=yd(t),r=t===e?Yd(t):(n-yd(e))/(e-t),a=n/r+t;if(hd(r)<sd)return N_;function i(t,e){var n=a-e,i=r*t;return[n*Yd(i),a-n*yd(i)]}return i.invert=function(t,e){var n=a-e;return[pd(t,hd(n))/r*bd(n),a-bd(r)*wd(t*t+n*n)]},i}var F_=function(){return g_(z_).scale(131.154).center([0,13.9389])},C_=1.340264,R_=-.081106,U_=893e-6,I_=.003796,J_=wd(3)/2;function q_(t,e){var n=Td(J_*Yd(e)),r=n*n,a=r*r*r;return[t*yd(n)/(J_*(C_+3*R_*r+a*(7*U_+9*I_*r))),n*(C_+R_*r+a*(U_+I_*r))]}q_.invert=function(t,e){for(var n,r=e,a=r*r,i=a*a*a,s=0;s<12&&(i=(a=(r-=n=(r*(C_+R_*a+i*(U_+I_*a))-e)/(C_+3*R_*a+i*(7*U_+9*I_*a)))*r)*a*a,!(hd(n)<od));++s);return[J_*t*(C_+3*R_*a+i*(7*U_+9*I_*a))/yd(r),Td(Yd(r)/J_)]};var G_=function(){return y_(q_).scale(177.158)};function B_(t,e){var n=yd(e),r=yd(t)*n;return[n*Yd(t)/r,Yd(e)/r]}B_.invert=k_(md);var V_=function(){return y_(B_).scale(144.049).clipAngle(60)};function $_(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?af:a_({point:function(a,i){this.stream.point(a*t+n,i*e+r)}})}var Z_=function(){var t,e,n,r,a,i,s=1,o=0,u=0,d=1,c=1,l=af,f=null,_=af;function h(){return r=a=null,i}return i={stream:function(t){return r&&a===t?r:r=l(_(a=t))},postclip:function(r){return arguments.length?(_=r,f=t=e=n=null,h()):_},clipExtent:function(r){return arguments.length?(_=null==r?(f=t=e=n=null,af):Dl(f=+r[0][0],t=+r[0][1],e=+r[1][0],n=+r[1][1]),h()):null==f?null:[[f,t],[e,n]]},scale:function(t){return arguments.length?(l=$_((s=+t)*d,s*c,o,u),h()):s},translate:function(t){return arguments.length?(l=$_(s*d,s*c,o=+t[0],u=+t[1]),h()):[o,u]},reflectX:function(t){return arguments.length?(l=$_(s*(d=t?-1:1),s*c,o,u),h()):d<0},reflectY:function(t){return arguments.length?(l=$_(s*d,s*(c=t?-1:1),o,u),h()):c<0},fitExtent:function(t,e){return o_(i,t,e)},fitSize:function(t,e){return u_(i,t,e)},fitWidth:function(t,e){return d_(i,t,e)},fitHeight:function(t,e){return c_(i,t,e)}}};function K_(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}K_.invert=function(t,e){var n,r=e,a=25;do{var i=r*r,s=i*i;r-=n=(r*(1.007226+i*(.015085+s*(.028874*i-.044475-.005916*s)))-e)/(1.007226+i*(.045255+s*(.259866*i-.311325-.005916*11*s)))}while(hd(n)>sd&&--a>0);return[t/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};var X_=function(){return y_(K_).scale(175.295)};function Q_(t,e){return[yd(e)*Yd(t),Yd(e)]}Q_.invert=k_(Td);var th=function(){return y_(Q_).scale(249.5).clipAngle(90+sd)};function eh(t,e){var n=yd(e),r=1+yd(t)*n;return[n*Yd(t)/r,Yd(e)/r]}eh.invert=k_((function(t){return 2*md(t)}));var nh=function(){return y_(eh).scale(250).clipAngle(142)};function rh(t,e){return[Ld(kd((dd+e)/2)),-t]}rh.invert=function(t,e){return[-e,2*md(gd(t))-dd]};var ah=function(){var t=A_(rh),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)};function ih(t,e){return t.parent===e.parent?1:2}function sh(t,e){return t+e.x}function oh(t,e){return Math.max(t,e.y)}var uh=function(){var t=ih,e=1,n=1,r=!1;function a(a){var i,s=0;a.eachAfter((function(e){var n=e.children;n?(e.x=function(t){return t.reduce(sh,0)/t.length}(n),e.y=function(t){return 1+t.reduce(oh,0)}(n)):(e.x=i?s+=t(e,i):0,e.y=0,i=e)}));var o=function(t){for(var e;e=t.children;)t=e[0];return t}(a),u=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(a),d=o.x-t(o,u)/2,c=u.x+t(u,o)/2;return a.eachAfter(r?function(t){t.x=(t.x-a.x)*e,t.y=(a.y-t.y)*n}:function(t){t.x=(t.x-d)/(c-d)*e,t.y=(1-(a.y?t.y/a.y:1))*n})}return a.separation=function(e){return arguments.length?(t=e,a):t},a.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],a):r?null:[e,n]},a.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],a):r?[e,n]:null},a};function dh(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ch(t,e){var n,r,a,i,s,o=new hh(t),u=+t.value&&(o.value=t.value),d=[o];for(null==e&&(e=lh);n=d.pop();)if(u&&(n.value=+n.data.value),(a=e(n.data))&&(s=a.length))for(n.children=new Array(s),i=s-1;i>=0;--i)d.push(r=n.children[i]=new hh(a[i])),r.parent=n,r.depth=n.depth+1;return o.eachBefore(_h)}function lh(t){return t.children}function fh(t){t.data=t.data.data}function _h(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function hh(t){this.data=t,this.depth=this.height=0,this.parent=null}hh.prototype=ch.prototype={constructor:hh,count:function(){return this.eachAfter(dh)},each:function(t){var e,n,r,a,i=this,s=[i];do{for(e=s.reverse(),s=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)s.push(n[r])}while(s.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],s=[];a=i.pop();)if(s.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=s.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;t=n.pop(),e=r.pop();for(;t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ch(this).eachBefore(fh)}};var mh=Array.prototype.slice;var ph=function(t){for(var e,n,r=0,a=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(mh.call(t))).length,i=[];r<a;)e=t[r],n&&gh(n,e)?++r:(n=vh(i=yh(i,e)),r=0);return n};function yh(t,e){var n,r;if(Lh(e,t))return[e];for(n=0;n<t.length;++n)if(Mh(e,t[n])&&Lh(Yh(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(Mh(Yh(t[n],t[r]),e)&&Mh(Yh(t[n],e),t[r])&&Mh(Yh(t[r],e),t[n])&&Lh(bh(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function Mh(t,e){var n=t.r-e.r,r=e.x-t.x,a=e.y-t.y;return n<0||n*n<r*r+a*a}function gh(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,a=e.y-t.y;return n>0&&n*n>r*r+a*a}function Lh(t,e){for(var n=0;n<e.length;++n)if(!gh(t,e[n]))return!1;return!0}function vh(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return Yh(t[0],t[1]);case 3:return bh(t[0],t[1],t[2])}var e}function Yh(t,e){var n=t.x,r=t.y,a=t.r,i=e.x,s=e.y,o=e.r,u=i-n,d=s-r,c=o-a,l=Math.sqrt(u*u+d*d);return{x:(n+i+u/l*c)/2,y:(r+s+d/l*c)/2,r:(l+a+o)/2}}function bh(t,e,n){var r=t.x,a=t.y,i=t.r,s=e.x,o=e.y,u=e.r,d=n.x,c=n.y,l=n.r,f=r-s,_=r-d,h=a-o,m=a-c,p=u-i,y=l-i,M=r*r+a*a-i*i,g=M-s*s-o*o+u*u,L=M-d*d-c*c+l*l,v=_*h-f*m,Y=(h*L-m*g)/(2*v)-r,b=(m*p-h*y)/v,w=(_*g-f*L)/(2*v)-a,k=(f*y-_*p)/v,D=b*b+k*k-1,T=2*(i+Y*b+w*k),x=Y*Y+w*w-i*i,S=-(D?(T+Math.sqrt(T*T-4*D*x))/(2*D):x/T);return{x:r+Y+b*S,y:a+w+k*S,r:S}}function wh(t,e,n){var r,a,i,s,o=t.x-e.x,u=t.y-e.y,d=o*o+u*u;d?(a=e.r+n.r,a*=a,s=t.r+n.r,a>(s*=s)?(r=(d+s-a)/(2*d),i=Math.sqrt(Math.max(0,s/d-r*r)),n.x=t.x-r*o-i*u,n.y=t.y-r*u+i*o):(r=(d+a-s)/(2*d),i=Math.sqrt(Math.max(0,a/d-r*r)),n.x=e.x+r*o-i*u,n.y=e.y+r*u+i*o)):(n.x=e.x+n.r,n.y=e.y)}function kh(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,a=e.y-t.y;return n>0&&n*n>r*r+a*a}function Dh(t){var e=t._,n=t.next._,r=e.r+n.r,a=(e.x*n.r+n.x*e.r)/r,i=(e.y*n.r+n.y*e.r)/r;return a*a+i*i}function Th(t){this._=t,this.next=null,this.previous=null}function xh(t){if(!(a=t.length))return 0;var e,n,r,a,i,s,o,u,d,c,l;if((e=t[0]).x=0,e.y=0,!(a>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(a>2))return e.r+n.r;wh(n,e,r=t[2]),e=new Th(e),n=new Th(n),r=new Th(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(o=3;o<a;++o){wh(e._,n._,r=t[o]),r=new Th(r),u=n.next,d=e.previous,c=n._.r,l=e._.r;do{if(c<=l){if(kh(u._,r._)){n=u,e.next=n,n.previous=e,--o;continue t}c+=u._.r,u=u.next}else{if(kh(d._,r._)){(e=d).next=n,n.previous=e,--o;continue t}l+=d._.r,d=d.previous}}while(u!==d.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,i=Dh(e);(r=r.next)!==n;)(s=Dh(r))<i&&(e=r,i=s);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=ph(e),o=0;o<a;++o)(e=t[o]).x-=r.x,e.y-=r.y;return r.r}var Sh=function(t){return xh(t),t};function Hh(t){return null==t?null:jh(t)}function jh(t){if("function"!=typeof t)throw new Error;return t}function Ah(){return 0}var Ph=function(t){return function(){return t}};function Eh(t){return Math.sqrt(t.value)}var Oh=function(){var t=null,e=1,n=1,r=Ah;function a(a){return a.x=e/2,a.y=n/2,t?a.eachBefore(Nh(t)).eachAfter(Wh(r,.5)).eachBefore(zh(1)):a.eachBefore(Nh(Eh)).eachAfter(Wh(Ah,1)).eachAfter(Wh(r,a.r/Math.min(e,n))).eachBefore(zh(Math.min(e,n)/(2*a.r))),a}return a.radius=function(e){return arguments.length?(t=Hh(e),a):t},a.size=function(t){return arguments.length?(e=+t[0],n=+t[1],a):[e,n]},a.padding=function(t){return arguments.length?(r="function"==typeof t?t:Ph(+t),a):r},a};function Nh(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Wh(t,e){return function(n){if(r=n.children){var r,a,i,s=r.length,o=t(n)*e||0;if(o)for(a=0;a<s;++a)r[a].r+=o;if(i=xh(r),o)for(a=0;a<s;++a)r[a].r-=o;n.r=i+o}}}function zh(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Fh=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Ch=function(t,e,n,r,a){for(var i,s=t.children,o=-1,u=s.length,d=t.value&&(r-e)/t.value;++o<u;)(i=s[o]).y0=n,i.y1=a,i.x0=e,i.x1=e+=i.value*d},Rh=function(){var t=1,e=1,n=0,r=!1;function a(a){var i=a.height+1;return a.x0=a.y0=n,a.x1=t,a.y1=e/i,a.eachBefore(function(t,e){return function(r){r.children&&Ch(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var a=r.x0,i=r.y0,s=r.x1-n,o=r.y1-n;s<a&&(a=s=(a+s)/2),o<i&&(i=o=(i+o)/2),r.x0=a,r.y0=i,r.x1=s,r.y1=o}}(e,i)),r&&a.eachBefore(Fh),a}return a.round=function(t){return arguments.length?(r=!!t,a):r},a.size=function(n){return arguments.length?(t=+n[0],e=+n[1],a):[t,e]},a.padding=function(t){return arguments.length?(n=+t,a):n},a},Uh="$",Ih={depth:-1},Jh={};function qh(t){return t.id}function Gh(t){return t.parentId}var Bh=function(){var t=qh,e=Gh;function n(n){var r,a,i,s,o,u,d,c=n.length,l=new Array(c),f={};for(a=0;a<c;++a)r=n[a],o=l[a]=new hh(r),null!=(u=t(r,a,n))&&(u+="")&&(f[d=Uh+(o.id=u)]=d in f?Jh:o);for(a=0;a<c;++a)if(o=l[a],null!=(u=e(n[a],a,n))&&(u+="")){if(!(s=f[Uh+u]))throw new Error("missing: "+u);if(s===Jh)throw new Error("ambiguous: "+u);s.children?s.children.push(o):s.children=[o],o.parent=s}else{if(i)throw new Error("multiple roots");i=o}if(!i)throw new Error("no root");if(i.parent=Ih,i.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(_h),i.parent=null,c>0)throw new Error("cycle");return i}return n.id=function(e){return arguments.length?(t=jh(e),n):t},n.parentId=function(t){return arguments.length?(e=jh(t),n):e},n};function Vh(t,e){return t.parent===e.parent?1:2}function $h(t){var e=t.children;return e?e[0]:t.t}function Zh(t){var e=t.children;return e?e[e.length-1]:t.t}function Kh(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Xh(t,e,n){return t.a.parent===e.parent?t.a:n}function Qh(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Qh.prototype=Object.create(hh.prototype);var tm=function(){var t=Vh,e=1,n=1,r=null;function a(a){var u=function(t){for(var e,n,r,a,i,s=new Qh(t,0),o=[s];e=o.pop();)if(r=e._.children)for(e.children=new Array(i=r.length),a=i-1;a>=0;--a)o.push(n=e.children[a]=new Qh(r[a],a)),n.parent=e;return(s.parent=new Qh(null,0)).children=[s],s}(a);if(u.eachAfter(i),u.parent.m=-u.z,u.eachBefore(s),r)a.eachBefore(o);else{var d=a,c=a,l=a;a.eachBefore((function(t){t.x<d.x&&(d=t),t.x>c.x&&(c=t),t.depth>l.depth&&(l=t)}));var f=d===c?1:t(d,c)/2,_=f-d.x,h=e/(c.x+f+_),m=n/(l.depth||1);a.eachBefore((function(t){t.x=(t.x+_)*h,t.y=t.depth*m}))}return a}function i(e){var n=e.children,r=e.parent.children,a=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,a=t.children,i=a.length;--i>=0;)(e=a[i]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var i=(n[0].z+n[n.length-1].z)/2;a?(e.z=a.z+t(e._,a._),e.m=e.z-i):e.z=i}else a&&(e.z=a.z+t(e._,a._));e.parent.A=function(e,n,r){if(n){for(var a,i=e,s=e,o=n,u=i.parent.children[0],d=i.m,c=s.m,l=o.m,f=u.m;o=Zh(o),i=$h(i),o&&i;)u=$h(u),(s=Zh(s)).a=e,(a=o.z+l-i.z-d+t(o._,i._))>0&&(Kh(Xh(o,e,r),e,a),d+=a,c+=a),l+=o.m,d+=i.m,f+=u.m,c+=s.m;o&&!Zh(s)&&(s.t=o,s.m+=l-c),i&&!$h(u)&&(u.t=i,u.m+=d-f,r=e)}return r}(e,a,e.parent.A||r[0])}function s(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function o(t){t.x*=e,t.y=t.depth*n}return a.separation=function(e){return arguments.length?(t=e,a):t},a.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],a):r?null:[e,n]},a.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],a):r?[e,n]:null},a},em=function(t,e,n,r,a){for(var i,s=t.children,o=-1,u=s.length,d=t.value&&(a-n)/t.value;++o<u;)(i=s[o]).x0=e,i.x1=r,i.y0=n,i.y1=n+=i.value*d},nm=(1+Math.sqrt(5))/2;function rm(t,e,n,r,a,i){for(var s,o,u,d,c,l,f,_,h,m,p,y=[],M=e.children,g=0,L=0,v=M.length,Y=e.value;g<v;){u=a-n,d=i-r;do{c=M[L++].value}while(!c&&L<v);for(l=f=c,p=c*c*(m=Math.max(d/u,u/d)/(Y*t)),h=Math.max(f/p,p/l);L<v;++L){if(c+=o=M[L].value,o<l&&(l=o),o>f&&(f=o),p=c*c*m,(_=Math.max(f/p,p/l))>h){c-=o;break}h=_}y.push(s={value:c,dice:u<d,children:M.slice(g,L)}),s.dice?Ch(s,n,r,a,Y?r+=d*c/Y:i):em(s,n,r,Y?n+=u*c/Y:a,i),Y-=c,g=L}return y}var am=function t(e){function n(t,n,r,a,i){rm(e,t,n,r,a,i)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(nm),im=function(){var t=am,e=!1,n=1,r=1,a=[0],i=Ah,s=Ah,o=Ah,u=Ah,d=Ah;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(l),a=[0],e&&t.eachBefore(Fh),t}function l(e){var n=a[e.depth],r=e.x0+n,c=e.y0+n,l=e.x1-n,f=e.y1-n;l<r&&(r=l=(r+l)/2),f<c&&(c=f=(c+f)/2),e.x0=r,e.y0=c,e.x1=l,e.y1=f,e.children&&(n=a[e.depth+1]=i(e)/2,r+=d(e)-n,c+=s(e)-n,(l-=o(e)-n)<r&&(r=l=(r+l)/2),(f-=u(e)-n)<c&&(c=f=(c+f)/2),t(e,r,c,l,f))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=jh(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(i="function"==typeof t?t:Ph(+t),c):i},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(s="function"==typeof t?t:Ph(+t),c):s},c.paddingRight=function(t){return arguments.length?(o="function"==typeof t?t:Ph(+t),c):o},c.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:Ph(+t),c):u},c.paddingLeft=function(t){return arguments.length?(d="function"==typeof t?t:Ph(+t),c):d},c},sm=function(t,e,n,r,a){var i,s,o=t.children,u=o.length,d=new Array(u+1);for(d[0]=s=i=0;i<u;++i)d[i+1]=s+=o[i].value;!function t(e,n,r,a,i,s,u){if(e>=n-1){var c=o[e];return c.x0=a,c.y0=i,c.x1=s,void(c.y1=u)}var l=d[e],f=r/2+l,_=e+1,h=n-1;for(;_<h;){var m=_+h>>>1;d[m]<f?_=m+1:h=m}f-d[_-1]<d[_]-f&&e+1<_&&--_;var p=d[_]-l,y=r-p;if(s-a>u-i){var M=(a*y+s*p)/r;t(e,_,p,a,i,M,u),t(_,n,y,M,i,s,u)}else{var g=(i*y+u*p)/r;t(e,_,p,a,i,s,g),t(_,n,y,a,g,s,u)}}(0,u,t.value,e,n,r,a)},om=function(t,e,n,r,a){(1&t.depth?em:Ch)(t,e,n,r,a)},um=function t(e){function n(t,n,r,a,i){if((s=t._squarify)&&s.ratio===e)for(var s,o,u,d,c,l=-1,f=s.length,_=t.value;++l<f;){for(u=(o=s[l]).children,d=o.value=0,c=u.length;d<c;++d)o.value+=u[d].value;o.dice?Ch(o,n,r,a,r+=(i-r)*o.value/_):em(o,n,r,n+=(a-n)*o.value/_,i),_-=o.value}else t._squarify=s=rm(e,t,n,r,a,i),s.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(nm),dm=function(t){for(var e,n=-1,r=t.length,a=t[r-1],i=0;++n<r;)e=a,a=t[n],i+=e[1]*a[0]-e[0]*a[1];return i/2},cm=function(t){for(var e,n,r=-1,a=t.length,i=0,s=0,o=t[a-1],u=0;++r<a;)e=o,o=t[r],u+=n=e[0]*o[1]-o[0]*e[1],i+=(e[0]+o[0])*n,s+=(e[1]+o[1])*n;return[i/(u*=3),s/u]},lm=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])};function fm(t,e){return t[0]-e[0]||t[1]-e[1]}function _m(t){for(var e=t.length,n=[0,1],r=2,a=2;a<e;++a){for(;r>1&&lm(t[n[r-2]],t[n[r-1]],t[a])<=0;)--r;n[r++]=a}return n.slice(0,r)}var hm=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),a=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(fm),e=0;e<n;++e)a[e]=[r[e][0],-r[e][1]];var i=_m(r),s=_m(a),o=s[0]===i[0],u=s[s.length-1]===i[i.length-1],d=[];for(e=i.length-1;e>=0;--e)d.push(t[r[i[e]][2]]);for(e=+o;e<s.length-u;++e)d.push(t[r[s[e]][2]]);return d},mm=function(t,e){for(var n,r,a=t.length,i=t[a-1],s=e[0],o=e[1],u=i[0],d=i[1],c=!1,l=0;l<a;++l)n=(i=t[l])[0],(r=i[1])>o!=d>o&&s<(u-n)*(o-r)/(d-r)+n&&(c=!c),u=n,d=r;return c},pm=function(t){for(var e,n,r=-1,a=t.length,i=t[a-1],s=i[0],o=i[1],u=0;++r<a;)e=s,n=o,e-=s=(i=t[r])[0],n-=o=i[1],u+=Math.sqrt(e*e+n*n);return u},ym=function(){return Math.random()},Mm=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ym),gm=function t(e){function n(t,n){var r,a;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,a=r*r+i*i}while(!a||a>1);return t+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=t,n}(ym),Lm=function t(e){function n(){var t=gm.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ym),vm=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ym),Ym=function t(e){function n(t){var n=vm.source(e)(t);return function(){return n()/t}}return n.source=t,n}(ym),bm=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ym);function wm(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function km(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var Dm=Array.prototype,Tm=Dm.map,xm=Dm.slice,Sm={name:"implicit"};function Hm(){var t=Vs(),e=[],n=[],r=Sm;function a(a){var i=a+"",s=t.get(i);if(!s){if(r!==Sm)return r;t.set(i,s=e.push(a))}return n[(s-1)%n.length]}return a.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Vs();for(var r,i,s=-1,o=n.length;++s<o;)t.has(i=(r=n[s])+"")||t.set(i,e.push(r));return a},a.range=function(t){return arguments.length?(n=xm.call(t),a):n.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return Hm(e,n).unknown(r)},wm.apply(a,arguments),a}function jm(){var t,e,n=Hm().unknown(void 0),r=n.domain,a=n.range,i=[0,1],s=!1,o=0,u=0,d=.5;function c(){var n=r().length,c=i[1]<i[0],l=i[c-0],f=i[1-c];t=(f-l)/Math.max(1,n-o+2*u),s&&(t=Math.floor(t)),l+=(f-l-t*(n-o))*d,e=t*(1-o),s&&(l=Math.round(l),e=Math.round(e));var _=Y(n).map((function(e){return l+t*e}));return a(c?_.reverse():_)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],c()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],s=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(s=!!t,c()):s},n.padding=function(t){return arguments.length?(o=Math.min(1,u=+t),c()):o},n.paddingInner=function(t){return arguments.length?(o=Math.min(1,t),c()):o},n.paddingOuter=function(t){return arguments.length?(u=+t,c()):u},n.align=function(t){return arguments.length?(d=Math.max(0,Math.min(1,t)),c()):d},n.copy=function(){return jm(r(),i).round(s).paddingInner(o).paddingOuter(u).align(d)},wm.apply(c(),arguments)}function Am(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(jm.apply(null,arguments).paddingInner(1))}var Pm=function(t){return function(){return t}},Em=function(t){return+t},Om=[0,1];function Nm(t){return t}function Wm(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Pm(isNaN(e)?NaN:.5)}function zm(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Fm(t,e,n){var r=t[0],a=t[1],i=e[0],s=e[1];return a<r?(r=Wm(a,r),i=n(s,i)):(r=Wm(r,a),i=n(i,s)),function(t){return i(r(t))}}function Cm(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)a[s]=Wm(t[s],t[s+1]),i[s]=n(e[s],e[s+1]);return function(e){var n=u(t,e,1,r)-1;return i[n](a[n](e))}}function Rm(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Um(){var t,e,n,r,a,i,s=Om,o=Om,u=Tr,d=Nm;function c(){return r=Math.min(s.length,o.length)>2?Cm:Fm,a=i=null,l}function l(e){return isNaN(e=+e)?n:(a||(a=r(s.map(t),o,u)))(t(d(e)))}return l.invert=function(n){return d(e((i||(i=r(o,s.map(t),Mr)))(n)))},l.domain=function(t){return arguments.length?(s=Tm.call(t,Em),d===Nm||(d=zm(s)),c()):s.slice()},l.range=function(t){return arguments.length?(o=xm.call(t),c()):o.slice()},l.rangeRound=function(t){return o=xm.call(t),u=Hr,c()},l.clamp=function(t){return arguments.length?(d=t?zm(s):Nm,l):d!==Nm},l.interpolate=function(t){return arguments.length?(u=t,c()):u},l.unknown=function(t){return arguments.length?(n=t,l):n},function(n,r){return t=n,e=r,c()}}function Im(t,e){return Um()(t,e)}var Jm=function(t,e,n,r){var a,i=x(t,e,n);switch((r=Fu(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=td(i,s))||(r.precision=a),Ju(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=ed(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=Qu(i))||(r.precision=a-2*("%"===r.type))}return Iu(r)};function qm(t){var e=t.domain;return t.ticks=function(t){var n=e();return D(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Jm(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,s=a.length-1,o=a[i],u=a[s];return u<o&&(r=o,o=u,u=r,r=i,i=s,s=r),(r=T(o,u,n))>0?r=T(o=Math.floor(o/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=T(o=Math.ceil(o*r)/r,u=Math.floor(u*r)/r,n)),r>0?(a[i]=Math.floor(o/r)*r,a[s]=Math.ceil(u/r)*r,e(a)):r<0&&(a[i]=Math.ceil(o*r)/r,a[s]=Math.floor(u*r)/r,e(a)),t},t}function Gm(){var t=Im(Nm,Nm);return t.copy=function(){return Rm(t,Gm())},wm.apply(t,arguments),qm(t)}function Bm(t){var e;function n(t){return isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Tm.call(e,Em),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Bm(t).unknown(e)},t=arguments.length?Tm.call(t,Em):[0,1],qm(n)}var Vm=function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],s=t[a];return s<i&&(n=r,r=a,a=n,n=i,i=s,s=n),t[r]=e.floor(i),t[a]=e.ceil(s),t};function $m(t){return Math.log(t)}function Zm(t){return Math.exp(t)}function Km(t){return-Math.log(-t)}function Xm(t){return-Math.exp(-t)}function Qm(t){return isFinite(t)?+("1e"+t):t<0?0:t}function tp(t){return function(e){return-t(-e)}}function ep(t){var e,n,r=t($m,Zm),a=r.domain,i=10;function s(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(i),n=function(t){return 10===t?Qm:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(i),a()[0]<0?(e=tp(e),n=tp(n),t(Km,Xm)):t($m,Zm),r}return r.base=function(t){return arguments.length?(i=+t,s()):i},r.domain=function(t){return arguments.length?(a(t),s()):a()},r.ticks=function(t){var r,s=a(),o=s[0],u=s[s.length-1];(r=u<o)&&(f=o,o=u,u=f);var d,c,l,f=e(o),_=e(u),h=null==t?10:+t,m=[];if(!(i%1)&&_-f<h){if(f=Math.round(f)-1,_=Math.round(_)+1,o>0){for(;f<_;++f)for(c=1,d=n(f);c<i;++c)if(!((l=d*c)<o)){if(l>u)break;m.push(l)}}else for(;f<_;++f)for(c=i-1,d=n(f);c>=1;--c)if(!((l=d*c)<o)){if(l>u)break;m.push(l)}}else m=D(f,_,Math.min(_-f,h)).map(n);return r?m.reverse():m},r.tickFormat=function(t,a){if(null==a&&(a=10===i?".0e":","),"function"!=typeof a&&(a=Iu(a)),t===1/0)return a;null==t&&(t=10);var s=Math.max(1,i*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*i<i-.5&&(r*=i),r<=s?a(t):""}},r.nice=function(){return a(Vm(a(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function np(){var t=ep(Um()).domain([1,10]);return t.copy=function(){return Rm(t,np()).base(t.base())},wm.apply(t,arguments),t}function rp(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function ap(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function ip(t){var e=1,n=t(rp(e),ap(e));return n.constant=function(n){return arguments.length?t(rp(e=+n),ap(e)):e},qm(n)}function sp(){var t=ip(Um());return t.copy=function(){return Rm(t,sp()).constant(t.constant())},wm.apply(t,arguments)}function op(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function up(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function dp(t){return t<0?-t*t:t*t}function cp(t){var e=t(Nm,Nm),n=1;function r(){return 1===n?t(Nm,Nm):.5===n?t(up,dp):t(op(n),op(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},qm(e)}function lp(){var t=cp(Um());return t.copy=function(){return Rm(t,lp()).exponent(t.exponent())},wm.apply(t,arguments),t}function fp(){return lp.apply(null,arguments).exponent(.5)}function _p(){var t,e=[],n=[],a=[];function i(){var t=0,r=Math.max(1,n.length);for(a=new Array(r-1);++t<r;)a[t-1]=j(e,t/r);return s}function s(e){return isNaN(e=+e)?t:n[u(a,e)]}return s.invertExtent=function(t){var r=n.indexOf(t);return r<0?[NaN,NaN]:[r>0?a[r-1]:e[0],r<a.length?a[r]:e[e.length-1]]},s.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var n,a=0,s=t.length;a<s;++a)null==(n=t[a])||isNaN(n=+n)||e.push(n);return e.sort(r),i()},s.range=function(t){return arguments.length?(n=xm.call(t),i()):n.slice()},s.unknown=function(e){return arguments.length?(t=e,s):t},s.quantiles=function(){return a.slice()},s.copy=function(){return _p().domain(e).range(n).unknown(t)},wm.apply(s,arguments)}function hp(){var t,e=0,n=1,r=1,a=[.5],i=[0,1];function s(e){return e<=e?i[u(a,e,0,r)]:t}function o(){var t=-1;for(a=new Array(r);++t<r;)a[t]=((t+1)*n-(t-r)*e)/(r+1);return s}return s.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],o()):[e,n]},s.range=function(t){return arguments.length?(r=(i=xm.call(t)).length-1,o()):i.slice()},s.invertExtent=function(t){var s=i.indexOf(t);return s<0?[NaN,NaN]:s<1?[e,a[0]]:s>=r?[a[r-1],n]:[a[s-1],a[s]]},s.unknown=function(e){return arguments.length?(t=e,s):s},s.thresholds=function(){return a.slice()},s.copy=function(){return hp().domain([e,n]).range(i).unknown(t)},wm.apply(qm(s),arguments)}function mp(){var t,e=[.5],n=[0,1],r=1;function a(a){return a<=a?n[u(e,a,0,r)]:t}return a.domain=function(t){return arguments.length?(e=xm.call(t),r=Math.min(e.length,n.length-1),a):e.slice()},a.range=function(t){return arguments.length?(n=xm.call(t),r=Math.min(e.length,n.length-1),a):n.slice()},a.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},a.unknown=function(e){return arguments.length?(t=e,a):t},a.copy=function(){return mp().domain(e).range(n).unknown(t)},wm.apply(a,arguments)}var pp=new Date,yp=new Date;function Mp(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var s,o=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return o;do{o.push(s=new Date(+n)),e(n,i),t(n)}while(s<n&&n<r);return o},a.filter=function(n){return Mp((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return pp.setTime(+e),yp.setTime(+r),t(pp),t(yp),Math.floor(n(pp,yp))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var gp=Mp((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));gp.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Mp((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):gp:null};var Lp=gp,vp=gp.range,Yp=6e4,bp=6048e5,wp=Mp((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),kp=wp,Dp=wp.range,Tp=Mp((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*Yp)}),(function(t,e){return(e-t)/Yp}),(function(t){return t.getMinutes()})),xp=Tp,Sp=Tp.range,Hp=Mp((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Yp)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),jp=Hp,Ap=Hp.range,Pp=Mp((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Yp)/864e5}),(function(t){return t.getDate()-1})),Ep=Pp,Op=Pp.range;function Np(t){return Mp((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Yp)/bp}))}var Wp=Np(0),zp=Np(1),Fp=Np(2),Cp=Np(3),Rp=Np(4),Up=Np(5),Ip=Np(6),Jp=Wp.range,qp=zp.range,Gp=Fp.range,Bp=Cp.range,Vp=Rp.range,$p=Up.range,Zp=Ip.range,Kp=Mp((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Xp=Kp,Qp=Kp.range,ty=Mp((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ty.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mp((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var ey=ty,ny=ty.range,ry=Mp((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*Yp)}),(function(t,e){return(e-t)/Yp}),(function(t){return t.getUTCMinutes()})),ay=ry,iy=ry.range,sy=Mp((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()})),oy=sy,uy=sy.range,dy=Mp((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1})),cy=dy,ly=dy.range;function fy(t){return Mp((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/bp}))}var _y=fy(0),hy=fy(1),my=fy(2),py=fy(3),yy=fy(4),My=fy(5),gy=fy(6),Ly=_y.range,vy=hy.range,Yy=my.range,by=py.range,wy=yy.range,ky=My.range,Dy=gy.range,Ty=Mp((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),xy=Ty,Sy=Ty.range,Hy=Mp((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Hy.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mp((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var jy=Hy,Ay=Hy.range;function Py(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ey(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Oy(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Ny(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,s=t.shortDays,o=t.months,u=t.shortMonths,d=Vy(a),c=$y(a),l=Vy(i),f=$y(i),_=Vy(s),h=$y(s),m=Vy(o),p=$y(o),y=Vy(u),M=$y(u),g={a:function(t){return s[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:mM,e:mM,f:LM,H:pM,I:yM,j:MM,L:gM,m:vM,M:YM,p:function(t){return a[+(t.getHours()>=12)]},Q:ZM,s:KM,S:bM,u:wM,U:kM,V:DM,w:TM,W:xM,x:null,X:null,y:SM,Y:HM,Z:jM,"%":$M},L={a:function(t){return s[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:AM,e:AM,f:WM,H:PM,I:EM,j:OM,L:NM,m:zM,M:FM,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:ZM,s:KM,S:CM,u:RM,U:UM,V:IM,w:JM,W:qM,x:null,X:null,y:GM,Y:BM,Z:VM,"%":$M},v={a:function(t,e,n){var r=_.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=M[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=p[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return w(t,e,n,r)},d:iM,e:iM,f:lM,H:oM,I:oM,j:sM,L:cM,m:aM,M:uM,p:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},Q:_M,s:hM,S:dM,u:Ky,U:Xy,V:Qy,w:Zy,W:tM,x:function(t,e,r){return w(t,n,e,r)},X:function(t,e,n){return w(t,r,e,n)},y:nM,Y:eM,Z:rM,"%":fM};function Y(t,e){return function(n){var r,a,i,s=[],o=-1,u=0,d=t.length;for(n instanceof Date||(n=new Date(+n));++o<d;)37===t.charCodeAt(o)&&(s.push(t.slice(u,o)),null!=(a=Uy[r=t.charAt(++o)])?r=t.charAt(++o):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),s.push(r),u=o+1);return s.push(t.slice(u,o)),s.join("")}}function b(t,e){return function(n){var r,a,i=Oy(1900);if(w(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Ey(Oy(i.y))).getUTCDay(),r=a>4||0===a?hy.ceil(r):hy(r),r=cy.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=e(Oy(i.y))).getDay(),r=a>4||0===a?zp.ceil(r):zp(r),r=Ep.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Ey(Oy(i.y)).getUTCDay():e(Oy(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Ey(i)):e(i)}}function w(t,e,n,r){for(var a,i,s=0,o=e.length,u=n.length;s<o;){if(r>=u)return-1;if(37===(a=e.charCodeAt(s++))){if(a=e.charAt(s++),!(i=v[a in Uy?e.charAt(s++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return g.x=Y(n,g),g.X=Y(r,g),g.c=Y(e,g),L.x=Y(n,L),L.X=Y(r,L),L.c=Y(e,L),{format:function(t){var e=Y(t+="",g);return e.toString=function(){return t},e},parse:function(t){var e=b(t+="",Py);return e.toString=function(){return t},e},utcFormat:function(t){var e=Y(t+="",L);return e.toString=function(){return t},e},utcParse:function(t){var e=b(t,Ey);return e.toString=function(){return t},e}}}var Wy,zy,Fy,Cy,Ry,Uy={"-":"",_:" ",0:"0"},Iy=/^\s*\d+/,Jy=/^%/,qy=/[\\^$*+?|[\]().{}]/g;function Gy(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function By(t){return t.replace(qy,"\\$&")}function Vy(t){return new RegExp("^(?:"+t.map(By).join("|")+")","i")}function $y(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Zy(t,e,n){var r=Iy.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ky(t,e,n){var r=Iy.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Xy(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Qy(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function tM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function eM(t,e,n){var r=Iy.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function nM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function rM(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function aM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function iM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function sM(t,e,n){var r=Iy.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function oM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function uM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function dM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function cM(t,e,n){var r=Iy.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function lM(t,e,n){var r=Iy.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function fM(t,e,n){var r=Jy.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function _M(t,e,n){var r=Iy.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function hM(t,e,n){var r=Iy.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function mM(t,e){return Gy(t.getDate(),e,2)}function pM(t,e){return Gy(t.getHours(),e,2)}function yM(t,e){return Gy(t.getHours()%12||12,e,2)}function MM(t,e){return Gy(1+Ep.count(ey(t),t),e,3)}function gM(t,e){return Gy(t.getMilliseconds(),e,3)}function LM(t,e){return gM(t,e)+"000"}function vM(t,e){return Gy(t.getMonth()+1,e,2)}function YM(t,e){return Gy(t.getMinutes(),e,2)}function bM(t,e){return Gy(t.getSeconds(),e,2)}function wM(t){var e=t.getDay();return 0===e?7:e}function kM(t,e){return Gy(Wp.count(ey(t),t),e,2)}function DM(t,e){var n=t.getDay();return t=n>=4||0===n?Rp(t):Rp.ceil(t),Gy(Rp.count(ey(t),t)+(4===ey(t).getDay()),e,2)}function TM(t){return t.getDay()}function xM(t,e){return Gy(zp.count(ey(t),t),e,2)}function SM(t,e){return Gy(t.getFullYear()%100,e,2)}function HM(t,e){return Gy(t.getFullYear()%1e4,e,4)}function jM(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Gy(e/60|0,"0",2)+Gy(e%60,"0",2)}function AM(t,e){return Gy(t.getUTCDate(),e,2)}function PM(t,e){return Gy(t.getUTCHours(),e,2)}function EM(t,e){return Gy(t.getUTCHours()%12||12,e,2)}function OM(t,e){return Gy(1+cy.count(jy(t),t),e,3)}function NM(t,e){return Gy(t.getUTCMilliseconds(),e,3)}function WM(t,e){return NM(t,e)+"000"}function zM(t,e){return Gy(t.getUTCMonth()+1,e,2)}function FM(t,e){return Gy(t.getUTCMinutes(),e,2)}function CM(t,e){return Gy(t.getUTCSeconds(),e,2)}function RM(t){var e=t.getUTCDay();return 0===e?7:e}function UM(t,e){return Gy(_y.count(jy(t),t),e,2)}function IM(t,e){var n=t.getUTCDay();return t=n>=4||0===n?yy(t):yy.ceil(t),Gy(yy.count(jy(t),t)+(4===jy(t).getUTCDay()),e,2)}function JM(t){return t.getUTCDay()}function qM(t,e){return Gy(hy.count(jy(t),t),e,2)}function GM(t,e){return Gy(t.getUTCFullYear()%100,e,2)}function BM(t,e){return Gy(t.getUTCFullYear()%1e4,e,4)}function VM(){return"+0000"}function $M(){return"%"}function ZM(t){return+t}function KM(t){return Math.floor(+t/1e3)}function XM(t){return Wy=Ny(t),zy=Wy.format,Fy=Wy.parse,Cy=Wy.utcFormat,Ry=Wy.utcParse,Wy}XM({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var QM=Date.prototype.toISOString?function(t){return t.toISOString()}:Cy("%Y-%m-%dT%H:%M:%S.%LZ");var tg=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:Ry("%Y-%m-%dT%H:%M:%S.%LZ"),eg=1e3,ng=60*eg,rg=60*ng,ag=24*rg,ig=7*ag,sg=30*ag,og=365*ag;function ug(t){return new Date(t)}function dg(t){return t instanceof Date?+t:+new Date(+t)}function cg(t,e,n,r,i,s,o,u,d){var c=Im(Nm,Nm),l=c.invert,f=c.domain,_=d(".%L"),h=d(":%S"),m=d("%I:%M"),p=d("%I %p"),y=d("%a %d"),M=d("%b %d"),g=d("%B"),L=d("%Y"),v=[[o,1,eg],[o,5,5*eg],[o,15,15*eg],[o,30,30*eg],[s,1,ng],[s,5,5*ng],[s,15,15*ng],[s,30,30*ng],[i,1,rg],[i,3,3*rg],[i,6,6*rg],[i,12,12*rg],[r,1,ag],[r,2,2*ag],[n,1,ig],[e,1,sg],[e,3,3*sg],[t,1,og]];function Y(a){return(o(a)<a?_:s(a)<a?h:i(a)<a?m:r(a)<a?p:e(a)<a?n(a)<a?y:M:t(a)<a?g:L)(a)}function b(e,n,r,i){if(null==e&&(e=10),"number"==typeof e){var s=Math.abs(r-n)/e,o=a((function(t){return t[2]})).right(v,s);o===v.length?(i=x(n/og,r/og,e),e=t):o?(i=(o=v[s/v[o-1][2]<v[o][2]/s?o-1:o])[1],e=o[0]):(i=Math.max(x(n,r,e),1),e=u)}return null==i?e:e.every(i)}return c.invert=function(t){return new Date(l(t))},c.domain=function(t){return arguments.length?f(Tm.call(t,dg)):f().map(ug)},c.ticks=function(t,e){var n,r=f(),a=r[0],i=r[r.length-1],s=i<a;return s&&(n=a,a=i,i=n),n=(n=b(t,a,i,e))?n.range(a,i+1):[],s?n.reverse():n},c.tickFormat=function(t,e){return null==e?Y:d(e)},c.nice=function(t,e){var n=f();return(t=b(t,n[0],n[n.length-1],e))?f(Vm(n,t)):c},c.copy=function(){return Rm(c,cg(t,e,n,r,i,s,o,u,d))},c}var lg=function(){return wm.apply(cg(ey,Xp,Wp,Ep,jp,xp,kp,Lp,zy).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},fg=function(){return wm.apply(cg(jy,xy,_y,cy,oy,ay,kp,Lp,Cy).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function _g(){var t,e,n,r,a,i=0,s=1,o=Nm,u=!1;function d(e){return isNaN(e=+e)?a:o(0===n?.5:(e=(r(e)-t)*n,u?Math.max(0,Math.min(1,e)):e))}return d.domain=function(a){return arguments.length?(t=r(i=+a[0]),e=r(s=+a[1]),n=t===e?0:1/(e-t),d):[i,s]},d.clamp=function(t){return arguments.length?(u=!!t,d):u},d.interpolator=function(t){return arguments.length?(o=t,d):o},d.unknown=function(t){return arguments.length?(a=t,d):a},function(a){return r=a,t=a(i),e=a(s),n=t===e?0:1/(e-t),d}}function hg(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function mg(){var t=qm(_g()(Nm));return t.copy=function(){return hg(t,mg())},km.apply(t,arguments)}function pg(){var t=ep(_g()).domain([1,10]);return t.copy=function(){return hg(t,pg()).base(t.base())},km.apply(t,arguments)}function yg(){var t=ip(_g());return t.copy=function(){return hg(t,yg()).constant(t.constant())},km.apply(t,arguments)}function Mg(){var t=cp(_g());return t.copy=function(){return hg(t,Mg()).exponent(t.exponent())},km.apply(t,arguments)}function gg(){return Mg.apply(null,arguments).exponent(.5)}function Lg(){var t=[],e=Nm;function n(n){if(!isNaN(n=+n))return e((u(t,n)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var a,i=0,s=e.length;i<s;++i)null==(a=e[i])||isNaN(a=+a)||t.push(a);return t.sort(r),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Lg(e).domain(t)},km.apply(n,arguments)}function vg(){var t,e,n,r,a,i,s,o=0,u=.5,d=1,c=Nm,l=!1;function f(t){return isNaN(t=+t)?s:(t=.5+((t=+i(t))-e)*(t<e?r:a),c(l?Math.max(0,Math.min(1,t)):t))}return f.domain=function(s){return arguments.length?(t=i(o=+s[0]),e=i(u=+s[1]),n=i(d=+s[2]),r=t===e?0:.5/(e-t),a=e===n?0:.5/(n-e),f):[o,u,d]},f.clamp=function(t){return arguments.length?(l=!!t,f):l},f.interpolator=function(t){return arguments.length?(c=t,f):c},f.unknown=function(t){return arguments.length?(s=t,f):s},function(s){return i=s,t=s(o),e=s(u),n=s(d),r=t===e?0:.5/(e-t),a=e===n?0:.5/(n-e),f}}function Yg(){var t=qm(vg()(Nm));return t.copy=function(){return hg(t,Yg())},km.apply(t,arguments)}function bg(){var t=ep(vg()).domain([.1,1,10]);return t.copy=function(){return hg(t,bg()).base(t.base())},km.apply(t,arguments)}function wg(){var t=ip(vg());return t.copy=function(){return hg(t,wg()).constant(t.constant())},km.apply(t,arguments)}function kg(){var t=cp(vg());return t.copy=function(){return hg(t,kg()).exponent(t.exponent())},km.apply(t,arguments)}function Dg(){return kg.apply(null,arguments).exponent(.5)}var Tg=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},xg=Tg("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Sg=Tg("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Hg=Tg("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jg=Tg("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ag=Tg("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Pg=Tg("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Eg=Tg("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Og=Tg("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ng=Tg("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Wg=Tg("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),zg=function(t){return hr(t[t.length-1])},Fg=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Tg),Cg=zg(Fg),Rg=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Tg),Ug=zg(Rg),Ig=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Tg),Jg=zg(Ig),qg=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Tg),Gg=zg(qg),Bg=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Tg),Vg=zg(Bg),$g=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Tg),Zg=zg($g),Kg=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Tg),Xg=zg(Kg),Qg=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Tg),tL=zg(Qg),eL=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Tg),nL=zg(eL),rL=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Tg),aL=zg(rL),iL=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Tg),sL=zg(iL),oL=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Tg),uL=zg(oL),dL=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Tg),cL=zg(dL),lL=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Tg),fL=zg(lL),_L=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Tg),hL=zg(_L),mL=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Tg),pL=zg(mL),yL=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Tg),ML=zg(yL),gL=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Tg),LL=zg(gL),vL=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Tg),YL=zg(vL),bL=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Tg),wL=zg(bL),kL=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Tg),DL=zg(kL),TL=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Tg),xL=zg(TL),SL=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Tg),HL=zg(SL),jL=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Tg),AL=zg(jL),PL=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Tg),EL=zg(PL),OL=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Tg),NL=zg(OL),WL=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Tg),zL=zg(WL),FL=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},CL=$r(nr(300,.5,0),nr(-240,.5,1)),RL=$r(nr(-100,.75,.35),nr(80,1.5,.8)),UL=$r(nr(260,.75,.35),nr(80,1.5,.8)),IL=nr(),JL=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return IL.h=360*t-100,IL.s=1.5-1.5*e,IL.l=.8-.9*e,IL+""},qL=Mn(),GL=Math.PI/3,BL=2*Math.PI/3,VL=function(t){var e;return t=(.5-t)*Math.PI,qL.r=255*(e=Math.sin(t))*e,qL.g=255*(e=Math.sin(t+GL))*e,qL.b=255*(e=Math.sin(t+BL))*e,qL+""},$L=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"};function ZL(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}var KL=ZL(Tg("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),XL=ZL(Tg("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),QL=ZL(Tg("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),tv=ZL(Tg("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),ev=function(t){return function(){return t}},nv=Math.abs,rv=Math.atan2,av=Math.cos,iv=Math.max,sv=Math.min,ov=Math.sin,uv=Math.sqrt,dv=1e-12,cv=Math.PI,lv=cv/2,fv=2*cv;function _v(t){return t>=1?lv:t<=-1?-lv:Math.asin(t)}function hv(t){return t.innerRadius}function mv(t){return t.outerRadius}function pv(t){return t.startAngle}function yv(t){return t.endAngle}function Mv(t){return t&&t.padAngle}function gv(t,e,n,r,a,i,s){var o=t-n,u=e-r,d=(s?i:-i)/uv(o*o+u*u),c=d*u,l=-d*o,f=t+c,_=e+l,h=n+c,m=r+l,p=(f+h)/2,y=(_+m)/2,M=h-f,g=m-_,L=M*M+g*g,v=a-i,Y=f*m-h*_,b=(g<0?-1:1)*uv(iv(0,v*v*L-Y*Y)),w=(Y*g-M*b)/L,k=(-Y*M-g*b)/L,D=(Y*g+M*b)/L,T=(-Y*M+g*b)/L,x=w-p,S=k-y,H=D-p,j=T-y;return x*x+S*S>H*H+j*j&&(w=D,k=T),{cx:w,cy:k,x01:-c,y01:-l,x11:w*(a/v-1),y11:k*(a/v-1)}}var Lv=function(){var t=hv,e=mv,n=ev(0),r=null,a=pv,i=yv,s=Mv,o=null;function u(){var u,d,c,l=+t.apply(this,arguments),f=+e.apply(this,arguments),_=a.apply(this,arguments)-lv,h=i.apply(this,arguments)-lv,m=nv(h-_),p=h>_;if(o||(o=u=Fs()),f<l&&(d=f,f=l,l=d),f>dv)if(m>fv-dv)o.moveTo(f*av(_),f*ov(_)),o.arc(0,0,f,_,h,!p),l>dv&&(o.moveTo(l*av(h),l*ov(h)),o.arc(0,0,l,h,_,p));else{var y,M,g=_,L=h,v=_,Y=h,b=m,w=m,k=s.apply(this,arguments)/2,D=k>dv&&(r?+r.apply(this,arguments):uv(l*l+f*f)),T=sv(nv(f-l)/2,+n.apply(this,arguments)),x=T,S=T;if(D>dv){var H=_v(D/l*ov(k)),j=_v(D/f*ov(k));(b-=2*H)>dv?(v+=H*=p?1:-1,Y-=H):(b=0,v=Y=(_+h)/2),(w-=2*j)>dv?(g+=j*=p?1:-1,L-=j):(w=0,g=L=(_+h)/2)}var A=f*av(g),P=f*ov(g),E=l*av(Y),O=l*ov(Y);if(T>dv){var N,W=f*av(L),z=f*ov(L),F=l*av(v),C=l*ov(v);if(m<cv&&(N=function(t,e,n,r,a,i,s,o){var u=n-t,d=r-e,c=s-a,l=o-i,f=l*u-c*d;if(!(f*f<dv))return[t+(f=(c*(e-i)-l*(t-a))/f)*u,e+f*d]}(A,P,F,C,W,z,E,O))){var R=A-N[0],U=P-N[1],I=W-N[0],J=z-N[1],q=1/ov(((c=(R*I+U*J)/(uv(R*R+U*U)*uv(I*I+J*J)))>1?0:c<-1?cv:Math.acos(c))/2),G=uv(N[0]*N[0]+N[1]*N[1]);x=sv(T,(l-G)/(q-1)),S=sv(T,(f-G)/(q+1))}}w>dv?S>dv?(y=gv(F,C,A,P,f,S,p),M=gv(W,z,E,O,f,S,p),o.moveTo(y.cx+y.x01,y.cy+y.y01),S<T?o.arc(y.cx,y.cy,S,rv(y.y01,y.x01),rv(M.y01,M.x01),!p):(o.arc(y.cx,y.cy,S,rv(y.y01,y.x01),rv(y.y11,y.x11),!p),o.arc(0,0,f,rv(y.cy+y.y11,y.cx+y.x11),rv(M.cy+M.y11,M.cx+M.x11),!p),o.arc(M.cx,M.cy,S,rv(M.y11,M.x11),rv(M.y01,M.x01),!p))):(o.moveTo(A,P),o.arc(0,0,f,g,L,!p)):o.moveTo(A,P),l>dv&&b>dv?x>dv?(y=gv(E,O,W,z,l,-x,p),M=gv(A,P,F,C,l,-x,p),o.lineTo(y.cx+y.x01,y.cy+y.y01),x<T?o.arc(y.cx,y.cy,x,rv(y.y01,y.x01),rv(M.y01,M.x01),!p):(o.arc(y.cx,y.cy,x,rv(y.y01,y.x01),rv(y.y11,y.x11),!p),o.arc(0,0,l,rv(y.cy+y.y11,y.cx+y.x11),rv(M.cy+M.y11,M.cx+M.x11),p),o.arc(M.cx,M.cy,x,rv(M.y11,M.x11),rv(M.y01,M.x01),!p))):o.arc(0,0,l,Y,v,p):o.lineTo(E,O)}else o.moveTo(0,0);if(o.closePath(),u)return o=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-cv/2;return[av(r)*n,ov(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:ev(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:ev(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ev(+t),u):r},u.startAngle=function(t){return arguments.length?(a="function"==typeof t?t:ev(+t),u):a},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:ev(+t),u):i},u.padAngle=function(t){return arguments.length?(s="function"==typeof t?t:ev(+t),u):s},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function vv(t){this._context=t}vv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Yv=function(t){return new vv(t)};function bv(t){return t[0]}function wv(t){return t[1]}var kv=function(){var t=bv,e=wv,n=ev(!0),r=null,a=Yv,i=null;function s(s){var o,u,d,c=s.length,l=!1;for(null==r&&(i=a(d=Fs())),o=0;o<=c;++o)!(o<c&&n(u=s[o],o,s))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+t(u,o,s),+e(u,o,s));if(d)return i=null,d+""||null}return s.x=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:ev(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:ev(!!t),s):n},s.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),s):a},s.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),s):r},s},Dv=function(){var t=bv,e=null,n=ev(0),r=wv,a=ev(!0),i=null,s=Yv,o=null;function u(u){var d,c,l,f,_,h=u.length,m=!1,p=new Array(h),y=new Array(h);for(null==i&&(o=s(_=Fs())),d=0;d<=h;++d){if(!(d<h&&a(f=u[d],d,u))===m)if(m=!m)c=d,o.areaStart(),o.lineStart();else{for(o.lineEnd(),o.lineStart(),l=d-1;l>=c;--l)o.point(p[l],y[l]);o.lineEnd(),o.areaEnd()}m&&(p[d]=+t(f,d,u),y[d]=+n(f,d,u),o.point(e?+e(f,d,u):p[d],r?+r(f,d,u):y[d]))}if(_)return o=null,_+""||null}function d(){return kv().defined(a).curve(s).context(i)}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:ev(+n),e=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),u):t},u.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:ev(+t),u):e},u.y=function(t){return arguments.length?(n="function"==typeof t?t:ev(+t),r=null,u):n},u.y0=function(t){return arguments.length?(n="function"==typeof t?t:ev(+t),u):n},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ev(+t),u):r},u.lineX0=u.lineY0=function(){return d().x(t).y(n)},u.lineY1=function(){return d().x(t).y(r)},u.lineX1=function(){return d().x(e).y(n)},u.defined=function(t){return arguments.length?(a="function"==typeof t?t:ev(!!t),u):a},u.curve=function(t){return arguments.length?(s=t,null!=i&&(o=s(i)),u):s},u.context=function(t){return arguments.length?(null==t?i=o=null:o=s(i=t),u):i},u},Tv=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},xv=function(t){return t},Sv=function(){var t=xv,e=Tv,n=null,r=ev(0),a=ev(fv),i=ev(0);function s(s){var o,u,d,c,l,f=s.length,_=0,h=new Array(f),m=new Array(f),p=+r.apply(this,arguments),y=Math.min(fv,Math.max(-fv,a.apply(this,arguments)-p)),M=Math.min(Math.abs(y)/f,i.apply(this,arguments)),g=M*(y<0?-1:1);for(o=0;o<f;++o)(l=m[h[o]=o]=+t(s[o],o,s))>0&&(_+=l);for(null!=e?h.sort((function(t,n){return e(m[t],m[n])})):null!=n&&h.sort((function(t,e){return n(s[t],s[e])})),o=0,d=_?(y-f*g)/_:0;o<f;++o,p=c)u=h[o],c=p+((l=m[u])>0?l*d:0)+g,m[u]={data:s[u],index:o,value:l,startAngle:p,endAngle:c,padAngle:M};return m}return s.value=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),s):t},s.sortValues=function(t){return arguments.length?(e=t,n=null,s):e},s.sort=function(t){return arguments.length?(n=t,e=null,s):n},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:ev(+t),s):r},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:ev(+t),s):a},s.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:ev(+t),s):i},s},Hv=Av(Yv);function jv(t){this._curve=t}function Av(t){function e(e){return new jv(t(e))}return e._curve=t,e}function Pv(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(Av(t)):e()._curve},t}jv.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var Ev=function(){return Pv(kv().curve(Hv))},Ov=function(){var t=Dv().curve(Hv),e=t.curve,n=t.lineX0,r=t.lineX1,a=t.lineY0,i=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Pv(n())},delete t.lineX0,t.lineEndAngle=function(){return Pv(r())},delete t.lineX1,t.lineInnerRadius=function(){return Pv(a())},delete t.lineY0,t.lineOuterRadius=function(){return Pv(i())},delete t.lineY1,t.curve=function(t){return arguments.length?e(Av(t)):e()._curve},t},Nv=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},Wv=Array.prototype.slice;function zv(t){return t.source}function Fv(t){return t.target}function Cv(t){var e=zv,n=Fv,r=bv,a=wv,i=null;function s(){var s,o=Wv.call(arguments),u=e.apply(this,o),d=n.apply(this,o);if(i||(i=s=Fs()),t(i,+r.apply(this,(o[0]=u,o)),+a.apply(this,o),+r.apply(this,(o[0]=d,o)),+a.apply(this,o)),s)return i=null,s+""||null}return s.source=function(t){return arguments.length?(e=t,s):e},s.target=function(t){return arguments.length?(n=t,s):n},s.x=function(t){return arguments.length?(r="function"==typeof t?t:ev(+t),s):r},s.y=function(t){return arguments.length?(a="function"==typeof t?t:ev(+t),s):a},s.context=function(t){return arguments.length?(i=null==t?null:t,s):i},s}function Rv(t,e,n,r,a){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,a,r,a)}function Uv(t,e,n,r,a){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+a)/2,r,n,r,a)}function Iv(t,e,n,r,a){var i=Nv(e,n),s=Nv(e,n=(n+a)/2),o=Nv(r,n),u=Nv(r,a);t.moveTo(i[0],i[1]),t.bezierCurveTo(s[0],s[1],o[0],o[1],u[0],u[1])}function Jv(){return Cv(Rv)}function qv(){return Cv(Uv)}function Gv(){var t=Cv(Iv);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Bv={draw:function(t,e){var n=Math.sqrt(e/cv);t.moveTo(n,0),t.arc(0,0,n,0,fv)}},Vv={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},$v=Math.sqrt(1/3),Zv=2*$v,Kv={draw:function(t,e){var n=Math.sqrt(e/Zv),r=n*$v;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},Xv=Math.sin(cv/10)/Math.sin(7*cv/10),Qv=Math.sin(fv/10)*Xv,tY=-Math.cos(fv/10)*Xv,eY={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=Qv*n,a=tY*n;t.moveTo(0,-n),t.lineTo(r,a);for(var i=1;i<5;++i){var s=fv*i/5,o=Math.cos(s),u=Math.sin(s);t.lineTo(u*n,-o*n),t.lineTo(o*r-u*a,u*r+o*a)}t.closePath()}},nY={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},rY=Math.sqrt(3),aY={draw:function(t,e){var n=-Math.sqrt(e/(3*rY));t.moveTo(0,2*n),t.lineTo(-rY*n,-n),t.lineTo(rY*n,-n),t.closePath()}},iY=Math.sqrt(3)/2,sY=1/Math.sqrt(12),oY=3*(sY/2+1),uY={draw:function(t,e){var n=Math.sqrt(e/oY),r=n/2,a=n*sY,i=r,s=n*sY+n,o=-i,u=s;t.moveTo(r,a),t.lineTo(i,s),t.lineTo(o,u),t.lineTo(-.5*r-iY*a,iY*r+-.5*a),t.lineTo(-.5*i-iY*s,iY*i+-.5*s),t.lineTo(-.5*o-iY*u,iY*o+-.5*u),t.lineTo(-.5*r+iY*a,-.5*a-iY*r),t.lineTo(-.5*i+iY*s,-.5*s-iY*i),t.lineTo(-.5*o+iY*u,-.5*u-iY*o),t.closePath()}},dY=[Bv,Vv,Kv,nY,eY,aY,uY],cY=function(){var t=ev(Bv),e=ev(64),n=null;function r(){var r;if(n||(n=r=Fs()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:ev(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:ev(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},lY=function(){};function fY(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function _Y(t){this._context=t}_Y.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:fY(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:fY(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var hY=function(t){return new _Y(t)};function mY(t){this._context=t}mY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:fY(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var pY=function(t){return new mY(t)};function yY(t){this._context=t}yY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:fY(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var MY=function(t){return new yY(t)};function gY(t,e){this._basis=new _Y(t),this._beta=e}gY.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,a=t[0],i=e[0],s=t[n]-a,o=e[n]-i,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*t[u]+(1-this._beta)*(a+r*s),this._beta*e[u]+(1-this._beta)*(i+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var LY=function t(e){function n(t){return 1===e?new _Y(t):new gY(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function vY(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function YY(t,e){this._context=t,this._k=(1-e)/6}YY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:vY(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:vY(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var bY=function t(e){function n(t){return new YY(t,e)}return n.tension=function(e){return t(+e)},n}(0);function wY(t,e){this._context=t,this._k=(1-e)/6}wY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:vY(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var kY=function t(e){function n(t){return new wY(t,e)}return n.tension=function(e){return t(+e)},n}(0);function DY(t,e){this._context=t,this._k=(1-e)/6}DY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:vY(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var TY=function t(e){function n(t){return new DY(t,e)}return n.tension=function(e){return t(+e)},n}(0);function xY(t,e,n){var r=t._x1,a=t._y1,i=t._x2,s=t._y2;if(t._l01_a>dv){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,a=(a*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>dv){var d=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);i=(i*d+t._x1*t._l23_2a-e*t._l12_2a)/c,s=(s*d+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,a,i,s,t._x2,t._y2)}function SY(t,e){this._context=t,this._alpha=e}SY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:xY(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var HY=function t(e){function n(t){return e?new SY(t,e):new YY(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function jY(t,e){this._context=t,this._alpha=e}jY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:xY(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var AY=function t(e){function n(t){return e?new jY(t,e):new wY(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function PY(t,e){this._context=t,this._alpha=e}PY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:xY(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var EY=function t(e){function n(t){return e?new PY(t,e):new DY(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function OY(t){this._context=t}OY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var NY=function(t){return new OY(t)};function WY(t){return t<0?-1:1}function zY(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),s=(n-t._y1)/(a||r<0&&-0),o=(i*a+s*r)/(r+a);return(WY(i)+WY(s))*Math.min(Math.abs(i),Math.abs(s),.5*Math.abs(o))||0}function FY(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function CY(t,e,n){var r=t._x0,a=t._y0,i=t._x1,s=t._y1,o=(i-r)/3;t._context.bezierCurveTo(r+o,a+o*e,i-o,s-o*n,i,s)}function RY(t){this._context=t}function UY(t){this._context=new IY(t)}function IY(t){this._context=t}function JY(t){return new RY(t)}function qY(t){return new UY(t)}function GY(t){this._context=t}function BY(t){var e,n,r=t.length-1,a=new Array(r),i=new Array(r),s=new Array(r);for(a[0]=0,i[0]=2,s[0]=t[0]+2*t[1],e=1;e<r-1;++e)a[e]=1,i[e]=4,s[e]=4*t[e]+2*t[e+1];for(a[r-1]=2,i[r-1]=7,s[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=a[e]/i[e-1],i[e]-=n,s[e]-=n*s[e-1];for(a[r-1]=s[r-1]/i[r-1],e=r-2;e>=0;--e)a[e]=(s[e]-a[e+1])/i[e];for(i[r-1]=(t[r]+a[r-1])/2,e=0;e<r-1;++e)i[e]=2*t[e+1]-a[e+1];return[a,i]}RY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:CY(this,this._t0,FY(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,CY(this,FY(this,n=zY(this,t,e)),n);break;default:CY(this,this._t0,n=zY(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(UY.prototype=Object.create(RY.prototype)).point=function(t,e){RY.prototype.point.call(this,e,t)},IY.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}},GY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=BY(t),a=BY(e),i=0,s=1;s<n;++i,++s)this._context.bezierCurveTo(r[0][i],a[0][i],r[1][i],a[1][i],t[s],e[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var VY=function(t){return new GY(t)};function $Y(t,e){this._context=t,this._t=e}$Y.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var ZY=function(t){return new $Y(t,.5)};function KY(t){return new $Y(t,0)}function XY(t){return new $Y(t,1)}var QY=function(t,e){if((a=t.length)>1)for(var n,r,a,i=1,s=t[e[0]],o=s.length;i<a;++i)for(r=s,s=t[e[i]],n=0;n<o;++n)s[n][1]+=s[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},tb=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function eb(t,e){return t[e]}var nb=function(){var t=ev([]),e=tb,n=QY,r=eb;function a(a){var i,s,o=t.apply(this,arguments),u=a.length,d=o.length,c=new Array(d);for(i=0;i<d;++i){for(var l,f=o[i],_=c[i]=new Array(u),h=0;h<u;++h)_[h]=l=[0,+r(a[h],f,h,a)],l.data=a[h];_.key=f}for(i=0,s=e(c);i<d;++i)c[s[i]].index=i;return n(c,s),c}return a.keys=function(e){return arguments.length?(t="function"==typeof e?e:ev(Wv.call(e)),a):t},a.value=function(t){return arguments.length?(r="function"==typeof t?t:ev(+t),a):r},a.order=function(t){return arguments.length?(e=null==t?tb:"function"==typeof t?t:ev(Wv.call(t)),a):e},a.offset=function(t){return arguments.length?(n=null==t?QY:t,a):n},a},rb=function(t,e){if((r=t.length)>0){for(var n,r,a,i=0,s=t[0].length;i<s;++i){for(a=n=0;n<r;++n)a+=t[n][i][1]||0;if(a)for(n=0;n<r;++n)t[n][i][1]/=a}QY(t,e)}},ab=function(t,e){if((o=t.length)>0)for(var n,r,a,i,s,o,u=0,d=t[e[0]].length;u<d;++u)for(i=s=0,n=0;n<o;++n)(a=(r=t[e[n]][u])[1]-r[0])>=0?(r[0]=i,r[1]=i+=a):a<0?(r[1]=s,r[0]=s+=a):r[0]=i},ib=function(t,e){if((n=t.length)>0){for(var n,r=0,a=t[e[0]],i=a.length;r<i;++r){for(var s=0,o=0;s<n;++s)o+=t[s][r][1]||0;a[r][1]+=a[r][0]=-o/2}QY(t,e)}},sb=function(t,e){if((a=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,a,i=0,s=1;s<r;++s){for(var o=0,u=0,d=0;o<a;++o){for(var c=t[e[o]],l=c[s][1]||0,f=(l-(c[s-1][1]||0))/2,_=0;_<o;++_){var h=t[e[_]];f+=(h[s][1]||0)-(h[s-1][1]||0)}u+=l,d+=f*l}n[s-1][1]+=n[s-1][0]=i,u&&(i-=d/u)}n[s-1][1]+=n[s-1][0]=i,QY(t,e)}},ob=function(t){var e=t.map(ub);return tb(t).sort((function(t,n){return e[t]-e[n]}))};function ub(t){for(var e,n=-1,r=0,a=t.length,i=-1/0;++n<a;)(e=+t[n][1])>i&&(i=e,r=n);return r}var db=function(t){var e=t.map(cb);return tb(t).sort((function(t,n){return e[t]-e[n]}))};function cb(t){for(var e,n=0,r=-1,a=t.length;++r<a;)(e=+t[r][1])&&(n+=e);return n}var lb=function(t){return db(t).reverse()},fb=function(t){var e,n,r=t.length,a=t.map(cb),i=ob(t),s=0,o=0,u=[],d=[];for(e=0;e<r;++e)n=i[e],s<o?(s+=a[n],u.push(n)):(o+=a[n],d.push(n));return d.reverse().concat(u)},_b=function(t){return tb(t).reverse()},hb=function(t){return function(){return t}};function mb(t){return t[0]}function pb(t){return t[1]}function yb(){this._=null}function Mb(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function gb(t,e){var n=e,r=e.R,a=n.U;a?a.L===n?a.L=r:a.R=r:t._=r,r.U=a,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Lb(t,e){var n=e,r=e.L,a=n.U;a?a.L===n?a.L=r:a.R=r:t._=r,r.U=a,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function vb(t){for(;t.L;)t=t.L;return t}yb.prototype={constructor:yb,insert:function(t,e){var n,r,a;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=vb(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(a=r.R)&&a.C?(n.C=a.C=!1,r.C=!0,t=r):(t===n.R&&(gb(this,n),n=(t=n).U),n.C=!1,r.C=!0,Lb(this,r)):(a=r.L)&&a.C?(n.C=a.C=!1,r.C=!0,t=r):(t===n.L&&(Lb(this,n),n=(t=n).U),n.C=!1,r.C=!0,gb(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,a=t.U,i=t.L,s=t.R;if(n=i?s?vb(s):i:s,a?a.L===t?a.L=n:a.R=n:this._=n,i&&s?(r=n.C,n.C=t.C,n.L=i,i.U=n,n!==s?(a=n.U,n.U=t.U,t=n.R,a.L=t,n.R=s,s.U=n):(n.U=a,a=n,t=n.R)):(r=t.C,t=n),t&&(t.U=a),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===a.L){if((e=a.R).C&&(e.C=!1,a.C=!0,gb(this,a),e=a.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Lb(this,e),e=a.R),e.C=a.C,a.C=e.R.C=!1,gb(this,a),t=this._;break}}else if((e=a.L).C&&(e.C=!1,a.C=!0,Lb(this,a),e=a.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,gb(this,e),e=a.L),e.C=a.C,a.C=e.L.C=!1,Lb(this,a),t=this._;break}e.C=!0,t=a,a=a.U}while(!t.C);t&&(t.C=!1)}}};var Yb=yb;function bb(t,e,n,r){var a=[null,null],i=Bb.push(a)-1;return a.left=t,a.right=e,n&&kb(a,t,e,n),r&&kb(a,e,t,r),qb[t.index].halfedges.push(i),qb[e.index].halfedges.push(i),a}function wb(t,e,n){var r=[e,n];return r.left=t,r}function kb(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Db(t,e,n,r,a){var i,s=t[0],o=t[1],u=s[0],d=s[1],c=0,l=1,f=o[0]-u,_=o[1]-d;if(i=e-u,f||!(i>0)){if(i/=f,f<0){if(i<c)return;i<l&&(l=i)}else if(f>0){if(i>l)return;i>c&&(c=i)}if(i=r-u,f||!(i<0)){if(i/=f,f<0){if(i>l)return;i>c&&(c=i)}else if(f>0){if(i<c)return;i<l&&(l=i)}if(i=n-d,_||!(i>0)){if(i/=_,_<0){if(i<c)return;i<l&&(l=i)}else if(_>0){if(i>l)return;i>c&&(c=i)}if(i=a-d,_||!(i<0)){if(i/=_,_<0){if(i>l)return;i>c&&(c=i)}else if(_>0){if(i<c)return;i<l&&(l=i)}return!(c>0||l<1)||(c>0&&(t[0]=[u+c*f,d+c*_]),l<1&&(t[1]=[u+l*f,d+l*_]),!0)}}}}}function Tb(t,e,n,r,a){var i=t[1];if(i)return!0;var s,o,u=t[0],d=t.left,c=t.right,l=d[0],f=d[1],_=c[0],h=c[1],m=(l+_)/2,p=(f+h)/2;if(h===f){if(m<e||m>=r)return;if(l>_){if(u){if(u[1]>=a)return}else u=[m,n];i=[m,a]}else{if(u){if(u[1]<n)return}else u=[m,a];i=[m,n]}}else if(o=p-(s=(l-_)/(h-f))*m,s<-1||s>1)if(l>_){if(u){if(u[1]>=a)return}else u=[(n-o)/s,n];i=[(a-o)/s,a]}else{if(u){if(u[1]<n)return}else u=[(a-o)/s,a];i=[(n-o)/s,n]}else if(f<h){if(u){if(u[0]>=r)return}else u=[e,s*e+o];i=[r,s*r+o]}else{if(u){if(u[0]<e)return}else u=[r,s*r+o];i=[e,s*e+o]}return t[0]=u,t[1]=i,!0}function xb(t,e){var n=t.site,r=e.left,a=e.right;return n===a&&(a=r,r=n),a?Math.atan2(a[1]-r[1],a[0]-r[0]):(n===r?(r=e[1],a=e[0]):(r=e[0],a=e[1]),Math.atan2(r[0]-a[0],a[1]-r[1]))}function Sb(t,e){return e[+(e.left!==t.site)]}function Hb(t,e){return e[+(e.left===t.site)]}var jb,Ab=[];function Pb(){Mb(this),this.x=this.y=this.arc=this.site=this.cy=null}function Eb(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,a=t.site,i=n.site;if(r!==i){var s=a[0],o=a[1],u=r[0]-s,d=r[1]-o,c=i[0]-s,l=i[1]-o,f=2*(u*l-d*c);if(!(f>=-$b)){var _=u*u+d*d,h=c*c+l*l,m=(l*_-d*h)/f,p=(u*h-c*_)/f,y=Ab.pop()||new Pb;y.arc=t,y.site=a,y.x=m+s,y.y=(y.cy=p+o)+Math.sqrt(m*m+p*p),t.circle=y;for(var M=null,g=Gb._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){M=g.P;break}g=g.L}else{if(!g.R){M=g;break}g=g.R}Gb.insert(M,y),M||(jb=y)}}}}function Ob(t){var e=t.circle;e&&(e.P||(jb=e.N),Gb.remove(e),Ab.push(e),Mb(e),t.circle=null)}var Nb=[];function Wb(){Mb(this),this.edge=this.site=this.circle=null}function zb(t){var e=Nb.pop()||new Wb;return e.site=t,e}function Fb(t){Ob(t),Jb.remove(t),Nb.push(t),Mb(t)}function Cb(t){var e=t.circle,n=e.x,r=e.cy,a=[n,r],i=t.P,s=t.N,o=[t];Fb(t);for(var u=i;u.circle&&Math.abs(n-u.circle.x)<Vb&&Math.abs(r-u.circle.cy)<Vb;)i=u.P,o.unshift(u),Fb(u),u=i;o.unshift(u),Ob(u);for(var d=s;d.circle&&Math.abs(n-d.circle.x)<Vb&&Math.abs(r-d.circle.cy)<Vb;)s=d.N,o.push(d),Fb(d),d=s;o.push(d),Ob(d);var c,l=o.length;for(c=1;c<l;++c)d=o[c],u=o[c-1],kb(d.edge,u.site,d.site,a);u=o[0],(d=o[l-1]).edge=bb(u.site,d.site,null,a),Eb(u),Eb(d)}function Rb(t){for(var e,n,r,a,i=t[0],s=t[1],o=Jb._;o;)if((r=Ub(o,s)-i)>Vb)o=o.L;else{if(!((a=i-Ib(o,s))>Vb)){r>-Vb?(e=o.P,n=o):a>-Vb?(e=o,n=o.N):e=n=o;break}if(!o.R){e=o;break}o=o.R}!function(t){qb[t.index]={site:t,halfedges:[]}}(t);var u=zb(t);if(Jb.insert(e,u),e||n){if(e===n)return Ob(e),n=zb(e.site),Jb.insert(u,n),u.edge=n.edge=bb(e.site,u.site),Eb(e),void Eb(n);if(n){Ob(e),Ob(n);var d=e.site,c=d[0],l=d[1],f=t[0]-c,_=t[1]-l,h=n.site,m=h[0]-c,p=h[1]-l,y=2*(f*p-_*m),M=f*f+_*_,g=m*m+p*p,L=[(p*M-_*g)/y+c,(f*g-m*M)/y+l];kb(n.edge,d,h,L),u.edge=bb(d,t,null,L),n.edge=bb(t,h,null,L),Eb(e),Eb(n)}else u.edge=bb(e.site,u.site)}}function Ub(t,e){var n=t.site,r=n[0],a=n[1],i=a-e;if(!i)return r;var s=t.P;if(!s)return-1/0;var o=(n=s.site)[0],u=n[1],d=u-e;if(!d)return o;var c=o-r,l=1/i-1/d,f=c/d;return l?(-f+Math.sqrt(f*f-2*l*(c*c/(-2*d)-u+d/2+a-i/2)))/l+r:(r+o)/2}function Ib(t,e){var n=t.N;if(n)return Ub(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Jb,qb,Gb,Bb,Vb=1e-6,$b=1e-12;function Zb(t,e){return e[1]-t[1]||e[0]-t[0]}function Kb(t,e){var n,r,a,i=t.sort(Zb).pop();for(Bb=[],qb=new Array(t.length),Jb=new Yb,Gb=new Yb;;)if(a=jb,i&&(!a||i[1]<a.y||i[1]===a.y&&i[0]<a.x))i[0]===n&&i[1]===r||(Rb(i),n=i[0],r=i[1]),i=t.pop();else{if(!a)break;Cb(a.arc)}if(function(){for(var t,e,n,r,a=0,i=qb.length;a<i;++a)if((t=qb[a])&&(r=(e=t.halfedges).length)){var s=new Array(r),o=new Array(r);for(n=0;n<r;++n)s[n]=n,o[n]=xb(t,Bb[e[n]]);for(s.sort((function(t,e){return o[e]-o[t]})),n=0;n<r;++n)o[n]=e[s[n]];for(n=0;n<r;++n)e[n]=o[n]}}(),e){var s=+e[0][0],o=+e[0][1],u=+e[1][0],d=+e[1][1];!function(t,e,n,r){for(var a,i=Bb.length;i--;)Tb(a=Bb[i],t,e,n,r)&&Db(a,t,e,n,r)&&(Math.abs(a[0][0]-a[1][0])>Vb||Math.abs(a[0][1]-a[1][1])>Vb)||delete Bb[i]}(s,o,u,d),function(t,e,n,r){var a,i,s,o,u,d,c,l,f,_,h,m,p=qb.length,y=!0;for(a=0;a<p;++a)if(i=qb[a]){for(s=i.site,o=(u=i.halfedges).length;o--;)Bb[u[o]]||u.splice(o,1);for(o=0,d=u.length;o<d;)h=(_=Hb(i,Bb[u[o]]))[0],m=_[1],l=(c=Sb(i,Bb[u[++o%d]]))[0],f=c[1],(Math.abs(h-l)>Vb||Math.abs(m-f)>Vb)&&(u.splice(o,0,Bb.push(wb(s,_,Math.abs(h-t)<Vb&&r-m>Vb?[t,Math.abs(l-t)<Vb?f:r]:Math.abs(m-r)<Vb&&n-h>Vb?[Math.abs(f-r)<Vb?l:n,r]:Math.abs(h-n)<Vb&&m-e>Vb?[n,Math.abs(l-n)<Vb?f:e]:Math.abs(m-e)<Vb&&h-t>Vb?[Math.abs(f-e)<Vb?l:t,e]:null))-1),++d);d&&(y=!1)}if(y){var M,g,L,v=1/0;for(a=0,y=null;a<p;++a)(i=qb[a])&&(L=(M=(s=i.site)[0]-t)*M+(g=s[1]-e)*g)<v&&(v=L,y=i);if(y){var Y=[t,e],b=[t,r],w=[n,r],k=[n,e];y.halfedges.push(Bb.push(wb(s=y.site,Y,b))-1,Bb.push(wb(s,b,w))-1,Bb.push(wb(s,w,k))-1,Bb.push(wb(s,k,Y))-1)}}for(a=0;a<p;++a)(i=qb[a])&&(i.halfedges.length||delete qb[a])}(s,o,u,d)}this.edges=Bb,this.cells=qb,Jb=Gb=Bb=qb=null}Kb.prototype={constructor:Kb,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Sb(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(i=(a=n.halfedges).length)for(var a,i,s,o,u,d,c=n.site,l=-1,f=e[a[i-1]],_=f.left===c?f.right:f.left;++l<i;)s=_,_=(f=e[a[l]]).left===c?f.right:f.left,s&&_&&r<s.index&&r<_.index&&(u=s,d=_,((o=c)[0]-d[0])*(u[1]-o[1])-(o[0]-u[0])*(d[1]-o[1])<0)&&t.push([c.data,s.data,_.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,a,i=this,s=i._found||0,o=i.cells.length;!(a=i.cells[s]);)if(++s>=o)return null;var u=t-a.site[0],d=e-a.site[1],c=u*u+d*d;do{a=i.cells[r=s],s=null,a.halfedges.forEach((function(n){var r=i.edges[n],o=r.left;if(o!==a.site&&o||(o=r.right)){var u=t-o[0],d=e-o[1],l=u*u+d*d;l<c&&(c=l,s=o.index)}}))}while(null!==s);return i._found=r,null==n||c<=n*n?a.site:null}};var Xb=function(){var t=mb,e=pb,n=null;function r(r){return new Kb(r.map((function(n,a){var i=[Math.round(t(n,a,r)/Vb)*Vb,Math.round(e(n,a,r)/Vb)*Vb];return i.index=a,i.data=n,i})),n)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(e){return arguments.length?(t="function"==typeof e?e:hb(+e),r):t},r.y=function(t){return arguments.length?(e="function"==typeof t?t:hb(+t),r):e},r.extent=function(t){return arguments.length?(n=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(t){return arguments.length?(n=null==t?null:[[0,0],[+t[0],+t[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},Qb=function(t){return function(){return t}};function tw(t,e,n){this.target=t,this.type=e,this.transform=n}function ew(t,e,n){this.k=t,this.x=e,this.y=n}ew.prototype={constructor:ew,scale:function(t){return 1===t?this:new ew(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new ew(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var nw=new ew(1,0,0);function rw(t){for(;!t.__zoom;)if(!(t=t.parentNode))return nw;return t.__zoom}function aw(){he.stopImmediatePropagation()}rw.prototype=ew.prototype;var iw=function(){he.preventDefault(),he.stopImmediatePropagation()};function sw(){return!he.ctrlKey&&!he.button}function ow(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function uw(){return this.__zoom||nw}function dw(){return-he.deltaY*(1===he.deltaMode?.05:he.deltaMode?1:.002)}function cw(){return navigator.maxTouchPoints||"ontouchstart"in this}function lw(t,e,n){var r=t.invertX(e[0][0])-n[0][0],a=t.invertX(e[1][0])-n[1][0],i=t.invertY(e[0][1])-n[0][1],s=t.invertY(e[1][1])-n[1][1];return t.translate(a>r?(r+a)/2:Math.min(0,r)||Math.max(0,a),s>i?(i+s)/2:Math.min(0,i)||Math.max(0,s))}var fw=function(){var t,e,n=sw,r=ow,a=lw,i=dw,s=cw,o=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],d=250,c=Fr,l=mt("start","zoom","end"),f=500,_=150,h=0;function m(t){t.property("__zoom",uw).on("wheel.zoom",Y).on("mousedown.zoom",b).on("dblclick.zoom",w).filter(s).on("touchstart.zoom",k).on("touchmove.zoom",D).on("touchend.zoom touchcancel.zoom",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(t,e){return(e=Math.max(o[0],Math.min(o[1],e)))===t.k?t:new ew(e,t.x,t.y)}function y(t,e,n){var r=e[0]-n[0]*t.k,a=e[1]-n[1]*t.k;return r===t.x&&a===t.y?t:new ew(t.k,r,a)}function M(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function g(t,e,n){t.on("start.zoom",(function(){L(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){L(this,arguments).end()})).tween("zoom",(function(){var t=this,a=arguments,i=L(t,a),s=r.apply(t,a),o=null==n?M(s):"function"==typeof n?n.apply(t,a):n,u=Math.max(s[1][0]-s[0][0],s[1][1]-s[0][1]),d=t.__zoom,l="function"==typeof e?e.apply(t,a):e,f=c(d.invert(o).concat(u/d.k),l.invert(o).concat(u/l.k));return function(t){if(1===t)t=l;else{var e=f(t),n=u/e[2];t=new ew(n,o[0]-e[0]*n,o[1]-e[1]*n)}i.zoom(null,t)}}))}function L(t,e,n){return!n&&t.__zooming||new v(t,e)}function v(t,e){this.that=t,this.args=e,this.active=0,this.extent=r.apply(t,e),this.taps=0}function Y(){if(n.apply(this,arguments)){var t=L(this,arguments),e=this.__zoom,r=Math.max(o[0],Math.min(o[1],e.k*Math.pow(2,i.apply(this,arguments)))),s=Oe(this);if(t.wheel)t.mouse[0][0]===s[0]&&t.mouse[0][1]===s[1]||(t.mouse[1]=e.invert(t.mouse[0]=s)),clearTimeout(t.wheel);else{if(e.k===r)return;t.mouse=[s,e.invert(s)],Aa(this),t.start()}iw(),t.wheel=setTimeout((function(){t.wheel=null,t.end()}),_),t.zoom("mouse",a(y(p(e,r),t.mouse[0],t.mouse[1]),t.extent,u))}}function b(){if(!e&&n.apply(this,arguments)){var t=L(this,arguments,!0),r=xe(he.view).on("mousemove.zoom",(function(){if(iw(),!t.moved){var e=he.clientX-s,n=he.clientY-o;t.moved=e*e+n*n>h}t.zoom("mouse",a(y(t.that.__zoom,t.mouse[0]=Oe(t.that),t.mouse[1]),t.extent,u))}),!0).on("mouseup.zoom",(function(){r.on("mousemove.zoom mouseup.zoom",null),Ue(he.view,t.moved),iw(),t.end()}),!0),i=Oe(this),s=he.clientX,o=he.clientY;Re(he.view),aw(),t.mouse=[i,this.__zoom.invert(i)],Aa(this),t.start()}}function w(){if(n.apply(this,arguments)){var t=this.__zoom,e=Oe(this),i=t.invert(e),s=t.k*(he.shiftKey?.5:2),o=a(y(p(t,s),e,i),r.apply(this,arguments),u);iw(),d>0?xe(this).transition().duration(d).call(g,o,e):xe(this).call(m.transform,o)}}function k(){if(n.apply(this,arguments)){var e,r,a,i,s=he.touches,o=s.length,u=L(this,arguments,he.changedTouches.length===o);for(aw(),r=0;r<o;++r)a=s[r],i=[i=We(this,s,a.identifier),this.__zoom.invert(i),a.identifier],u.touch0?u.touch1||u.touch0[2]===i[2]||(u.touch1=i,u.taps=0):(u.touch0=i,e=!0,u.taps=1+!!t);t&&(t=clearTimeout(t)),e&&(u.taps<2&&(t=setTimeout((function(){t=null}),f)),Aa(this),u.start())}}function D(){if(this.__zooming){var e,n,r,i,s=L(this,arguments),o=he.changedTouches,d=o.length;for(iw(),t&&(t=clearTimeout(t)),s.taps=0,e=0;e<d;++e)n=o[e],r=We(this,o,n.identifier),s.touch0&&s.touch0[2]===n.identifier?s.touch0[0]=r:s.touch1&&s.touch1[2]===n.identifier&&(s.touch1[0]=r);if(n=s.that.__zoom,s.touch1){var c=s.touch0[0],l=s.touch0[1],f=s.touch1[0],_=s.touch1[1],h=(h=f[0]-c[0])*h+(h=f[1]-c[1])*h,m=(m=_[0]-l[0])*m+(m=_[1]-l[1])*m;n=p(n,Math.sqrt(h/m)),r=[(c[0]+f[0])/2,(c[1]+f[1])/2],i=[(l[0]+_[0])/2,(l[1]+_[1])/2]}else{if(!s.touch0)return;r=s.touch0[0],i=s.touch0[1]}s.zoom("touch",a(y(n,r,i),s.extent,u))}}function T(){if(this.__zooming){var t,n,r=L(this,arguments),a=he.changedTouches,i=a.length;for(aw(),e&&clearTimeout(e),e=setTimeout((function(){e=null}),f),t=0;t<i;++t)n=a[t],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var s=xe(this).on("dblclick.zoom");s&&s.apply(this,arguments)}}}return m.transform=function(t,e,n){var r=t.selection?t.selection():t;r.property("__zoom",uw),t!==r?g(t,e,n):r.interrupt().each((function(){L(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},m.scaleBy=function(t,e,n){m.scaleTo(t,(function(){var t=this.__zoom.k,n="function"==typeof e?e.apply(this,arguments):e;return t*n}),n)},m.scaleTo=function(t,e,n){m.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,s=null==n?M(t):"function"==typeof n?n.apply(this,arguments):n,o=i.invert(s),d="function"==typeof e?e.apply(this,arguments):e;return a(y(p(i,d),s,o),t,u)}),n)},m.translateBy=function(t,e,n){m.transform(t,(function(){return a(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),u)}))},m.translateTo=function(t,e,n,i){m.transform(t,(function(){var t=r.apply(this,arguments),s=this.__zoom,o=null==i?M(t):"function"==typeof i?i.apply(this,arguments):i;return a(nw.translate(o[0],o[1]).scale(s.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,u)}),i)},v.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){Le(new tw(m,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},m.wheelDelta=function(t){return arguments.length?(i="function"==typeof t?t:Qb(+t),m):i},m.filter=function(t){return arguments.length?(n="function"==typeof t?t:Qb(!!t),m):n},m.touchable=function(t){return arguments.length?(s="function"==typeof t?t:Qb(!!t),m):s},m.extent=function(t){return arguments.length?(r="function"==typeof t?t:Qb([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),m):r},m.scaleExtent=function(t){return arguments.length?(o[0]=+t[0],o[1]=+t[1],m):[o[0],o[1]]},m.translateExtent=function(t){return arguments.length?(u[0][0]=+t[0][0],u[1][0]=+t[1][0],u[0][1]=+t[0][1],u[1][1]=+t[1][1],m):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},m.constrain=function(t){return arguments.length?(a=t,m):a},m.duration=function(t){return arguments.length?(d=+t,m):d},m.interpolate=function(t){return arguments.length?(c=t,m):c},m.on=function(){var t=l.on.apply(l,arguments);return t===l?m:t},m.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,m):Math.sqrt(h)},m};n.d(e,"version",(function(){return"5.12.0"})),n.d(e,"bisect",(function(){return u})),n.d(e,"bisectRight",(function(){return s})),n.d(e,"bisectLeft",(function(){return o})),n.d(e,"ascending",(function(){return r})),n.d(e,"bisector",(function(){return a})),n.d(e,"cross",(function(){return l})),n.d(e,"descending",(function(){return f})),n.d(e,"deviation",(function(){return m})),n.d(e,"extent",(function(){return p})),n.d(e,"histogram",(function(){return H})),n.d(e,"thresholdFreedmanDiaconis",(function(){return A})),n.d(e,"thresholdScott",(function(){return P})),n.d(e,"thresholdSturges",(function(){return S})),n.d(e,"max",(function(){return E})),n.d(e,"mean",(function(){return O})),n.d(e,"median",(function(){return N})),n.d(e,"merge",(function(){return W})),n.d(e,"min",(function(){return z})),n.d(e,"pairs",(function(){return d})),n.d(e,"permute",(function(){return F})),n.d(e,"quantile",(function(){return j})),n.d(e,"range",(function(){return Y})),n.d(e,"scan",(function(){return C})),n.d(e,"shuffle",(function(){return R})),n.d(e,"sum",(function(){return U})),n.d(e,"ticks",(function(){return D})),n.d(e,"tickIncrement",(function(){return T})),n.d(e,"tickStep",(function(){return x})),n.d(e,"transpose",(function(){return I})),n.d(e,"variance",(function(){return h})),n.d(e,"zip",(function(){return q})),n.d(e,"axisTop",(function(){return it})),n.d(e,"axisRight",(function(){return st})),n.d(e,"axisBottom",(function(){return ot})),n.d(e,"axisLeft",(function(){return ut})),n.d(e,"brush",(function(){return Ys})),n.d(e,"brushX",(function(){return Ls})),n.d(e,"brushY",(function(){return vs})),n.d(e,"brushSelection",(function(){return gs})),n.d(e,"chord",(function(){return js})),n.d(e,"ribbon",(function(){return qs})),n.d(e,"nest",(function(){return $s})),n.d(e,"set",(function(){return ro})),n.d(e,"map",(function(){return Vs})),n.d(e,"keys",(function(){return ao})),n.d(e,"values",(function(){return io})),n.d(e,"entries",(function(){return so})),n.d(e,"color",(function(){return hn})),n.d(e,"rgb",(function(){return Mn})),n.d(e,"hsl",(function(){return kn})),n.d(e,"lab",(function(){return Fn})),n.d(e,"hcl",(function(){return Bn})),n.d(e,"lch",(function(){return Gn})),n.d(e,"gray",(function(){return zn})),n.d(e,"cubehelix",(function(){return nr})),n.d(e,"contours",(function(){return yo})),n.d(e,"contourDensity",(function(){return bo})),n.d(e,"dispatch",(function(){return mt})),n.d(e,"drag",(function(){return $e})),n.d(e,"dragDisable",(function(){return Re})),n.d(e,"dragEnable",(function(){return Ue})),n.d(e,"dsvFormat",(function(){return Po})),n.d(e,"csvParse",(function(){return Oo})),n.d(e,"csvParseRows",(function(){return No})),n.d(e,"csvFormat",(function(){return Wo})),n.d(e,"csvFormatBody",(function(){return zo})),n.d(e,"csvFormatRows",(function(){return Fo})),n.d(e,"tsvParse",(function(){return Ro})),n.d(e,"tsvParseRows",(function(){return Uo})),n.d(e,"tsvFormat",(function(){return Io})),n.d(e,"tsvFormatBody",(function(){return Jo})),n.d(e,"tsvFormatRows",(function(){return qo})),n.d(e,"autoType",(function(){return Go})),n.d(e,"easeLinear",(function(){return ii})),n.d(e,"easeQuad",(function(){return ui})),n.d(e,"easeQuadIn",(function(){return si})),n.d(e,"easeQuadOut",(function(){return oi})),n.d(e,"easeQuadInOut",(function(){return ui})),n.d(e,"easeCubic",(function(){return li})),n.d(e,"easeCubicIn",(function(){return di})),n.d(e,"easeCubicOut",(function(){return ci})),n.d(e,"easeCubicInOut",(function(){return li})),n.d(e,"easePoly",(function(){return hi})),n.d(e,"easePolyIn",(function(){return fi})),n.d(e,"easePolyOut",(function(){return _i})),n.d(e,"easePolyInOut",(function(){return hi})),n.d(e,"easeSin",(function(){return gi})),n.d(e,"easeSinIn",(function(){return yi})),n.d(e,"easeSinOut",(function(){return Mi})),n.d(e,"easeSinInOut",(function(){return gi})),n.d(e,"easeExp",(function(){return Yi})),n.d(e,"easeExpIn",(function(){return Li})),n.d(e,"easeExpOut",(function(){return vi})),n.d(e,"easeExpInOut",(function(){return Yi})),n.d(e,"easeCircle",(function(){return ki})),n.d(e,"easeCircleIn",(function(){return bi})),n.d(e,"easeCircleOut",(function(){return wi})),n.d(e,"easeCircleInOut",(function(){return ki})),n.d(e,"easeBounce",(function(){return Wi})),n.d(e,"easeBounceIn",(function(){return Ni})),n.d(e,"easeBounceOut",(function(){return Wi})),n.d(e,"easeBounceInOut",(function(){return zi})),n.d(e,"easeBack",(function(){return Ri})),n.d(e,"easeBackIn",(function(){return Fi})),n.d(e,"easeBackOut",(function(){return Ci})),n.d(e,"easeBackInOut",(function(){return Ri})),n.d(e,"easeElastic",(function(){return Ji})),n.d(e,"easeElasticIn",(function(){return Ii})),n.d(e,"easeElasticOut",(function(){return Ji})),n.d(e,"easeElasticInOut",(function(){return qi})),n.d(e,"blob",(function(){return Vo})),n.d(e,"buffer",(function(){return Zo})),n.d(e,"dsv",(function(){return tu})),n.d(e,"csv",(function(){return eu})),n.d(e,"tsv",(function(){return nu})),n.d(e,"image",(function(){return ru})),n.d(e,"json",(function(){return iu})),n.d(e,"text",(function(){return Xo})),n.d(e,"xml",(function(){return ou})),n.d(e,"html",(function(){return uu})),n.d(e,"svg",(function(){return du})),n.d(e,"forceCenter",(function(){return cu})),n.d(e,"forceCollide",(function(){return bu})),n.d(e,"forceLink",(function(){return Du})),n.d(e,"forceManyBody",(function(){return Au})),n.d(e,"forceRadial",(function(){return Pu})),n.d(e,"forceSimulation",(function(){return ju})),n.d(e,"forceX",(function(){return Eu})),n.d(e,"forceY",(function(){return Ou})),n.d(e,"formatDefaultLocale",(function(){return Xu})),n.d(e,"format",(function(){return Iu})),n.d(e,"formatPrefix",(function(){return Ju})),n.d(e,"formatLocale",(function(){return Ku})),n.d(e,"formatSpecifier",(function(){return Fu})),n.d(e,"FormatSpecifier",(function(){return Cu})),n.d(e,"precisionFixed",(function(){return Qu})),n.d(e,"precisionPrefix",(function(){return td})),n.d(e,"precisionRound",(function(){return ed})),n.d(e,"geoArea",(function(){return Vd})),n.d(e,"geoBounds",(function(){return Cc})),n.d(e,"geoCentroid",(function(){return Xc})),n.d(e,"geoCircle",(function(){return dl})),n.d(e,"geoClipAntimeridian",(function(){return vl})),n.d(e,"geoClipCircle",(function(){return Yl})),n.d(e,"geoClipExtent",(function(){return Hl})),n.d(e,"geoClipRectangle",(function(){return Dl})),n.d(e,"geoContains",(function(){return Vl})),n.d(e,"geoDistance",(function(){return Fl})),n.d(e,"geoGraticule",(function(){return Kl})),n.d(e,"geoGraticule10",(function(){return Xl})),n.d(e,"geoInterpolate",(function(){return rf})),n.d(e,"geoLength",(function(){return Nl})),n.d(e,"geoPath",(function(){return n_})),n.d(e,"geoAlbers",(function(){return Y_})),n.d(e,"geoAlbersUsa",(function(){return b_})),n.d(e,"geoAzimuthalEqualArea",(function(){return T_})),n.d(e,"geoAzimuthalEqualAreaRaw",(function(){return D_})),n.d(e,"geoAzimuthalEquidistant",(function(){return S_})),n.d(e,"geoAzimuthalEquidistantRaw",(function(){return x_})),n.d(e,"geoConicConformal",(function(){return O_})),n.d(e,"geoConicConformalRaw",(function(){return E_})),n.d(e,"geoConicEqualArea",(function(){return v_})),n.d(e,"geoConicEqualAreaRaw",(function(){return L_})),n.d(e,"geoConicEquidistant",(function(){return F_})),n.d(e,"geoConicEquidistantRaw",(function(){return z_})),n.d(e,"geoEqualEarth",(function(){return G_})),n.d(e,"geoEqualEarthRaw",(function(){return q_})),n.d(e,"geoEquirectangular",(function(){return W_})),n.d(e,"geoEquirectangularRaw",(function(){return N_})),n.d(e,"geoGnomonic",(function(){return V_})),n.d(e,"geoGnomonicRaw",(function(){return B_})),n.d(e,"geoIdentity",(function(){return Z_})),n.d(e,"geoProjection",(function(){return y_})),n.d(e,"geoProjectionMutator",(function(){return M_})),n.d(e,"geoMercator",(function(){return j_})),n.d(e,"geoMercatorRaw",(function(){return H_})),n.d(e,"geoNaturalEarth1",(function(){return X_})),n.d(e,"geoNaturalEarth1Raw",(function(){return K_})),n.d(e,"geoOrthographic",(function(){return th})),n.d(e,"geoOrthographicRaw",(function(){return Q_})),n.d(e,"geoStereographic",(function(){return nh})),n.d(e,"geoStereographicRaw",(function(){return eh})),n.d(e,"geoTransverseMercator",(function(){return ah})),n.d(e,"geoTransverseMercatorRaw",(function(){return rh})),n.d(e,"geoRotation",(function(){return sl})),n.d(e,"geoStream",(function(){return Cd})),n.d(e,"geoTransform",(function(){return r_})),n.d(e,"cluster",(function(){return uh})),n.d(e,"hierarchy",(function(){return ch})),n.d(e,"pack",(function(){return Oh})),n.d(e,"packSiblings",(function(){return Sh})),n.d(e,"packEnclose",(function(){return ph})),n.d(e,"partition",(function(){return Rh})),n.d(e,"stratify",(function(){return Bh})),n.d(e,"tree",(function(){return tm})),n.d(e,"treemap",(function(){return im})),n.d(e,"treemapBinary",(function(){return sm})),n.d(e,"treemapDice",(function(){return Ch})),n.d(e,"treemapSlice",(function(){return em})),n.d(e,"treemapSliceDice",(function(){return om})),n.d(e,"treemapSquarify",(function(){return am})),n.d(e,"treemapResquarify",(function(){return um})),n.d(e,"interpolate",(function(){return Tr})),n.d(e,"interpolateArray",(function(){return pr})),n.d(e,"interpolateBasis",(function(){return ir})),n.d(e,"interpolateBasisClosed",(function(){return sr})),n.d(e,"interpolateDate",(function(){return yr})),n.d(e,"interpolateDiscrete",(function(){return xr})),n.d(e,"interpolateHue",(function(){return Sr})),n.d(e,"interpolateNumber",(function(){return Mr})),n.d(e,"interpolateObject",(function(){return gr})),n.d(e,"interpolateRound",(function(){return Hr})),n.d(e,"interpolateString",(function(){return Dr})),n.d(e,"interpolateTransformCss",(function(){return Or})),n.d(e,"interpolateTransformSvg",(function(){return Nr})),n.d(e,"interpolateZoom",(function(){return Fr})),n.d(e,"interpolateRgb",(function(){return fr})),n.d(e,"interpolateRgbBasis",(function(){return hr})),n.d(e,"interpolateRgbBasisClosed",(function(){return mr})),n.d(e,"interpolateHsl",(function(){return Rr})),n.d(e,"interpolateHslLong",(function(){return Ur})),n.d(e,"interpolateLab",(function(){return Ir})),n.d(e,"interpolateHcl",(function(){return qr})),n.d(e,"interpolateHclLong",(function(){return Gr})),n.d(e,"interpolateCubehelix",(function(){return Vr})),n.d(e,"interpolateCubehelixLong",(function(){return $r})),n.d(e,"piecewise",(function(){return Zr})),n.d(e,"quantize",(function(){return Qr})),n.d(e,"path",(function(){return Fs})),n.d(e,"polygonArea",(function(){return dm})),n.d(e,"polygonCentroid",(function(){return cm})),n.d(e,"polygonHull",(function(){return hm})),n.d(e,"polygonContains",(function(){return mm})),n.d(e,"polygonLength",(function(){return pm})),n.d(e,"quadtree",(function(){return yu})),n.d(e,"randomUniform",(function(){return Mm})),n.d(e,"randomNormal",(function(){return gm})),n.d(e,"randomLogNormal",(function(){return Lm})),n.d(e,"randomBates",(function(){return Ym})),n.d(e,"randomIrwinHall",(function(){return vm})),n.d(e,"randomExponential",(function(){return bm})),n.d(e,"scaleBand",(function(){return jm})),n.d(e,"scalePoint",(function(){return Am})),n.d(e,"scaleIdentity",(function(){return Bm})),n.d(e,"scaleLinear",(function(){return Gm})),n.d(e,"scaleLog",(function(){return np})),n.d(e,"scaleSymlog",(function(){return sp})),n.d(e,"scaleOrdinal",(function(){return Hm})),n.d(e,"scaleImplicit",(function(){return Sm})),n.d(e,"scalePow",(function(){return lp})),n.d(e,"scaleSqrt",(function(){return fp})),n.d(e,"scaleQuantile",(function(){return _p})),n.d(e,"scaleQuantize",(function(){return hp})),n.d(e,"scaleThreshold",(function(){return mp})),n.d(e,"scaleTime",(function(){return lg})),n.d(e,"scaleUtc",(function(){return fg})),n.d(e,"scaleSequential",(function(){return mg})),n.d(e,"scaleSequentialLog",(function(){return pg})),n.d(e,"scaleSequentialPow",(function(){return Mg})),n.d(e,"scaleSequentialSqrt",(function(){return gg})),n.d(e,"scaleSequentialSymlog",(function(){return yg})),n.d(e,"scaleSequentialQuantile",(function(){return Lg})),n.d(e,"scaleDiverging",(function(){return Yg})),n.d(e,"scaleDivergingLog",(function(){return bg})),n.d(e,"scaleDivergingPow",(function(){return kg})),n.d(e,"scaleDivergingSqrt",(function(){return Dg})),n.d(e,"scaleDivergingSymlog",(function(){return wg})),n.d(e,"tickFormat",(function(){return Jm})),n.d(e,"schemeCategory10",(function(){return xg})),n.d(e,"schemeAccent",(function(){return Sg})),n.d(e,"schemeDark2",(function(){return Hg})),n.d(e,"schemePaired",(function(){return jg})),n.d(e,"schemePastel1",(function(){return Ag})),n.d(e,"schemePastel2",(function(){return Pg})),n.d(e,"schemeSet1",(function(){return Eg})),n.d(e,"schemeSet2",(function(){return Og})),n.d(e,"schemeSet3",(function(){return Ng})),n.d(e,"schemeTableau10",(function(){return Wg})),n.d(e,"interpolateBrBG",(function(){return Cg})),n.d(e,"schemeBrBG",(function(){return Fg})),n.d(e,"interpolatePRGn",(function(){return Ug})),n.d(e,"schemePRGn",(function(){return Rg})),n.d(e,"interpolatePiYG",(function(){return Jg})),n.d(e,"schemePiYG",(function(){return Ig})),n.d(e,"interpolatePuOr",(function(){return Gg})),n.d(e,"schemePuOr",(function(){return qg})),n.d(e,"interpolateRdBu",(function(){return Vg})),n.d(e,"schemeRdBu",(function(){return Bg})),n.d(e,"interpolateRdGy",(function(){return Zg})),n.d(e,"schemeRdGy",(function(){return $g})),n.d(e,"interpolateRdYlBu",(function(){return Xg})),n.d(e,"schemeRdYlBu",(function(){return Kg})),n.d(e,"interpolateRdYlGn",(function(){return tL})),n.d(e,"schemeRdYlGn",(function(){return Qg})),n.d(e,"interpolateSpectral",(function(){return nL})),n.d(e,"schemeSpectral",(function(){return eL})),n.d(e,"interpolateBuGn",(function(){return aL})),n.d(e,"schemeBuGn",(function(){return rL})),n.d(e,"interpolateBuPu",(function(){return sL})),n.d(e,"schemeBuPu",(function(){return iL})),n.d(e,"interpolateGnBu",(function(){return uL})),n.d(e,"schemeGnBu",(function(){return oL})),n.d(e,"interpolateOrRd",(function(){return cL})),n.d(e,"schemeOrRd",(function(){return dL})),n.d(e,"interpolatePuBuGn",(function(){return fL})),n.d(e,"schemePuBuGn",(function(){return lL})),n.d(e,"interpolatePuBu",(function(){return hL})),n.d(e,"schemePuBu",(function(){return _L})),n.d(e,"interpolatePuRd",(function(){return pL})),n.d(e,"schemePuRd",(function(){return mL})),n.d(e,"interpolateRdPu",(function(){return ML})),n.d(e,"schemeRdPu",(function(){return yL})),n.d(e,"interpolateYlGnBu",(function(){return LL})),n.d(e,"schemeYlGnBu",(function(){return gL})),n.d(e,"interpolateYlGn",(function(){return YL})),n.d(e,"schemeYlGn",(function(){return vL})),n.d(e,"interpolateYlOrBr",(function(){return wL})),n.d(e,"schemeYlOrBr",(function(){return bL})),n.d(e,"interpolateYlOrRd",(function(){return DL})),n.d(e,"schemeYlOrRd",(function(){return kL})),n.d(e,"interpolateBlues",(function(){return xL})),n.d(e,"schemeBlues",(function(){return TL})),n.d(e,"interpolateGreens",(function(){return HL})),n.d(e,"schemeGreens",(function(){return SL})),n.d(e,"interpolateGreys",(function(){return AL})),n.d(e,"schemeGreys",(function(){return jL})),n.d(e,"interpolatePurples",(function(){return EL})),n.d(e,"schemePurples",(function(){return PL})),n.d(e,"interpolateReds",(function(){return NL})),n.d(e,"schemeReds",(function(){return OL})),n.d(e,"interpolateOranges",(function(){return zL})),n.d(e,"schemeOranges",(function(){return WL})),n.d(e,"interpolateCividis",(function(){return FL})),n.d(e,"interpolateCubehelixDefault",(function(){return CL})),n.d(e,"interpolateRainbow",(function(){return JL})),n.d(e,"interpolateWarm",(function(){return RL})),n.d(e,"interpolateCool",(function(){return UL})),n.d(e,"interpolateSinebow",(function(){return VL})),n.d(e,"interpolateTurbo",(function(){return $L})),n.d(e,"interpolateViridis",(function(){return KL})),n.d(e,"interpolateMagma",(function(){return XL})),n.d(e,"interpolateInferno",(function(){return QL})),n.d(e,"interpolatePlasma",(function(){return tv})),n.d(e,"create",(function(){return Se})),n.d(e,"creator",(function(){return vt})),n.d(e,"local",(function(){return je})),n.d(e,"matcher",(function(){return Dt})),n.d(e,"mouse",(function(){return Oe})),n.d(e,"namespace",(function(){return Mt})),n.d(e,"namespaces",(function(){return yt})),n.d(e,"clientPoint",(function(){return Ee})),n.d(e,"select",(function(){return xe})),n.d(e,"selectAll",(function(){return Ne})),n.d(e,"selection",(function(){return Te})),n.d(e,"selector",(function(){return bt})),n.d(e,"selectorAll",(function(){return kt})),n.d(e,"style",(function(){return It})),n.d(e,"touch",(function(){return We})),n.d(e,"touches",(function(){return ze})),n.d(e,"window",(function(){return Ft})),n.d(e,"event",(function(){return he})),n.d(e,"customEvent",(function(){return Le})),n.d(e,"arc",(function(){return Lv})),n.d(e,"area",(function(){return Dv})),n.d(e,"line",(function(){return kv})),n.d(e,"pie",(function(){return Sv})),n.d(e,"areaRadial",(function(){return Ov})),n.d(e,"radialArea",(function(){return Ov})),n.d(e,"lineRadial",(function(){return Ev})),n.d(e,"radialLine",(function(){return Ev})),n.d(e,"pointRadial",(function(){return Nv})),n.d(e,"linkHorizontal",(function(){return Jv})),n.d(e,"linkVertical",(function(){return qv})),n.d(e,"linkRadial",(function(){return Gv})),n.d(e,"symbol",(function(){return cY})),n.d(e,"symbols",(function(){return dY})),n.d(e,"symbolCircle",(function(){return Bv})),n.d(e,"symbolCross",(function(){return Vv})),n.d(e,"symbolDiamond",(function(){return Kv})),n.d(e,"symbolSquare",(function(){return nY})),n.d(e,"symbolStar",(function(){return eY})),n.d(e,"symbolTriangle",(function(){return aY})),n.d(e,"symbolWye",(function(){return uY})),n.d(e,"curveBasisClosed",(function(){return pY})),n.d(e,"curveBasisOpen",(function(){return MY})),n.d(e,"curveBasis",(function(){return hY})),n.d(e,"curveBundle",(function(){return LY})),n.d(e,"curveCardinalClosed",(function(){return kY})),n.d(e,"curveCardinalOpen",(function(){return TY})),n.d(e,"curveCardinal",(function(){return bY})),n.d(e,"curveCatmullRomClosed",(function(){return AY})),n.d(e,"curveCatmullRomOpen",(function(){return EY})),n.d(e,"curveCatmullRom",(function(){return HY})),n.d(e,"curveLinearClosed",(function(){return NY})),n.d(e,"curveLinear",(function(){return Yv})),n.d(e,"curveMonotoneX",(function(){return JY})),n.d(e,"curveMonotoneY",(function(){return qY})),n.d(e,"curveNatural",(function(){return VY})),n.d(e,"curveStep",(function(){return ZY})),n.d(e,"curveStepAfter",(function(){return XY})),n.d(e,"curveStepBefore",(function(){return KY})),n.d(e,"stack",(function(){return nb})),n.d(e,"stackOffsetExpand",(function(){return rb})),n.d(e,"stackOffsetDiverging",(function(){return ab})),n.d(e,"stackOffsetNone",(function(){return QY})),n.d(e,"stackOffsetSilhouette",(function(){return ib})),n.d(e,"stackOffsetWiggle",(function(){return sb})),n.d(e,"stackOrderAppearance",(function(){return ob})),n.d(e,"stackOrderAscending",(function(){return db})),n.d(e,"stackOrderDescending",(function(){return lb})),n.d(e,"stackOrderInsideOut",(function(){return fb})),n.d(e,"stackOrderNone",(function(){return tb})),n.d(e,"stackOrderReverse",(function(){return _b})),n.d(e,"timeInterval",(function(){return Mp})),n.d(e,"timeMillisecond",(function(){return Lp})),n.d(e,"timeMilliseconds",(function(){return vp})),n.d(e,"utcMillisecond",(function(){return Lp})),n.d(e,"utcMilliseconds",(function(){return vp})),n.d(e,"timeSecond",(function(){return kp})),n.d(e,"timeSeconds",(function(){return Dp})),n.d(e,"utcSecond",(function(){return kp})),n.d(e,"utcSeconds",(function(){return Dp})),n.d(e,"timeMinute",(function(){return xp})),n.d(e,"timeMinutes",(function(){return Sp})),n.d(e,"timeHour",(function(){return jp})),n.d(e,"timeHours",(function(){return Ap})),n.d(e,"timeDay",(function(){return Ep})),n.d(e,"timeDays",(function(){return Op})),n.d(e,"timeWeek",(function(){return Wp})),n.d(e,"timeWeeks",(function(){return Jp})),n.d(e,"timeSunday",(function(){return Wp})),n.d(e,"timeSundays",(function(){return Jp})),n.d(e,"timeMonday",(function(){return zp})),n.d(e,"timeMondays",(function(){return qp})),n.d(e,"timeTuesday",(function(){return Fp})),n.d(e,"timeTuesdays",(function(){return Gp})),n.d(e,"timeWednesday",(function(){return Cp})),n.d(e,"timeWednesdays",(function(){return Bp})),n.d(e,"timeThursday",(function(){return Rp})),n.d(e,"timeThursdays",(function(){return Vp})),n.d(e,"timeFriday",(function(){return Up})),n.d(e,"timeFridays",(function(){return $p})),n.d(e,"timeSaturday",(function(){return Ip})),n.d(e,"timeSaturdays",(function(){return Zp})),n.d(e,"timeMonth",(function(){return Xp})),n.d(e,"timeMonths",(function(){return Qp})),n.d(e,"timeYear",(function(){return ey})),n.d(e,"timeYears",(function(){return ny})),n.d(e,"utcMinute",(function(){return ay})),n.d(e,"utcMinutes",(function(){return iy})),n.d(e,"utcHour",(function(){return oy})),n.d(e,"utcHours",(function(){return uy})),n.d(e,"utcDay",(function(){return cy})),n.d(e,"utcDays",(function(){return ly})),n.d(e,"utcWeek",(function(){return _y})),n.d(e,"utcWeeks",(function(){return Ly})),n.d(e,"utcSunday",(function(){return _y})),n.d(e,"utcSundays",(function(){return Ly})),n.d(e,"utcMonday",(function(){return hy})),n.d(e,"utcMondays",(function(){return vy})),n.d(e,"utcTuesday",(function(){return my})),n.d(e,"utcTuesdays",(function(){return Yy})),n.d(e,"utcWednesday",(function(){return py})),n.d(e,"utcWednesdays",(function(){return by})),n.d(e,"utcThursday",(function(){return yy})),n.d(e,"utcThursdays",(function(){return wy})),n.d(e,"utcFriday",(function(){return My})),n.d(e,"utcFridays",(function(){return ky})),n.d(e,"utcSaturday",(function(){return gy})),n.d(e,"utcSaturdays",(function(){return Dy})),n.d(e,"utcMonth",(function(){return xy})),n.d(e,"utcMonths",(function(){return Sy})),n.d(e,"utcYear",(function(){return jy})),n.d(e,"utcYears",(function(){return Ay})),n.d(e,"timeFormatDefaultLocale",(function(){return XM})),n.d(e,"timeFormat",(function(){return zy})),n.d(e,"timeParse",(function(){return Fy})),n.d(e,"utcFormat",(function(){return Cy})),n.d(e,"utcParse",(function(){return Ry})),n.d(e,"timeFormatLocale",(function(){return Ny})),n.d(e,"isoFormat",(function(){return QM})),n.d(e,"isoParse",(function(){return tg})),n.d(e,"now",(function(){return da})),n.d(e,"timer",(function(){return fa})),n.d(e,"timerFlush",(function(){return _a})),n.d(e,"timeout",(function(){return ya})),n.d(e,"interval",(function(){return Ma})),n.d(e,"transition",(function(){return ni})),n.d(e,"active",(function(){return $i})),n.d(e,"interrupt",(function(){return Aa})),n.d(e,"voronoi",(function(){return Xb})),n.d(e,"zoom",(function(){return fw})),n.d(e,"zoomTransform",(function(){return rw})),n.d(e,"zoomIdentity",(function(){return nw}))},function(t,e,n){!function(t){"use strict";t.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(t){return/^nm$/i.test(t)},meridiem:function(t,e,n){return t<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(t){return function(e,n,i,s){var o=r(e),u=a[t][r(e)];return 2===o&&(u=u[n?0:1]),u.replace(/%d/i,e)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,n){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(t){return function(e,a,i,s){var o=n(e),u=r[t][n(e)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,e)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,n){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};t.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,n){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};t.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(t){return/^(gündüz|axşam)$/.test(t)},meridiem:function(t,e,n){return t<4?"gecə":t<12?"səhər":t<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(t){if(0===t)return t+"-ıncı";var n=t%10;return t+(e[n]||e[t%100-n]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r,a;return"m"===n?e?"хвіліна":"хвіліну":"h"===n?e?"гадзіна":"гадзіну":t+" "+(r=+t,a={ss:e?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:e?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:e?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}t.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:e,mm:e,h:e,hh:e,d:"дзень",dd:e,M:"месяц",MM:e,y:"год",yy:e},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(t){return/^(дня|вечара)$/.test(t)},meridiem:function(t,e,n){return t<4?"ночы":t<12?"раніцы":t<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t%10!=2&&t%10!=3||t%100==12||t%100==13?t+"-ы":t+"-і";case"D":return t+"-га";default:return t}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,n=t%100;return 0===t?t+"-ев":0===n?t+"-ен":n>10&&n<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};t.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(t){return t.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(t,e){return 12===t&&(t=0),"রাত"===e&&t>=4||"দুপুর"===e&&t<5||"বিকাল"===e?t+12:t},meridiem:function(t,e,n){return t<4?"রাত":t<10?"সকাল":t<17?"দুপুর":t<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};t.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(t){return t.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(t,e){return 12===t&&(t=0),"མཚན་མོ"===e&&t>=4||"ཉིན་གུང"===e&&t<5||"དགོང་དག"===e?t+12:t},meridiem:function(t,e,n){return t<4?"མཚན་མོ":t<10?"ཞོགས་ཀས":t<17?"ཉིན་གུང":t<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){return t+" "+function(t,e){return 2===e?function(t){var e={m:"v",b:"v",d:"z"};return void 0===e[t.charAt(0)]?t:e[t.charAt(0)]+t.substring(1)}(t):t}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],t)}t.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:e,h:"un eur",hh:"%d eur",d:"un devezh",dd:e,M:"ur miz",MM:e,y:"ur bloaz",yy:function(t){switch(function t(e){return e>9?t(e%10):e}(t)){case 1:case 3:case 4:case 5:case 9:return t+" bloaz";default:return t+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(t){return t+(1===t?"añ":"vet")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r=t+" ";switch(n){case"ss":return r+=1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi";case"m":return e?"jedna minuta":"jedne minute";case"mm":return r+=1===t?"minuta":2===t||3===t||4===t?"minute":"minuta";case"h":return e?"jedan sat":"jednog sata";case"hh":return r+=1===t?"sat":2===t||3===t||4===t?"sata":"sati";case"dd":return r+=1===t?"dan":"dana";case"MM":return r+=1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci";case"yy":return r+=1===t?"godina":2===t||3===t||4===t?"godine":"godina"}}t.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:e,m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(t,e){var n=1===t?"r":2===t?"n":3===t?"r":4===t?"t":"è";return"w"!==e&&"W"!==e||(n="a"),t+n},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(t){return t>1&&t<5&&1!=~~(t/10)}function s(t,e,n,r){var a=t+" ";switch(n){case"s":return e||r?"pár sekund":"pár sekundami";case"ss":return e||r?a+(i(t)?"sekundy":"sekund"):a+"sekundami";case"m":return e?"minuta":r?"minutu":"minutou";case"mm":return e||r?a+(i(t)?"minuty":"minut"):a+"minutami";case"h":return e?"hodina":r?"hodinu":"hodinou";case"hh":return e||r?a+(i(t)?"hodiny":"hodin"):a+"hodinami";case"d":return e||r?"den":"dnem";case"dd":return e||r?a+(i(t)?"dny":"dní"):a+"dny";case"M":return e||r?"měsíc":"měsícem";case"MM":return e||r?a+(i(t)?"měsíce":"měsíců"):a+"měsíci";case"y":return e||r?"rok":"rokem";case"yy":return e||r?a+(i(t)?"roky":"let"):a+"lety"}}t.defineLocale("cs",{months:e,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(t){return t+(/сехет$/i.exec(t)?"рен":/ҫул$/i.exec(t)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(t){var e="";return t>20?e=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(e=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),t+e},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[n][0]:a[n][1]}t.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[n][0]:a[n][1]}t.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[n][0]:a[n][1]}t.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];t.defineLocale("dv",{months:e,monthsShort:e,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(t){return"މފ"===t},meridiem:function(t,e,n){return t<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(t,e){return t?"string"==typeof e&&/D/.test(e.substring(0,e.indexOf("MMMM")))?this._monthsGenitiveEl[t.month()]:this._monthsNominativeEl[t.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(t,e,n){return t>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(t){return"μ"===(t+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(t,e){var n,r=this._calendarEl[t],a=e&&e.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(e)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(t){return"p"===t.charAt(0).toLowerCase()},meridiem:function(t,e,n){return t>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[t+"sekundi",t+"sekundit"],m:["ühe minuti","üks minut"],mm:[t+" minuti",t+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[t+" tunni",t+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[t+" kuu",t+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[t+" aasta",t+" aastat"]};return e?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}t.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:"%d päeva",M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};t.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(t){return/بعد از ظهر/.test(t)},meridiem:function(t,e,n){return t<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(t){return t.replace(/[۰-۹]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",e[7],e[8],e[9]];function r(t,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return s=function(t,r){return t<10?r?n[t]:e[t]:t}(t,i)+" "+s}t.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(t,e){switch(e){case"D":return t+(1===t?"er":"");default:case"M":case"Q":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(t,e){switch(e){default:case"M":case"Q":case"D":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(t,e){switch(e){default:case"M":case"Q":case"D":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");t.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){return t+(1===t?"d":t%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){return t+(1===t?"d":t%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(t){return 0===t.indexOf("un")?"n"+t:"en "+t},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={s:["thodde secondanim","thodde second"],ss:[t+" secondanim",t+" second"],m:["eka mintan","ek minute"],mm:[t+" mintanim",t+" mintam"],h:["eka voran","ek vor"],hh:[t+" voranim",t+" voram"],d:["eka disan","ek dis"],dd:[t+" disanim",t+" dis"],M:["eka mhoinean","ek mhoino"],MM:[t+" mhoineanim",t+" mhoine"],y:["eka vorsan","ek voros"],yy:[t+" vorsanim",t+" vorsam"]};return e?a[n][0]:a[n][1]}t.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(t,e){switch(e){case"D":return t+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return t}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(t,e){return 12===t&&(t=0),"rati"===e?t<4?t:t+12:"sokalli"===e?t:"donparam"===e?t>12?t:t+12:"sanje"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"rati":t<12?"sokalli":t<16?"donparam":t<20?"sanje":"rati"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};t.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(t){return t.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(t,e){return 12===t&&(t=0),"રાત"===e?t<4?t:t+12:"સવાર"===e?t:"બપોર"===e?t>=10?t:t+12:"સાંજ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"રાત":t<10?"સવાર":t<17?"બપોર":t<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(t){return 2===t?"שעתיים":t+" שעות"},d:"יום",dd:function(t){return 2===t?"יומיים":t+" ימים"},M:"חודש",MM:function(t){return 2===t?"חודשיים":t+" חודשים"},y:"שנה",yy:function(t){return 2===t?"שנתיים":t%10==0&&10!==t?t+" שנה":t+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(t){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(t)},meridiem:function(t,e,n){return t<5?"לפנות בוקר":t<10?"בבוקר":t<12?n?'לפנה"צ':"לפני הצהריים":t<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};t.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात"===e?t<4?t:t+12:"सुबह"===e?t:"दोपहर"===e?t>=10?t:t+12:"शाम"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"रात":t<10?"सुबह":t<17?"दोपहर":t<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r=t+" ";switch(n){case"ss":return r+=1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi";case"m":return e?"jedna minuta":"jedne minute";case"mm":return r+=1===t?"minuta":2===t||3===t||4===t?"minute":"minuta";case"h":return e?"jedan sat":"jednog sata";case"hh":return r+=1===t?"sat":2===t||3===t||4===t?"sata":"sati";case"dd":return r+=1===t?"dan":"dana";case"MM":return r+=1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci";case"yy":return r+=1===t?"godina":2===t||3===t||4===t?"godine":"godina"}}t.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:e,m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(t,e,n,r){var a=t;switch(n){case"s":return r||e?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||e)?" másodperc":" másodperce";case"m":return"egy"+(r||e?" perc":" perce");case"mm":return a+(r||e?" perc":" perce");case"h":return"egy"+(r||e?" óra":" órája");case"hh":return a+(r||e?" óra":" órája");case"d":return"egy"+(r||e?" nap":" napja");case"dd":return a+(r||e?" nap":" napja");case"M":return"egy"+(r||e?" hónap":" hónapja");case"MM":return a+(r||e?" hónap":" hónapja");case"y":return"egy"+(r||e?" év":" éve");case"yy":return a+(r||e?" év":" éve")}return""}function r(t){return(t?"":"[múlt] ")+"["+e[this.day()]+"] LT[-kor]"}t.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(t){return"u"===t.charAt(1).toLowerCase()},meridiem:function(t,e,n){return t<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(t){return/^(ցերեկվա|երեկոյան)$/.test(t)},meridiem:function(t){return t<4?"գիշերվա":t<12?"առավոտվա":t<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(t,e){switch(e){case"DDD":case"w":case"W":case"DDDo":return 1===t?t+"-ին":t+"-րդ";default:return t}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"siang"===e?t>=11?t:t+12:"sore"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"pagi":t<15?"siang":t<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t){return t%100==11||t%10!=1}function n(t,n,r,a){var i=t+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return e(t)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return e(t)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return e(t)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return e(t)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return e(t)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return e(t)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}t.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(t){return(/^[0-9].+$/.test(t)?"tra":"in")+" "+t},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(t){return(/^[0-9].+$/.test(t)?"tra":"in")+" "+t},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(t){return"午後"===t},meridiem:function(t,e,n){return t<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(t){return t.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(t){return this.week()<t.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";default:return t}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(t,e){return 12===t&&(t=0),"enjing"===e?t:"siyang"===e?t>=11?t:t+12:"sonten"===e||"ndalu"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"enjing":t<15?"siyang":t<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(t){return/(წამი|წუთი|საათი|წელი)/.test(t)?t.replace(/ი$/,"ში"):t+"ში"},past:function(t){return/(წამი|წუთი|საათი|დღე|თვე)/.test(t)?t.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(t)?t.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(t){return 0===t?t:1===t?t+"-ლი":t<20||t<=100&&t%20==0||t%100==0?"მე-"+t:t+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};t.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};t.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(t){return"ល្ងាច"===t},meridiem:function(t,e,n){return t<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(t){return t.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};t.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(t){return t.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ರಾತ್ರಿ"===e?t<4?t:t+12:"ಬೆಳಿಗ್ಗೆ"===e?t:"ಮಧ್ಯಾಹ್ನ"===e?t>=10?t:t+12:"ಸಂಜೆ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"ರಾತ್ರಿ":t<10?"ಬೆಳಿಗ್ಗೆ":t<17?"ಮಧ್ಯಾಹ್ನ":t<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(t){return t+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"일";case"M":return t+"월";case"w":case"W":return t+"주";default:return t}},meridiemParse:/오전|오후/,isPM:function(t){return"오후"===t},meridiem:function(t,e,n){return t<12?"오전":"오후"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];t.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(t){return/ئێواره‌/.test(t)},meridiem:function(t,e,n){return t<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};t.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return e?a[n][0]:a[n][1]}function n(t){if(t=parseInt(t,10),isNaN(t))return!1;if(t<0)return!0;if(t<10)return 4<=t&&t<=7;if(t<100){var e=t%10;return n(0===e?t/10:e)}if(t<1e4){for(;t>=10;)t/=10;return n(t)}return n(t/=1e3)}t.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(t){return n(t.substr(0,t.indexOf(" ")))?"a "+t:"an "+t},past:function(t){return n(t.substr(0,t.indexOf(" ")))?"viru "+t:"virun "+t},s:"e puer Sekonnen",ss:"%d Sekonnen",m:e,mm:"%d Minutten",h:e,hh:"%d Stonnen",d:e,dd:"%d Deeg",M:e,MM:"%d Méint",y:e,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(t){return"ຕອນແລງ"===t},meridiem:function(t,e,n){return t<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(t){return"ທີ່"+t}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(t,e,n,r){return e?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(t){return t%10==0||t>10&&t<20}function a(t){return e[t].split("_")}function i(t,e,i,s){var o=t+" ";return 1===t?o+n(0,e,i[0],s):e?o+(r(t)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(t)?a(i)[1]:a(i)[2])}t.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(t,e,n,r){return e?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(t){return t+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(t,e,n){return n?e%10==1&&e%100!=11?t[2]:t[3]:e%10==1&&e%100!=11?t[0]:t[1]}function r(t,r,a){return t+" "+n(e[a],t,r)}function a(t,r,a){return n(e[a],t,r)}t.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(t,e){return e?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,n,r){var a=e.words[r];return 1===r.length?n?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mjesec",MM:e.translate,y:"godinu",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,n=t%100;return 0===t?t+"-ев":0===n?t+"-ен":n>10&&n<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(t,e){return 12===t&&(t=0),"രാത്രി"===e&&t>=4||"ഉച്ച കഴിഞ്ഞ്"===e||"വൈകുന്നേരം"===e?t+12:t},meridiem:function(t,e,n){return t<4?"രാത്രി":t<12?"രാവിലെ":t<17?"ഉച്ച കഴിഞ്ഞ്":t<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){switch(n){case"s":return e?"хэдхэн секунд":"хэдхэн секундын";case"ss":return t+(e?" секунд":" секундын");case"m":case"mm":return t+(e?" минут":" минутын");case"h":case"hh":return t+(e?" цаг":" цагийн");case"d":case"dd":return t+(e?" өдөр":" өдрийн");case"M":case"MM":return t+(e?" сар":" сарын");case"y":case"yy":return t+(e?" жил":" жилийн");default:return t}}t.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(t){return"ҮХ"===t},meridiem:function(t,e,n){return t<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+" өдөр";default:return t}}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(t,e,n,r){var a="";if(e)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,t)}t.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात्री"===e?t<4?t:t+12:"सकाळी"===e?t:"दुपारी"===e?t>=10?t:t+12:"सायंकाळी"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"रात्री":t<10?"सकाळी":t<17?"दुपारी":t<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};t.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(t){return t.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};t.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(t,e){return 12===t&&(t=0),"राति"===e?t<4?t:t+12:"बिहान"===e?t:"दिउँसो"===e?t>=10?t:t+12:"साँझ"===e?t+12:void 0},meridiem:function(t,e,n){return t<3?"राति":t<12?"बिहान":t<16?"दिउँसो":t<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;t.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;t.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};t.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(t){return t.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ਰਾਤ"===e?t<4?t:t+12:"ਸਵੇਰ"===e?t:"ਦੁਪਹਿਰ"===e?t>=10?t:t+12:"ਸ਼ਾਮ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"ਰਾਤ":t<10?"ਸਵੇਰ":t<17?"ਦੁਪਹਿਰ":t<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(t){return t%10<5&&t%10>1&&~~(t/10)%10!=1}function a(t,e,n){var a=t+" ";switch(n){case"ss":return a+(r(t)?"sekundy":"sekund");case"m":return e?"minuta":"minutę";case"mm":return a+(r(t)?"minuty":"minut");case"h":return e?"godzina":"godzinę";case"hh":return a+(r(t)?"godziny":"godzin");case"MM":return a+(r(t)?"miesiące":"miesięcy");case"yy":return a+(r(t)?"lata":"lat")}}t.defineLocale("pl",{months:function(t,r){return t?""===r?"("+n[t.month()]+"|"+e[t.month()]+")":/D MMMM/.test(r)?n[t.month()]:e[t.month()]:e},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r=" ";return(t%100>=20||t>=100&&t%100==0)&&(r=" de "),t+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}t.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:e,m:"un minut",mm:e,h:"o oră",hh:e,d:"o zi",dd:e,M:"o lună",MM:e,y:"un an",yy:e},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r,a;return"m"===n?e?"минута":"минуту":t+" "+(r=+t,a={ss:e?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:e?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];t.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:e,m:e,mm:e,h:"час",hh:e,d:"день",dd:e,M:"месяц",MM:e,y:"год",yy:e},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(t){return/^(дня|вечера)$/.test(t)},meridiem:function(t,e,n){return t<4?"ночи":t<12?"утра":t<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":return t+"-й";case"D":return t+"-го";case"w":case"W":return t+"-я";default:return t}},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];t.defineLocale("sd",{months:e,monthsShort:e,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(t){return"شام"===t},meridiem:function(t,e,n){return t<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(t){return t+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(t){return"ප.ව."===t||"පස් වරු"===t},meridiem:function(t,e,n){return t>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(t){return t>1&&t<5}function a(t,e,n,a){var i=t+" ";switch(n){case"s":return e||a?"pár sekúnd":"pár sekundami";case"ss":return e||a?i+(r(t)?"sekundy":"sekúnd"):i+"sekundami";case"m":return e?"minúta":a?"minútu":"minútou";case"mm":return e||a?i+(r(t)?"minúty":"minút"):i+"minútami";case"h":return e?"hodina":a?"hodinu":"hodinou";case"hh":return e||a?i+(r(t)?"hodiny":"hodín"):i+"hodinami";case"d":return e||a?"deň":"dňom";case"dd":return e||a?i+(r(t)?"dni":"dní"):i+"dňami";case"M":return e||a?"mesiac":"mesiacom";case"MM":return e||a?i+(r(t)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return e||a?"rok":"rokom";case"yy":return e||a?i+(r(t)?"roky":"rokov"):i+"rokmi"}}t.defineLocale("sk",{months:e,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a=t+" ";switch(n){case"s":return e||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===t?e?"sekundo":"sekundi":2===t?e||r?"sekundi":"sekundah":t<5?e||r?"sekunde":"sekundah":"sekund";case"m":return e?"ena minuta":"eno minuto";case"mm":return a+=1===t?e?"minuta":"minuto":2===t?e||r?"minuti":"minutama":t<5?e||r?"minute":"minutami":e||r?"minut":"minutami";case"h":return e?"ena ura":"eno uro";case"hh":return a+=1===t?e?"ura":"uro":2===t?e||r?"uri":"urama":t<5?e||r?"ure":"urami":e||r?"ur":"urami";case"d":return e||r?"en dan":"enim dnem";case"dd":return a+=1===t?e||r?"dan":"dnem":2===t?e||r?"dni":"dnevoma":e||r?"dni":"dnevi";case"M":return e||r?"en mesec":"enim mesecem";case"MM":return a+=1===t?e||r?"mesec":"mesecem":2===t?e||r?"meseca":"mesecema":t<5?e||r?"mesece":"meseci":e||r?"mesecev":"meseci";case"y":return e||r?"eno leto":"enim letom";case"yy":return a+=1===t?e||r?"leto":"letom":2===t?e||r?"leti":"letoma":t<5?e||r?"leta":"leti":e||r?"let":"leti"}}t.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(t){return"M"===t.charAt(0)},meridiem:function(t,e,n){return t<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,n,r){var a=e.words[r];return 1===r.length?n?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mesec",MM:e.translate,y:"godinu",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,n,r){var a=e.words[r];return 1===r.length?n?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"дан",dd:e.translate,M:"месец",MM:e.translate,y:"годину",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(t,e,n){return t<11?"ekuseni":t<15?"emini":t<19?"entsambama":"ebusuku"},meridiemHour:function(t,e){return 12===t&&(t=0),"ekuseni"===e?t:"emini"===e?t>=11?t:t+12:"entsambama"===e||"ebusuku"===e?0===t?0:t+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"e":1===e?"a":2===e?"a":"e")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};t.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(t){return t+"வது"},preparse:function(t){return t.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(t,e,n){return t<2?" யாமம்":t<6?" வைகறை":t<10?" காலை":t<14?" நண்பகல்":t<18?" எற்பாடு":t<22?" மாலை":" யாமம்"},meridiemHour:function(t,e){return 12===t&&(t=0),"யாமம்"===e?t<2?t:t+12:"வைகறை"===e||"காலை"===e?t:"நண்பகல்"===e&&t>=10?t:t+12},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(t,e){return 12===t&&(t=0),"రాత్రి"===e?t<4?t:t+12:"ఉదయం"===e?t:"మధ్యాహ్నం"===e?t>=10?t:t+12:"సాయంత్రం"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"రాత్రి":t<10?"ఉదయం":t<17?"మధ్యాహ్నం":t<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};t.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(t,e){return 12===t&&(t=0),"шаб"===e?t<4?t:t+12:"субҳ"===e?t:"рӯз"===e?t>=11?t:t+12:"бегоҳ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"шаб":t<11?"субҳ":t<16?"рӯз":t<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(t){return"หลังเที่ยง"===t},meridiem:function(t,e,n){return t<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(t,n,r,a){var i=function(t){var n=Math.floor(t%1e3/100),r=Math.floor(t%100/10),a=t%10,i="";return n>0&&(i+=e[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+e[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+e[a]),""===i?"pagh":i}(t);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}t.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(t){var e=t;return e=-1!==t.indexOf("jaj")?e.slice(0,-3)+"leS":-1!==t.indexOf("jar")?e.slice(0,-3)+"waQ":-1!==t.indexOf("DIS")?e.slice(0,-3)+"nem":e+" pIq"},past:function(t){var e=t;return e=-1!==t.indexOf("jaj")?e.slice(0,-3)+"Hu’":-1!==t.indexOf("jar")?e.slice(0,-3)+"wen":-1!==t.indexOf("DIS")?e.slice(0,-3)+"ben":e+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};t.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(t,n){switch(n){case"d":case"D":case"Do":case"DD":return t;default:if(0===t)return t+"'ıncı";var r=t%10;return t+(e[r]||e[t%100-r]||e[t>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[t+" secunds",t+" secunds"],m:["'n míut","'iens míut"],mm:[t+" míuts",t+" míuts"],h:["'n þora","'iensa þora"],hh:[t+" þoras",t+" þoras"],d:["'n ziua","'iensa ziua"],dd:[t+" ziuas",t+" ziuas"],M:["'n mes","'iens mes"],MM:[t+" mesen",t+" mesen"],y:["'n ar","'iens ar"],yy:[t+" ars",t+" ars"]};return r?a[n][0]:e?a[n][0]:a[n][1]}t.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(t){return"d'o"===t.toLowerCase()},meridiem:function(t,e,n){return t>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(t,e){return 12===t&&(t=0),"يېرىم كېچە"===e||"سەھەر"===e||"چۈشتىن بۇرۇن"===e?t:"چۈشتىن كېيىن"===e||"كەچ"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,n){var r=100*t+e;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"-كۈنى";case"w":case"W":return t+"-ھەپتە";default:return t}},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r,a;return"m"===n?e?"хвилина":"хвилину":"h"===n?e?"година":"годину":t+" "+(r=+t,a={ss:e?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:e?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:e?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(t){return function(){return t+"о"+(11===this.hours()?"б":"")+"] LT"}}t.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(t,e){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===t?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):t?n[/(\[[ВвУу]\]) ?dddd/.test(e)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(e)?"genitive":"nominative"][t.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:e,m:e,mm:e,h:"годину",hh:e,d:"день",dd:e,M:"місяць",MM:e,y:"рік",yy:e},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(t){return/^(дня|вечора)$/.test(t)},meridiem:function(t,e,n){return t<4?"ночі":t<12?"ранку":t<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t+"-й";case"D":return t+"-го";default:return t}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];t.defineLocale("ur",{months:e,monthsShort:e,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(t){return"شام"===t},meridiem:function(t,e,n){return t<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(t){return/^ch$/i.test(t)},meridiem:function(t,e,n){return t<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"下午"===e||"晚上"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,n){var r=100*t+e;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"周";default:return t}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,n){var r=100*t+e;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,n){var r=100*t+e;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(130);var r=n(134),a=n(136),i=n(138),s=n(1),o=n(141),u=n(142);document.addEventListener("DOMContentLoaded",(function(t){s.csv(u,o.preprocesar).then((function(t){a.Mapa({padreSelector:".mapa"});var e=t,n=o.totalizarPorBarrio(e),s=o.convertirAMatriz(n),u=o.calcularMaxMin(s.datos),d=r.MapaCalor({padreSelector:".mapaCalor",labelscol:s.servicios,labelsrow:s.barrios,start_color:"rgb(215, 215, 215)",end_color:"rgb(0, 78, 255)",minValue:u.minValue,maxValue:u.maxValue,callback_Mapa:a.MapaEdit,callback_Barrio:a.ColorBarrio});i.SelectorTiempo({padreSelector:".selectorTiempo"},t,(function(e,n){var r=e&&n?t.filter((function(t){return t.timestamp>e&&t.timestamp<n})):t,a=o.totalizarPorBarrio(r.length>1?r:t),i=o.convertirAMatriz(a);i.datos.length>0&&d(i.datos)}))}))}))},function(t,e,n){var r=n(131);"string"==typeof r&&(r=[[t.i,r,""]]);var a={insert:"head",singleton:!1};n(133)(r,a);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(132)(!1)).push([t.i,"html,\nbody,\n.contenido {\n    height: 100%;\n    margin: 0;\n}\n\n\n.contenido {\n    display: flex;\n    flex-flow: column;\n}\n\n.datos {\n    display: flex;\n    flex-flow: row wrap;\n}\n.datos > * {\n    display: flex;\n    flex: 1 auto;\n}\n\n.contenido > * {\n    flex: 1 100%\n}\n\n.selectorTiempo {\n    max-height: 10em;\n}\n\n@media  only screen and (max-width: 1000px) {\n    .datos > * {\n        flex: 1 100%;\n    }\n}\n\n\n.background.bar {\n  fill: #ccc;\n}\n.foreground.bar {\n  fill: steelblue;\n}\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=(s=r,o=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(u," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")}));return[n].concat(i).concat([a]).join("\n")}var s,o,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<t.length;s++){var o=t[s];null!=o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="(".concat(o[2],") and (").concat(n,")")),e.push(o))}},e}},function(t,e,n){"use strict";var r,a={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},s=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}();function o(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],s=e.base?i[0]+e.base:i[0],o={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(o):n.push(r[s]={id:s,parts:[o]})}return n}function u(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=a[r.id],s=0;if(i){for(i.refs++;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(p(r.parts[s],e))}else{for(var o=[];s<r.parts.length;s++)o.push(p(r.parts[s],e));a[r.id]={id:r.id,refs:1,parts:o}}}}function d(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var r=n.nc;r&&(t.attributes.nonce=r)}if(Object.keys(t.attributes).forEach((function(n){e.setAttribute(n,t.attributes[n])})),"function"==typeof t.insert)t.insert(e);else{var a=s(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function f(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,a);else{var i=document.createTextNode(a),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function _(t,e,n){var r=n.css,a=n.media,i=n.sourceMap;if(a&&t.setAttribute("media",a),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,m=0;function p(t,e){var n,r,a;if(e.singleton){var i=m++;n=h||(h=d(e)),r=f.bind(null,n,i,!1),a=f.bind(null,n,i,!0)}else n=d(e),r=_.bind(null,n,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=o(t,e);return u(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var s=n[i],d=a[s.id];d&&(d.refs--,r.push(d))}t&&u(o(t,e),e);for(var c=0;c<r.length;c++){var l=r[c];if(0===l.refs){for(var f=0;f<l.parts.length;f++)l.parts[f]();delete a[l.id]}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1);n(135);e.MapaCalor=function(t){var e=5,n=100,a=120,i=t.padreSelector,s=t.labelscol,o=t.labelsrow,u=t.start_color,d=t.end_color,c=t.minValue,l=t.maxValue,f=r.select(i).append("svg").attr("width","100%").attr("height","100%").append("g").attr("transform","translate("+a+","+e+")"),_=(f.append("rect").style("stroke","black").style("stroke-width","2px").attr("width",350).attr("height",350),r.scaleBand().domain(r.range(s.length)).range([0,350])),h=r.scaleBand().domain(r.range(o.length)).range([0,350]),m=f.append("g").attr("class","labels"),p=m.selectAll(".column-label").data(s).enter().append("g").attr("class","column-label").attr("transform",(function(t,e){return"translate("+_(e)+",350)"}));p.append("line").style("stroke","black").style("stroke-width","1px").attr("x1",_.bandwidth()/2).attr("x2",_.bandwidth()/2).attr("y1",0).attr("y2",5);var y=p.append("text").attr("x",0).attr("y",h.bandwidth()/2).attr("dy",".82em").attr("text-anchor","end").attr("transform","rotate(-60)").attr("id",(function(t,e){return s[e].replace(/\s/g,"-")})).text((function(t,e){return t})),M=m.selectAll(".row-label").data(o).enter().append("g").attr("class","row-label").attr("transform",(function(t,e){return"translate(0,"+h(e)+")"}));M.append("line").style("stroke","black").style("stroke-width","1px").attr("x1",0).attr("x2",-5).attr("y1",h.bandwidth()/2).attr("y2",h.bandwidth()/2);var g=M.append("text").attr("x",-8).attr("y",h.bandwidth()/2).attr("dy",".32em").attr("text-anchor","end").attr("id",(function(t,e){return o[e].replace(/\s/g,"-")})).text((function(t,e){return t})).attr("font-size","16px").attr("fill","black"),L=r.select("#legend").append("svg").attr("width",130).attr("height",350+e+n),v=L.append("defs").append("svg:linearGradient").attr("id","gradient").attr("x1","100%").attr("y1","0%").attr("x2","100%").attr("y2","100%").attr("spreadMethod","pad");v.append("stop").attr("offset","0%").attr("stop-color",d).attr("stop-opacity",1),v.append("stop").attr("offset","100%").attr("stop-color",u).attr("stop-opacity",1),L.append("rect").attr("width",55).attr("height",350).style("fill","url(#gradient)").attr("transform","translate(0,"+e+")");var Y=null,b=null;return function(n){if(y.on("mouseover",(function(e,r){p.selectAll("text").data(s).transition().duration(200).attr("font-size","16px").attr("fill","black");var a=(a="#").concat(s[r]).replace(/\s/g,"-");p.select(a).transition().duration(200).attr("font-size","21px").attr("fill","rgb(0, 78, 255)"),Y=e,b=r,t.callback_Mapa(e,n.map((function(t){return t[r]})),o)})).on("mouseout",(function(t,e){})),g.on("mouseover",(function(t,e){})).on("mouseout",(function(t,e){})),Y&&t.callback_Mapa(Y,n.map((function(t){return t[b]})),o),!Array.isArray(n)||!n.length||!Array.isArray(n[0]))throw new Error("It should be a 2-D array");var a=r.scaleLinear().domain([c,l]).range([u,d]),i=f.selectAll(".row").data(n);i.enter().append("g").attr("class","row").attr("transform",(function(t,e){return"translate(0,"+h(e)+")"})).on("mouseover",(function(t,e){})).on("mouseout",(function(t,e){}));var m=i.selectAll(".cell").data((function(t){return t}));m.enter().append("g").attr("class","cell").attr("transform",(function(t,e){return"translate("+_(e)+", 0)"})).on("mouseover",(function(t,e){})).on("mouseout",(function(t,e){})),m.append("rect").attr("width",_.bandwidth()).attr("height",h.bandwidth()).style("stroke-width",0),m.append("text").attr("dy",".32em").attr("x",_.bandwidth()/2).attr("y",h.bandwidth()/2).attr("text-anchor","middle").style("fill",(function(t,e){return t>=l/2?"white":"black"})).text((function(t,e){return t})),i.selectAll(".cell").data((function(t,e){return n[e]})).style("fill",a);var M=r.scaleLinear().range([350,0]).domain([c,l]),v=r.axisRight(M);L.append("g").attr("class","y axis").attr("transform","translate(41,"+e+")").call(v)}}},function(t,e,n){t.exports=n.p+"2405ee68d39d9768b4f2a838dd42d04c.csv"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),a=n(137);e.Mapa=function(t){var e=r.select(t.padreSelector).append("svg").attr("width","100%").attr("height","100%");r.json(a).then((function(t){!function(t,e){var n=r.geoMercator().fitSize([600,450],t),a=r.geoPath().projection(n);e.selectAll("path").data(t.features).enter().append("path").attr("d",a).attr("fill","white").attr("stroke","black").attr("id",(function(e,n){return t.features[n].properties.Nbrhood.replace(/\s/g,"-")})).on("mouseover",(function(){r.select(this).attr("fill","red")})).on("mouseout",(function(t,e){r.select(this).attr("fill","white")})),e.selectAll("text").data(t.features).enter().append("text").attr("class","label").attr("transform",(function(e,n){return"translate("+[a.centroid(t.features[n])[0]-t.features[0].properties.Nbrhood.length/2*6,a.centroid(t.features[n])[1]]+")"})).text((function(e,n){return t.features[n].properties.Nbrhood}))}(t,e)}))},e.ColorBarrio=function(t){if(r.selectAll("path").transition().duration(200).attr("fill","white"),""!==t){var e=(e="#").concat(t);r.select(e).transition().duration(200).attr("fill","red")}},e.MapaEdit=function(t,e,n){console.log("Test MapaEdit",t),console.log(e),console.log(n);var a=Math.max.apply(null,e),i=(Math.min.apply(null,e),0);n.forEach((function(t){t=t.replace(/\s/g,"-");var n=(n="#").concat(t);r.select(n).transition().duration(200).attr("fill","rgb(0, 78, 255,"+e[i]/a+")");i++}))}},function(t,e,n){t.exports=n.p+"dee03cf07e74bf082719be856d6fb496.geojson"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),a=n(0);e.SelectorTiempo=function(t,e,n){var i=r.nest().key((function(t){return new Date(18e5*Math.round(t.timestamp.getTime()/18e5)).toString()})).rollup((function(t){return{total:r.sum(t,(function(t){return t.total}))}})).entries(e).map((function(t){return Object.assign({},t,{timestamp:new Date(t.key)})})),s=10,o=10,u=10,d=60,c=1400-(d+o),l=140-(s+u),f=r.select(t.padreSelector).append("svg").attr("height","100%").attr("width","100%"),_=r.scaleLinear().range([l,0]).domain([0,50]),h=f.append("g").attr("transform","translate("+d+", 0)"),m=r.scaleTime().domain([a("2020-04-06 00:00:00").toDate(),a("2020-04-11 00:00:00").toDate()]).rangeRound([0,c]);h.append("g").attr("transform","translate(0, "+l+")").call(r.axisBottom(m));var p=h.selectAll().data(i).enter().append("rect").attr("x",(function(t){return m(t.timestamp)})).attr("y",(function(t){return _(t.value.total)})).attr("height",(function(t){return l-_(t.value.total)})).attr("width",5).style("fill","steelblue").style("stroke","black").style("stoke-width",1),y=function(t){var e=+("e"==t.type),n=e?1:-1,r=l/2;return"M"+.5*n+","+r+"A6,6 0 0 "+e+" "+6.5*n+","+(r+6)+"V"+(2*r-6)+"A6,6 0 0 "+e+" "+.5*n+","+2*r+"ZM"+2.5*n+","+(r+8)+"V"+(2*r-8)+"M"+4.5*n+","+(r+8)+"V"+(2*r-8)},M=function(t,e){return t.selectAll(".handle--custom").data([{type:"w"},{type:"e"}]).join((function(t){return t.append("path").attr("class","handle--custom").attr("fill","#666").attr("fill-opacity",.8).attr("stroke","#000").attr("stroke-width",1.5).attr("cursor","ew-resize").attr("d",y)})).attr("display",null===e?"none":null).attr("transform",null===e?null:function(t,n){return"translate("+e[n]+","+(-s-u)+")"})},g=r.brushX().extent([[d,o],[c-(d+o),l]]).on("start brush end",(function(){var t=r.event.selection;if(null===t)p.style("stroke","black"),n&&n(null,null);else{var e=t.map(m.invert);n&&n(e[0],e[1])}r.select(this).call(M,t)}));h.append("g").call(g).call(g.move,[.3,.5].map(m))}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r={"./af":2,"./af.js":2,"./ar":3,"./ar-dz":4,"./ar-dz.js":4,"./ar-kw":5,"./ar-kw.js":5,"./ar-ly":6,"./ar-ly.js":6,"./ar-ma":7,"./ar-ma.js":7,"./ar-sa":8,"./ar-sa.js":8,"./ar-tn":9,"./ar-tn.js":9,"./ar.js":3,"./az":10,"./az.js":10,"./be":11,"./be.js":11,"./bg":12,"./bg.js":12,"./bm":13,"./bm.js":13,"./bn":14,"./bn.js":14,"./bo":15,"./bo.js":15,"./br":16,"./br.js":16,"./bs":17,"./bs.js":17,"./ca":18,"./ca.js":18,"./cs":19,"./cs.js":19,"./cv":20,"./cv.js":20,"./cy":21,"./cy.js":21,"./da":22,"./da.js":22,"./de":23,"./de-at":24,"./de-at.js":24,"./de-ch":25,"./de-ch.js":25,"./de.js":23,"./dv":26,"./dv.js":26,"./el":27,"./el.js":27,"./en-SG":28,"./en-SG.js":28,"./en-au":29,"./en-au.js":29,"./en-ca":30,"./en-ca.js":30,"./en-gb":31,"./en-gb.js":31,"./en-ie":32,"./en-ie.js":32,"./en-il":33,"./en-il.js":33,"./en-nz":34,"./en-nz.js":34,"./eo":35,"./eo.js":35,"./es":36,"./es-do":37,"./es-do.js":37,"./es-us":38,"./es-us.js":38,"./es.js":36,"./et":39,"./et.js":39,"./eu":40,"./eu.js":40,"./fa":41,"./fa.js":41,"./fi":42,"./fi.js":42,"./fo":43,"./fo.js":43,"./fr":44,"./fr-ca":45,"./fr-ca.js":45,"./fr-ch":46,"./fr-ch.js":46,"./fr.js":44,"./fy":47,"./fy.js":47,"./ga":48,"./ga.js":48,"./gd":49,"./gd.js":49,"./gl":50,"./gl.js":50,"./gom-latn":51,"./gom-latn.js":51,"./gu":52,"./gu.js":52,"./he":53,"./he.js":53,"./hi":54,"./hi.js":54,"./hr":55,"./hr.js":55,"./hu":56,"./hu.js":56,"./hy-am":57,"./hy-am.js":57,"./id":58,"./id.js":58,"./is":59,"./is.js":59,"./it":60,"./it-ch":61,"./it-ch.js":61,"./it.js":60,"./ja":62,"./ja.js":62,"./jv":63,"./jv.js":63,"./ka":64,"./ka.js":64,"./kk":65,"./kk.js":65,"./km":66,"./km.js":66,"./kn":67,"./kn.js":67,"./ko":68,"./ko.js":68,"./ku":69,"./ku.js":69,"./ky":70,"./ky.js":70,"./lb":71,"./lb.js":71,"./lo":72,"./lo.js":72,"./lt":73,"./lt.js":73,"./lv":74,"./lv.js":74,"./me":75,"./me.js":75,"./mi":76,"./mi.js":76,"./mk":77,"./mk.js":77,"./ml":78,"./ml.js":78,"./mn":79,"./mn.js":79,"./mr":80,"./mr.js":80,"./ms":81,"./ms-my":82,"./ms-my.js":82,"./ms.js":81,"./mt":83,"./mt.js":83,"./my":84,"./my.js":84,"./nb":85,"./nb.js":85,"./ne":86,"./ne.js":86,"./nl":87,"./nl-be":88,"./nl-be.js":88,"./nl.js":87,"./nn":89,"./nn.js":89,"./pa-in":90,"./pa-in.js":90,"./pl":91,"./pl.js":91,"./pt":92,"./pt-br":93,"./pt-br.js":93,"./pt.js":92,"./ro":94,"./ro.js":94,"./ru":95,"./ru.js":95,"./sd":96,"./sd.js":96,"./se":97,"./se.js":97,"./si":98,"./si.js":98,"./sk":99,"./sk.js":99,"./sl":100,"./sl.js":100,"./sq":101,"./sq.js":101,"./sr":102,"./sr-cyrl":103,"./sr-cyrl.js":103,"./sr.js":102,"./ss":104,"./ss.js":104,"./sv":105,"./sv.js":105,"./sw":106,"./sw.js":106,"./ta":107,"./ta.js":107,"./te":108,"./te.js":108,"./tet":109,"./tet.js":109,"./tg":110,"./tg.js":110,"./th":111,"./th.js":111,"./tl-ph":112,"./tl-ph.js":112,"./tlh":113,"./tlh.js":113,"./tr":114,"./tr.js":114,"./tzl":115,"./tzl.js":115,"./tzm":116,"./tzm-latn":117,"./tzm-latn.js":117,"./tzm.js":116,"./ug-cn":118,"./ug-cn.js":118,"./uk":119,"./uk.js":119,"./ur":120,"./ur.js":120,"./uz":121,"./uz-latn":122,"./uz-latn.js":122,"./uz.js":121,"./vi":123,"./vi.js":123,"./x-pseudo":124,"./x-pseudo.js":124,"./yo":125,"./yo.js":125,"./zh-cn":126,"./zh-cn.js":126,"./zh-hk":127,"./zh-hk.js":127,"./zh-tw":128,"./zh-tw.js":128};function a(t){var e=i(t);return n(e)}function i(t){if(!n.o(r,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return r[t]}a.keys=function(){return Object.keys(r)},a.resolve=i,t.exports=a,a.id=140},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1);e.preprocesar=function(t){return t.dia=+t.dia,t.hora=+t.hora,t.minuto=+t.minuto,t.timestamp=new Date(2020,3,t.dia,t.hora,t.minuto),t.total=+t.total,t.gas=+t.gas,t.water=+t.water,t.healthcare=+t.healthcare,t.power=+t.power,t.roadways=+t.roadways,t},e.totalizarPorBarrio=function(t){return r.nest().key((function(t){return t.location})).rollup((function(t){return{total:r.sum(t,(function(t){return t.total})),water:r.sum(t,(function(t){return t.water})),roadways:r.sum(t,(function(t){return t.roadways})),gas:r.sum(t,(function(t){return t.gas})),power:r.sum(t,(function(t){return t.power})),healthcare:r.sum(t,(function(t){return t.healthcare}))}})).entries(t)},e.convertirAMatriz=function(t){for(var e=[],n=[],r=0;r<t.length;r++)n.push(t[r].key),e[r]=[],e[r][0]=t[r].value.water,e[r][1]=t[r].value.roadways,e[r][2]=t[r].value.gas,e[r][3]=t[r].value.power,e[r][4]=t[r].value.healthcare;return{barrios:n,servicios:["water","roadways","gas","power","healthcare"],datos:e}},e.calcularMaxMin=function(t){return{maxValue:r.max(t,(function(t){return r.max(t,(function(t){return t}))})),minValue:r.min(t,(function(t){return r.min(t,(function(t){return t}))}))}}},function(t,e,n){t.exports=n.p+"b444522c3f05ffc6df721822823c6840.csv"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzL2Rpc3QvcGFja2FnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvcGFpcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy92YXJpYW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2RldmlhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3JhbmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGlja3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc3R1cmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2hpc3RvZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3F1YW50aWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvdGhyZXNob2xkL2ZyZWVkbWFuRGlhY29uaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc2NvdHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9tZWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9wZXJtdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvc2Nhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3NodWZmbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90cmFuc3Bvc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy96aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWF4aXMvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1heGlzL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXhpcy9zcmMvYXhpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2xvd2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbnNlcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2V4aXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2pvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vcmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NpemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbG9jYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc291cmNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbW91c2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3RvdWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3RvdWNoZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL25vZHJhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHJhZy9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRyYWcvc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kcmFnL3NyYy9kcmFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Rpc2NyZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvaHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2xhYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hjbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3BpZWNld2lzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3F1YWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9wb2x5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9zaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9ib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2JhY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2VsYXN0aWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2FjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYnJ1c2gvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWJydXNoL3NyYy9ub2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1icnVzaC9zcmMvYnJ1c2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvY2hvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNob3JkL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY2hvcmQvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wYXRoL3NyYy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jaG9yZC9zcmMvcmliYm9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL25lc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbGxlY3Rpb24vc3JjL3NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMva2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sbGVjdGlvbi9zcmMvdmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xsZWN0aW9uL3NyYy9lbnRyaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29udG91ci9zcmMvY29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbnRvdXIvc3JjL2NvbnRvdXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9ibHVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb250b3VyL3NyYy9kZW5zaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Rzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy9jc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2F1dG9UeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvYmxvYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy94bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2ppZ2dsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2FkZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2NvdmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy95LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvcXVhZHRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9jb2xsaWRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Zpc2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXRBZnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9yY2Uvc3JjL2xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9zaW11bGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMvbWFueUJvZHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy9yYWRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcmNlL3NyYy94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JjZS9zcmMveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvYWRkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ub29wLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3N0cmVhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NhcnRlc2lhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9yb3RhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcG9pbnRFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3Jlam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2x5Z29uQ29udGFpbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2FudGltZXJpZGlhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2xpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9yZWN0YW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9leHRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2Rpc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2dyYXRpY3VsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9ib3VuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9tZWFzdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvdHJhbnNmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vcmVzYW1wbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jeWxpbmRyaWNhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2FsYmVyc1VzYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWFsQXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbEVxdWlkaXN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vbWVyY2F0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9jb25pY0NvbmZvcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2VxdWlyZWN0YW5ndWxhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2NvbmljRXF1aWRpc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9lcXVhbEVhcnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZ25vbW9uaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NsdXN0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2NvdW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZWFjaEFmdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9lYWNoQmVmb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2hpZXJhcmNoeS9zdW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3NvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2FuY2VzdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvZGVzY2VuZGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvaGllcmFyY2h5L2xlYXZlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy9oaWVyYXJjaHkvbGlua3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFjay9lbmNsb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svc2libGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvYWNjZXNzb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3BhY2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL2RpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvcGFydGl0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3N0cmF0aWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zbGljZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaGllcmFyY2h5L3NyYy90cmVlbWFwL3NxdWFyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1oaWVyYXJjaHkvc3JjL3RyZWVtYXAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9zbGljZURpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWhpZXJhcmNoeS9zcmMvdHJlZW1hcC9yZXNxdWFyaWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcG9seWdvbi9zcmMvY3Jvc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2h1bGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXBvbHlnb24vc3JjL2NvbnRhaW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1wb2x5Z29uL3NyYy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvZGVmYXVsdFNvdXJjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy91bmlmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL25vcm1hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcmFuZG9tL3NyYy9sb2dOb3JtYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXJhbmRvbS9zcmMvaXJ3aW5IYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2JhdGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1yYW5kb20vc3JjL2V4cG9uZW50aWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvb3JkaW5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2JhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aWNrRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9uaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc3ltbG9nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcG93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvcXVhbnRpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RocmVzaG9sZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaW50ZXJ2YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbGxpc2Vjb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kdXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvc2Vjb25kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2RheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvd2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3llYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjSG91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNXZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjWWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2RlZmF1bHRMb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29Gb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9pc29QYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy91dGNUaW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvc2VxdWVudGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3NlcXVlbnRpYWxRdWFudGlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2RpdmVyZ2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jb2xvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvY2F0ZWdvcnkxMC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9BY2NlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvRGFyazIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1Bhc3RlbDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvUGFzdGVsMi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9TZXQxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2NhdGVnb3JpY2FsL1NldDIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvY2F0ZWdvcmljYWwvU2V0My5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9jYXRlZ29yaWNhbC9UYWJsZWF1MTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvcmFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvQnJCRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUFJHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUGlZRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUHVPci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRCdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRHeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9kaXZlcmdpbmcvUmRZbEJ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL2RpdmVyZ2luZy9SZFlsR24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvZGl2ZXJnaW5nL1NwZWN0cmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvQnVHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL0J1UHUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9HbkJ1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvT3JSZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnVHbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1B1QnUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9QdVJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvUmRQdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR25CdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL1lsR24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yQnIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9ZbE9yUmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvQmx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvR3JlZW5zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL0dyZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtc2luZ2xlL1B1cnBsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1zaW5nbGUvUmVkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLXNpbmdsZS9PcmFuZ2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvY2l2aWRpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUtY2hyb21hdGljL3NyYy9zZXF1ZW50aWFsLW11bHRpL3JhaW5ib3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS9zaW5lYm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS1jaHJvbWF0aWMvc3JjL3NlcXVlbnRpYWwtbXVsdGkvdHVyYm8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlLWNocm9tYXRpYy9zcmMvc2VxdWVudGlhbC1tdWx0aS92aXJpZGlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbGluZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9saW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvYXJlYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3BpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3JhZGlhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmVSYWRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcmVhUmFkaWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvcG9pbnRSYWRpYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2xpbmsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2Nyb3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sL2RpYW1vbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvc3Rhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL3N5bWJvbC9zcXVhcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvdHJpYW5nbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zeW1ib2wvd3llLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvbm9vcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2Jhc2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9iYXNpc09wZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXJkaW5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhcmRpbmFsQ2xvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2FyZGluYWxPcGVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvY2F0bXVsbFJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2NhdG11bGxSb21DbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9jdXJ2ZS9jYXRtdWxsUm9tT3Blbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL2xpbmVhckNsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL21vbm90b25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvY3VydmUvbmF0dXJhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL2N1cnZlL3N0ZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvbm9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL25vbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9zdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29mZnNldC9leHBhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvZGl2ZXJnaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb2Zmc2V0L3NpbGhvdWV0dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vZmZzZXQvd2lnZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zaGFwZS9zcmMvb3JkZXIvYXBwZWFyYW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2hhcGUvc3JjL29yZGVyL2Rlc2NlbmRpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9pbnNpZGVPdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNoYXBlL3NyYy9vcmRlci9yZXZlcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvcG9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXZvcm9ub2kvc3JjL1JlZEJsYWNrVHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRWRnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2VsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvQ2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy12b3Jvbm9pL3NyYy9CZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvRGlhZ3JhbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdm9yb25vaS9zcmMvdm9yb25vaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtem9vbS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL2V2ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy16b29tL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL25vZXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXpvb20vc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWR6LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWt3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLWx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2FyLXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2F6LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2N5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2RlLWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2R2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLVNHLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWF1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWdiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWllLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLWlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VuLW56LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLWRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2VzLXVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2V1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ZyLWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2Z5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2dvbS1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2d1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2hyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2h5LWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2lzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2l0LWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2phLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2p2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2thLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2trLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2ttLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2tvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2t5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2xvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL2x2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21pLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL21zLW15LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL210LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL215LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25iLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25sLWJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL25uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BhLWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3BsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3B0LWJyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3JvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3J1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NxLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NyLWN5cmwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvc3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdGV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsLXBoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90emwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHptLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VnLWNuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3V6LWxhdG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdmkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveC1wc2V1ZG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUveW8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtY24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtaGsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvemgtdHcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uY3NzPzM4ZWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9tYXBhQ2Fsb3IudHMiLCJ3ZWJwYWNrOi8vLy4vZGF0YS9oZWF0bWFwX2RhdGEuY3N2Iiwid2VicGFjazovLy8uL3NyYy9tYXBhLnRzIiwid2VicGFjazovLy8uL2RhdGEvU3RIaW1hcmsuZ2VvanNvbiIsIndlYnBhY2s6Ly8vLi9zcmMvdGltZVNlbGVjdG9yLnRzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyBeXFwuXFwvLiokIiwid2VicGFjazovLy8uL3NyYy9kYXRvcy50cyIsIndlYnBhY2s6Ly8vLi9wcnVlYmFzL2RhdG9zL2RhdGEvdHdlZXQtc2VydmljaW8tdmFsb3JhY2lvbjIuY3N2Il0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiaG9va0NhbGxiYWNrIiwic29tZSIsImhvb2tzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpc0FycmF5IiwiaW5wdXQiLCJBcnJheSIsInRvU3RyaW5nIiwiaXNPYmplY3QiLCJpc1VuZGVmaW5lZCIsImlzTnVtYmVyIiwiaXNEYXRlIiwiRGF0ZSIsIm1hcCIsImFyciIsImZuIiwicmVzIiwibGVuZ3RoIiwicHVzaCIsImhhc093blByb3AiLCJhIiwiYiIsImV4dGVuZCIsInZhbHVlT2YiLCJjcmVhdGVVVEMiLCJmb3JtYXQiLCJsb2NhbGUiLCJzdHJpY3QiLCJjcmVhdGVMb2NhbE9yVVRDIiwidXRjIiwiZ2V0UGFyc2luZ0ZsYWdzIiwiX3BmIiwiZW1wdHkiLCJ1bnVzZWRUb2tlbnMiLCJ1bnVzZWRJbnB1dCIsIm92ZXJmbG93IiwiY2hhcnNMZWZ0T3ZlciIsIm51bGxJbnB1dCIsImludmFsaWRNb250aCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJpc28iLCJwYXJzZWREYXRlUGFydHMiLCJtZXJpZGllbSIsInJmYzI4MjIiLCJ3ZWVrZGF5TWlzbWF0Y2giLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwiaXNOb3dWYWxpZCIsImlzTmFOIiwiX2QiLCJnZXRUaW1lIiwiaW52YWxpZFdlZWtkYXkiLCJfc3RyaWN0IiwidW5kZWZpbmVkIiwiYmlnSG91ciIsImlzRnJvemVuIiwiY3JlYXRlSW52YWxpZCIsIk5hTiIsImZ1biIsInRoaXMiLCJsZW4iLCJtb21lbnRQcm9wZXJ0aWVzIiwiY29weUNvbmZpZyIsInRvIiwiZnJvbSIsInByb3AiLCJ2YWwiLCJfaXNBTW9tZW50T2JqZWN0IiwiX2kiLCJfZiIsIl9sIiwiX3R6bSIsIl9pc1VUQyIsIl9vZmZzZXQiLCJfbG9jYWxlIiwidXBkYXRlSW5Qcm9ncmVzcyIsIk1vbWVudCIsImNvbmZpZyIsInVwZGF0ZU9mZnNldCIsImlzTW9tZW50Iiwib2JqIiwiYWJzRmxvb3IiLCJudW1iZXIiLCJNYXRoIiwiY2VpbCIsImZsb29yIiwidG9JbnQiLCJhcmd1bWVudEZvckNvZXJjaW9uIiwiY29lcmNlZE51bWJlciIsImlzRmluaXRlIiwiY29tcGFyZUFycmF5cyIsImFycmF5MSIsImFycmF5MiIsImRvbnRDb252ZXJ0IiwibWluIiwibGVuZ3RoRGlmZiIsImFicyIsImRpZmZzIiwid2FybiIsIm1zZyIsInN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyIsImNvbnNvbGUiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJhcmciLCJhcmdzIiwic2xpY2UiLCJqb2luIiwiRXJyb3IiLCJzdGFjayIsImtleXMiLCJkZXByZWNhdGlvbnMiLCJkZXByZWNhdGVTaW1wbGUiLCJpc0Z1bmN0aW9uIiwiRnVuY3Rpb24iLCJtZXJnZUNvbmZpZ3MiLCJwYXJlbnRDb25maWciLCJjaGlsZENvbmZpZyIsIkxvY2FsZSIsInNldCIsImFsaWFzZXMiLCJhZGRVbml0QWxpYXMiLCJ1bml0Iiwic2hvcnRoYW5kIiwibG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVVbml0cyIsInVuaXRzIiwibm9ybWFsaXplT2JqZWN0VW5pdHMiLCJpbnB1dE9iamVjdCIsIm5vcm1hbGl6ZWRQcm9wIiwibm9ybWFsaXplZElucHV0IiwicHJpb3JpdGllcyIsImFkZFVuaXRQcmlvcml0eSIsInByaW9yaXR5IiwiemVyb0ZpbGwiLCJ0YXJnZXRMZW5ndGgiLCJmb3JjZVNpZ24iLCJhYnNOdW1iZXIiLCJ6ZXJvc1RvRmlsbCIsInBvdyIsIm1heCIsInN1YnN0ciIsImZvcm1hdHRpbmdUb2tlbnMiLCJsb2NhbEZvcm1hdHRpbmdUb2tlbnMiLCJmb3JtYXRGdW5jdGlvbnMiLCJmb3JtYXRUb2tlbkZ1bmN0aW9ucyIsImFkZEZvcm1hdFRva2VuIiwidG9rZW4iLCJwYWRkZWQiLCJvcmRpbmFsIiwiY2FsbGJhY2siLCJmdW5jIiwibG9jYWxlRGF0YSIsImZvcm1hdE1vbWVudCIsImV4cGFuZEZvcm1hdCIsImFycmF5IiwibWF0Y2giLCJyZXBsYWNlIiwibW9tIiwib3V0cHV0IiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsImxhc3RJbmRleCIsInRlc3QiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDMiLCJtYXRjaDQiLCJtYXRjaDYiLCJtYXRjaDF0bzIiLCJtYXRjaDN0bzQiLCJtYXRjaDV0bzYiLCJtYXRjaDF0bzMiLCJtYXRjaDF0bzQiLCJtYXRjaDF0bzYiLCJtYXRjaFVuc2lnbmVkIiwibWF0Y2hTaWduZWQiLCJtYXRjaE9mZnNldCIsIm1hdGNoU2hvcnRPZmZzZXQiLCJtYXRjaFdvcmQiLCJyZWdleGVzIiwiYWRkUmVnZXhUb2tlbiIsInJlZ2V4Iiwic3RyaWN0UmVnZXgiLCJpc1N0cmljdCIsImdldFBhcnNlUmVnZXhGb3JUb2tlbiIsIlJlZ0V4cCIsInJlZ2V4RXNjYXBlIiwibWF0Y2hlZCIsInAxIiwicDIiLCJwMyIsInA0IiwidG9rZW5zIiwiYWRkUGFyc2VUb2tlbiIsImFkZFdlZWtQYXJzZVRva2VuIiwiX3ciLCJhZGRUaW1lVG9BcnJheUZyb21Ub2tlbiIsIl9hIiwiWUVBUiIsIk1PTlRIIiwiREFURSIsIkhPVVIiLCJNSU5VVEUiLCJTRUNPTkQiLCJNSUxMSVNFQ09ORCIsIldFRUsiLCJXRUVLREFZIiwiZGF5c0luWWVhciIsInllYXIiLCJpc0xlYXBZZWFyIiwieSIsInBhcnNlVHdvRGlnaXRZZWFyIiwicGFyc2VJbnQiLCJpbmRleE9mIiwiZ2V0U2V0WWVhciIsIm1ha2VHZXRTZXQiLCJrZWVwVGltZSIsInNldCQxIiwibW9udGgiLCJkYXRlIiwiZGF5c0luTW9udGgiLCJ4IiwibW9kTW9udGgiLCJtb250aHNTaG9ydCIsIm1vbnRocyIsIm1vbnRoc1Nob3J0UmVnZXgiLCJtb250aHNSZWdleCIsIm1vbnRoc1BhcnNlIiwiTU9OVEhTX0lOX0ZPUk1BVCIsImRlZmF1bHRMb2NhbGVNb250aHMiLCJzcGxpdCIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsImhhbmRsZVN0cmljdFBhcnNlIiwibW9udGhOYW1lIiwiaWkiLCJsbGMiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsIl9tb250aHNQYXJzZSIsIl9sb25nTW9udGhzUGFyc2UiLCJfc2hvcnRNb250aHNQYXJzZSIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJjb21wdXRlTW9udGhzUGFyc2UiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsInNvcnQiLCJfbW9udGhzUmVnZXgiLCJfbW9udGhzU2hvcnRSZWdleCIsIl9tb250aHNTdHJpY3RSZWdleCIsIl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IiwiY3JlYXRlRGF0ZSIsImgiLCJNIiwibXMiLCJnZXRGdWxsWWVhciIsInNldEZ1bGxZZWFyIiwiY3JlYXRlVVRDRGF0ZSIsIlVUQyIsImdldFVUQ0Z1bGxZZWFyIiwic2V0VVRDRnVsbFllYXIiLCJmaXJzdFdlZWtPZmZzZXQiLCJkb3ciLCJkb3kiLCJmd2QiLCJnZXRVVENEYXkiLCJkYXlPZlllYXJGcm9tV2Vla3MiLCJ3ZWVrIiwid2Vla2RheSIsInJlc1llYXIiLCJyZXNEYXlPZlllYXIiLCJkYXlPZlllYXIiLCJ3ZWVrT2ZZZWFyIiwicmVzV2VlayIsIndlZWtPZmZzZXQiLCJ3ZWVrc0luWWVhciIsIndlZWtPZmZzZXROZXh0Iiwic2hpZnRXZWVrZGF5cyIsIndzIiwiY29uY2F0Iiwid2Vla2RheXNNaW4iLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXMiLCJ3ZWVrZGF5c01pblJlZ2V4Iiwid2Vla2RheXNTaG9ydFJlZ2V4Iiwid2Vla2RheXNSZWdleCIsIndlZWtkYXlzUGFyc2UiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXMiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydCIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbiIsImhhbmRsZVN0cmljdFBhcnNlJDEiLCJ3ZWVrZGF5TmFtZSIsIl93ZWVrZGF5c1BhcnNlIiwiX3Nob3J0V2Vla2RheXNQYXJzZSIsIl9taW5XZWVrZGF5c1BhcnNlIiwiZGF5IiwiZGVmYXVsdFdlZWtkYXlzUmVnZXgiLCJkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4IiwiZGVmYXVsdFdlZWtkYXlzTWluUmVnZXgiLCJjb21wdXRlV2Vla2RheXNQYXJzZSIsIm1pbnAiLCJzaG9ydHAiLCJsb25ncCIsIm1pblBpZWNlcyIsIl93ZWVrZGF5c1JlZ2V4IiwiX3dlZWtkYXlzU2hvcnRSZWdleCIsIl93ZWVrZGF5c01pblJlZ2V4IiwiX3dlZWtkYXlzU3RyaWN0UmVnZXgiLCJfd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4IiwiX3dlZWtkYXlzTWluU3RyaWN0UmVnZXgiLCJoRm9ybWF0IiwiaG91cnMiLCJsb3dlcmNhc2UiLCJtaW51dGVzIiwibWF0Y2hNZXJpZGllbSIsIl9tZXJpZGllbVBhcnNlIiwic2Vjb25kcyIsImtJbnB1dCIsIl9pc1BtIiwiaXNQTSIsIl9tZXJpZGllbSIsInBvcyIsInBvczEiLCJwb3MyIiwiZ2xvYmFsTG9jYWxlIiwiZ2V0U2V0SG91ciIsImJhc2VDb25maWciLCJjYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibmV4dFdlZWsiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsIkxUUyIsIkxUIiwiTCIsIkxMIiwiTExMIiwiTExMTCIsImRheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJyZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0Iiwic3MiLCJtbSIsImhoIiwiZGQiLCJNTSIsInl5IiwibWVyaWRpZW1QYXJzZSIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsIm5vcm1hbGl6ZUxvY2FsZSIsImxvYWRMb2NhbGUiLCJvbGRMb2NhbGUiLCJfYWJiciIsImdldFNldEdsb2JhbExvY2FsZSIsImUiLCJ2YWx1ZXMiLCJkYXRhIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYWJiciIsIl9jb25maWciLCJwYXJlbnRMb2NhbGUiLCJmb3JFYWNoIiwibmFtZXMiLCJqIiwibmV4dCIsImNob29zZUxvY2FsZSIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJkZWZhdWx0cyIsImNvbmZpZ0Zyb21BcnJheSIsImN1cnJlbnREYXRlIiwiZXhwZWN0ZWRXZWVrZGF5IiwieWVhclRvVXNlIiwibm93VmFsdWUiLCJub3ciLCJfdXNlVVRDIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY3VycmVudERhdGVBcnJheSIsInciLCJ3ZWVrWWVhciIsInRlbXAiLCJ3ZWVrZGF5T3ZlcmZsb3ciLCJHRyIsIlciLCJFIiwiY3JlYXRlTG9jYWwiLCJfd2VlayIsImN1cldlZWsiLCJnZyIsIl9kYXlPZlllYXIiLCJkYXlPZlllYXJGcm9tV2Vla0luZm8iLCJfbmV4dERheSIsImdldERheSIsInNldFVUQ01pbnV0ZXMiLCJnZXRVVENNaW51dGVzIiwiZXh0ZW5kZWRJc29SZWdleCIsImJhc2ljSXNvUmVnZXgiLCJ0elJlZ2V4IiwiaXNvRGF0ZXMiLCJpc29UaW1lcyIsImFzcE5ldEpzb25SZWdleCIsImNvbmZpZ0Zyb21JU08iLCJhbGxvd1RpbWUiLCJkYXRlRm9ybWF0IiwidGltZUZvcm1hdCIsInR6Rm9ybWF0Iiwic3RyaW5nIiwiZXhlYyIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJ1bnRydW5jYXRlWWVhciIsInllYXJTdHIiLCJvYnNPZmZzZXRzIiwiVVQiLCJHTVQiLCJFRFQiLCJFU1QiLCJDRFQiLCJDU1QiLCJNRFQiLCJNU1QiLCJQRFQiLCJQU1QiLCJjb25maWdGcm9tUkZDMjgyMiIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInJlc3VsdCIsInBhcnNlZEFycmF5Iiwid2Vla2RheVN0ciIsInBhcnNlZElucHV0IiwiY2hlY2tXZWVrZGF5Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJobSIsImNhbGN1bGF0ZU9mZnNldCIsIklTT184NjAxIiwiUkZDXzI4MjIiLCJza2lwcGVkIiwic3RyaW5nTGVuZ3RoIiwidG90YWxQYXJzZWRJbnB1dExlbmd0aCIsImhvdXIiLCJpc1BtIiwibWVyaWRpZW1Ib3VyIiwibWVyaWRpZW1GaXhXcmFwIiwicHJlcGFyZUNvbmZpZyIsInByZXBhcnNlIiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5IiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJjb25maWdGcm9tU3RyaW5nIiwibWludXRlIiwic2Vjb25kIiwibWlsbGlzZWNvbmQiLCJjb25maWdGcm9tT2JqZWN0IiwiY29uZmlnRnJvbUlucHV0IiwiaXNVVEMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiayIsImlzT2JqZWN0RW1wdHkiLCJhZGQiLCJwcm90b3R5cGVNaW4iLCJvdGhlciIsInByb3RvdHlwZU1heCIsInBpY2tCeSIsIm1vbWVudHMiLCJvcmRlcmluZyIsIkR1cmF0aW9uIiwiZHVyYXRpb24iLCJ5ZWFycyIsInF1YXJ0ZXJzIiwicXVhcnRlciIsIndlZWtzIiwiaXNvV2VlayIsImRheXMiLCJtaWxsaXNlY29uZHMiLCJ1bml0SGFzRGVjaW1hbCIsInBhcnNlRmxvYXQiLCJpc0R1cmF0aW9uVmFsaWQiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfbW9udGhzIiwiX2RhdGEiLCJfYnViYmxlIiwiaXNEdXJhdGlvbiIsImFic1JvdW5kIiwicm91bmQiLCJvZmZzZXQiLCJzZXBhcmF0b3IiLCJ1dGNPZmZzZXQiLCJzaWduIiwib2Zmc2V0RnJvbVN0cmluZyIsImNodW5rT2Zmc2V0IiwibWF0Y2hlciIsIm1hdGNoZXMiLCJwYXJ0cyIsImNsb25lV2l0aE9mZnNldCIsIm1vZGVsIiwiZGlmZiIsImNsb25lIiwic2V0VGltZSIsImxvY2FsIiwiZ2V0RGF0ZU9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiaXNVdGMiLCJhc3BOZXRSZWdleCIsImlzb1JlZ2V4IiwiY3JlYXRlRHVyYXRpb24iLCJyZXQiLCJkaWZmUmVzIiwiYmFzZSIsInBhcnNlSXNvIiwiaXNCZWZvcmUiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiaW5wIiwiaXNBZnRlciIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwidG1wIiwiYWRkU3VidHJhY3QiLCJpc0FkZGluZyIsImludmFsaWQiLCJzdWJ0cmFjdCIsIm1vbnRoRGlmZiIsIndob2xlTW9udGhEaWZmIiwiYW5jaG9yIiwibmV3TG9jYWxlRGF0YSIsImRlZmF1bHRGb3JtYXQiLCJkZWZhdWx0Rm9ybWF0VXRjIiwibGFuZyIsIk1TX1BFUl9TRUNPTkQiLCJNU19QRVJfTUlOVVRFIiwiTVNfUEVSX0hPVVIiLCJNU19QRVJfNDAwX1lFQVJTIiwibW9kJDEiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJsb2NhbFN0YXJ0T2ZEYXRlIiwidXRjU3RhcnRPZkRhdGUiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJ3ZWVrc1RhcmdldCIsInNldFdlZWtBbGwiLCJkYXlPZlllYXJEYXRhIiwiaXNvV2Vla1llYXIiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwicHJvdG8iLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJ0aW1lIiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJzdGFydE9mRGF0ZSIsImlzb1dlZWtkYXkiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvQXJyYXkiLCJ0b09iamVjdCIsInRvRGF0ZSIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsImluc3BlY3QiLCJ6b25lIiwiaXNMb2NhbCIsInByZWZpeCIsInN1ZmZpeCIsInRvSlNPTiIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsInNvdXJjZSIsImlzRm9ybWF0IiwiX21vbnRoc1Nob3J0IiwiX21vbnRoc1BhcnNlRXhhY3QiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiX3dlZWtkYXlzIiwiX3dlZWtkYXlzTWluIiwiX3dlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiY2hhckF0IiwiaXNMb3dlciIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiZGF5c1RvTW9udGhzIiwibW9udGhzVG9EYXlzIiwibWFrZUFzIiwiYWxpYXMiLCJhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG9GaXhlZCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwicmVsYXRpdmVUaW1lJDEiLCJ0b0lzb1N0cmluZyIsInZlcnNpb24iLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsIm15TW9tZW50IiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJUSU1FIiwiVElNRV9TRUNPTkRTIiwiVElNRV9NUyIsImZhY3RvcnkiLCJmIiwiY29tcGFyZSIsImFzY2VuZGluZyIsImxlZnQiLCJsbyIsImhpIiwibWlkIiwicmlnaHQiLCJhc2NlbmRpbmdCaXNlY3QiLCJiaXNlY3RvciIsImJpc2VjdFJpZ2h0IiwiYmlzZWN0TGVmdCIsImJpc2VjdCIsInBhaXIiLCJwYWlycyIsImkwIiwiaTEiLCJ2YWx1ZTAiLCJuMCIsInZhbHVlczAiLCJuMSIsInZhbHVlczEiLCJyZWR1Y2UiLCJkZWx0YSIsIm1lYW4iLCJzdW0iLCJ2YWx1ZW9mIiwidiIsInZhcmlhbmNlIiwic3FydCIsInN0YXJ0Iiwic3RvcCIsInN0ZXAiLCJyYW5nZSIsImUxMCIsImU1IiwiZTIiLCJyZXZlcnNlIiwidGlja3MiLCJjb3VudCIsInRpY2tJbmNyZW1lbnQiLCJwb3dlciIsImxvZyIsIkxOMTAiLCJlcnJvciIsInRpY2tTdGVwIiwic3RlcDAiLCJzdGVwMSIsIkxOMiIsImlkZW50aXR5IiwiZG9tYWluIiwic3R1cmdlcyIsImhpc3RvZ3JhbSIsInh6IiwieDAiLCJ4MSIsInR6IiwicG9wIiwiYmluIiwiYmlucyIsIl8iLCJjb25zdGFudCIsInF1YW50aWxlIiwiZGV2aWF0aW9uIiwibnVtYmVycyIsIm1lcmdlZCIsImFycmF5cyIsImluZGV4ZXMiLCJwZXJtdXRlcyIsInhpIiwieGoiLCJyYW5kb20iLCJtYXRyaXgiLCJ0cmFuc3Bvc2UiLCJyb3ciLCJlcHNpbG9uIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJzY2FsZSIsImJhbmR3aWR0aCIsImVudGVyaW5nIiwiX19heGlzIiwib3JpZW50IiwidGlja0FyZ3VtZW50cyIsInRpY2tWYWx1ZXMiLCJ0aWNrRm9ybWF0IiwidGlja1NpemVJbm5lciIsInRpY2tTaXplT3V0ZXIiLCJ0aWNrUGFkZGluZyIsInRyYW5zZm9ybSIsImF4aXMiLCJjb250ZXh0Iiwic3BhY2luZyIsInJhbmdlMCIsInJhbmdlMSIsInBvc2l0aW9uIiwiY29weSIsInNlbGVjdGlvbiIsInBhdGgiLCJzZWxlY3RBbGwiLCJ0aWNrIiwib3JkZXIiLCJ0aWNrRXhpdCIsImV4aXQiLCJ0aWNrRW50ZXIiLCJlbnRlciIsImFwcGVuZCIsImF0dHIiLCJsaW5lIiwic2VsZWN0IiwidGV4dCIsIm1lcmdlIiwiaW5zZXJ0IiwidHJhbnNpdGlvbiIsImdldEF0dHJpYnV0ZSIsInBhcmVudE5vZGUiLCJyZW1vdmUiLCJmaWx0ZXIiLCJlYWNoIiwidGlja1NpemUiLCJheGlzVG9wIiwiYXhpc1JpZ2h0IiwiYXhpc0JvdHRvbSIsImF4aXNMZWZ0Iiwibm9vcCIsImRpc3BhdGNoIiwiRGlzcGF0Y2giLCJwYXJzZVR5cGVuYW1lcyIsInR5cGVuYW1lcyIsInR5cGVzIiwidHJpbSIsInR5cGUiLCJjb25zdHJ1Y3RvciIsIm9uIiwidHlwZW5hbWUiLCJUIiwieGh0bWwiLCJzdmciLCJ4bGluayIsInhtbCIsInhtbG5zIiwibmFtZXNwYWNlcyIsInNwYWNlIiwiY3JlYXRvckluaGVyaXQiLCJkb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRvckZpeGVkIiwiZnVsbG5hbWUiLCJuYW1lc3BhY2UiLCJub25lIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInVwZGF0ZSIsIkVudGVyTm9kZSIsInBhcmVudCIsImRhdHVtIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwia2V5UHJlZml4IiwiYmluZEluZGV4IiwiZ3JvdXAiLCJub2RlIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJhdHRyUmVtb3ZlIiwicmVtb3ZlQXR0cmlidXRlIiwiYXR0clJlbW92ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJhdHRyQ29uc3RhbnQiLCJzZXRBdHRyaWJ1dGUiLCJhdHRyQ29uc3RhbnROUyIsInNldEF0dHJpYnV0ZU5TIiwiYXR0ckZ1bmN0aW9uIiwiYXR0ckZ1bmN0aW9uTlMiLCJkZWZhdWx0VmlldyIsInN0eWxlUmVtb3ZlIiwic3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsInN0eWxlQ29uc3RhbnQiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldENvbXB1dGVkU3R5bGUiLCJwcm9wZXJ0eVJlbW92ZSIsInByb3BlcnR5Q29uc3RhbnQiLCJwcm9wZXJ0eUZ1bmN0aW9uIiwiY2xhc3NBcnJheSIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiY2xhc3NlZEFkZCIsImxpc3QiLCJjbGFzc2VkUmVtb3ZlIiwiY2xhc3NlZFRydWUiLCJjbGFzc2VkRmFsc2UiLCJjbGFzc2VkRnVuY3Rpb24iLCJzcGxpY2UiLCJjb250YWlucyIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsInRleHRDb25zdGFudCIsInRleHRGdW5jdGlvbiIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlQ2hpbGQiLCJzZWxlY3Rpb25fY2xvbmVTaGFsbG93IiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsImZpbHRlckV2ZW50cyIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwibGlzdGVuZXIiLCJjb250ZXh0TGlzdGVuZXIiLCJldmVudCIsInJlbGF0ZWQiLCJyZWxhdGVkVGFyZ2V0IiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJldmVudDEiLCJldmVudDAiLCJvblJlbW92ZSIsIl9fb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FwdHVyZSIsIm9uQWRkIiwid3JhcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjdXN0b21FdmVudCIsInNvdXJjZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInBhcmFtcyIsIndpbmRvdyIsIkN1c3RvbUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRldGFpbCIsImRpc3BhdGNoQ29uc3RhbnQiLCJkaXNwYXRjaEZ1bmN0aW9uIiwiU2VsZWN0aW9uIiwiZ3JvdXBzIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsInN1Ymdyb3VwcyIsInN1Ym5vZGUiLCJzdWJncm91cCIsInNlbGVjdG9yQWxsIiwic2l6ZSIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsInByZXZpb3VzIiwiX2VudGVyIiwiX2V4aXQiLCJzcGFyc2UiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibTEiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJub2RlcyIsImdldEF0dHJpYnV0ZU5TIiwiY2xhc3NlZCIsImh0bWwiLCJjcmVhdG9yIiwiYmVmb3JlIiwiZGVlcCIsIm5leHRJZCIsIkxvY2FsIiwiaWQiLCJjdXJyZW50Iiwib3duZXJTVkdFbGVtZW50IiwiY3JlYXRlU1ZHUG9pbnQiLCJwb2ludCIsImNsaWVudFgiLCJjbGllbnRZIiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiaW52ZXJzZSIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRMZWZ0IiwidG9wIiwiY2xpZW50VG9wIiwiY2hhbmdlZFRvdWNoZXMiLCJpZGVudGlmaWVyIiwidG91Y2hlcyIsInRvdWNoIiwicG9pbnRzIiwibm9wcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0Iiwicm9vdCIsInZpZXciLCJub2V2ZW50IiwiX19ub3NlbGVjdCIsIk1velVzZXJTZWxlY3QiLCJ5ZXNkcmFnIiwibm9jbGljayIsInNldFRpbWVvdXQiLCJEcmFnRXZlbnQiLCJ0YXJnZXQiLCJzdWJqZWN0IiwiYWN0aXZlIiwiZHgiLCJkeSIsImRlZmF1bHRGaWx0ZXIiLCJjdHJsS2V5IiwiYnV0dG9uIiwiZGVmYXVsdENvbnRhaW5lciIsImRlZmF1bHRTdWJqZWN0IiwiZGVmYXVsdFRvdWNoYWJsZSIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibW91c2Vkb3dueCIsIm1vdXNlZG93bnkiLCJtb3VzZW1vdmluZyIsInRvdWNoZW5kaW5nIiwiY29udGFpbmVyIiwidG91Y2hhYmxlIiwiZ2VzdHVyZXMiLCJsaXN0ZW5lcnMiLCJjbGlja0Rpc3RhbmNlMiIsImRyYWciLCJtb3VzZWRvd25lZCIsInRvdWNoc3RhcnRlZCIsInRvdWNobW92ZWQiLCJ0b3VjaGVuZGVkIiwiZ2VzdHVyZSIsImJlZm9yZXN0YXJ0IiwibW91c2UiLCJtb3VzZW1vdmVkIiwibW91c2V1cHBlZCIsIm5vZHJhZyIsImNsZWFyVGltZW91dCIsInN1Ymxpc3RlbmVycyIsInAwIiwiY2xpY2tEaXN0YW5jZSIsImRlZmluaXRpb24iLCJDb2xvciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4MyIsInJlSGV4NiIsInJlUmdiSW50ZWdlciIsInJlUmdiUGVyY2VudCIsInJlUmdiYUludGVnZXIiLCJyZVJnYmFQZXJjZW50IiwicmVIc2xQZXJjZW50IiwicmVIc2xhUGVyY2VudCIsIm5hbWVkIiwiYWxpY2VibHVlIiwiYW50aXF1ZXdoaXRlIiwiYXF1YSIsImFxdWFtYXJpbmUiLCJhenVyZSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuY2hlZGFsbW9uZCIsImJsdWUiLCJibHVldmlvbGV0IiwiYnJvd24iLCJidXJseXdvb2QiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJjb2xvcl9mb3JtYXRIZXgiLCJyZ2IiLCJmb3JtYXRIZXgiLCJjb2xvcl9mb3JtYXRSZ2IiLCJmb3JtYXRSZ2IiLCJSZ2IiLCJyZ2JuIiwicmdiYSIsImhzbGEiLCJnIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wiLCJoc2wycmdiIiwibTIiLCJkZWZpbmUiLCJjaGFubmVscyIsImFzc2lnbiIsImRpc3BsYXlhYmxlIiwiZm9ybWF0SHNsIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJkZWcycmFkIiwiUEkiLCJyYWQyZGVnIiwiWG4iLCJZbiIsIlpuIiwidDMiLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwiaGNsMmxhYiIsInoiLCJyZ2IybHJnYiIsInh5ejJsYWIiLCJsYWIiLCJsYWIyeHl6IiwibHJnYjJyZ2IiLCJoY2xDb252ZXJ0IiwiYXRhbjIiLCJsY2giLCJoY2wiLCJjb3MiLCJzaW4iLCJDIiwiRUQiLCJFQiIsIkJDX0RBIiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwiYmFzaXMiLCJ0MSIsInYwIiwidjEiLCJ2MiIsInYzIiwidDIiLCJjb3NoIiwic2luaCIsImxpbmVhciIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwiY29sb3IiLCJlbmQiLCJyZ2JHYW1tYSIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsInJnYkJhc2lzIiwicmdiQmFzaXNDbG9zZWQiLCJiYXNpc0Nsb3NlZCIsIm5iIiwibmEiLCJyZUEiLCJyZUIiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwiYW0iLCJibSIsImJzIiwiYmkiLCJxIiwib25lIiwiZGVncmVlcyIsInJvdGF0ZSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiYXRhbiIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicGFyc2UiLCJweENvbW1hIiwicHhQYXJlbiIsImRlZ1BhcmVuIiwieGEiLCJ5YSIsInhiIiwieWIiLCJ0cmFuc2xhdGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsImRlY29tcG9zZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwicmhvIiwiU1FSVDIiLCJleHAiLCJTIiwidXgwIiwidXkwIiwidzAiLCJ1eDEiLCJ1eTEiLCJ3MSIsImQyIiwiZDEiLCJiMCIsImIxIiwicjAiLCJyMSIsImNvc2hyMCIsImh1ZSIsImhzbExvbmciLCJoY2xMb25nIiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXgiLCJjdWJlaGVsaXhMb25nIiwiaW50ZXJwb2xhdGUiLCJJIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsInNhbXBsZXMiLCJpbnRlcnBvbGF0b3IiLCJ0aW1lb3V0IiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJyZXN0YXJ0IiwidGltZXJGbHVzaCIsIndha2UiLCJ0MCIsIkluZmluaXR5Iiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiVHlwZUVycm9yIiwiZWxhcHNlZCIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInNlbGYiLCJ0d2VlbiIsInN0YXRlIiwiZWFzZSIsInRpbWluZyIsInNjaGVkdWxlIiwidHdlZW5SZW1vdmUiLCJ0d2VlbjAiLCJ0d2VlbjEiLCJ0d2VlbkZ1bmN0aW9uIiwidHdlZW5WYWx1ZSIsIl9pZCIsInZhbHVlMSIsInN0cmluZzAwIiwiaW50ZXJwb2xhdGUwIiwic3RyaW5nMSIsInN0cmluZzAiLCJzdHJpbmcxMCIsImF0dHJUd2Vlbk5TIiwiYXR0ckludGVycG9sYXRlTlMiLCJfdmFsdWUiLCJhdHRyVHdlZW4iLCJhdHRySW50ZXJwb2xhdGUiLCJkZWxheUZ1bmN0aW9uIiwiZGVsYXlDb25zdGFudCIsImR1cmF0aW9uRnVuY3Rpb24iLCJkdXJhdGlvbkNvbnN0YW50IiwiZWFzZUNvbnN0YW50Iiwib25GdW5jdGlvbiIsIm9uMCIsIm9uMSIsInNpdCIsImV2ZXJ5Iiwic3R5bGVUd2VlbiIsInN0eWxlSW50ZXJwb2xhdGUiLCJUcmFuc2l0aW9uIiwiX25hbWUiLCJuZXdJZCIsInNlbGVjdGlvbl9wcm90b3R5cGUiLCJxdWFkSW4iLCJxdWFkT3V0IiwicXVhZEluT3V0IiwiY3ViaWNJbiIsImN1YmljT3V0IiwiY3ViaWNJbk91dCIsImNoaWxkcmVuIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbmNlbCIsImludGVycnVwdCIsInBvbHlJbiIsImN1c3RvbSIsImV4cG9uZW50IiwicG9seU91dCIsInBvbHlJbk91dCIsInBpIiwiaGFsZlBpIiwic2luSW4iLCJzaW5PdXQiLCJzaW5Jbk91dCIsImV4cEluIiwiZXhwT3V0IiwiZXhwSW5PdXQiLCJjaXJjbGVJbiIsImNpcmNsZU91dCIsImNpcmNsZUluT3V0IiwiYjIiLCJiMyIsImI0IiwiYjUiLCJiNiIsImI3IiwiYjgiLCJiOSIsImJvdW5jZUluIiwiYm91bmNlT3V0IiwiYm91bmNlSW5PdXQiLCJiYWNrSW4iLCJvdmVyc2hvb3QiLCJiYWNrT3V0IiwiYmFja0luT3V0IiwidGF1IiwiZWxhc3RpY0luIiwiYXNpbiIsImFtcGxpdHVkZSIsImVsYXN0aWNPdXQiLCJlbGFzdGljSW5PdXQiLCJkZWZhdWx0VGltaW5nIiwiTU9ERV9EUkFHIiwiTU9ERV9TUEFDRSIsIk1PREVfSEFORExFIiwiTU9ERV9DRU5URVIiLCJudW1iZXIxIiwibnVtYmVyMiIsImhhbmRsZXMiLCJ4eSIsIlhZIiwiY3Vyc29ycyIsIm92ZXJsYXkiLCJudyIsIm5lIiwic2UiLCJzdyIsImZsaXBYIiwiZmxpcFkiLCJzaWduc1giLCJzaWduc1kiLCJkZWZhdWx0RXh0ZW50IiwiaGFzQXR0cmlidXRlIiwidmlld0JveCIsIndpZHRoIiwiaGVpZ2h0IiwiX19icnVzaCIsImJydXNoU2VsZWN0aW9uIiwiZGltIiwiYnJ1c2hYIiwiYnJ1c2hZIiwiZXh0ZW50IiwiYnJ1c2giLCJoYW5kbGVTaXplIiwiaW5pdGlhbGl6ZSIsImhhbmRsZSIsInJlZHJhdyIsInN0YXJ0ZWQiLCJlbWl0dGVyIiwiY2xlYW4iLCJFbWl0dGVyIiwiZTAiLCJlMSIsInMwIiwiczEiLCJtb3ZpbmciLCJsb2NrWCIsImxvY2tZIiwibWV0YUtleSIsImFsdEtleSIsInNpZ25YIiwic2lnblkiLCJOIiwic2hpZnRpbmciLCJzaGlmdEtleSIsInBvaW50ZXIiLCJwb2ludDAiLCJlbWl0IiwibW92ZWQiLCJlbmRlZCIsImtleUNvZGUiLCJtb3ZlIiwicG9pbnQxIiwic2VsZWN0aW9uMCIsInNlbGVjdGlvbjEiLCJjbGVhciIsInN0YXJ0aW5nIiwia2V5TW9kaWZpZXJzIiwiY29tcGFyZVZhbHVlIiwicGFkQW5nbGUiLCJzb3J0R3JvdXBzIiwic29ydFN1Ymdyb3VwcyIsInNvcnRDaG9yZHMiLCJjaG9yZCIsImdyb3VwU3VtcyIsImdyb3VwSW5kZXgiLCJzdWJncm91cEluZGV4IiwiY2hvcmRzIiwiZGkiLCJkaiIsImEwIiwiYTEiLCJzdWJpbmRleCIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInRhdUVwc2lsb24iLCJQYXRoIiwiX3gwIiwiX3kwIiwiX3gxIiwiX3kxIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsInkxIiwiYmV6aWVyQ3VydmVUbyIsIngyIiwieTIiLCJhcmNUbyIsInkwIiwieDIxIiwieTIxIiwieDAxIiwieTAxIiwibDAxXzIiLCJ4MjAiLCJ5MjAiLCJsMjFfMiIsImwyMF8yIiwibDIxIiwibDAxIiwiYWNvcyIsInQwMSIsInQyMSIsImFyYyIsImNjdyIsImN3IiwiZGEiLCJkZWZhdWx0U291cmNlIiwiZGVmYXVsdFRhcmdldCIsImRlZmF1bHRSYWRpdXMiLCJyYWRpdXMiLCJkZWZhdWx0U3RhcnRBbmdsZSIsImRlZmF1bHRFbmRBbmdsZSIsInJpYmJvbiIsImJ1ZmZlciIsImFyZ3YiLCJzciIsInNhMCIsInNhMSIsInN4MCIsInN5MCIsInRyIiwidGEwIiwidGExIiwiTWFwIiwiaGFzIiwiZW50cmllcyIsInNvcnRWYWx1ZXMiLCJyb2xsdXAiLCJuZXN0Iiwic29ydEtleXMiLCJkZXB0aCIsImNyZWF0ZVJlc3VsdCIsInNldFJlc3VsdCIsInZhbHVlc0J5S2V5IiwiY3JlYXRlT2JqZWN0Iiwic2V0T2JqZWN0IiwiY3JlYXRlTWFwIiwic2V0TWFwIiwic29ydEtleSIsIlNldCIsInJpbmciLCJhcmVhIiwiaG9sZSIsInJpbmdDb250YWlucyIsInlpIiwicGoiLCJ5aiIsInNlZ21lbnRDb250YWlucyIsImNvbGxpbmVhciIsImNhc2VzIiwic21vb3RoIiwic21vb3RoTGluZWFyIiwiY29udG91cnMiLCJjb250b3VyIiwicG9seWdvbnMiLCJob2xlcyIsImZyYWdtZW50QnlTdGFydCIsImZyYWdtZW50QnlFbmQiLCJzdGl0Y2giLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJ1bnNoaWZ0IiwiaXNvcmluZ3MiLCJwb2x5Z29uIiwiY29vcmRpbmF0ZXMiLCJ4dCIsInl0IiwiXzAiLCJfMSIsImJsdXJYIiwiYmx1clkiLCJkZWZhdWx0WCIsImRlZmF1bHRZIiwiZGVmYXVsdFdlaWdodCIsIndlaWdodCIsImRlbnNpdHkiLCJGbG9hdDMyQXJyYXkiLCJ3aSIsImdlb21ldHJ5IiwidHJhbnNmb3JtUG9seWdvbiIsInRyYW5zZm9ybVJpbmciLCJ0cmFuc2Zvcm1Qb2ludCIsInJlc2l6ZSIsImNlbGxTaXplIiwiRU9MIiwiRU9GIiwiUVVPVEUiLCJORVdMSU5FIiwiUkVUVVJOIiwib2JqZWN0Q29udmVydGVyIiwiY29sdW1ucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0IiwiY29sdW1uIiwicGFkIiwiZm9ybWF0RGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInJlRm9ybWF0IiwiZGVsaW1pdGVyIiwiREVMSU1JVEVSIiwiY2hhckNvZGVBdCIsInBhcnNlUm93cyIsImVvZiIsImVvbCIsInByZWZvcm1hdEJvZHkiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdFJvdyIsImNvbnZlcnQiLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXRCb2R5IiwiZm9ybWF0Um93cyIsImNzdiIsImRzdiIsImNzdlBhcnNlIiwiY3N2UGFyc2VSb3dzIiwiY3N2Rm9ybWF0IiwiY3N2Rm9ybWF0Qm9keSIsImNzdkZvcm1hdFJvd3MiLCJ0c3YiLCJ0c3ZQYXJzZSIsInRzdlBhcnNlUm93cyIsInRzdkZvcm1hdCIsInRzdkZvcm1hdEJvZHkiLCJ0c3ZGb3JtYXRSb3dzIiwiYXV0b1R5cGUiLCJyZXNwb25zZUJsb2IiLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImJsb2IiLCJmZXRjaCIsImluaXQiLCJ0aGVuIiwicmVzcG9uc2VBcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwicmVzcG9uc2VUZXh0IiwiZHN2UGFyc2UiLCJpbWFnZSIsIkltYWdlIiwib25lcnJvciIsIm9ubG9hZCIsInNyYyIsInJlc3BvbnNlSnNvbiIsImpzb24iLCJwYXJzZXIiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJmb3JjZSIsInN4Iiwic3kiLCJ0cmVlIiwieG0iLCJ5bSIsInhwIiwieXAiLCJib3R0b20iLCJfcm9vdCIsImxlYWYiLCJfeCIsIl95IiwicXVhZHRyZWUiLCJRdWFkdHJlZSIsImFkZEFsbCIsImxlYWZfY29weSIsInRyZWVQcm90byIsInZ4IiwidnkiLCJjb3ZlciIsInl6IiwidmlzaXQiLCJmaW5kIiwieDMiLCJ5MyIsInF1YWRzIiwicmV0YWluZXIiLCJyZW1vdmVBbGwiLCJ2aXNpdEFmdGVyIiwicmFkaWkiLCJzdHJlbmd0aCIsIml0ZXJhdGlvbnMiLCJyaSIsInJpMiIsInByZXBhcmUiLCJxdWFkIiwicmoiLCJqaWdnbGUiLCJub2RlQnlJZCIsIm5vZGVJZCIsInN0cmVuZ3RocyIsImRpc3RhbmNlcyIsImJpYXMiLCJsaW5rIiwiZGlzdGFuY2UiLCJhbHBoYSIsImxpbmtzIiwiaW5pdGlhbGl6ZVN0cmVuZ3RoIiwiaW5pdGlhbGl6ZURpc3RhbmNlIiwiaW5pdGlhbFJhZGl1cyIsImluaXRpYWxBbmdsZSIsInNpbXVsYXRpb24iLCJhbHBoYU1pbiIsImFscGhhRGVjYXkiLCJhbHBoYVRhcmdldCIsInZlbG9jaXR5RGVjYXkiLCJmb3JjZXMiLCJzdGVwcGVyIiwiZngiLCJmeSIsImluaXRpYWxpemVOb2RlcyIsImFuZ2xlIiwiaW5pdGlhbGl6ZUZvcmNlIiwiY2xvc2VzdCIsImRpc3RhbmNlTWluMiIsImRpc3RhbmNlTWF4MiIsInRoZXRhMiIsImFjY3VtdWxhdGUiLCJkaXN0YW5jZU1pbiIsImRpc3RhbmNlTWF4IiwidGhldGEiLCJyYWRpdXNlcyIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsImZvcm1hdERlY2ltYWwiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJhbGlnbiIsInN5bWJvbCIsInplcm8iLCJjb21tYSIsInByZWNpc2lvbiIsInByZWZpeEV4cG9uZW50IiwidG9QcmVjaXNpb24iLCJmb3JtYXRSb3VuZGVkIiwicHJlZml4ZXMiLCJncm91cGluZyIsInRob3VzYW5kcyIsIk51bWJlciIsInN1YnN0cmluZyIsImN1cnJlbmN5UHJlZml4IiwiY3VycmVuY3kiLCJjdXJyZW5jeVN1ZmZpeCIsImRlY2ltYWwiLCJudW1lcmFscyIsImZvcm1hdE51bWVyYWxzIiwiU3RyaW5nIiwicGVyY2VudCIsIm1pbnVzIiwibmFuIiwibmV3Rm9ybWF0IiwiZm9ybWF0VHlwZXMiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImZvcm1hdFRyaW0iLCJwYWRkaW5nIiwiZm9ybWF0UHJlZml4IiwiZGVmYXVsdExvY2FsZSIsIkFkZGVyIiwicmVzZXQiLCJhZGRlciIsImJ2IiwiYXYiLCJxdWFydGVyUGkiLCJyYWRpYW5zIiwiaGF2ZXJzaW4iLCJzdHJlYW1HZW9tZXRyeSIsInN0cmVhbSIsInN0cmVhbUdlb21ldHJ5VHlwZSIsInN0cmVhbU9iamVjdFR5cGUiLCJGZWF0dXJlIiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJmZWF0dXJlcyIsIlNwaGVyZSIsInNwaGVyZSIsIlBvaW50IiwiTXVsdGlQb2ludCIsIkxpbmVTdHJpbmciLCJzdHJlYW1MaW5lIiwiTXVsdGlMaW5lU3RyaW5nIiwiUG9seWdvbiIsInN0cmVhbVBvbHlnb24iLCJNdWx0aVBvbHlnb24iLCJHZW9tZXRyeUNvbGxlY3Rpb24iLCJnZW9tZXRyaWVzIiwiY2xvc2VkIiwiY29vcmRpbmF0ZSIsImxpbmVTdGFydCIsImxpbmVFbmQiLCJwb2x5Z29uU3RhcnQiLCJwb2x5Z29uRW5kIiwicGhpMDAiLCJhcmVhUmluZ1N1bSIsImFyZWFTdW0iLCJhcmVhU3RyZWFtIiwiYXJlYVJpbmdTdGFydCIsImFyZWFSaW5nRW5kIiwiYXJlYVJpbmciLCJhcmVhUG9pbnRGaXJzdCIsImFyZWFQb2ludCIsImxhbWJkYSIsInBoaSIsImRMYW1iZGEiLCJzZExhbWJkYSIsImFkTGFtYmRhIiwiY29zUGhpIiwic2luUGhpIiwiY2FydGVzaWFuIiwic3BoZXJpY2FsIiwiY2FydGVzaWFuRG90IiwiY2FydGVzaWFuQ3Jvc3MiLCJjYXJ0ZXNpYW5BZGRJblBsYWNlIiwiY2FydGVzaWFuU2NhbGUiLCJ2ZWN0b3IiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwicmFuZ2VzIiwiZGVsdGFTdW0iLCJib3VuZHNTdHJlYW0iLCJib3VuZHNQb2ludCIsImJvdW5kc0xpbmVTdGFydCIsImJvdW5kc0xpbmVFbmQiLCJib3VuZHNSaW5nUG9pbnQiLCJib3VuZHNSaW5nU3RhcnQiLCJib3VuZHNSaW5nRW5kIiwibm9ybWFsIiwiaW5mbGVjdGlvbiIsInBoaWkiLCJsYW1iZGFpIiwiYW50aW1lcmlkaWFuIiwibGFtYmRhMCIsImxhbWJkYTEiLCJyYW5nZUNvbXBhcmUiLCJyYW5nZUNvbnRhaW5zIiwiVzAiLCJXMSIsIlowIiwiWjEiLCJYMiIsIlkyIiwiWjIiLCJ6MCIsImRlbHRhTWF4IiwiZmVhdHVyZSIsImNlbnRyb2lkU3RyZWFtIiwiY2VudHJvaWRQb2ludCIsImNlbnRyb2lkTGluZVN0YXJ0IiwiY2VudHJvaWRMaW5lRW5kIiwiY2VudHJvaWRSaW5nU3RhcnQiLCJjZW50cm9pZFJpbmdFbmQiLCJjZW50cm9pZFBvaW50Q2FydGVzaWFuIiwiY2VudHJvaWRMaW5lUG9pbnRGaXJzdCIsImNlbnRyb2lkTGluZVBvaW50IiwiY2VudHJvaWRSaW5nUG9pbnRGaXJzdCIsImNlbnRyb2lkUmluZ1BvaW50IiwiY3giLCJjeSIsImN6IiwiY29tcG9zZSIsImludmVydCIsInJvdGF0aW9uSWRlbnRpdHkiLCJyb3RhdGVSYWRpYW5zIiwiZGVsdGFMYW1iZGEiLCJkZWx0YVBoaSIsImRlbHRhR2FtbWEiLCJyb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uUGhpR2FtbWEiLCJmb3J3YXJkUm90YXRpb25MYW1iZGEiLCJyb3RhdGlvbiIsImNvc0RlbHRhUGhpIiwic2luRGVsdGFQaGkiLCJjb3NEZWx0YUdhbW1hIiwic2luRGVsdGFHYW1tYSIsImZvcndhcmQiLCJjaXJjbGVTdHJlYW0iLCJjb3NSYWRpdXMiLCJzaW5SYWRpdXMiLCJjaXJjbGVSYWRpdXMiLCJjZW50ZXIiLCJjaXJjbGUiLCJsaW5lcyIsInJlam9pbiIsIkludGVyc2VjdGlvbiIsImVudHJ5IiwiY2xpcCIsInNlZ21lbnRzIiwic2VnbWVudCIsInBvaW50RXF1YWwiLCJjb21wYXJlSW50ZXJzZWN0aW9uIiwic3RhcnRJbnNpZGUiLCJpc1N1YmplY3QiLCJsb25naXR1ZGUiLCJ3aW5kaW5nIiwicGhpMCIsInNpblBoaTAiLCJjb3NQaGkwIiwic2luUGhpMSIsImNvc1BoaTEiLCJwaGkxIiwiYWJzRGVsdGEiLCJpbnRlcnNlY3Rpb24iLCJwaGlBcmMiLCJzaW5rIiwiY2xpcExpbmUiLCJyaW5nQnVmZmVyIiwicmluZ1NpbmsiLCJwb2x5Z29uU3RhcnRlZCIsInBvaW50UmluZyIsInJpbmdTdGFydCIsInJpbmdFbmQiLCJwb2x5Z29uQ29udGFpbnMiLCJwb2ludFZpc2libGUiLCJwb2ludExpbmUiLCJyaW5nU2VnbWVudHMiLCJ2YWxpZFNlZ21lbnQiLCJzaWduMCIsInNpZ24xIiwic2luTGFtYmRhMExhbWJkYTEiLCJjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0IiwiY3IiLCJzbWFsbFJhZGl1cyIsIm5vdEhlbWlzcGhlcmUiLCJ2aXNpYmxlIiwiaW50ZXJzZWN0IiwidHdvIiwibjIiLCJuMm4yIiwibjFuMiIsImRldGVybWluYW50IiwiYzEiLCJjMiIsIm4xeG4yIiwiQSIsInV1IiwicG9sYXIiLCJxMSIsImNvZGUiLCJjMCIsInYwMCIsInBvaW50MiIsImF4IiwiYXkiLCJjbGlwTWF4IiwiY2xpcE1pbiIsImNsaXBSZWN0YW5nbGUiLCJjb3JuZXIiLCJjb21wYXJlUG9pbnQiLCJjYSIsImNiIiwieF9fIiwieV9fIiwidl9fIiwieF8iLCJ5XyIsInZfIiwiZmlyc3QiLCJhY3RpdmVTdHJlYW0iLCJidWZmZXJTdHJlYW0iLCJjbGlwU3RyZWFtIiwibGluZVBvaW50IiwicG9seWdvbkluc2lkZSIsImNsZWFuSW5zaWRlIiwiY2FjaGUiLCJjYWNoZVN0cmVhbSIsImxlbmd0aFN1bSIsImxlbmd0aFN0cmVhbSIsImxlbmd0aFBvaW50Rmlyc3QiLCJsZW5ndGhMaW5lRW5kIiwibGVuZ3RoUG9pbnQiLCJjb3NEZWx0YSIsImNvbnRhaW5zT2JqZWN0VHlwZSIsImNvbnRhaW5zR2VvbWV0cnkiLCJjb250YWluc0dlb21ldHJ5VHlwZSIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0xpbmUiLCJjb250YWluc1BvbHlnb24iLCJhbyIsImJvIiwiYWIiLCJyaW5nUmFkaWFucyIsInBvaW50UmFkaWFucyIsImdyYXRpY3VsZVgiLCJncmF0aWN1bGVZIiwiWDEiLCJYMCIsIlkxIiwiWTAiLCJYIiwiRFgiLCJEWSIsImdyYXRpY3VsZSIsIm91dGxpbmUiLCJleHRlbnRNYWpvciIsImV4dGVudE1pbm9yIiwic3RlcE1ham9yIiwic3RlcE1pbm9yIiwiZ3JhdGljdWxlMTAiLCJjeTAiLCJjeTEiLCJzeTEiLCJreDAiLCJreTAiLCJreDEiLCJreTEiLCJCIiwiYm91bmRzIiwiY2VudHJvaWQiLCJjZW50cm9pZFBvaW50Rmlyc3RMaW5lIiwiY2VudHJvaWRQb2ludExpbmUiLCJjZW50cm9pZFBvaW50Rmlyc3RSaW5nIiwiY2VudHJvaWRQb2ludFJpbmciLCJQYXRoQ29udGV4dCIsIl9jb250ZXh0IiwiX3JhZGl1cyIsInBvaW50UmFkaXVzIiwiX2xpbmUiLCJfcG9pbnQiLCJsZW5ndGhSaW5nIiwiUGF0aFN0cmluZyIsIl9zdHJpbmciLCJfY2lyY2xlIiwicHJvamVjdGlvblN0cmVhbSIsImNvbnRleHRTdHJlYW0iLCJtZWFzdXJlIiwicHJvamVjdGlvbiIsInRyYW5zZm9ybWVyIiwibWV0aG9kcyIsIlRyYW5zZm9ybVN0cmVhbSIsImZpdCIsImZpdEJvdW5kcyIsImNsaXBFeHRlbnQiLCJmaXRFeHRlbnQiLCJmaXRTaXplIiwiZml0V2lkdGgiLCJmaXRIZWlnaHQiLCJtYXhEZXB0aCIsImNvc01pbkRpc3RhbmNlIiwiZGVsdGEyIiwicHJvamVjdCIsInJlc2FtcGxlTGluZVRvIiwicGhpMiIsImxhbWJkYTIiLCJkeDIiLCJkeTIiLCJkeiIsImxhbWJkYTAwIiwieDAwIiwieTAwIiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJyZXNhbXBsZU5vbmUiLCJ0cmFuc2Zvcm1SYWRpYW5zIiwic2NhbGVUcmFuc2xhdGUiLCJzY2FsZVRyYW5zbGF0ZVJvdGF0ZSIsImNvc0FscGhhIiwic2luQWxwaGEiLCJhaSIsImNpIiwiZmkiLCJwcm9qZWN0aW9uTXV0YXRvciIsInByb2plY3RBdCIsInByb2plY3RSZXNhbXBsZSIsInByb2plY3RUcmFuc2Zvcm0iLCJwcm9qZWN0Um90YXRlVHJhbnNmb3JtIiwicHJlY2xpcCIsInBvc3RjbGlwIiwicmVjZW50ZXIiLCJyZXNhbXBsZSIsInRyYW5zZm9ybVJvdGF0ZSIsImNsaXBBbmdsZSIsImNvbmljUHJvamVjdGlvbiIsInBhcmFsbGVscyIsImNvbmljRXF1YWxBcmVhUmF3IiwiY3lsaW5kcmljYWxFcXVhbEFyZWFSYXciLCJyMHkiLCJjb25pY0VxdWFsQXJlYSIsImxvd2VyNDhQb2ludCIsImFsYXNrYVBvaW50IiwiaGF3YWlpUG9pbnQiLCJsb3dlcjQ4IiwiYWxiZXJzIiwiYWxhc2thIiwiaGF3YWlpIiwicG9pbnRTdHJlYW0iLCJhbGJlcnNVc2EiLCJzdHJlYW1zIiwiYXppbXV0aGFsUmF3IiwiYXppbXV0aGFsSW52ZXJ0Iiwic2MiLCJjYyIsImF6aW11dGhhbEVxdWFsQXJlYVJhdyIsImN4Y3kiLCJhemltdXRoYWxFcXVpZGlzdGFudFJhdyIsIm1lcmNhdG9yUmF3IiwibWVyY2F0b3JQcm9qZWN0aW9uIiwicmVjbGlwIiwidGFueSIsImNvbmljQ29uZm9ybWFsUmF3IiwiZXF1aXJlY3Rhbmd1bGFyUmF3IiwiY29uaWNFcXVpZGlzdGFudFJhdyIsImd5IiwibngiLCJBMSIsIkEyIiwiQTMiLCJBNCIsImVxdWFsRWFydGhSYXciLCJsMiIsImw2IiwiZ25vbW9uaWNSYXciLCJreCIsImt5IiwidHgiLCJ0eSIsInJlZmxlY3RYIiwicmVmbGVjdFkiLCJuYXR1cmFsRWFydGgxUmF3IiwicGhpNCIsIm9ydGhvZ3JhcGhpY1JhdyIsInN0ZXJlb2dyYXBoaWNSYXciLCJ0cmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJkZWZhdWx0U2VwYXJhdGlvbiIsIm1lYW5YUmVkdWNlIiwibWF4WVJlZHVjZSIsInNlcGFyYXRpb24iLCJub2RlU2l6ZSIsImNsdXN0ZXIiLCJwcmV2aW91c05vZGUiLCJlYWNoQWZ0ZXIiLCJtZWFuWCIsIm1heFkiLCJsZWFmTGVmdCIsImxlYWZSaWdodCIsImhpZXJhcmNoeSIsImNoaWxkcyIsIk5vZGUiLCJ2YWx1ZWQiLCJkZWZhdWx0Q2hpbGRyZW4iLCJlYWNoQmVmb3JlIiwiY29tcHV0ZUhlaWdodCIsImNvcHlEYXRhIiwiYW5jZXN0b3IiLCJhTm9kZXMiLCJhbmNlc3RvcnMiLCJiTm9kZXMiLCJsZWFzdENvbW1vbkFuY2VzdG9yIiwiZGVzY2VuZGFudHMiLCJsZWF2ZXMiLCJjaXJjbGVzIiwiZW5jbG9zZXNXZWFrIiwiZW5jbG9zZUJhc2lzIiwiZXh0ZW5kQmFzaXMiLCJlbmNsb3Nlc1dlYWtBbGwiLCJlbmNsb3Nlc05vdCIsImVuY2xvc2VCYXNpczIiLCJlbmNsb3NlQmFzaXMzIiwiZHIiLCJyMiIsInIyMSIsInIzIiwiYTIiLCJhMyIsImMzIiwiZDMiLCJwbGFjZSIsImludGVyc2VjdHMiLCJwYWNrRW5jbG9zZSIsImFhIiwic2oiLCJzayIsInBhY2siLCJlbmNsb3NlIiwib3B0aW9uYWwiLCJyZXF1aXJlZCIsImNvbnN0YW50WmVybyIsInJhZGl1c0xlYWYiLCJwYWNrQ2hpbGRyZW4iLCJ0cmFuc2xhdGVDaGlsZCIsInBhcnRpdGlvbiIsInBvc2l0aW9uTm9kZSIsInByZXJvb3QiLCJhbWJpZ3VvdXMiLCJkZWZhdWx0SWQiLCJkZWZhdWx0UGFyZW50SWQiLCJwYXJlbnRJZCIsInN0cmF0aWZ5Iiwibm9kZUtleSIsIm5vZGVCeUtleSIsIm5leHRMZWZ0IiwibmV4dFJpZ2h0IiwibW92ZVN1YnRyZWUiLCJ3bSIsIndwIiwiY2hhbmdlIiwibmV4dEFuY2VzdG9yIiwidmltIiwiVHJlZU5vZGUiLCJ0cmVlUm9vdCIsImZpcnN0V2FsayIsInNlY29uZFdhbGsiLCJzaXplTm9kZSIsInNpYmxpbmdzIiwiZXhlY3V0ZVNoaWZ0cyIsIm1pZHBvaW50IiwidmlwIiwidm9wIiwidm9tIiwic2lwIiwic29wIiwic2ltIiwic29tIiwiYXBwb3J0aW9uIiwic3F1YXJpZnlSYXRpbyIsInJhdGlvIiwibm9kZVZhbHVlIiwic3VtVmFsdWUiLCJtaW5WYWx1ZSIsIm1heFZhbHVlIiwibmV3UmF0aW8iLCJtaW5SYXRpbyIsImJldGEiLCJkaWNlIiwic3F1YXJpZnkiLCJ0aWxlIiwicGFkZGluZ1N0YWNrIiwicGFkZGluZ0lubmVyIiwicGFkZGluZ1RvcCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdCb3R0b20iLCJwYWRkaW5nTGVmdCIsInRyZWVtYXAiLCJwYWRkaW5nT3V0ZXIiLCJzdW1zIiwidmFsdWVPZmZzZXQiLCJ2YWx1ZVRhcmdldCIsInZhbHVlTGVmdCIsInZhbHVlUmlnaHQiLCJ4ayIsInlrIiwicmVzcXVhcmlmeSIsIl9zcXVhcmlmeSIsImxleGljb2dyYXBoaWNPcmRlciIsImNvbXB1dGVVcHBlckh1bGxJbmRleGVzIiwic29ydGVkUG9pbnRzIiwiZmxpcHBlZFBvaW50cyIsInVwcGVySW5kZXhlcyIsImxvd2VySW5kZXhlcyIsInNraXBMZWZ0Iiwic2tpcFJpZ2h0IiwiaHVsbCIsImluc2lkZSIsInBlcmltZXRlciIsInJhbmRvbVVuaWZvcm0iLCJzb3VyY2VSYW5kb21Vbmlmb3JtIiwicmFuZG9tTm9ybWFsIiwibXUiLCJzaWdtYSIsInNvdXJjZVJhbmRvbU5vcm1hbCIsInJhbmRvbUxvZ05vcm1hbCIsInNvdXJjZVJhbmRvbUxvZ05vcm1hbCIsInJhbmRvbUlyd2luSGFsbCIsInNvdXJjZVJhbmRvbUlyd2luSGFsbCIsInJhbmRvbUJhdGVzIiwiaXJ3aW5IYWxsIiwic291cmNlUmFuZG9tQmF0ZXMiLCJyYW5kb21FeHBvbmVudGlhbCIsInNvdXJjZVJhbmRvbUV4cG9uZW50aWFsIiwiaW5pdFJhbmdlIiwiaW5pdEludGVycG9sYXRvciIsImltcGxpY2l0IiwidW5rbm93biIsImJhbmQiLCJvcmRpbmFsUmFuZ2UiLCJyZXNjYWxlIiwicmFuZ2VSb3VuZCIsInBvaW50aXNoIiwibm9ybWFsaXplIiwiY2xhbXBlciIsImJpbWFwIiwiZDAiLCJwb2x5bWFwIiwiY2xhbXAiLCJ1bnRyYW5zZm9ybSIsInBpZWNld2lzZSIsImNvbnRpbnVvdXMiLCJwcmVjaXNpb25QcmVmaXgiLCJwcmVjaXNpb25Sb3VuZCIsInByZWNpc2lvbkZpeGVkIiwibGluZWFyaXNoIiwibmljZSIsImludGVydmFsIiwidHJhbnNmb3JtTG9nIiwidHJhbnNmb3JtRXhwIiwidHJhbnNmb3JtTG9nbiIsInRyYW5zZm9ybUV4cG4iLCJwb3cxMCIsInJlZmxlY3QiLCJsb2dnaXNoIiwibG9ncyIsInBvd3MiLCJsb2cxMCIsImxvZzIiLCJsb2dwIiwicG93cCIsInRyYW5zZm9ybVN5bWxvZyIsImxvZzFwIiwidHJhbnNmb3JtU3ltZXhwIiwiZXhwbTEiLCJzeW1sb2dpc2giLCJzeW1sb2ciLCJ0cmFuc2Zvcm1Qb3ciLCJ0cmFuc2Zvcm1TcXJ0IiwidHJhbnNmb3JtU3F1YXJlIiwicG93aXNoIiwiaW52ZXJ0RXh0ZW50IiwicXVhbnRpbGVzIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJnZXRNaWxsaXNlY29uZHMiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsImdldEhvdXJzIiwic2V0SG91cnMiLCJzZXREYXRlIiwic3VuZGF5IiwibW9uZGF5IiwidHVlc2RheSIsIndlZG5lc2RheSIsInRodXJzZGF5IiwiZnJpZGF5Iiwic2F0dXJkYXkiLCJzdW5kYXlzIiwibW9uZGF5cyIsInR1ZXNkYXlzIiwid2VkbmVzZGF5cyIsInRodXJzZGF5cyIsImZyaWRheXMiLCJzYXR1cmRheXMiLCJ1dGNNaW51dGUiLCJzZXRVVENTZWNvbmRzIiwidXRjTWludXRlcyIsInV0Y0hvdXIiLCJ1dGNIb3VycyIsInV0Y0RheSIsInNldFVUQ0hvdXJzIiwic2V0VVRDRGF0ZSIsInV0Y0RheXMiLCJ1dGNXZWVrZGF5IiwidXRjU3VuZGF5IiwidXRjTW9uZGF5IiwidXRjVHVlc2RheSIsInV0Y1dlZG5lc2RheSIsInV0Y1RodXJzZGF5IiwidXRjRnJpZGF5IiwidXRjU2F0dXJkYXkiLCJ1dGNTdW5kYXlzIiwidXRjTW9uZGF5cyIsInV0Y1R1ZXNkYXlzIiwidXRjV2VkbmVzZGF5cyIsInV0Y1RodXJzZGF5cyIsInV0Y0ZyaWRheXMiLCJ1dGNTYXR1cmRheXMiLCJ1dGNNb250aCIsInNldFVUQ01vbnRoIiwidXRjTW9udGhzIiwidXRjWWVhciIsInV0Y1llYXJzIiwibG9jYWxEYXRlIiwiSCIsInV0Y0RhdGUiLCJuZXdZZWFyIiwiZm9ybWF0TG9jYWxlIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwibG9jYWxlX3Nob3J0V2Vla2RheXMiLCJzaG9ydERheXMiLCJsb2NhbGVfbW9udGhzIiwibG9jYWxlX3Nob3J0TW9udGhzIiwic2hvcnRNb250aHMiLCJwZXJpb2RSZSIsImZvcm1hdFJlIiwicGVyaW9kTG9va3VwIiwiZm9ybWF0TG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRMaXRlcmFsUGVyY2VudCIsInV0Y0Zvcm1hdHMiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUhvdXIyNCIsInBhcnNlRGF5T2ZZZWFyIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VNaW51dGVzIiwicGFyc2VVbml4VGltZXN0YW1wIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlcklTTyIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlck1vbmRheSIsInBhcnNlWWVhciIsInBhcnNlRnVsbFllYXIiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFkcyIsIm5ld1BhcnNlIiwibmV3RGF0ZSIsIlEiLCJWIiwiVSIsIloiLCJ1dGNGb3JtYXQiLCJ1dGNQYXJzZSIsInRpbWVQYXJzZSIsIm51bWJlclJlIiwicGVyY2VudFJlIiwicmVxdW90ZVJlIiwicmVxdW90ZSIsImR1cmF0aW9uTW9udGgiLCJkdXJhdGlvblllYXIiLCJmb3JtYXRNaWxsaXNlY29uZCIsImZvcm1hdFNlY29uZCIsImZvcm1hdE1pbnV0ZSIsImZvcm1hdEhvdXIiLCJmb3JtYXREYXkiLCJmb3JtYXRXZWVrIiwiZm9ybWF0TW9udGgiLCJmb3JtYXRZZWFyIiwidGlja0ludGVydmFscyIsInRpY2tJbnRlcnZhbCIsImsxMCIsInNlcXVlbnRpYWwiLCJzZXF1ZW50aWFsTG9nIiwic2VxdWVudGlhbFN5bWxvZyIsInNlcXVlbnRpYWxQb3ciLCJzZXF1ZW50aWFsU3FydCIsInNlcXVlbnRpYWxRdWFudGlsZSIsImsyMSIsImRpdmVyZ2luZyIsImRpdmVyZ2luZ0xvZyIsImRpdmVyZ2luZ1N5bWxvZyIsImRpdmVyZ2luZ1BvdyIsImRpdmVyZ2luZ1NxcnQiLCJzY2hlbWUiLCJyYW1wIiwid2FybSIsImNvb2wiLCJ0cyIsInBpXzFfMyIsInBpXzJfMyIsIm1hZ21hIiwiaW5mZXJubyIsInBsYXNtYSIsImFyY0lubmVyUmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJhcmNPdXRlclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiYXJjU3RhcnRBbmdsZSIsImFyY0VuZEFuZ2xlIiwiYXJjUGFkQW5nbGUiLCJjb3JuZXJUYW5nZW50cyIsInJjIiwib3giLCJveSIsIngxMSIsInkxMSIsIngxMCIsInkxMCIsImN4MCIsImN4MSIsImR4MCIsImR5MCIsImR4MSIsImR5MSIsImNvcm5lclJhZGl1cyIsInBhZFJhZGl1cyIsImEwMSIsImExMSIsImExMCIsImRhMCIsImRhMSIsImFwIiwicnAiLCJyYzAiLCJyYzEiLCJvYyIsIngzMiIsInkzMiIsImJ4IiwiYnkiLCJrYyIsImxjIiwiTGluZWFyIiwiYXJlYVN0YXJ0IiwiYXJlYUVuZCIsImRlZmluZWQiLCJjdXJ2ZSIsImRlZmluZWQwIiwieDB6IiwieTB6IiwiYXJlYWxpbmUiLCJsaW5lWDAiLCJsaW5lWTAiLCJsaW5lWTEiLCJsaW5lWDEiLCJwaWUiLCJhcmNzIiwicGEiLCJjdXJ2ZVJhZGlhbExpbmVhciIsImN1cnZlUmFkaWFsIiwiUmFkaWFsIiwiX2N1cnZlIiwicmFkaWFsIiwibGluZVJhZGlhbCIsImxpbmVTdGFydEFuZ2xlIiwibGluZUVuZEFuZ2xlIiwibGluZUlubmVyUmFkaXVzIiwibGluZU91dGVyUmFkaXVzIiwibGlua1NvdXJjZSIsImxpbmtUYXJnZXQiLCJjdXJ2ZUhvcml6b250YWwiLCJjdXJ2ZVZlcnRpY2FsIiwicG9pbnRSYWRpYWwiLCJsaW5rSG9yaXpvbnRhbCIsImxpbmtWZXJ0aWNhbCIsImxpbmtSYWRpYWwiLCJkcmF3IiwidGFuMzAiLCJ0YW4zMF8yIiwia3IiLCJzcXJ0MyIsInN5bWJvbHMiLCJkaWFtb25kIiwic3F1YXJlIiwic3RhciIsInRyaWFuZ2xlIiwid3llIiwiQmFzaXMiLCJCYXNpc0Nsb3NlZCIsIl94MiIsIl94MyIsIl94NCIsIl95MiIsIl95MyIsIl95NCIsIkJhc2lzT3BlbiIsIkJ1bmRsZSIsIl9iYXNpcyIsIl9iZXRhIiwiYnVuZGxlIiwiX2siLCJDYXJkaW5hbCIsInRlbnNpb24iLCJjYXJkaW5hbCIsIkNhcmRpbmFsQ2xvc2VkIiwiX3g1IiwiX3k1IiwiQ2FyZGluYWxPcGVuIiwiX2wwMV9hIiwiX2wwMV8yYSIsIl9sMTJfYSIsIl9sMTJfMmEiLCJfbDIzX2EiLCJfbDIzXzJhIiwiQ2F0bXVsbFJvbSIsIl9hbHBoYSIsIngyMyIsInkyMyIsImNhdG11bGxSb20iLCJDYXRtdWxsUm9tQ2xvc2VkIiwiQ2F0bXVsbFJvbU9wZW4iLCJMaW5lYXJDbG9zZWQiLCJzbG9wZTMiLCJoMCIsImgxIiwic2xvcGUyIiwiTW9ub3RvbmVYIiwiTW9ub3RvbmVZIiwiUmVmbGVjdENvbnRleHQiLCJtb25vdG9uZVgiLCJtb25vdG9uZVkiLCJOYXR1cmFsIiwiY29udHJvbFBvaW50cyIsIl90MCIsInB4IiwicHkiLCJTdGVwIiwiX3QiLCJzdGVwQmVmb3JlIiwic3RlcEFmdGVyIiwic2VyaWVzIiwic3RhY2tWYWx1ZSIsIm96Iiwia3oiLCJzeiIsInNpaiIsImtpIiwic2kiLCJ5biIsInMyIiwic2lqMCIsInMzIiwicGVha3MiLCJwZWFrIiwidmkiLCJ2aiIsImFwcGVhcmFuY2UiLCJ0b3BzIiwiYm90dG9tcyIsIlJlZEJsYWNrVHJlZSIsIlJlZEJsYWNrTm9kZSIsIlIiLCJQIiwiUmVkQmxhY2tSb3RhdGVMZWZ0IiwiUmVkQmxhY2tSb3RhdGVSaWdodCIsIlJlZEJsYWNrRmlyc3QiLCJhZnRlciIsImdyYW5kcGEiLCJ1bmNsZSIsInNpYmxpbmciLCJjcmVhdGVFZGdlIiwiZWRnZSIsInNldEVkZ2VFbmQiLCJjZWxscyIsImhhbGZlZGdlcyIsImNyZWF0ZUJvcmRlckVkZ2UiLCJ2ZXJ0ZXgiLCJjbGlwRWRnZSIsImNvbm5lY3RFZGdlIiwiZm0iLCJmYiIsImx4IiwibHkiLCJyeCIsInJ5IiwiY2VsbEhhbGZlZGdlQW5nbGUiLCJjZWxsIiwic2l0ZSIsInZhIiwidmIiLCJjZWxsSGFsZmVkZ2VTdGFydCIsImNlbGxIYWxmZWRnZUVuZCIsImZpcnN0Q2lyY2xlIiwiY2lyY2xlUG9vbCIsIkNpcmNsZSIsImF0dGFjaENpcmNsZSIsImxBcmMiLCJyQXJjIiwibFNpdGUiLCJjU2l0ZSIsInJTaXRlIiwiaGEiLCJoYyIsImRldGFjaENpcmNsZSIsImJlYWNoUG9vbCIsIkJlYWNoIiwiY3JlYXRlQmVhY2giLCJiZWFjaCIsImRldGFjaEJlYWNoIiwiYmVhY2hlcyIsInJlbW92ZUJlYWNoIiwiZGlzYXBwZWFyaW5nIiwiaUFyYyIsIm5BcmNzIiwiYWRkQmVhY2giLCJkeGwiLCJkeHIiLCJkaXJlY3RyaXgiLCJsZWZ0QnJlYWtQb2ludCIsInJpZ2h0QnJlYWtQb2ludCIsImNyZWF0ZUNlbGwiLCJuZXdBcmMiLCJoYiIsInJmb2N4IiwicmZvY3kiLCJwYnkyIiwibGZvY3giLCJsZm9jeSIsInBsYnkyIiwiaGwiLCJhYnkyIiwibGV4aWNvZ3JhcGhpYyIsIkRpYWdyYW0iLCJzaXRlcyIsInNvcnRDZWxsSGFsZmVkZ2VzIiwiY2xpcEVkZ2VzIiwiaUNlbGwiLCJpSGFsZmVkZ2UiLCJuSGFsZmVkZ2VzIiwic3RhcnRYIiwic3RhcnRZIiwiZW5kWCIsImVuZFkiLCJuQ2VsbHMiLCJkYyIsInYwMSIsInYxMSIsInYxMCIsImNsaXBDZWxscyIsImVkZ2VzIiwidHJpYW5nbGVzIiwiX2ZvdW5kIiwidm9yb25vaSIsIlpvb21FdmVudCIsIlRyYW5zZm9ybSIsImFwcGx5WCIsImFwcGx5WSIsImxvY2F0aW9uIiwiaW52ZXJ0WCIsImludmVydFkiLCJyZXNjYWxlWCIsInJlc2NhbGVZIiwiX196b29tIiwiU1ZHRWxlbWVudCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiZGVmYXVsdFRyYW5zZm9ybSIsImRlZmF1bHRXaGVlbERlbHRhIiwiZGVsdGFZIiwiZGVsdGFNb2RlIiwiZGVmYXVsdENvbnN0cmFpbiIsInRyYW5zbGF0ZUV4dGVudCIsInRvdWNoc3RhcnRpbmciLCJjb25zdHJhaW4iLCJ3aGVlbERlbHRhIiwic2NhbGVFeHRlbnQiLCJ0b3VjaERlbGF5Iiwid2hlZWxEZWxheSIsInpvb20iLCJ3aGVlbGVkIiwiZGJsY2xpY2tlZCIsIl9fem9vbWluZyIsIkdlc3R1cmUiLCJ0YXBzIiwid2hlZWwiLCJrMSIsInRvdWNoMCIsInRvdWNoMSIsImwwIiwibDEiLCJkcCIsImRsIiwiY29sbGVjdGlvbiIsInNjYWxlQnkiLCJzY2FsZVRvIiwiazAiLCJ0cmFuc2xhdGVCeSIsInRyYW5zbGF0ZVRvIiwibW9tZW50Iiwic3ltYm9sTWFwIiwibnVtYmVyTWFwIiwicGx1cmFsRm9ybSIsInBsdXJhbHMiLCJwbHVyYWxpemUiLCJzdHIiLCJ3ZWVrZGF5c1BhcnNlRXhhY3QiLCJzdWZmaXhlcyIsIjEiLCI1IiwiOCIsIjcwIiwiODAiLCIyIiwiNyIsIjIwIiwiNTAiLCIzIiwiNCIsIjEwMCIsIjYiLCI5IiwiMTAiLCIzMCIsIjYwIiwiOTAiLCJyZWxhdGl2ZVRpbWVXaXRoUGx1cmFsIiwibnVtIiwiZm9ybXMiLCJzdGFuZGFsb25lIiwibGFzdERpZ2l0IiwibGFzdDJEaWdpdHMiLCJyZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24iLCJtdXRhdGlvblRhYmxlIiwic29mdE11dGF0aW9uIiwibXV0YXRpb24iLCJsYXN0TnVtYmVyIiwibW9udGhzUGFyc2VFeGFjdCIsImxsIiwibGxsIiwibGxsbCIsInBsdXJhbCIsIm1vbnRoc1N0cmljdFJlZ2V4IiwibW9udGhzU2hvcnRTdHJpY3RSZWdleCIsImxvbmdNb250aHNQYXJzZSIsInNob3J0TW9udGhzUGFyc2UiLCJwcm9jZXNzUmVsYXRpdmVUaW1lIiwibW9udGhzTm9taW5hdGl2ZUVsIiwibW9udGhzR2VuaXRpdmVFbCIsIm1vbWVudFRvRm9ybWF0IiwiX21vbnRoc0dlbml0aXZlRWwiLCJfbW9udGhzTm9taW5hdGl2ZUVsIiwiY2FsZW5kYXJFbCIsIl9jYWxlbmRhckVsIiwibW9udGhzU2hvcnREb3QiLCJudW1iZXJzUGFzdCIsIm51bWJlcnNGdXR1cmUiLCJ2ZXJiYWxOdW1iZXIiLCJtb250aHNTaG9ydFdpdGhEb3RzIiwibW9udGhzU2hvcnRXaXRob3V0RG90cyIsIndlZWtFbmRpbmdzIiwiMCIsIjQwIiwiaXNVcHBlciIsImVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlciIsInRyYW5zbGF0ZVNpbmd1bGFyIiwic3BlY2lhbCIsInJlbGF0aXZlVGltZVdpdGhTaW5ndWxhciIsInRyYW5zbGF0b3IiLCJ3b3JkcyIsImNvcnJlY3RHcmFtbWF0aWNhbENhc2UiLCJ3b3JkS2V5IiwicmVsYXRpdmVUaW1lTXIiLCJtb250aHNOb21pbmF0aXZlIiwibW9udGhzU3ViamVjdGl2ZSIsIjEyIiwiMTMiLCJudW1iZXJzTm91bnMiLCJudW1iZXJOb3VuIiwiaHVuZHJlZCIsInRlbiIsIndvcmQiLCJudW1iZXJBc05vdW4iLCJwcm9jZXNzSG91cnNGdW5jdGlvbiIsInJ1dGFUYWRvcyIsInByZXByb2Nlc2FyIiwiZGF0b3MiLCJNYXBhIiwicGFkcmVTZWxlY3RvciIsImRhdG9zRmlsdHJhZG9zIiwiZGF0b3NQb3JCYXJyaW8iLCJ0b3RhbGl6YXJQb3JCYXJyaW8iLCJkYXRvc1BvckJhcnJpb01hdHJpeiIsImNvbnZlcnRpckFNYXRyaXoiLCJtYXhNaW5WYWx1ZSIsImNhbGN1bGFyTWF4TWluIiwiYWN0dWFsaXphckRhdG9zTWFwYUNhbG9yIiwiTWFwYUNhbG9yIiwibGFiZWxzY29sIiwic2VydmljaW9zIiwibGFiZWxzcm93IiwiYmFycmlvcyIsInN0YXJ0X2NvbG9yIiwiZW5kX2NvbG9yIiwiY2FsbGJhY2tfTWFwYSIsIk1hcGFFZGl0IiwiY2FsbGJhY2tfQmFycmlvIiwiQ29sb3JCYXJyaW8iLCJTZWxlY3RvclRpZW1wbyIsInRpbWVzdGFtcCIsImNvbnRlbnQiLCJvcHRpb25zIiwibG9jYWxzIiwidXNlU291cmNlTWFwIiwiaXRlbSIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwibWVtbyIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJsaXN0VG9TdHlsZXMiLCJzdHlsZXMiLCJuZXdTdHlsZXMiLCJwYXJ0IiwiY3NzIiwibWVkaWEiLCJhZGRTdHlsZXNUb0RvbSIsImRvbVN0eWxlIiwicmVmcyIsImFkZFN0eWxlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIm5vbmNlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsImFwcGx5VG9UYWciLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVJbmRleCIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJfZG9tU3R5bGUiLCJtYXJnaW4iLCJsYWJlbHNjb2xEYXRhIiwibGFiZWxzcm93RGF0YSIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsInNjYWxlQmFuZCIsImxhYmVscyIsImNvbHVtbkxhYmVscyIsInRleHRvQ29sdW1uYXMiLCJyb3dMYWJlbHMiLCJyb3dUZXh0cyIsImxlZ2VuZCIsIndpZHRoTGVnZW5kIiwic2VydmljaW9TZWxlY2Npb25hZG8iLCJpbmRpY2VDb2x1bW5hU2VsZWNjaW9uYWRhIiwic2VsZWN0VGV4dCIsImNvbG9yTWFwIiwic2NhbGVMaW5lYXIiLCJ5U2NhbGUiLCJ5QXhpcyIsIlN0SGltYXJrIiwib3BjaW9uZXMiLCJnZW9NZXJjYXRvciIsImdlb0dlbmVyYXRvciIsImdlb1BhdGgiLCJwcm9wZXJ0aWVzIiwiTmJyaG9vZCIsImNyZWFyTWFwYSIsImJhcnJpbyIsInNlbGVjdEJhcnJpbyIsInNlcnZpY2lvIiwib25DYW1iaW9TZWxlY2Npb24iLCJkYXRvc0FjdW11bGFkb3NQb3JUaWVtcG8iLCJjaGFydCIsInhTY2FsZSIsInNjYWxlVGltZSIsImJhcnJhcyIsImRhdG8iLCJicnVzaFJlc2l6ZVBhdGgiLCJicnVzaEhhbmRsZSIsIndlYnBhY2tQb2x5ZmlsbCIsInBhdGhzIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJkaWEiLCJob3JhIiwibWludXRvIiwiZ2FzIiwid2F0ZXIiLCJoZWFsdGhjYXJlIiwicm9hZHdheXMiLCJsYXllciJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFB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WCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsZ0JBQWlCLEdBQ2pCLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxVQUFXLEdBQ1gsYUFBYyxHQUNkLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxVQUFXLEdBQ1gsYUFBYyxHQUNkLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcs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RG4rQyxRQUFRODFDLElBT2hDLDRCQUFpQ0EsR0FLN0IsSUFIQSxJQUFNTSxFQUFtQyxHQUNuQ1MsRUFBb0IsR0FFbEI3aEcsRUFBSSxFQUFHQSxFQUFJOGdHLEVBQU01OUYsT0FBUWxELElBRTdCNmhHLEVBQVExK0YsS0FBSzI5RixFQUFNOWdHLEdBQUd1QixLQUN0QjYvRixFQUFxQnBoRyxHQUFLLEdBQzFCb2hHLEVBQXFCcGhHLEdBQUcsR0FBSzhnRyxFQUFNOWdHLEdBQUdpQixNQUFNaW9HLE1BQzVDOUgsRUFBcUJwaEcsR0FBRyxHQUFLOGdHLEVBQU05Z0csR0FBR2lCLE1BQU1tb0csU0FDNUNoSSxFQUFxQnBoRyxHQUFHLEdBQUs4Z0csRUFBTTlnRyxHQUFHaUIsTUFBTWdvRyxJQUM1QzdILEVBQXFCcGhHLEdBQUcsR0FBSzhnRyxFQUFNOWdHLEdBQUdpQixNQUFNdXhCLE1BQzVDNHVFLEVBQXFCcGhHLEdBQUcsR0FBSzhnRyxFQUFNOWdHLEdBQUdpQixNQUFNa29HLFdBRWhELE1BQU8sQ0FDSHRILFFBQU8sRUFDUEYsVUFid0IsQ0FBQyxRQUFTLFdBQVksTUFBTyxRQUFTLGNBYzlEYixNQUFPTSxJQUtmLDBCQUErQk4sR0FXM0IsTUFBTyxDQUNIOXBCLFNBWFd0RCxFQUFHeG9FLElBQUk0MUYsR0FBTyxTQUFTdUksR0FDbEMsT0FBTzMxQixFQUFHeG9FLElBQUltK0YsR0FBTyxTQUFTL29HLEdBQzVCLE9BQU9BLFFBVVR5MkUsU0FQYXJELEVBQUd4ckUsSUFBSTQ0RixHQUFPLFNBQVN1SSxHQUNwQyxPQUFPMzFCLEVBQUd4ckUsSUFBSW1oRyxHQUFPLFNBQVMvb0csR0FDNUIsT0FBT0EsVyxnQkN4RmpCUCxFQUFPRCxRQUFVLElBQTBCIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMjkpO1xuIiwiLy8hIG1vbWVudC5qc1xuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICBnbG9iYWwubW9tZW50ID0gZmFjdG9yeSgpXG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBob29rQ2FsbGJhY2s7XG5cbiAgICBmdW5jdGlvbiBob29rcyAoKSB7XG4gICAgICAgIHJldHVybiBob29rQ2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGlzIGRvbmUgdG8gcmVnaXN0ZXIgdGhlIG1ldGhvZCBjYWxsZWQgd2l0aCBtb21lbnQoKVxuICAgIC8vIHdpdGhvdXQgY3JlYXRpbmcgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgIGZ1bmN0aW9uIHNldEhvb2tDYWxsYmFjayAoY2FsbGJhY2spIHtcbiAgICAgICAgaG9va0NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBcnJheShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBBcnJheSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KGlucHV0KSB7XG4gICAgICAgIC8vIElFOCB3aWxsIHRyZWF0IHVuZGVmaW5lZCBhbmQgbnVsbCBhcyBvYmplY3QgaWYgaXQgd2Fzbid0IGZvclxuICAgICAgICAvLyBpbnB1dCAhPSBudWxsXG4gICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzT2JqZWN0RW1wdHkob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcykge1xuICAgICAgICAgICAgcmV0dXJuIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgIGZvciAoayBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PT0gdm9pZCAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtYmVyKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgaW5zdGFuY2VvZiBEYXRlIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IERhdGVdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYXAoYXJyLCBmbikge1xuICAgICAgICB2YXIgcmVzID0gW10sIGk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGZuKGFycltpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzT3duUHJvcChhLCBiKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYSwgYik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXh0ZW5kKGEsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBiKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChiLCBpKSkge1xuICAgICAgICAgICAgICAgIGFbaV0gPSBiW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3RvU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGEudG9TdHJpbmcgPSBiLnRvU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc093blByb3AoYiwgJ3ZhbHVlT2YnKSkge1xuICAgICAgICAgICAgYS52YWx1ZU9mID0gYi52YWx1ZU9mO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgdHJ1ZSkudXRjKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdFBhcnNpbmdGbGFncygpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBkZWVwIGNsb25lIHRoaXMgb2JqZWN0LlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZW1wdHkgICAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB1bnVzZWRUb2tlbnMgICAgOiBbXSxcbiAgICAgICAgICAgIHVudXNlZElucHV0ICAgICA6IFtdLFxuICAgICAgICAgICAgb3ZlcmZsb3cgICAgICAgIDogLTIsXG4gICAgICAgICAgICBjaGFyc0xlZnRPdmVyICAgOiAwLFxuICAgICAgICAgICAgbnVsbElucHV0ICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICBpbnZhbGlkTW9udGggICAgOiBudWxsLFxuICAgICAgICAgICAgaW52YWxpZEZvcm1hdCAgIDogZmFsc2UsXG4gICAgICAgICAgICB1c2VySW52YWxpZGF0ZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzbyAgICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgcGFyc2VkRGF0ZVBhcnRzIDogW10sXG4gICAgICAgICAgICBtZXJpZGllbSAgICAgICAgOiBudWxsLFxuICAgICAgICAgICAgcmZjMjgyMiAgICAgICAgIDogZmFsc2UsXG4gICAgICAgICAgICB3ZWVrZGF5TWlzbWF0Y2ggOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNpbmdGbGFncyhtKSB7XG4gICAgICAgIGlmIChtLl9wZiA9PSBudWxsKSB7XG4gICAgICAgICAgICBtLl9wZiA9IGRlZmF1bHRQYXJzaW5nRmxhZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbS5fcGY7XG4gICAgfVxuXG4gICAgdmFyIHNvbWU7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5zb21lKSB7XG4gICAgICAgIHNvbWUgPSBBcnJheS5wcm90b3R5cGUuc29tZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzb21lID0gZnVuY3Rpb24gKGZ1bikge1xuICAgICAgICAgICAgdmFyIHQgPSBPYmplY3QodGhpcyk7XG4gICAgICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSBpbiB0ICYmIGZ1bi5jYWxsKHRoaXMsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQobSkge1xuICAgICAgICBpZiAobS5faXNWYWxpZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgZmxhZ3MgPSBnZXRQYXJzaW5nRmxhZ3MobSk7XG4gICAgICAgICAgICB2YXIgcGFyc2VkUGFydHMgPSBzb21lLmNhbGwoZmxhZ3MucGFyc2VkRGF0ZVBhcnRzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpICE9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhciBpc05vd1ZhbGlkID0gIWlzTmFOKG0uX2QuZ2V0VGltZSgpKSAmJlxuICAgICAgICAgICAgICAgIGZsYWdzLm92ZXJmbG93IDwgMCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5lbXB0eSAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkTW9udGggJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZFdlZWtkYXkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3Mud2Vla2RheU1pc21hdGNoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLm51bGxJbnB1dCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5pbnZhbGlkRm9ybWF0ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLnVzZXJJbnZhbGlkYXRlZCAmJlxuICAgICAgICAgICAgICAgICghZmxhZ3MubWVyaWRpZW0gfHwgKGZsYWdzLm1lcmlkaWVtICYmIHBhcnNlZFBhcnRzKSk7XG5cbiAgICAgICAgICAgIGlmIChtLl9zdHJpY3QpIHtcbiAgICAgICAgICAgICAgICBpc05vd1ZhbGlkID0gaXNOb3dWYWxpZCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy5jaGFyc0xlZnRPdmVyID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLnVudXNlZFRva2Vucy5sZW5ndGggPT09IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuYmlnSG91ciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuID09IG51bGwgfHwgIU9iamVjdC5pc0Zyb3plbihtKSkge1xuICAgICAgICAgICAgICAgIG0uX2lzVmFsaWQgPSBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTm93VmFsaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX2lzVmFsaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW52YWxpZCAoZmxhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSBjcmVhdGVVVEMoTmFOKTtcbiAgICAgICAgaWYgKGZsYWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGV4dGVuZChnZXRQYXJzaW5nRmxhZ3MobSksIGZsYWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhtKS51c2VySW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgfVxuXG4gICAgLy8gUGx1Z2lucyB0aGF0IGFkZCBwcm9wZXJ0aWVzIHNob3VsZCBhbHNvIGFkZCB0aGUga2V5IGhlcmUgKG51bGwgdmFsdWUpLFxuICAgIC8vIHNvIHdlIGNhbiBwcm9wZXJseSBjbG9uZSBvdXJzZWx2ZXMuXG4gICAgdmFyIG1vbWVudFByb3BlcnRpZXMgPSBob29rcy5tb21lbnRQcm9wZXJ0aWVzID0gW107XG5cbiAgICBmdW5jdGlvbiBjb3B5Q29uZmlnKHRvLCBmcm9tKSB7XG4gICAgICAgIHZhciBpLCBwcm9wLCB2YWw7XG5cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc0FNb21lbnRPYmplY3QpKSB7XG4gICAgICAgICAgICB0by5faXNBTW9tZW50T2JqZWN0ID0gZnJvbS5faXNBTW9tZW50T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faSkpIHtcbiAgICAgICAgICAgIHRvLl9pID0gZnJvbS5faTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2YpKSB7XG4gICAgICAgICAgICB0by5fZiA9IGZyb20uX2Y7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9sKSkge1xuICAgICAgICAgICAgdG8uX2wgPSBmcm9tLl9sO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fc3RyaWN0KSkge1xuICAgICAgICAgICAgdG8uX3N0cmljdCA9IGZyb20uX3N0cmljdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3R6bSkpIHtcbiAgICAgICAgICAgIHRvLl90em0gPSBmcm9tLl90em07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9pc1VUQykpIHtcbiAgICAgICAgICAgIHRvLl9pc1VUQyA9IGZyb20uX2lzVVRDO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fb2Zmc2V0KSkge1xuICAgICAgICAgICAgdG8uX29mZnNldCA9IGZyb20uX29mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3BmKSkge1xuICAgICAgICAgICAgdG8uX3BmID0gZ2V0UGFyc2luZ0ZsYWdzKGZyb20pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbG9jYWxlKSkge1xuICAgICAgICAgICAgdG8uX2xvY2FsZSA9IGZyb20uX2xvY2FsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtb21lbnRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcHJvcCA9IG1vbWVudFByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgdmFsID0gZnJvbVtwcm9wXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKHZhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9bcHJvcF0gPSB2YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRvO1xuICAgIH1cblxuICAgIHZhciB1cGRhdGVJblByb2dyZXNzID0gZmFsc2U7XG5cbiAgICAvLyBNb21lbnQgcHJvdG90eXBlIG9iamVjdFxuICAgIGZ1bmN0aW9uIE1vbWVudChjb25maWcpIHtcbiAgICAgICAgY29weUNvbmZpZyh0aGlzLCBjb25maWcpO1xuICAgICAgICB0aGlzLl9kID0gbmV3IERhdGUoY29uZmlnLl9kICE9IG51bGwgPyBjb25maWcuX2QuZ2V0VGltZSgpIDogTmFOKTtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBsb29wIGluIGNhc2UgdXBkYXRlT2Zmc2V0IGNyZWF0ZXMgbmV3IG1vbWVudFxuICAgICAgICAvLyBvYmplY3RzLlxuICAgICAgICBpZiAodXBkYXRlSW5Qcm9ncmVzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNNb21lbnQgKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgTW9tZW50IHx8IChvYmogIT0gbnVsbCAmJiBvYmouX2lzQU1vbWVudE9iamVjdCAhPSBudWxsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNGbG9vciAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyAtMCAtPiAwXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcikgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0ludChhcmd1bWVudEZvckNvZXJjaW9uKSB7XG4gICAgICAgIHZhciBjb2VyY2VkTnVtYmVyID0gK2FyZ3VtZW50Rm9yQ29lcmNpb24sXG4gICAgICAgICAgICB2YWx1ZSA9IDA7XG5cbiAgICAgICAgaWYgKGNvZXJjZWROdW1iZXIgIT09IDAgJiYgaXNGaW5pdGUoY29lcmNlZE51bWJlcikpIHtcbiAgICAgICAgICAgIHZhbHVlID0gYWJzRmxvb3IoY29lcmNlZE51bWJlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gY29tcGFyZSB0d28gYXJyYXlzLCByZXR1cm4gdGhlIG51bWJlciBvZiBkaWZmZXJlbmNlc1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBcnJheXMoYXJyYXkxLCBhcnJheTIsIGRvbnRDb252ZXJ0KSB7XG4gICAgICAgIHZhciBsZW4gPSBNYXRoLm1pbihhcnJheTEubGVuZ3RoLCBhcnJheTIubGVuZ3RoKSxcbiAgICAgICAgICAgIGxlbmd0aERpZmYgPSBNYXRoLmFicyhhcnJheTEubGVuZ3RoIC0gYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBkaWZmcyA9IDAsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgoZG9udENvbnZlcnQgJiYgYXJyYXkxW2ldICE9PSBhcnJheTJbaV0pIHx8XG4gICAgICAgICAgICAgICAgKCFkb250Q29udmVydCAmJiB0b0ludChhcnJheTFbaV0pICE9PSB0b0ludChhcnJheTJbaV0pKSkge1xuICAgICAgICAgICAgICAgIGRpZmZzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpZmZzICsgbGVuZ3RoRGlmZjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YXJuKG1zZykge1xuICAgICAgICBpZiAoaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID09PSBmYWxzZSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRGVwcmVjYXRpb24gd2FybmluZzogJyArIG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZXByZWNhdGUobXNnLCBmbikge1xuICAgICAgICB2YXIgZmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChob29rcy5kZXByZWNhdGlvbkhhbmRsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihudWxsLCBtc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZpcnN0VGltZSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICAgICAgdmFyIGFyZztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgKz0gJ1xcblsnICsgaSArICddICc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9IGtleSArICc6ICcgKyBhcmd1bWVudHNbMF1ba2V5XSArICcsICc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMCwgLTIpOyAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWEgYW5kIHNwYWNlXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhcm4obXNnICsgJ1xcbkFyZ3VtZW50czogJyArIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLmpvaW4oJycpICsgJ1xcbicgKyAobmV3IEVycm9yKCkpLnN0YWNrKTtcbiAgICAgICAgICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBmbik7XG4gICAgfVxuXG4gICAgdmFyIGRlcHJlY2F0aW9ucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlU2ltcGxlKG5hbWUsIG1zZykge1xuICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlcihuYW1lLCBtc2cpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVwcmVjYXRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICB3YXJuKG1zZyk7XG4gICAgICAgICAgICBkZXByZWNhdGlvbnNbbmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaG9va3Muc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzID0gZmFsc2U7XG4gICAgaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQgKGNvbmZpZykge1xuICAgICAgICB2YXIgcHJvcCwgaTtcbiAgICAgICAgZm9yIChpIGluIGNvbmZpZykge1xuICAgICAgICAgICAgcHJvcCA9IGNvbmZpZ1tpXTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgdGhpc1tpXSA9IHByb3A7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNbJ18nICsgaV0gPSBwcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgLy8gTGVuaWVudCBvcmRpbmFsIHBhcnNpbmcgYWNjZXB0cyBqdXN0IGEgbnVtYmVyIGluIGFkZGl0aW9uIHRvXG4gICAgICAgIC8vIG51bWJlciArIChwb3NzaWJseSkgc3R1ZmYgY29taW5nIGZyb20gX2RheU9mTW9udGhPcmRpbmFsUGFyc2UuXG4gICAgICAgIC8vIFRPRE86IFJlbW92ZSBcIm9yZGluYWxQYXJzZVwiIGZhbGxiYWNrIGluIG5leHQgbWFqb3IgcmVsZWFzZS5cbiAgICAgICAgdGhpcy5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQgPSBuZXcgUmVnRXhwKFxuICAgICAgICAgICAgKHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2Uuc291cmNlIHx8IHRoaXMuX29yZGluYWxQYXJzZS5zb3VyY2UpICtcbiAgICAgICAgICAgICAgICAnfCcgKyAoL1xcZHsxLDJ9Lykuc291cmNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjaGlsZENvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gZXh0ZW5kKHt9LCBwYXJlbnRDb25maWcpLCBwcm9wO1xuICAgICAgICBmb3IgKHByb3AgaW4gY2hpbGRDb25maWcpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pICYmIGlzT2JqZWN0KGNoaWxkQ29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgcGFyZW50Q29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHJlc1twcm9wXSwgY2hpbGRDb25maWdbcHJvcF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRDb25maWdbcHJvcF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBjaGlsZENvbmZpZ1twcm9wXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzW3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3AgaW4gcGFyZW50Q29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChwYXJlbnRDb25maWcsIHByb3ApICYmXG4gICAgICAgICAgICAgICAgICAgICFoYXNPd25Qcm9wKGNoaWxkQ29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdChwYXJlbnRDb25maWdbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBzdXJlIGNoYW5nZXMgdG8gcHJvcGVydGllcyBkb24ndCBtb2RpZnkgcGFyZW50IGNvbmZpZ1xuICAgICAgICAgICAgICAgIHJlc1twcm9wXSA9IGV4dGVuZCh7fSwgcmVzW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvY2FsZShjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldChjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXM7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGtleXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICB2YXIgaSwgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3Aob2JqLCBpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXMucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0Q2FsZW5kYXIgPSB7XG4gICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIgKGtleSwgbW9tLCBub3cpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX2NhbGVuZGFyW2tleV0gfHwgdGhpcy5fY2FsZW5kYXJbJ3NhbWVFbHNlJ107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG91dHB1dCkgPyBvdXRwdXQuY2FsbChtb20sIG5vdykgOiBvdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb25nRGF0ZUZvcm1hdCA9IHtcbiAgICAgICAgTFRTICA6ICdoOm1tOnNzIEEnLFxuICAgICAgICBMVCAgIDogJ2g6bW0gQScsXG4gICAgICAgIEwgICAgOiAnTU0vREQvWVlZWScsXG4gICAgICAgIExMICAgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgTExMICA6ICdNTU1NIEQsIFlZWVkgaDptbSBBJyxcbiAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb25nRGF0ZUZvcm1hdCAoa2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldLFxuICAgICAgICAgICAgZm9ybWF0VXBwZXIgPSB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXkudG9VcHBlckNhc2UoKV07XG5cbiAgICAgICAgaWYgKGZvcm1hdCB8fCAhZm9ybWF0VXBwZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldID0gZm9ybWF0VXBwZXIucmVwbGFjZSgvTU1NTXxNTXxERHxkZGRkL2csIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWwuc2xpY2UoMSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9sb25nRGF0ZUZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0SW52YWxpZERhdGUgPSAnSW52YWxpZCBkYXRlJztcblxuICAgIGZ1bmN0aW9uIGludmFsaWREYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludmFsaWREYXRlO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0T3JkaW5hbCA9ICclZCc7XG4gICAgdmFyIGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlID0gL1xcZHsxLDJ9LztcblxuICAgIGZ1bmN0aW9uIG9yZGluYWwgKG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3JkaW5hbC5yZXBsYWNlKCclZCcsIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRSZWxhdGl2ZVRpbWUgPSB7XG4gICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgIHBhc3QgICA6ICclcyBhZ28nLFxuICAgICAgICBzICA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgIG0gIDogJ2EgbWludXRlJyxcbiAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgIGggIDogJ2FuIGhvdXInLFxuICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgIGQgIDogJ2EgZGF5JyxcbiAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgIE0gIDogJ2EgbW9udGgnLFxuICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICB5ICA6ICdhIHllYXInLFxuICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG91dHB1dCA9IHRoaXMuX3JlbGF0aXZlVGltZVtzdHJpbmddO1xuICAgICAgICByZXR1cm4gKGlzRnVuY3Rpb24ob3V0cHV0KSkgP1xuICAgICAgICAgICAgb3V0cHV0KG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkgOlxuICAgICAgICAgICAgb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFzdEZ1dHVyZSAoZGlmZiwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbZGlmZiA+IDAgPyAnZnV0dXJlJyA6ICdwYXN0J107XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKGZvcm1hdCkgPyBmb3JtYXQob3V0cHV0KSA6IGZvcm1hdC5yZXBsYWNlKC8lcy9pLCBvdXRwdXQpO1xuICAgIH1cblxuICAgIHZhciBhbGlhc2VzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRVbml0QWxpYXMgKHVuaXQsIHNob3J0aGFuZCkge1xuICAgICAgICB2YXIgbG93ZXJDYXNlID0gdW5pdC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBhbGlhc2VzW2xvd2VyQ2FzZV0gPSBhbGlhc2VzW2xvd2VyQ2FzZSArICdzJ10gPSBhbGlhc2VzW3Nob3J0aGFuZF0gPSB1bml0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdW5pdHMgPT09ICdzdHJpbmcnID8gYWxpYXNlc1t1bml0c10gfHwgYWxpYXNlc1t1bml0cy50b0xvd2VyQ2FzZSgpXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVPYmplY3RVbml0cyhpbnB1dE9iamVjdCkge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0ge30sXG4gICAgICAgICAgICBub3JtYWxpemVkUHJvcCxcbiAgICAgICAgICAgIHByb3A7XG5cbiAgICAgICAgZm9yIChwcm9wIGluIGlucHV0T2JqZWN0KSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChpbnB1dE9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkUHJvcCA9IG5vcm1hbGl6ZVVuaXRzKHByb3ApO1xuICAgICAgICAgICAgICAgIGlmIChub3JtYWxpemVkUHJvcCkge1xuICAgICAgICAgICAgICAgICAgICBub3JtYWxpemVkSW5wdXRbbm9ybWFsaXplZFByb3BdID0gaW5wdXRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZWRJbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgcHJpb3JpdGllcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdFByaW9yaXR5KHVuaXQsIHByaW9yaXR5KSB7XG4gICAgICAgIHByaW9yaXRpZXNbdW5pdF0gPSBwcmlvcml0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQcmlvcml0aXplZFVuaXRzKHVuaXRzT2JqKSB7XG4gICAgICAgIHZhciB1bml0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciB1IGluIHVuaXRzT2JqKSB7XG4gICAgICAgICAgICB1bml0cy5wdXNoKHt1bml0OiB1LCBwcmlvcml0eTogcHJpb3JpdGllc1t1XX0pO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB1bml0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB6ZXJvRmlsbChudW1iZXIsIHRhcmdldExlbmd0aCwgZm9yY2VTaWduKSB7XG4gICAgICAgIHZhciBhYnNOdW1iZXIgPSAnJyArIE1hdGguYWJzKG51bWJlciksXG4gICAgICAgICAgICB6ZXJvc1RvRmlsbCA9IHRhcmdldExlbmd0aCAtIGFic051bWJlci5sZW5ndGgsXG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID49IDA7XG4gICAgICAgIHJldHVybiAoc2lnbiA/IChmb3JjZVNpZ24gPyAnKycgOiAnJykgOiAnLScpICtcbiAgICAgICAgICAgIE1hdGgucG93KDEwLCBNYXRoLm1heCgwLCB6ZXJvc1RvRmlsbCkpLnRvU3RyaW5nKCkuc3Vic3RyKDEpICsgYWJzTnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KFtIaF1tbShzcyk/fE1vfE1NP00/TT98RG98REREb3xERD9EP0Q/fGRkZD9kP3xkbz98d1tvfHddP3xXW298V10/fFFvP3xZWVlZWVl8WVlZWVl8WVlZWXxZWXxnZyhnZ2c/KT98R0coR0dHPyk/fGV8RXxhfEF8aGg/fEhIP3xraz98bW0/fHNzP3xTezEsOX18eHxYfHp6P3xaWj98LikvZztcblxuICAgIHZhciBsb2NhbEZvcm1hdHRpbmdUb2tlbnMgPSAvKFxcW1teXFxbXSpcXF0pfChcXFxcKT8oTFRTfExUfExMP0w/TD98bHsxLDR9KS9nO1xuXG4gICAgdmFyIGZvcm1hdEZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgdmFyIGZvcm1hdFRva2VuRnVuY3Rpb25zID0ge307XG5cbiAgICAvLyB0b2tlbjogICAgJ00nXG4gICAgLy8gcGFkZGVkOiAgIFsnTU0nLCAyXVxuICAgIC8vIG9yZGluYWw6ICAnTW8nXG4gICAgLy8gY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgdGhpcy5tb250aCgpICsgMSB9XG4gICAgZnVuY3Rpb24gYWRkRm9ybWF0VG9rZW4gKHRva2VuLCBwYWRkZWQsIG9yZGluYWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2NhbGxiYWNrXSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhZGRlZCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbcGFkZGVkWzBdXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gemVyb0ZpbGwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBwYWRkZWRbMV0sIHBhZGRlZFsyXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcmRpbmFsKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1tvcmRpbmFsXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkub3JkaW5hbChmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRva2VuKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5tYXRjaCgvXFxbW1xcc1xcU10vKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL15cXFt8XFxdJC9nLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoL1xcXFwvZywgJycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpIHtcbiAgICAgICAgdmFyIGFycmF5ID0gZm9ybWF0Lm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpLCBpLCBsZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV0pIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGZvcm1hdFRva2VuRnVuY3Rpb25zW2FycmF5W2ldXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSByZW1vdmVGb3JtYXR0aW5nVG9rZW5zKGFycmF5W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gJycsIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgKz0gaXNGdW5jdGlvbihhcnJheVtpXSkgPyBhcnJheVtpXS5jYWxsKG1vbSwgZm9ybWF0KSA6IGFycmF5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBmb3JtYXQgZGF0ZSB1c2luZyBuYXRpdmUgZGF0ZSBvYmplY3RcbiAgICBmdW5jdGlvbiBmb3JtYXRNb21lbnQobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBtLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybWF0ID0gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbS5sb2NhbGVEYXRhKCkpO1xuICAgICAgICBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSA9IGZvcm1hdEZ1bmN0aW9uc1tmb3JtYXRdIHx8IG1ha2VGb3JtYXRGdW5jdGlvbihmb3JtYXQpO1xuXG4gICAgICAgIHJldHVybiBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XShtKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBhbmRGb3JtYXQoZm9ybWF0LCBsb2NhbGUpIHtcbiAgICAgICAgdmFyIGkgPSA1O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyhpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5sb25nRGF0ZUZvcm1hdChpbnB1dCkgfHwgaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBsb2NhbEZvcm1hdHRpbmdUb2tlbnMudGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShsb2NhbEZvcm1hdHRpbmdUb2tlbnMsIHJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2Vucyk7XG4gICAgICAgICAgICBsb2NhbEZvcm1hdHRpbmdUb2tlbnMubGFzdEluZGV4ID0gMDtcbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoMSAgICAgICAgID0gL1xcZC87ICAgICAgICAgICAgLy8gICAgICAgMCAtIDlcbiAgICB2YXIgbWF0Y2gyICAgICAgICAgPSAvXFxkXFxkLzsgICAgICAgICAgLy8gICAgICAwMCAtIDk5XG4gICAgdmFyIG1hdGNoMyAgICAgICAgID0gL1xcZHszfS87ICAgICAgICAgLy8gICAgIDAwMCAtIDk5OVxuICAgIHZhciBtYXRjaDQgICAgICAgICA9IC9cXGR7NH0vOyAgICAgICAgIC8vICAgIDAwMDAgLSA5OTk5XG4gICAgdmFyIG1hdGNoNiAgICAgICAgID0gL1srLV0/XFxkezZ9LzsgICAgLy8gLTk5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzIgICAgICA9IC9cXGRcXGQ/LzsgICAgICAgICAvLyAgICAgICAwIC0gOTlcbiAgICB2YXIgbWF0Y2gzdG80ICAgICAgPSAvXFxkXFxkXFxkXFxkPy87ICAgICAvLyAgICAgOTk5IC0gOTk5OVxuICAgIHZhciBtYXRjaDV0bzYgICAgICA9IC9cXGRcXGRcXGRcXGRcXGRcXGQ/LzsgLy8gICA5OTk5OSAtIDk5OTk5OVxuICAgIHZhciBtYXRjaDF0bzMgICAgICA9IC9cXGR7MSwzfS87ICAgICAgIC8vICAgICAgIDAgLSA5OTlcbiAgICB2YXIgbWF0Y2gxdG80ICAgICAgPSAvXFxkezEsNH0vOyAgICAgICAvLyAgICAgICAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDF0bzYgICAgICA9IC9bKy1dP1xcZHsxLDZ9LzsgIC8vIC05OTk5OTkgLSA5OTk5OTlcblxuICAgIHZhciBtYXRjaFVuc2lnbmVkICA9IC9cXGQrLzsgICAgICAgICAgIC8vICAgICAgIDAgLSBpbmZcbiAgICB2YXIgbWF0Y2hTaWduZWQgICAgPSAvWystXT9cXGQrLzsgICAgICAvLyAgICAtaW5mIC0gaW5mXG5cbiAgICB2YXIgbWF0Y2hPZmZzZXQgICAgPSAvWnxbKy1dXFxkXFxkOj9cXGRcXGQvZ2k7IC8vICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuICAgIHZhciBtYXRjaFNob3J0T2Zmc2V0ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vZ2k7IC8vICswMCAtMDAgKzAwOjAwIC0wMDowMCArMDAwMCAtMDAwMCBvciBaXG5cbiAgICB2YXIgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vOyAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuXG4gICAgLy8gYW55IHdvcmQgKG9yIHR3bykgY2hhcmFjdGVycyBvciBudW1iZXJzIGluY2x1ZGluZyB0d28vdGhyZWUgd29yZCBtb250aCBpbiBhcmFiaWMuXG4gICAgLy8gaW5jbHVkZXMgc2NvdHRpc2ggZ2FlbGljIHR3byB3b3JkIGFuZCBoeXBoZW5hdGVkIG1vbnRoc1xuICAgIHZhciBtYXRjaFdvcmQgPSAvWzAtOV17MCwyNTZ9WydhLXpcXHUwMEEwLVxcdTA1RkZcXHUwNzAwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGMDdcXHVGRjEwLVxcdUZGRUZdezEsMjU2fXxbXFx1MDYwMC1cXHUwNkZGXFwvXXsxLDI1Nn0oXFxzKj9bXFx1MDYwMC1cXHUwNkZGXXsxLDI1Nn0pezEsMn0vaTtcblxuICAgIHZhciByZWdleGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRSZWdleFRva2VuICh0b2tlbiwgcmVnZXgsIHN0cmljdFJlZ2V4KSB7XG4gICAgICAgIHJlZ2V4ZXNbdG9rZW5dID0gaXNGdW5jdGlvbihyZWdleCkgPyByZWdleCA6IGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIChpc1N0cmljdCAmJiBzdHJpY3RSZWdleCkgPyBzdHJpY3RSZWdleCA6IHJlZ2V4O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFBhcnNlUmVnZXhGb3JUb2tlbiAodG9rZW4sIGNvbmZpZykge1xuICAgICAgICBpZiAoIWhhc093blByb3AocmVnZXhlcywgdG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCh1bmVzY2FwZUZvcm1hdCh0b2tlbikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlZ2V4ZXNbdG9rZW5dKGNvbmZpZy5fc3RyaWN0LCBjb25maWcuX2xvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gQ29kZSBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzU2MTQ5My9pcy10aGVyZS1hLXJlZ2V4cC1lc2NhcGUtZnVuY3Rpb24taW4tamF2YXNjcmlwdFxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlRm9ybWF0KHMpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2V4RXNjYXBlKHMucmVwbGFjZSgnXFxcXCcsICcnKS5yZXBsYWNlKC9cXFxcKFxcWyl8XFxcXChcXF0pfFxcWyhbXlxcXVxcW10qKVxcXXxcXFxcKC4pL2csIGZ1bmN0aW9uIChtYXRjaGVkLCBwMSwgcDIsIHAzLCBwNCkge1xuICAgICAgICAgICAgcmV0dXJuIHAxIHx8IHAyIHx8IHAzIHx8IHA0O1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnZXhFc2NhcGUocykge1xuICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC9bLVxcL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcbiAgICB9XG5cbiAgICB2YXIgdG9rZW5zID0ge307XG5cbiAgICBmdW5jdGlvbiBhZGRQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGksIGZ1bmMgPSBjYWxsYmFjaztcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRva2VuID0gW3Rva2VuXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOdW1iZXIoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICBmdW5jID0gZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2NhbGxiYWNrXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2VuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5baV1dID0gZnVuYztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtQYXJzZVRva2VuICh0b2tlbiwgY2FsbGJhY2spIHtcbiAgICAgICAgYWRkUGFyc2VUb2tlbih0b2tlbiwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICAgICAgY29uZmlnLl93ID0gY29uZmlnLl93IHx8IHt9O1xuICAgICAgICAgICAgY2FsbGJhY2soaW5wdXQsIGNvbmZpZy5fdywgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFRpbWVUb0FycmF5RnJvbVRva2VuKHRva2VuLCBpbnB1dCwgY29uZmlnKSB7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsICYmIGhhc093blByb3AodG9rZW5zLCB0b2tlbikpIHtcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbl0oaW5wdXQsIGNvbmZpZy5fYSwgY29uZmlnLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgWUVBUiA9IDA7XG4gICAgdmFyIE1PTlRIID0gMTtcbiAgICB2YXIgREFURSA9IDI7XG4gICAgdmFyIEhPVVIgPSAzO1xuICAgIHZhciBNSU5VVEUgPSA0O1xuICAgIHZhciBTRUNPTkQgPSA1O1xuICAgIHZhciBNSUxMSVNFQ09ORCA9IDY7XG4gICAgdmFyIFdFRUsgPSA3O1xuICAgIHZhciBXRUVLREFZID0gODtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdZJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgeSA9IHRoaXMueWVhcigpO1xuICAgICAgICByZXR1cm4geSA8PSA5OTk5ID8gJycgKyB5IDogJysnICsgeTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVknLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy55ZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVknLCAgIDRdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVknLCAgNV0sICAgICAgIDAsICd5ZWFyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZWVknLCA2LCB0cnVlXSwgMCwgJ3llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygneWVhcicsICd5Jyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3llYXInLCAxKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1knLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdZWScsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWScsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVlZJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWVknLCBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnWVlZWVknLCAnWVlZWVlZJ10sIFlFQVIpO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZWVknLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W1lFQVJdID0gaW5wdXQubGVuZ3RoID09PSAyID8gaG9va3MucGFyc2VUd29EaWdpdFllYXIoaW5wdXQpIDogdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1lZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IHBhcnNlSW50KGlucHV0LCAxMCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICAgICAgcmV0dXJuIGlzTGVhcFllYXIoeWVhcikgPyAzNjYgOiAzNjU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMZWFwWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiAoeWVhciAlIDQgPT09IDAgJiYgeWVhciAlIDEwMCAhPT0gMCkgfHwgeWVhciAlIDQwMCA9PT0gMDtcbiAgICB9XG5cbiAgICAvLyBIT09LU1xuXG4gICAgaG9va3MucGFyc2VUd29EaWdpdFllYXIgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRvSW50KGlucHV0KSArICh0b0ludChpbnB1dCkgPiA2OCA/IDE5MDAgOiAyMDAwKTtcbiAgICB9O1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFllYXIgPSBtYWtlR2V0U2V0KCdGdWxsWWVhcicsIHRydWUpO1xuXG4gICAgZnVuY3Rpb24gZ2V0SXNMZWFwWWVhciAoKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHRoaXMueWVhcigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0U2V0ICh1bml0LCBrZWVwVGltZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldCQxKHRoaXMsIHVuaXQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywga2VlcFRpbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCAobW9tLCB1bml0KSB7XG4gICAgICAgIHJldHVybiBtb20uaXNWYWxpZCgpID9cbiAgICAgICAgICAgIG1vbS5fZFsnZ2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSgpIDogTmFOO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldCQxIChtb20sIHVuaXQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChtb20uaXNWYWxpZCgpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnRnVsbFllYXInICYmIGlzTGVhcFllYXIobW9tLnllYXIoKSkgJiYgbW9tLm1vbnRoKCkgPT09IDEgJiYgbW9tLmRhdGUoKSA9PT0gMjkpIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUsIG1vbS5tb250aCgpLCBkYXlzSW5Nb250aCh2YWx1ZSwgbW9tLm1vbnRoKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyB1bml0XSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBzdHJpbmdHZXQgKHVuaXRzKSB7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc3RyaW5nU2V0ICh1bml0cywgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1bml0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHVuaXRzID0gbm9ybWFsaXplT2JqZWN0VW5pdHModW5pdHMpO1xuICAgICAgICAgICAgdmFyIHByaW9yaXRpemVkID0gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW9yaXRpemVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpc1twcmlvcml0aXplZFtpXS51bml0XSh1bml0c1twcmlvcml0aXplZFtpXS51bml0XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXNbdW5pdHNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW3VuaXRzXSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKG4sIHgpIHtcbiAgICAgICAgcmV0dXJuICgobiAlIHgpICsgeCkgJSB4O1xuICAgIH1cblxuICAgIHZhciBpbmRleE9mO1xuXG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5pbmRleE9mKSB7XG4gICAgICAgIGluZGV4T2YgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleE9mID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIC8vIEkga25vd1xuICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzW2ldID09PSBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzSW5Nb250aCh5ZWFyLCBtb250aCkge1xuICAgICAgICBpZiAoaXNOYU4oeWVhcikgfHwgaXNOYU4obW9udGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtb2RNb250aCA9IG1vZChtb250aCwgMTIpO1xuICAgICAgICB5ZWFyICs9IChtb250aCAtIG1vZE1vbnRoKSAvIDEyO1xuICAgICAgICByZXR1cm4gbW9kTW9udGggPT09IDEgPyAoaXNMZWFwWWVhcih5ZWFyKSA/IDI5IDogMjgpIDogKDMxIC0gbW9kTW9udGggJSA3ICUgMik7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ00nLCBbJ01NJywgMl0sICdNbycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGgoKSArIDE7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzU2hvcnQodGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNTU1NJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkubW9udGhzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21vbnRoJywgJ00nKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ21vbnRoJywgOCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdNJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTScsICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTScsICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ01NTU0nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1JlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNJywgJ01NJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gdG9JbnQoaW5wdXQpIC0gMTtcbiAgICB9KTtcblxuICAgIGFkZFBhcnNlVG9rZW4oWydNTU0nLCAnTU1NTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHZhciBtb250aCA9IGNvbmZpZy5fbG9jYWxlLm1vbnRoc1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1vbnRoIG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZC5cbiAgICAgICAgaWYgKG1vbnRoICE9IG51bGwpIHtcbiAgICAgICAgICAgIGFycmF5W01PTlRIXSA9IG1vbnRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZE1vbnRoID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIHZhciBNT05USFNfSU5fRk9STUFUID0gL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT8vO1xuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzID0gJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzIDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNbJ3N0YW5kYWxvbmUnXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNBcnJheSh0aGlzLl9tb250aHMpID8gdGhpcy5fbW9udGhzW20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzWyh0aGlzLl9tb250aHMuaXNGb3JtYXQgfHwgTU9OVEhTX0lOX0ZPUk1BVCkudGVzdChmb3JtYXQpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddW20ubW9udGgoKV07XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCA9ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNb250aHNTaG9ydCAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnQgOlxuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0WydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzU2hvcnQpID8gdGhpcy5fbW9udGhzU2hvcnRbbS5tb250aCgpXSA6XG4gICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFtNT05USFNfSU5fRk9STUFULnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIGlpLCBtb20sIGxsYyA9IG1vbnRoTmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX21vbnRoc1BhcnNlKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCB1c2VkXG4gICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdNTU0nKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzUGFyc2UgKG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVTdHJpY3RQYXJzZS5jYWxsKHRoaXMsIG1vbnRoTmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIHNvcnRpbmdcbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlclxuICAgICAgICAvLyBzZWUgc29ydGluZyBpbiBjb21wdXRlTW9udGhzUGFyc2VcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCBpXSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnJykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIXRoaXMuX21vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKSArICd8XicgKyB0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cChyZWdleC5yZXBsYWNlKCcuJywgJycpLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdGVzdCB0aGUgcmVnZXhcbiAgICAgICAgICAgIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NTScgJiYgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnTU1NJyAmJiB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghc3RyaWN0ICYmIHRoaXMuX21vbnRoc1BhcnNlW2ldLnRlc3QobW9udGhOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc2V0TW9udGggKG1vbSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRheU9mTW9udGg7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuIG1vbTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoL15cXGQrJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb20ubG9jYWxlRGF0YSgpLm1vbnRoc1BhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBBbm90aGVyIHNpbGVudCBmYWlsdXJlP1xuICAgICAgICAgICAgICAgIGlmICghaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGF5T2ZNb250aCA9IE1hdGgubWluKG1vbS5kYXRlKCksIGRheXNJbk1vbnRoKG1vbS55ZWFyKCksIHZhbHVlKSk7XG4gICAgICAgIG1vbS5fZFsnc2V0JyArIChtb20uX2lzVVRDID8gJ1VUQycgOiAnJykgKyAnTW9udGgnXSh2YWx1ZSwgZGF5T2ZNb250aCk7XG4gICAgICAgIHJldHVybiBtb207XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TW9udGggKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzZXRNb250aCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQodGhpcywgJ01vbnRoJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXlzSW5Nb250aCAoKSB7XG4gICAgICAgIHJldHVybiBkYXlzSW5Nb250aCh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vbnRoc1BhcnNlRXhhY3QpIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlTW9udGhzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1Nob3J0UmVnZXggPSBkZWZhdWx0TW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TW9udGhzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gbW9udGhzUmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX21vbnRoc1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IGRlZmF1bHRNb250aHNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggOiB0aGlzLl9tb250aHNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNb250aHNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaG9ydFBpZWNlcyA9IFtdLCBsb25nUGllY2VzID0gW10sIG1peGVkUGllY2VzID0gW10sXG4gICAgICAgICAgICBpLCBtb207XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaCh0aGlzLm1vbnRoc1Nob3J0KG1vbSwgJycpKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzKG1vbSwgJycpKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU29ydGluZyBtYWtlcyBzdXJlIGlmIG9uZSBtb250aCAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX21vbnRoc1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX21vbnRoc1Nob3J0U3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBzaG9ydFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGF0ZSAoeSwgbSwgZCwgaCwgTSwgcywgbXMpIHtcbiAgICAgICAgLy8gY2FuJ3QganVzdCBhcHBseSgpIHRvIGNyZWF0ZSBhIGRhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcS8xODEzNDhcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHksIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQ0RhdGUgKHkpIHtcbiAgICAgICAgdmFyIGRhdGU7XG4gICAgICAgIC8vIHRoZSBEYXRlLlVUQyBmdW5jdGlvbiByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgYXJnc1swXSA9IHkgKyA0MDA7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICAgICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSkpIHtcbiAgICAgICAgICAgICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIC8vIGZpcnN0LXdlZWsgZGF5IC0tIHdoaWNoIGphbnVhcnkgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCB3ZWVrICg0IGZvciBpc28sIDEgZm9yIG90aGVyKVxuICAgICAgICAgICAgZndkID0gNyArIGRvdyAtIGRveSxcbiAgICAgICAgICAgIC8vIGZpcnN0LXdlZWsgZGF5IGxvY2FsIHdlZWtkYXkgLS0gd2hpY2ggbG9jYWwgd2Vla2RheSBpcyBmd2RcbiAgICAgICAgICAgIGZ3ZGx3ID0gKDcgKyBjcmVhdGVVVENEYXRlKHllYXIsIDAsIGZ3ZCkuZ2V0VVRDRGF5KCkgLSBkb3cpICUgNztcblxuICAgICAgICByZXR1cm4gLWZ3ZGx3ICsgZndkIC0gMTtcbiAgICB9XG5cbiAgICAvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlI0NhbGN1bGF0aW5nX2FfZGF0ZV9naXZlbl90aGVfeWVhci4yQ193ZWVrX251bWJlcl9hbmRfd2Vla2RheVxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrcyh5ZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSkge1xuICAgICAgICB2YXIgbG9jYWxXZWVrZGF5ID0gKDcgKyB3ZWVrZGF5IC0gZG93KSAlIDcsXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRheU9mWWVhciA9IDEgKyA3ICogKHdlZWsgLSAxKSArIGxvY2FsV2Vla2RheSArIHdlZWtPZmZzZXQsXG4gICAgICAgICAgICByZXNZZWFyLCByZXNEYXlPZlllYXI7XG5cbiAgICAgICAgaWYgKGRheU9mWWVhciA8PSAwKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciAtIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlzSW5ZZWFyKHJlc1llYXIpICsgZGF5T2ZZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGRheU9mWWVhciA+IGRheXNJblllYXIoeWVhcikpIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSB5ZWFyICsgMTtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhciAtIGRheXNJblllYXIoeWVhcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhcjtcbiAgICAgICAgICAgIHJlc0RheU9mWWVhciA9IGRheU9mWWVhcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyLFxuICAgICAgICAgICAgZGF5T2ZZZWFyOiByZXNEYXlPZlllYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrT2ZZZWFyKG1vbSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQobW9tLnllYXIoKSwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2VlayA9IE1hdGguZmxvb3IoKG1vbS5kYXlPZlllYXIoKSAtIHdlZWtPZmZzZXQgLSAxKSAvIDcpICsgMSxcbiAgICAgICAgICAgIHJlc1dlZWssIHJlc1llYXI7XG5cbiAgICAgICAgaWYgKHdlZWsgPCAxKSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSAtIDE7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayArIHdlZWtzSW5ZZWFyKHJlc1llYXIsIGRvdywgZG95KTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrID4gd2Vla3NJblllYXIobW9tLnllYXIoKSwgZG93LCBkb3kpKSB7XG4gICAgICAgICAgICByZXNXZWVrID0gd2VlayAtIHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KTtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpICsgMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc1llYXIgPSBtb20ueWVhcigpO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2VlazogcmVzV2VlayxcbiAgICAgICAgICAgIHllYXI6IHJlc1llYXJcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3ZWVrc0luWWVhcih5ZWFyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICB3ZWVrT2Zmc2V0TmV4dCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyICsgMSwgZG93LCBkb3kpO1xuICAgICAgICByZXR1cm4gKGRheXNJblllYXIoeWVhcikgLSB3ZWVrT2Zmc2V0ICsgd2Vla09mZnNldE5leHQpIC8gNztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigndycsIFsnd3cnLCAyXSwgJ3dvJywgJ3dlZWsnKTtcbiAgICBhZGRGb3JtYXRUb2tlbignVycsIFsnV1cnLCAyXSwgJ1dvJywgJ2lzb1dlZWsnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2VlaycsICd3Jyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrJywgJ1cnKTtcblxuICAgIC8vIFBSSU9SSVRJRVNcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2VlaycsIDUpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2VlaycsIDUpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigndycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ3d3JywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdXVycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsndycsICd3dycsICdXJywgJ1dXJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAxKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrIChtb20pIHtcbiAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobW9tLCB0aGlzLl93ZWVrLmRvdywgdGhpcy5fd2Vlay5kb3kpLndlZWs7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrID0ge1xuICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mV2VlayAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVGaXJzdERheU9mWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWVrLmRveTtcbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHRoaXMubG9jYWxlRGF0YSgpLndlZWsodGhpcyk7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrIChpbnB1dCkge1xuICAgICAgICB2YXIgd2VlayA9IHdlZWtPZlllYXIodGhpcywgMSwgNCkud2VlaztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrIDogdGhpcy5hZGQoKGlucHV0IC0gd2VlaykgKiA3LCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkJywgMCwgJ2RvJywgJ2RheScpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNNaW4odGhpcywgZm9ybWF0KTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5c1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZScsIDAsIDAsICd3ZWVrZGF5Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ0UnLCAwLCAwLCAnaXNvV2Vla2RheScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXknLCAnZCcpO1xuICAgIGFkZFVuaXRBbGlhcygnd2Vla2RheScsICdlJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrZGF5JywgJ0UnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXknLCAxMSk7XG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla2RheScsIDExKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2QnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0UnLCAgICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0UmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2RkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2RkJywgJ2RkZCcsICdkZGRkJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgd2Vla2RheSA9IGNvbmZpZy5fbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQsIHRva2VuLCBjb25maWcuX3N0cmljdCk7XG4gICAgICAgIC8vIGlmIHdlIGRpZG4ndCBnZXQgYSB3ZWVrZGF5IG5hbWUsIG1hcmsgdGhlIGRhdGUgYXMgaW52YWxpZFxuICAgICAgICBpZiAod2Vla2RheSAhPSBudWxsKSB7XG4gICAgICAgICAgICB3ZWVrLmQgPSB3ZWVrZGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuaW52YWxpZFdlZWtkYXkgPSBpbnB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkJywgJ2UnLCAnRSddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc05hTihpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUludChpbnB1dCwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQgPSBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCk7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzb1dlZWtkYXkoaW5wdXQsIGxvY2FsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0KSAlIDcgfHwgNztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOYU4oaW5wdXQpID8gbnVsbCA6IGlucHV0O1xuICAgIH1cblxuICAgIC8vIExPQ0FMRVNcbiAgICBmdW5jdGlvbiBzaGlmdFdlZWtkYXlzICh3cywgbikge1xuICAgICAgICByZXR1cm4gd3Muc2xpY2UobiwgNykuY29uY2F0KHdzLnNsaWNlKDAsIG4pKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzID0gJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzIChtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0gaXNBcnJheSh0aGlzLl93ZWVrZGF5cykgPyB0aGlzLl93ZWVrZGF5cyA6XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1sobSAmJiBtICE9PSB0cnVlICYmIHRoaXMuX3dlZWtkYXlzLmlzRm9ybWF0LnRlc3QoZm9ybWF0KSkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ107XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHdlZWtkYXlzLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gd2Vla2RheXNbbS5kYXkoKV0gOiB3ZWVrZGF5cztcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQgPSAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzU2hvcnQgKG0pIHtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNTaG9ydCwgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHRoaXMuX3dlZWtkYXlzU2hvcnRbbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c1Nob3J0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4gPSAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlV2Vla2RheXNNaW4gKG0pIHtcbiAgICAgICAgcmV0dXJuIChtID09PSB0cnVlKSA/IHNoaWZ0V2Vla2RheXModGhpcy5fd2Vla2RheXNNaW4sIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB0aGlzLl93ZWVrZGF5c01pblttLmRheSgpXSA6IHRoaXMuX3dlZWtkYXlzTWluO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0cmljdFBhcnNlJDEod2Vla2RheU5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSB3ZWVrZGF5TmFtZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XG4gICAgICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXMobW9tLCAnJykudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdHJpY3QpIHtcbiAgICAgICAgICAgIGlmIChmb3JtYXQgPT09ICdkZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSAnZGRkJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzUGFyc2UgKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgbW9tLCByZWdleDtcblxuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UkMS5jYWxsKHRoaXMsIHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIC8vIG1ha2UgdGhlIHJlZ2V4IGlmIHdlIGRvbid0IGhhdmUgaXQgYWxyZWFkeVxuXG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmICF0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICdcXFxcLj8nKSArICckJywgJ2knKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3dlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICByZWdleCA9ICdeJyArIHRoaXMud2Vla2RheXMobW9tLCAnJykgKyAnfF4nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNNaW4obW9tLCAnJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkZGQnICYmIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGQnICYmIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGQnICYmIHRoaXMuX21pbldlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl93ZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5ID0gdGhpcy5faXNVVEMgPyB0aGlzLl9kLmdldFVUQ0RheSgpIDogdGhpcy5fZC5nZXREYXkoKTtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlucHV0ID0gcGFyc2VXZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoaW5wdXQgLSBkYXksICdkJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZGF5O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdlZWtkYXkgPSAodGhpcy5kYXkoKSArIDcgLSB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3cpICUgNztcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyB3ZWVrZGF5IDogdGhpcy5hZGQoaW5wdXQgLSB3ZWVrZGF5LCAnZCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT0RheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYmVoYXZlcyB0aGUgc2FtZSBhcyBtb21lbnQjZGF5IGV4Y2VwdFxuICAgICAgICAvLyBhcyBhIGdldHRlciwgcmV0dXJucyA3IGluc3RlYWQgb2YgMCAoMS03IHJhbmdlIGluc3RlYWQgb2YgMC02KVxuICAgICAgICAvLyBhcyBhIHNldHRlciwgc3VuZGF5IHNob3VsZCBiZWxvbmcgdG8gdGhlIHByZXZpb3VzIHdlZWsuXG5cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB3ZWVrZGF5ID0gcGFyc2VJc29XZWVrZGF5KGlucHV0LCB0aGlzLmxvY2FsZURhdGEoKSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXkodGhpcy5kYXkoKSAlIDcgPyB3ZWVrZGF5IDogd2Vla2RheSAtIDcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KCkgfHwgNztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNSZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1JlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNTaG9ydFJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzU2hvcnRSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFJlZ2V4ID0gZGVmYXVsdFdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNNaW5SZWdleCA9IG1hdGNoV29yZDtcbiAgICBmdW5jdGlvbiB3ZWVrZGF5c01pblJlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fd2Vla2RheXNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1JlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlV2Vla2RheXNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNNaW5SZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5SZWdleCA9IGRlZmF1bHRXZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluU3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c01pblJlZ2V4O1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjb21wdXRlV2Vla2RheXNQYXJzZSAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNtcExlblJldihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYi5sZW5ndGggLSBhLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtaW5QaWVjZXMgPSBbXSwgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tLCBtaW5wLCBzaG9ydHAsIGxvbmdwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgIG1pbnAgPSB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgc2hvcnRwID0gdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpO1xuICAgICAgICAgICAgbG9uZ3AgPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpO1xuICAgICAgICAgICAgbWluUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBzaG9ydFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaChtaW5wKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2goc2hvcnRwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobG9uZ3ApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgd2Vla2RheSAob3IgYWJicikgaXMgYSBwcmVmaXggb2YgYW5vdGhlciBpdFxuICAgICAgICAvLyB3aWxsIG1hdGNoIHRoZSBsb25nZXIgcGllY2UuXG4gICAgICAgIG1pblBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIHNob3J0UGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgbG9uZ1BpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIG1peGVkUGllY2VzLnNvcnQoY21wTGVuUmV2KTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgc2hvcnRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShzaG9ydFBpZWNlc1tpXSk7XG4gICAgICAgICAgICBsb25nUGllY2VzW2ldID0gcmVnZXhFc2NhcGUobG9uZ1BpZWNlc1tpXSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKG1peGVkUGllY2VzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBtaXhlZFBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IHRoaXMuX3dlZWtkYXlzUmVnZXg7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuXG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU3RyaWN0UmVnZXggPSBuZXcgUmVnRXhwKCdeKCcgKyBsb25nUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWluUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBoRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VycygpICUgMTIgfHwgMTI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga0Zvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSB8fCAyNDtcbiAgICB9XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSCcsIFsnSEgnLCAyXSwgMCwgJ2hvdXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignaCcsIFsnaGgnLCAyXSwgMCwgaEZvcm1hdCk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2snLCBbJ2trJywgMl0sIDAsIGtGb3JtYXQpO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW1zcycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgaEZvcm1hdC5hcHBseSh0aGlzKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignSG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIHRoaXMuaG91cnMoKSArIHplcm9GaWxsKHRoaXMubWludXRlcygpLCAyKSArXG4gICAgICAgICAgICB6ZXJvRmlsbCh0aGlzLnNlY29uZHMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBtZXJpZGllbSAodG9rZW4sIGxvd2VyY2FzZSkge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbih0b2tlbiwgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1lcmlkaWVtKHRoaXMuaG91cnMoKSwgdGhpcy5taW51dGVzKCksIGxvd2VyY2FzZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG1lcmlkaWVtKCdhJywgdHJ1ZSk7XG4gICAgbWVyaWRpZW0oJ0EnLCBmYWxzZSk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2hvdXInLCAnaCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2hvdXInLCAxMyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBmdW5jdGlvbiBtYXRjaE1lcmlkaWVtIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUuX21lcmlkaWVtUGFyc2U7XG4gICAgfVxuXG4gICAgYWRkUmVnZXhUb2tlbignYScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdBJywgIG1hdGNoTWVyaWRpZW0pO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0gnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdoJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaycsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0hIJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2hoJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2trJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuXG4gICAgYWRkUmVnZXhUb2tlbignaG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdobW1zcycsIG1hdGNoNXRvNik7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tJywgbWF0Y2gzdG80KTtcbiAgICBhZGRSZWdleFRva2VuKCdIbW1zcycsIG1hdGNoNXRvNik7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnSCcsICdISCddLCBIT1VSKTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaycsICdrayddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIGtJbnB1dCA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSBrSW5wdXQgPT09IDI0ID8gMCA6IGtJbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnYScsICdBJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2lzUG0gPSBjb25maWcuX2xvY2FsZS5pc1BNKGlucHV0KTtcbiAgICAgICAgY29uZmlnLl9tZXJpZGllbSA9IGlucHV0O1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oWydoJywgJ2hoJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0KTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignaG1tc3MnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvczEgPSBpbnB1dC5sZW5ndGggLSA0O1xuICAgICAgICB2YXIgcG9zMiA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvczEpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MxLCAyKSk7XG4gICAgICAgIGFycmF5W1NFQ09ORF0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMikpO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW0nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgdmFyIHBvcyA9IGlucHV0Lmxlbmd0aCAtIDI7XG4gICAgICAgIGFycmF5W0hPVVJdID0gdG9JbnQoaW5wdXQuc3Vic3RyKDAsIHBvcykpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvcykpO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ0htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICB9KTtcblxuICAgIC8vIExPQ0FMRVNcblxuICAgIGZ1bmN0aW9uIGxvY2FsZUlzUE0gKGlucHV0KSB7XG4gICAgICAgIC8vIElFOCBRdWlya3MgTW9kZSAmIElFNyBTdGFuZGFyZHMgTW9kZSBkbyBub3QgYWxsb3cgYWNjZXNzaW5nIHN0cmluZ3MgbGlrZSBhcnJheXNcbiAgICAgICAgLy8gVXNpbmcgY2hhckF0IHNob3VsZCBiZSBtb3JlIGNvbXBhdGlibGUuXG4gICAgICAgIHJldHVybiAoKGlucHV0ICsgJycpLnRvTG93ZXJDYXNlKCkuY2hhckF0KDApID09PSAncCcpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTWVyaWRpZW1QYXJzZSA9IC9bYXBdXFwuP20/XFwuPy9pO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1lcmlkaWVtIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncG0nIDogJ1BNJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2FtJyA6ICdBTSc7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIFNldHRpbmcgdGhlIGhvdXIgc2hvdWxkIGtlZXAgdGhlIHRpbWUsIGJlY2F1c2UgdGhlIHVzZXIgZXhwbGljaXRseVxuICAgIC8vIHNwZWNpZmllZCB3aGljaCBob3VyIHRoZXkgd2FudC4gU28gdHJ5aW5nIHRvIG1haW50YWluIHRoZSBzYW1lIGhvdXIgKGluXG4gICAgLy8gYSBuZXcgdGltZXpvbmUpIG1ha2VzIHNlbnNlLiBBZGRpbmcvc3VidHJhY3RpbmcgaG91cnMgZG9lcyBub3QgZm9sbG93XG4gICAgLy8gdGhpcyBydWxlLlxuICAgIHZhciBnZXRTZXRIb3VyID0gbWFrZUdldFNldCgnSG91cnMnLCB0cnVlKTtcblxuICAgIHZhciBiYXNlQ29uZmlnID0ge1xuICAgICAgICBjYWxlbmRhcjogZGVmYXVsdENhbGVuZGFyLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDogZGVmYXVsdExvbmdEYXRlRm9ybWF0LFxuICAgICAgICBpbnZhbGlkRGF0ZTogZGVmYXVsdEludmFsaWREYXRlLFxuICAgICAgICBvcmRpbmFsOiBkZWZhdWx0T3JkaW5hbCxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogZGVmYXVsdERheU9mTW9udGhPcmRpbmFsUGFyc2UsXG4gICAgICAgIHJlbGF0aXZlVGltZTogZGVmYXVsdFJlbGF0aXZlVGltZSxcblxuICAgICAgICBtb250aHM6IGRlZmF1bHRMb2NhbGVNb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQsXG5cbiAgICAgICAgd2VlazogZGVmYXVsdExvY2FsZVdlZWssXG5cbiAgICAgICAgd2Vla2RheXM6IGRlZmF1bHRMb2NhbGVXZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW46IGRlZmF1bHRMb2NhbGVXZWVrZGF5c01pbixcbiAgICAgICAgd2Vla2RheXNTaG9ydDogZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQsXG5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2VcbiAgICB9O1xuXG4gICAgLy8gaW50ZXJuYWwgc3RvcmFnZSBmb3IgbG9jYWxlIGNvbmZpZyBmaWxlc1xuICAgIHZhciBsb2NhbGVzID0ge307XG4gICAgdmFyIGxvY2FsZUZhbWlsaWVzID0ge307XG4gICAgdmFyIGdsb2JhbExvY2FsZTtcblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2FsZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIGtleSA/IGtleS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ18nLCAnLScpIDoga2V5O1xuICAgIH1cblxuICAgIC8vIHBpY2sgdGhlIGxvY2FsZSBmcm9tIHRoZSBhcnJheVxuICAgIC8vIHRyeSBbJ2VuLWF1JywgJ2VuLWdiJ10gYXMgJ2VuLWF1JywgJ2VuLWdiJywgJ2VuJywgYXMgaW4gbW92ZSB0aHJvdWdoIHRoZSBsaXN0IHRyeWluZyBlYWNoXG4gICAgLy8gc3Vic3RyaW5nIGZyb20gbW9zdCBzcGVjaWZpYyB0byBsZWFzdCwgYnV0IG1vdmUgdG8gdGhlIG5leHQgYXJyYXkgaXRlbSBpZiBpdCdzIGEgbW9yZSBzcGVjaWZpYyB2YXJpYW50IHRoYW4gdGhlIGN1cnJlbnQgcm9vdFxuICAgIGZ1bmN0aW9uIGNob29zZUxvY2FsZShuYW1lcykge1xuICAgICAgICB2YXIgaSA9IDAsIGosIG5leHQsIGxvY2FsZSwgc3BsaXQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBuYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2ldKS5zcGxpdCgnLScpO1xuICAgICAgICAgICAgaiA9IHNwbGl0Lmxlbmd0aDtcbiAgICAgICAgICAgIG5leHQgPSBub3JtYWxpemVMb2NhbGUobmFtZXNbaSArIDFdKTtcbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID8gbmV4dC5zcGxpdCgnLScpIDogbnVsbDtcbiAgICAgICAgICAgIHdoaWxlIChqID4gMCkge1xuICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoc3BsaXQuc2xpY2UoMCwgaikuam9pbignLScpKTtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQubGVuZ3RoID49IGogJiYgY29tcGFyZUFycmF5cyhzcGxpdCwgbmV4dCwgdHJ1ZSkgPj0gaiAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy90aGUgbmV4dCBhcnJheSBpdGVtIGlzIGJldHRlciB0aGFuIGEgc2hhbGxvd2VyIHN1YnN0cmluZyBvZiB0aGlzIG9uZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZExvY2FsZShuYW1lKSB7XG4gICAgICAgIHZhciBvbGRMb2NhbGUgPSBudWxsO1xuICAgICAgICAvLyBUT0RPOiBGaW5kIGEgYmV0dGVyIHdheSB0byByZWdpc3RlciBhbmQgbG9hZCBhbGwgdGhlIGxvY2FsZXMgaW4gTm9kZVxuICAgICAgICBpZiAoIWxvY2FsZXNbbmFtZV0gJiYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJlxuICAgICAgICAgICAgICAgIG1vZHVsZSAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvbGRMb2NhbGUgPSBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgICAgICAgICAgICAgdmFyIGFsaWFzZWRSZXF1aXJlID0gcmVxdWlyZTtcbiAgICAgICAgICAgICAgICBhbGlhc2VkUmVxdWlyZSgnLi9sb2NhbGUvJyArIG5hbWUpO1xuICAgICAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShvbGRMb2NhbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgbG9hZCBsb2NhbGUgYW5kIHRoZW4gc2V0IHRoZSBnbG9iYWwgbG9jYWxlLiAgSWZcbiAgICAvLyBubyBhcmd1bWVudHMgYXJlIHBhc3NlZCBpbiwgaXQgd2lsbCBzaW1wbHkgcmV0dXJuIHRoZSBjdXJyZW50IGdsb2JhbFxuICAgIC8vIGxvY2FsZSBrZXkuXG4gICAgZnVuY3Rpb24gZ2V0U2V0R2xvYmFsTG9jYWxlIChrZXksIHZhbHVlcykge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZ2V0TG9jYWxlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkYXRhID0gZGVmaW5lTG9jYWxlKGtleSwgdmFsdWVzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBtb21lbnQuZHVyYXRpb24uX2xvY2FsZSA9IG1vbWVudC5fbG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgICAgICBnbG9iYWxMb2NhbGUgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCh0eXBlb2YgY29uc29sZSAhPT0gICd1bmRlZmluZWQnKSAmJiBjb25zb2xlLndhcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgLy93YXJuIHVzZXIgaWYgYXJndW1lbnRzIGFyZSBwYXNzZWQgYnV0IHRoZSBsb2NhbGUgY291bGQgbm90IGJlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0xvY2FsZSAnICsga2V5ICsgICcgbm90IGZvdW5kLiBEaWQgeW91IGZvcmdldCB0byBsb2FkIGl0PycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGUuX2FiYnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmaW5lTG9jYWxlIChuYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIGNvbmZpZy5hYmJyID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUoJ2RlZmluZUxvY2FsZU92ZXJyaWRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd1c2UgbW9tZW50LnVwZGF0ZUxvY2FsZShsb2NhbGVOYW1lLCBjb25maWcpIHRvIGNoYW5nZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhbiBleGlzdGluZyBsb2NhbGUuIG1vbWVudC5kZWZpbmVMb2NhbGUobG9jYWxlTmFtZSwgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnKSBzaG91bGQgb25seSBiZSB1c2VkIGZvciBjcmVhdGluZyBhIG5ldyBsb2NhbGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvZGVmaW5lLWxvY2FsZS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSBsb2NhbGVzW25hbWVdLl9jb25maWc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChsb2NhbGVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXS5fY29uZmlnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoY29uZmlnLnBhcmVudExvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbY29uZmlnLnBhcmVudExvY2FsZV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbmV3IExvY2FsZShtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpKTtcblxuICAgICAgICAgICAgaWYgKGxvY2FsZUZhbWlsaWVzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxlRmFtaWxpZXNbbmFtZV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgICAgICAgICAgICBkZWZpbmVMb2NhbGUoeC5uYW1lLCB4LmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHdlIHNldCB0aGUgbG9jYWxlIEFGVEVSIGFsbCBjaGlsZCBsb2NhbGVzIGhhdmUgYmVlblxuICAgICAgICAgICAgLy8gY3JlYXRlZCwgc28gd2Ugd29uJ3QgZW5kIHVwIHdpdGggdGhlIGNoaWxkIGxvY2FsZSBzZXQuXG4gICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUobmFtZSk7XG5cblxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1c2VmdWwgZm9yIHRlc3RpbmdcbiAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVMb2NhbGUobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGxvY2FsZSwgdG1wTG9jYWxlLCBwYXJlbnRDb25maWcgPSBiYXNlQ29uZmlnO1xuICAgICAgICAgICAgLy8gTUVSR0VcbiAgICAgICAgICAgIHRtcExvY2FsZSA9IGxvYWRMb2NhbGUobmFtZSk7XG4gICAgICAgICAgICBpZiAodG1wTG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRDb25maWcgPSB0bXBMb2NhbGUuX2NvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlncyhwYXJlbnRDb25maWcsIGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUgPSBuZXcgTG9jYWxlKGNvbmZpZyk7XG4gICAgICAgICAgICBsb2NhbGUucGFyZW50TG9jYWxlID0gbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIGxvY2FsZXNbbmFtZV0gPSBsb2NhbGU7XG5cbiAgICAgICAgICAgIC8vIGJhY2t3YXJkcyBjb21wYXQgZm9yIG5vdzogYWxzbyBzZXQgdGhlIGxvY2FsZVxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFzcyBudWxsIGZvciBjb25maWcgdG8gdW51cGRhdGUsIHVzZWZ1bCBmb3IgdGVzdHNcbiAgICAgICAgICAgIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlc1tuYW1lXS5wYXJlbnRMb2NhbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhbGVzW25hbWVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgIH1cblxuICAgIC8vIHJldHVybnMgbG9jYWxlIGRhdGFcbiAgICBmdW5jdGlvbiBnZXRMb2NhbGUgKGtleSkge1xuICAgICAgICB2YXIgbG9jYWxlO1xuXG4gICAgICAgIGlmIChrZXkgJiYga2V5Ll9sb2NhbGUgJiYga2V5Ll9sb2NhbGUuX2FiYnIpIHtcbiAgICAgICAgICAgIGtleSA9IGtleS5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxMb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQXJyYXkoa2V5KSkge1xuICAgICAgICAgICAgLy9zaG9ydC1jaXJjdWl0IGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICAgICAgbG9jYWxlID0gbG9hZExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrZXkgPSBba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaG9vc2VMb2NhbGUoa2V5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TG9jYWxlcygpIHtcbiAgICAgICAgcmV0dXJuIGtleXMobG9jYWxlcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdyAobSkge1xuICAgICAgICB2YXIgb3ZlcmZsb3c7XG4gICAgICAgIHZhciBhID0gbS5fYTtcblxuICAgICAgICBpZiAoYSAmJiBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPT09IC0yKSB7XG4gICAgICAgICAgICBvdmVyZmxvdyA9XG4gICAgICAgICAgICAgICAgYVtNT05USF0gICAgICAgPCAwIHx8IGFbTU9OVEhdICAgICAgID4gMTEgID8gTU9OVEggOlxuICAgICAgICAgICAgICAgIGFbREFURV0gICAgICAgIDwgMSB8fCBhW0RBVEVdICAgICAgICA+IGRheXNJbk1vbnRoKGFbWUVBUl0sIGFbTU9OVEhdKSA/IERBVEUgOlxuICAgICAgICAgICAgICAgIGFbSE9VUl0gICAgICAgIDwgMCB8fCBhW0hPVVJdICAgICAgICA+IDI0IHx8IChhW0hPVVJdID09PSAyNCAmJiAoYVtNSU5VVEVdICE9PSAwIHx8IGFbU0VDT05EXSAhPT0gMCB8fCBhW01JTExJU0VDT05EXSAhPT0gMCkpID8gSE9VUiA6XG4gICAgICAgICAgICAgICAgYVtNSU5VVEVdICAgICAgPCAwIHx8IGFbTUlOVVRFXSAgICAgID4gNTkgID8gTUlOVVRFIDpcbiAgICAgICAgICAgICAgICBhW1NFQ09ORF0gICAgICA8IDAgfHwgYVtTRUNPTkRdICAgICAgPiA1OSAgPyBTRUNPTkQgOlxuICAgICAgICAgICAgICAgIGFbTUlMTElTRUNPTkRdIDwgMCB8fCBhW01JTExJU0VDT05EXSA+IDk5OSA/IE1JTExJU0VDT05EIDpcbiAgICAgICAgICAgICAgICAtMTtcblxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dEYXlPZlllYXIgJiYgKG92ZXJmbG93IDwgWUVBUiB8fCBvdmVyZmxvdyA+IERBVEUpKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBEQVRFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrcyAmJiBvdmVyZmxvdyA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IFdFRUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2V0UGFyc2luZ0ZsYWdzKG0pLl9vdmVyZmxvd1dlZWtkYXkgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLREFZO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkub3ZlcmZsb3cgPSBvdmVyZmxvdztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBpY2sgdGhlIGZpcnN0IGRlZmluZWQgb2YgdHdvIG9yIHRocmVlIGFyZ3VtZW50cy5cbiAgICBmdW5jdGlvbiBkZWZhdWx0cyhhLCBiLCBjKSB7XG4gICAgICAgIGlmIChhICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG4gICAgICAgIGlmIChiICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIC8vIGhvb2tzIGlzIGFjdHVhbGx5IHRoZSBleHBvcnRlZCBtb21lbnQgb2JqZWN0XG4gICAgICAgIHZhciBub3dWYWx1ZSA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgaWYgKGNvbmZpZy5fdXNlVVRDKSB7XG4gICAgICAgICAgICByZXR1cm4gW25vd1ZhbHVlLmdldFVUQ0Z1bGxZZWFyKCksIG5vd1ZhbHVlLmdldFVUQ01vbnRoKCksIG5vd1ZhbHVlLmdldFVUQ0RhdGUoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRNb250aCgpLCBub3dWYWx1ZS5nZXREYXRlKCldO1xuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYW4gYXJyYXkgdG8gYSBkYXRlLlxuICAgIC8vIHRoZSBhcnJheSBzaG91bGQgbWlycm9yIHRoZSBwYXJhbWV0ZXJzIGJlbG93XG4gICAgLy8gbm90ZTogYWxsIHZhbHVlcyBwYXN0IHRoZSB5ZWFyIGFyZSBvcHRpb25hbCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBsb3dlc3QgcG9zc2libGUgdmFsdWUuXG4gICAgLy8gW3llYXIsIG1vbnRoLCBkYXkgLCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmRdXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUFycmF5IChjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGRhdGUsIGlucHV0ID0gW10sIGN1cnJlbnREYXRlLCBleHBlY3RlZFdlZWtkYXksIHllYXJUb1VzZTtcblxuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50RGF0ZSA9IGN1cnJlbnREYXRlQXJyYXkoY29uZmlnKTtcblxuICAgICAgICAvL2NvbXB1dGUgZGF5IG9mIHRoZSB5ZWFyIGZyb20gd2Vla3MgYW5kIHdlZWtkYXlzXG4gICAgICAgIGlmIChjb25maWcuX3cgJiYgY29uZmlnLl9hW0RBVEVdID09IG51bGwgJiYgY29uZmlnLl9hW01PTlRIXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgdGhlIGRheSBvZiB0aGUgeWVhciBpcyBzZXQsIGZpZ3VyZSBvdXQgd2hhdCBpdCBpc1xuICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgeWVhclRvVXNlID0gZGVmYXVsdHMoY29uZmlnLl9hW1lFQVJdLCBjdXJyZW50RGF0ZVtZRUFSXSk7XG5cbiAgICAgICAgICAgIGlmIChjb25maWcuX2RheU9mWWVhciA+IGRheXNJblllYXIoeWVhclRvVXNlKSB8fCBjb25maWcuX2RheU9mWWVhciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd0RheU9mWWVhciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKHllYXJUb1VzZSwgMCwgY29uZmlnLl9kYXlPZlllYXIpO1xuICAgICAgICAgICAgY29uZmlnLl9hW01PTlRIXSA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtEQVRFXSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IGRhdGUuXG4gICAgICAgIC8vICogaWYgbm8geWVhciwgbW9udGgsIGRheSBvZiBtb250aCBhcmUgZ2l2ZW4sIGRlZmF1bHQgdG8gdG9kYXlcbiAgICAgICAgLy8gKiBpZiBkYXkgb2YgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgbW9udGggYW5kIHllYXJcbiAgICAgICAgLy8gKiBpZiBtb250aCBpcyBnaXZlbiwgZGVmYXVsdCBvbmx5IHllYXJcbiAgICAgICAgLy8gKiBpZiB5ZWFyIGlzIGdpdmVuLCBkb24ndCBkZWZhdWx0IGFueXRoaW5nXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAzICYmIGNvbmZpZy5fYVtpXSA9PSBudWxsOyArK2kpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gY3VycmVudERhdGVbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBaZXJvIG91dCB3aGF0ZXZlciB3YXMgbm90IGRlZmF1bHRlZCwgaW5jbHVkaW5nIHRpbWVcbiAgICAgICAgZm9yICg7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtpXSA9IGlucHV0W2ldID0gKGNvbmZpZy5fYVtpXSA9PSBudWxsKSA/IChpID09PSAyID8gMSA6IDApIDogY29uZmlnLl9hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgZm9yIDI0OjAwOjAwLjAwMFxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdID09PSAyNCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtNSU5VVEVdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW1NFQ09ORF0gPT09IDAgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlMTElTRUNPTkRdID09PSAwKSB7XG4gICAgICAgICAgICBjb25maWcuX25leHREYXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy5fZCA9IChjb25maWcuX3VzZVVUQyA/IGNyZWF0ZVVUQ0RhdGUgOiBjcmVhdGVEYXRlKS5hcHBseShudWxsLCBpbnB1dCk7XG4gICAgICAgIGV4cGVjdGVkV2Vla2RheSA9IGNvbmZpZy5fdXNlVVRDID8gY29uZmlnLl9kLmdldFVUQ0RheSgpIDogY29uZmlnLl9kLmdldERheSgpO1xuXG4gICAgICAgIC8vIEFwcGx5IHRpbWV6b25lIG9mZnNldCBmcm9tIGlucHV0LiBUaGUgYWN0dWFsIHV0Y09mZnNldCBjYW4gYmUgY2hhbmdlZFxuICAgICAgICAvLyB3aXRoIHBhcnNlWm9uZS5cbiAgICAgICAgaWYgKGNvbmZpZy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlnLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPSAyNDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNoZWNrIGZvciBtaXNtYXRjaGluZyBkYXkgb2Ygd2Vla1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIHR5cGVvZiBjb25maWcuX3cuZCAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uZmlnLl93LmQgIT09IGV4cGVjdGVkV2Vla2RheSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykud2Vla2RheU1pc21hdGNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRheU9mWWVhckZyb21XZWVrSW5mbyhjb25maWcpIHtcbiAgICAgICAgdmFyIHcsIHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSwgdGVtcCwgd2Vla2RheU92ZXJmbG93O1xuXG4gICAgICAgIHcgPSBjb25maWcuX3c7XG4gICAgICAgIGlmICh3LkdHICE9IG51bGwgfHwgdy5XICE9IG51bGwgfHwgdy5FICE9IG51bGwpIHtcbiAgICAgICAgICAgIGRvdyA9IDE7XG4gICAgICAgICAgICBkb3kgPSA0O1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBXZSBuZWVkIHRvIHRha2UgdGhlIGN1cnJlbnQgaXNvV2Vla1llYXIsIGJ1dCB0aGF0IGRlcGVuZHMgb25cbiAgICAgICAgICAgIC8vIGhvdyB3ZSBpbnRlcnByZXQgbm93IChsb2NhbCwgdXRjLCBmaXhlZCBvZmZzZXQpLiBTbyBjcmVhdGVcbiAgICAgICAgICAgIC8vIGEgbm93IHZlcnNpb24gb2YgY3VycmVudCBjb25maWcgKHRha2UgbG9jYWwvdXRjL29mZnNldCBmbGFncywgYW5kXG4gICAgICAgICAgICAvLyBjcmVhdGUgbm93KS5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5HRywgY29uZmlnLl9hW1lFQVJdLCB3ZWVrT2ZZZWFyKGNyZWF0ZUxvY2FsKCksIDEsIDQpLnllYXIpO1xuICAgICAgICAgICAgd2VlayA9IGRlZmF1bHRzKHcuVywgMSk7XG4gICAgICAgICAgICB3ZWVrZGF5ID0gZGVmYXVsdHMody5FLCAxKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMSB8fCB3ZWVrZGF5ID4gNykge1xuICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkb3cgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3c7XG4gICAgICAgICAgICBkb3kgPSBjb25maWcuX2xvY2FsZS5fd2Vlay5kb3k7XG5cbiAgICAgICAgICAgIHZhciBjdXJXZWVrID0gd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCBkb3csIGRveSk7XG5cbiAgICAgICAgICAgIHdlZWtZZWFyID0gZGVmYXVsdHMody5nZywgY29uZmlnLl9hW1lFQVJdLCBjdXJXZWVrLnllYXIpO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGN1cnJlbnQgd2Vlay5cbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LncsIGN1cldlZWsud2Vlayk7XG5cbiAgICAgICAgICAgIGlmICh3LmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIHdlZWtkYXkgLS0gbG93IGRheSBudW1iZXJzIGFyZSBjb25zaWRlcmVkIG5leHQgd2Vla1xuICAgICAgICAgICAgICAgIHdlZWtkYXkgPSB3LmQ7XG4gICAgICAgICAgICAgICAgaWYgKHdlZWtkYXkgPCAwIHx8IHdlZWtkYXkgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh3LmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGxvY2FsIHdlZWtkYXkgLS0gY291bnRpbmcgc3RhcnRzIGZyb20gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5lICsgZG93O1xuICAgICAgICAgICAgICAgIGlmICh3LmUgPCAwIHx8IHcuZSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheU92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdG8gYmVnaW5uaW5nIG9mIHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gZG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWVrIDwgMSB8fCB3ZWVrID4gd2Vla3NJblllYXIod2Vla1llYXIsIGRvdywgZG95KSkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla3MgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdlZWtkYXlPdmVyZmxvdyAhPSBudWxsKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dXZWVrZGF5ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRlbXAgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtZRUFSXSA9IHRlbXAueWVhcjtcbiAgICAgICAgICAgIGNvbmZpZy5fZGF5T2ZZZWFyID0gdGVtcC5kYXlPZlllYXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpc28gODYwMSByZWdleFxuICAgIC8vIDAwMDAtMDAtMDAgMDAwMC1XMDAgb3IgMDAwMC1XMDAtMCArIFQgKyAwMCBvciAwMDowMCBvciAwMDowMDowMCBvciAwMDowMDowMC4wMDAgKyArMDA6MDAgb3IgKzAwMDAgb3IgKzAwKVxuICAgIHZhciBleHRlbmRlZElzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KS0oPzpcXGRcXGQtXFxkXFxkfFdcXGRcXGQtXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86OlxcZFxcZCg/OjpcXGRcXGQoPzpbLixdXFxkKyk/KT8pPykoW1xcK1xcLV1cXGRcXGQoPzo6P1xcZFxcZCk/fFxccypaKT8pPyQvO1xuICAgIHZhciBiYXNpY0lzb1JlZ2V4ID0gL15cXHMqKCg/OlsrLV1cXGR7Nn18XFxkezR9KSg/OlxcZFxcZFxcZFxcZHxXXFxkXFxkXFxkfFdcXGRcXGR8XFxkXFxkXFxkfFxcZFxcZCkpKD86KFR8ICkoXFxkXFxkKD86XFxkXFxkKD86XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcblxuICAgIHZhciB0elJlZ2V4ID0gL1p8WystXVxcZFxcZCg/Ojo/XFxkXFxkKT8vO1xuXG4gICAgdmFyIGlzb0RhdGVzID0gW1xuICAgICAgICBbJ1lZWVlZWS1NTS1ERCcsIC9bKy1dXFxkezZ9LVxcZFxcZC1cXGRcXGQvXSxcbiAgICAgICAgWydZWVlZLU1NLUREJywgL1xcZHs0fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnR0dHRy1bV11XVy1FJywgL1xcZHs0fS1XXFxkXFxkLVxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1cnLCAvXFxkezR9LVdcXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWS1EREQnLCAvXFxkezR9LVxcZHszfS9dLFxuICAgICAgICBbJ1lZWVktTU0nLCAvXFxkezR9LVxcZFxcZC8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZWVlNTUREJywgL1srLV1cXGR7MTB9L10sXG4gICAgICAgIFsnWVlZWU1NREQnLCAvXFxkezh9L10sXG4gICAgICAgIC8vIFlZWVlNTSBpcyBOT1QgYWxsb3dlZCBieSB0aGUgc3RhbmRhcmRcbiAgICAgICAgWydHR0dHW1ddV1dFJywgL1xcZHs0fVdcXGR7M30vXSxcbiAgICAgICAgWydHR0dHW1ddV1cnLCAvXFxkezR9V1xcZHsyfS8sIGZhbHNlXSxcbiAgICAgICAgWydZWVlZREREJywgL1xcZHs3fS9dXG4gICAgXTtcblxuICAgIC8vIGlzbyB0aW1lIGZvcm1hdHMgYW5kIHJlZ2V4ZXNcbiAgICB2YXIgaXNvVGltZXMgPSBbXG4gICAgICAgIFsnSEg6bW06c3MuU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZFxcLlxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcyxTU1NTJywgL1xcZFxcZDpcXGRcXGQ6XFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISDptbTpzcycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZC9dLFxuICAgICAgICBbJ0hIOm1tJywgL1xcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISG1tc3MuU1NTUycsIC9cXGRcXGRcXGRcXGRcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEhtbXNzLFNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkLFxcZCsvXSxcbiAgICAgICAgWydISG1tc3MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEhtbScsIC9cXGRcXGRcXGRcXGQvXSxcbiAgICAgICAgWydISCcsIC9cXGRcXGQvXVxuICAgIF07XG5cbiAgICB2YXIgYXNwTmV0SnNvblJlZ2V4ID0gL15cXC8/RGF0ZVxcKChcXC0/XFxkKykvaTtcblxuICAgIC8vIGRhdGUgZnJvbSBpc28gZm9ybWF0XG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlTTyhjb25maWcpIHtcbiAgICAgICAgdmFyIGksIGwsXG4gICAgICAgICAgICBzdHJpbmcgPSBjb25maWcuX2ksXG4gICAgICAgICAgICBtYXRjaCA9IGV4dGVuZGVkSXNvUmVnZXguZXhlYyhzdHJpbmcpIHx8IGJhc2ljSXNvUmVnZXguZXhlYyhzdHJpbmcpLFxuICAgICAgICAgICAgYWxsb3dUaW1lLCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0LCB0ekZvcm1hdDtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmlzbyA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBpc29EYXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNvRGF0ZXNbaV1bMV0uZXhlYyhtYXRjaFsxXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUZvcm1hdCA9IGlzb0RhdGVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICBhbGxvd1RpbWUgPSBpc29EYXRlc1tpXVsyXSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRlRm9ybWF0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hbM10pIHtcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvVGltZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc29UaW1lc1tpXVsxXS5leGVjKG1hdGNoWzNdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF0Y2hbMl0gc2hvdWxkIGJlICdUJyBvciBzcGFjZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdCA9IChtYXRjaFsyXSB8fCAnICcpICsgaXNvVGltZXNbaV1bMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGltZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhbGxvd1RpbWUgJiYgdGltZUZvcm1hdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR6UmVnZXguZXhlYyhtYXRjaFs0XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHpGb3JtYXQgPSAnWic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcuX2YgPSBkYXRlRm9ybWF0ICsgKHRpbWVGb3JtYXQgfHwgJycpICsgKHR6Rm9ybWF0IHx8ICcnKTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUkZDIDI4MjIgcmVnZXg6IEZvciBkZXRhaWxzIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjgyMiNzZWN0aW9uLTMuM1xuICAgIHZhciByZmMyODIyID0gL14oPzooTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSw/XFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfChbKy1dXFxkezR9KSkkLztcblxuICAgIGZ1bmN0aW9uIGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MoeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtcbiAgICAgICAgICAgIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpLFxuICAgICAgICAgICAgZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LmluZGV4T2YobW9udGhTdHIpLFxuICAgICAgICAgICAgcGFyc2VJbnQoZGF5U3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChob3VyU3RyLCAxMCksXG4gICAgICAgICAgICBwYXJzZUludChtaW51dGVTdHIsIDEwKVxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChzZWNvbmRTdHIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHNlY29uZFN0ciwgMTApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW50cnVuY2F0ZVllYXIoeWVhclN0cikge1xuICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KHllYXJTdHIsIDEwKTtcbiAgICAgICAgaWYgKHllYXIgPD0gNDkpIHtcbiAgICAgICAgICAgIHJldHVybiAyMDAwICsgeWVhcjtcbiAgICAgICAgfSBlbHNlIGlmICh5ZWFyIDw9IDk5OSkge1xuICAgICAgICAgICAgcmV0dXJuIDE5MDAgKyB5ZWFyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5ZWFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZXByb2Nlc3NSRkMyODIyKHMpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1lbnRzIGFuZCBmb2xkaW5nIHdoaXRlc3BhY2UgYW5kIHJlcGxhY2UgbXVsdGlwbGUtc3BhY2VzIHdpdGggYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvXFwoW14pXSpcXCl8W1xcblxcdF0vZywgJyAnKS5yZXBsYWNlKC8oXFxzXFxzKykvZywgJyAnKS5yZXBsYWNlKC9eXFxzXFxzKi8sICcnKS5yZXBsYWNlKC9cXHNcXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1dlZWtkYXkod2Vla2RheVN0ciwgcGFyc2VkSW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAod2Vla2RheVN0cikge1xuICAgICAgICAgICAgLy8gVE9ETzogUmVwbGFjZSB0aGUgdmFuaWxsYSBKUyBEYXRlIG9iamVjdCB3aXRoIGFuIGluZGVwZW50ZW50IGRheS1vZi13ZWVrIGNoZWNrLlxuICAgICAgICAgICAgdmFyIHdlZWtkYXlQcm92aWRlZCA9IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0ciksXG4gICAgICAgICAgICAgICAgd2Vla2RheUFjdHVhbCA9IG5ldyBEYXRlKHBhcnNlZElucHV0WzBdLCBwYXJzZWRJbnB1dFsxXSwgcGFyc2VkSW5wdXRbMl0pLmdldERheSgpO1xuICAgICAgICAgICAgaWYgKHdlZWtkYXlQcm92aWRlZCAhPT0gd2Vla2RheUFjdHVhbCkge1xuICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBvYnNPZmZzZXRzID0ge1xuICAgICAgICBVVDogMCxcbiAgICAgICAgR01UOiAwLFxuICAgICAgICBFRFQ6IC00ICogNjAsXG4gICAgICAgIEVTVDogLTUgKiA2MCxcbiAgICAgICAgQ0RUOiAtNSAqIDYwLFxuICAgICAgICBDU1Q6IC02ICogNjAsXG4gICAgICAgIE1EVDogLTYgKiA2MCxcbiAgICAgICAgTVNUOiAtNyAqIDYwLFxuICAgICAgICBQRFQ6IC03ICogNjAsXG4gICAgICAgIFBTVDogLTggKiA2MFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVPZmZzZXQob2JzT2Zmc2V0LCBtaWxpdGFyeU9mZnNldCwgbnVtT2Zmc2V0KSB7XG4gICAgICAgIGlmIChvYnNPZmZzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnNPZmZzZXRzW29ic09mZnNldF07XG4gICAgICAgIH0gZWxzZSBpZiAobWlsaXRhcnlPZmZzZXQpIHtcbiAgICAgICAgICAgIC8vIHRoZSBvbmx5IGFsbG93ZWQgbWlsaXRhcnkgdHogaXMgWlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBwYXJzZUludChudW1PZmZzZXQsIDEwKTtcbiAgICAgICAgICAgIHZhciBtID0gaG0gJSAxMDAsIGggPSAoaG0gLSBtKSAvIDEwMDtcbiAgICAgICAgICAgIHJldHVybiBoICogNjAgKyBtO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBhbmQgdGltZSBmcm9tIHJlZiAyODIyIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2ggPSByZmMyODIyLmV4ZWMocHJlcHJvY2Vzc1JGQzI4MjIoY29uZmlnLl9pKSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgdmFyIHBhcnNlZEFycmF5ID0gZXh0cmFjdEZyb21SRkMyODIyU3RyaW5ncyhtYXRjaFs0XSwgbWF0Y2hbM10sIG1hdGNoWzJdLCBtYXRjaFs1XSwgbWF0Y2hbNl0sIG1hdGNoWzddKTtcbiAgICAgICAgICAgIGlmICghY2hlY2tXZWVrZGF5KG1hdGNoWzFdLCBwYXJzZWRBcnJheSwgY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uZmlnLl9hID0gcGFyc2VkQXJyYXk7XG4gICAgICAgICAgICBjb25maWcuX3R6bSA9IGNhbGN1bGF0ZU9mZnNldChtYXRjaFs4XSwgbWF0Y2hbOV0sIG1hdGNoWzEwXSk7XG5cbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGNyZWF0ZVVUQ0RhdGUuYXBwbHkobnVsbCwgY29uZmlnLl9hKTtcbiAgICAgICAgICAgIGNvbmZpZy5fZC5zZXRVVENNaW51dGVzKGNvbmZpZy5fZC5nZXRVVENNaW51dGVzKCkgLSBjb25maWcuX3R6bSk7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnJmYzI4MjIgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdCBvciBmYWxsYmFja1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXRjaGVkID0gYXNwTmV0SnNvblJlZ2V4LmV4ZWMoY29uZmlnLl9pKTtcblxuICAgICAgICBpZiAobWF0Y2hlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoK21hdGNoZWRbMV0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21SRkMyODIyKGNvbmZpZyk7XG4gICAgICAgIGlmIChjb25maWcuX2lzVmFsaWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWxldGUgY29uZmlnLl9pc1ZhbGlkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluYWwgYXR0ZW1wdCwgdXNlIElucHV0IEZhbGxiYWNrXG4gICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgfVxuXG4gICAgaG9va3MuY3JlYXRlRnJvbUlucHV0RmFsbGJhY2sgPSBkZXByZWNhdGUoXG4gICAgICAgICd2YWx1ZSBwcm92aWRlZCBpcyBub3QgaW4gYSByZWNvZ25pemVkIFJGQzI4MjIgb3IgSVNPIGZvcm1hdC4gbW9tZW50IGNvbnN0cnVjdGlvbiBmYWxscyBiYWNrIHRvIGpzIERhdGUoKSwgJyArXG4gICAgICAgICd3aGljaCBpcyBub3QgcmVsaWFibGUgYWNyb3NzIGFsbCBicm93c2VycyBhbmQgdmVyc2lvbnMuIE5vbiBSRkMyODIyL0lTTyBkYXRlIGZvcm1hdHMgYXJlICcgK1xuICAgICAgICAnZGlzY291cmFnZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhbiB1cGNvbWluZyBtYWpvciByZWxlYXNlLiBQbGVhc2UgcmVmZXIgdG8gJyArXG4gICAgICAgICdodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2pzLWRhdGUvIGZvciBtb3JlIGluZm8uJyxcbiAgICAgICAgZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoY29uZmlnLl9pICsgKGNvbmZpZy5fdXNlVVRDID8gJyBVVEMnIDogJycpKTtcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgSVNPIHN0YW5kYXJkXG4gICAgaG9va3MuSVNPXzg2MDEgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGNvbnN0YW50IHRoYXQgcmVmZXJzIHRvIHRoZSBSRkMgMjgyMiBmb3JtXG4gICAgaG9va3MuUkZDXzI4MjIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIGRhdGUgZnJvbSBzdHJpbmcgYW5kIGZvcm1hdCBzdHJpbmdcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZykge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBjcmVhdGlvbiBmbG93IHRvIHByZXZlbnQgY2lyY3VsYXIgZGVwc1xuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5JU09fODYwMSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlTTyhjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuX2YgPT09IGhvb2tzLlJGQ18yODIyKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbmZpZy5fYSA9IFtdO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IHRydWU7XG5cbiAgICAgICAgLy8gVGhpcyBhcnJheSBpcyB1c2VkIHRvIG1ha2UgYSBEYXRlLCBlaXRoZXIgd2l0aCBgbmV3IERhdGVgIG9yIGBEYXRlLlVUQ2BcbiAgICAgICAgdmFyIHN0cmluZyA9ICcnICsgY29uZmlnLl9pLFxuICAgICAgICAgICAgaSwgcGFyc2VkSW5wdXQsIHRva2VucywgdG9rZW4sIHNraXBwZWQsXG4gICAgICAgICAgICBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICAgICAgdG90YWxQYXJzZWRJbnB1dExlbmd0aCA9IDA7XG5cbiAgICAgICAgdG9rZW5zID0gZXhwYW5kRm9ybWF0KGNvbmZpZy5fZiwgY29uZmlnLl9sb2NhbGUpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnMpIHx8IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgICAgICAgcGFyc2VkSW5wdXQgPSAoc3RyaW5nLm1hdGNoKGdldFBhcnNlUmVnZXhGb3JUb2tlbih0b2tlbiwgY29uZmlnKSkgfHwgW10pWzBdO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3Rva2VuJywgdG9rZW4sICdwYXJzZWRJbnB1dCcsIHBhcnNlZElucHV0LFxuICAgICAgICAgICAgLy8gICAgICAgICAncmVnZXgnLCBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgc2tpcHBlZCA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc2tpcHBlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5zbGljZShzdHJpbmcuaW5kZXhPZihwYXJzZWRJbnB1dCkgKyBwYXJzZWRJbnB1dC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggKz0gcGFyc2VkSW5wdXQubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9uJ3QgcGFyc2UgaWYgaXQncyBub3QgYSBrbm93biB0b2tlblxuICAgICAgICAgICAgaWYgKGZvcm1hdFRva2VuRnVuY3Rpb25zW3Rva2VuXSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5lbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgcGFyc2VkSW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjb25maWcuX3N0cmljdCAmJiAhcGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRUb2tlbnMucHVzaCh0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgcmVtYWluaW5nIHVucGFyc2VkIGlucHV0IGxlbmd0aCB0byB0aGUgc3RyaW5nXG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmNoYXJzTGVmdE92ZXIgPSBzdHJpbmdMZW5ndGggLSB0b3RhbFBhcnNlZElucHV0TGVuZ3RoO1xuICAgICAgICBpZiAoc3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZElucHV0LnB1c2goc3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNsZWFyIF8xMmggZmxhZyBpZiBob3VyIGlzIDw9IDEyXG4gICAgICAgIGlmIChjb25maWcuX2FbSE9VUl0gPD0gMTIgJiZcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPT09IHRydWUgJiZcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA+IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5wYXJzZWREYXRlUGFydHMgPSBjb25maWcuX2Euc2xpY2UoMCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLm1lcmlkaWVtID0gY29uZmlnLl9tZXJpZGllbTtcbiAgICAgICAgLy8gaGFuZGxlIG1lcmlkaWVtXG4gICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IG1lcmlkaWVtRml4V3JhcChjb25maWcuX2xvY2FsZSwgY29uZmlnLl9hW0hPVVJdLCBjb25maWcuX21lcmlkaWVtKTtcblxuICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgY2hlY2tPdmVyZmxvdyhjb25maWcpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW1GaXhXcmFwIChsb2NhbGUsIGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgIHZhciBpc1BtO1xuXG4gICAgICAgIGlmIChtZXJpZGllbSA9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBub3RoaW5nIHRvIGRvXG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobG9jYWxlLm1lcmlkaWVtSG91ciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtSG91cihob3VyLCBtZXJpZGllbSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG9jYWxlLmlzUE0gIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2tcbiAgICAgICAgICAgIGlzUG0gPSBsb2NhbGUuaXNQTShtZXJpZGllbSk7XG4gICAgICAgICAgICBpZiAoaXNQbSAmJiBob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyICs9IDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BtICYmIGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgbm90IHN1cHBvc2VkIHRvIGhhcHBlblxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBhcnJheSBvZiBmb3JtYXQgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21TdHJpbmdBbmRBcnJheShjb25maWcpIHtcbiAgICAgICAgdmFyIHRlbXBDb25maWcsXG4gICAgICAgICAgICBiZXN0TW9tZW50LFxuXG4gICAgICAgICAgICBzY29yZVRvQmVhdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBjdXJyZW50U2NvcmU7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRGb3JtYXQgPSB0cnVlO1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25maWcuX2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29yZSA9IDA7XG4gICAgICAgICAgICB0ZW1wQ29uZmlnID0gY29weUNvbmZpZyh7fSwgY29uZmlnKTtcbiAgICAgICAgICAgIGlmIChjb25maWcuX3VzZVVUQyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGVtcENvbmZpZy5fdXNlVVRDID0gY29uZmlnLl91c2VVVEM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW1wQ29uZmlnLl9mID0gY29uZmlnLl9mW2ldO1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCh0ZW1wQ29uZmlnKTtcblxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKHRlbXBDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIGFueSBpbnB1dCB0aGF0IHdhcyBub3QgcGFyc2VkIGFkZCBhIHBlbmFsdHkgZm9yIHRoYXQgZm9ybWF0XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLmNoYXJzTGVmdE92ZXI7XG5cbiAgICAgICAgICAgIC8vb3IgdG9rZW5zXG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgKz0gZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnVudXNlZFRva2Vucy5sZW5ndGggKiAxMDtcblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKHRlbXBDb25maWcpLnNjb3JlID0gY3VycmVudFNjb3JlO1xuXG4gICAgICAgICAgICBpZiAoc2NvcmVUb0JlYXQgPT0gbnVsbCB8fCBjdXJyZW50U2NvcmUgPCBzY29yZVRvQmVhdCkge1xuICAgICAgICAgICAgICAgIHNjb3JlVG9CZWF0ID0gY3VycmVudFNjb3JlO1xuICAgICAgICAgICAgICAgIGJlc3RNb21lbnQgPSB0ZW1wQ29uZmlnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZXh0ZW5kKGNvbmZpZywgYmVzdE1vbWVudCB8fCB0ZW1wQ29uZmlnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tT2JqZWN0KGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnLl9kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKGNvbmZpZy5faSk7XG4gICAgICAgIGNvbmZpZy5fYSA9IG1hcChbaS55ZWFyLCBpLm1vbnRoLCBpLmRheSB8fCBpLmRhdGUsIGkuaG91ciwgaS5taW51dGUsIGkuc2Vjb25kLCBpLm1pbGxpc2Vjb25kXSwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBwYXJzZUludChvYmosIDEwKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRnJvbUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciByZXMgPSBuZXcgTW9tZW50KGNoZWNrT3ZlcmZsb3cocHJlcGFyZUNvbmZpZyhjb25maWcpKSk7XG4gICAgICAgIGlmIChyZXMuX25leHREYXkpIHtcbiAgICAgICAgICAgIC8vIEFkZGluZyBpcyBzbWFydCBlbm91Z2ggYXJvdW5kIERTVFxuICAgICAgICAgICAgcmVzLmFkZCgxLCAnZCcpO1xuICAgICAgICAgICAgcmVzLl9uZXh0RGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwYXJlQ29uZmlnIChjb25maWcpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgZm9ybWF0ID0gY29uZmlnLl9mO1xuXG4gICAgICAgIGNvbmZpZy5fbG9jYWxlID0gY29uZmlnLl9sb2NhbGUgfHwgZ2V0TG9jYWxlKGNvbmZpZy5fbCk7XG5cbiAgICAgICAgaWYgKGlucHV0ID09PSBudWxsIHx8IChmb3JtYXQgPT09IHVuZGVmaW5lZCAmJiBpbnB1dCA9PT0gJycpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCh7bnVsbElucHV0OiB0cnVlfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnLl9pID0gaW5wdXQgPSBjb25maWcuX2xvY2FsZS5wcmVwYXJzZShpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNNb21lbnQoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE1vbWVudChjaGVja092ZXJmbG93KGlucHV0KSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEYXRlKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gaW5wdXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShmb3JtYXQpKSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQoY29uZmlnKTtcbiAgICAgICAgfSAgZWxzZSB7XG4gICAgICAgICAgICBjb25maWdGcm9tSW5wdXQoY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNWYWxpZChjb25maWcpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25maWdGcm9tSW5wdXQoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUoaG9va3Mubm93KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0LnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZyhjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2EgPSBtYXAoaW5wdXQuc2xpY2UoMCksIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbU9iamVjdChjb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgLy8gZnJvbSBtaWxsaXNlY29uZHNcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMb2NhbE9yVVRDIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgaXNVVEMpIHtcbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBpZiAobG9jYWxlID09PSB0cnVlIHx8IGxvY2FsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0cmljdCA9IGxvY2FsZTtcbiAgICAgICAgICAgIGxvY2FsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoaXNPYmplY3QoaW5wdXQpICYmIGlzT2JqZWN0RW1wdHkoaW5wdXQpKSB8fFxuICAgICAgICAgICAgICAgIChpc0FycmF5KGlucHV0KSAmJiBpbnB1dC5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBvYmplY3QgY29uc3RydWN0aW9uIG11c3QgYmUgZG9uZSB0aGlzIHdheS5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzE0MjNcbiAgICAgICAgYy5faXNBTW9tZW50T2JqZWN0ID0gdHJ1ZTtcbiAgICAgICAgYy5fdXNlVVRDID0gYy5faXNVVEMgPSBpc1VUQztcbiAgICAgICAgYy5fbCA9IGxvY2FsZTtcbiAgICAgICAgYy5faSA9IGlucHV0O1xuICAgICAgICBjLl9mID0gZm9ybWF0O1xuICAgICAgICBjLl9zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZyb21Db25maWcoYyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWwgKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0KSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVMb2NhbE9yVVRDKGlucHV0LCBmb3JtYXQsIGxvY2FsZSwgc3RyaWN0LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvdHlwZU1pbiA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLm1pbiBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50Lm1heCBpbnN0ZWFkLiBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL21pbi1tYXgvJyxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3RoZXIgPCB0aGlzID8gdGhpcyA6IG90aGVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlSW52YWxpZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIHZhciBwcm90b3R5cGVNYXggPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5tYXggaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5taW4gaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyID4gdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICAvLyBQaWNrIGEgbW9tZW50IG0gZnJvbSBtb21lbnRzIHNvIHRoYXQgbVtmbl0ob3RoZXIpIGlzIHRydWUgZm9yIGFsbFxuICAgIC8vIG90aGVyLiBUaGlzIHJlbGllcyBvbiB0aGUgZnVuY3Rpb24gZm4gdG8gYmUgdHJhbnNpdGl2ZS5cbiAgICAvL1xuICAgIC8vIG1vbWVudHMgc2hvdWxkIGVpdGhlciBiZSBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cyBvciBhbiBhcnJheSwgd2hvc2VcbiAgICAvLyBmaXJzdCBlbGVtZW50IGlzIGFuIGFycmF5IG9mIG1vbWVudCBvYmplY3RzLlxuICAgIGZ1bmN0aW9uIHBpY2tCeShmbiwgbW9tZW50cykge1xuICAgICAgICB2YXIgcmVzLCBpO1xuICAgICAgICBpZiAobW9tZW50cy5sZW5ndGggPT09IDEgJiYgaXNBcnJheShtb21lbnRzWzBdKSkge1xuICAgICAgICAgICAgbW9tZW50cyA9IG1vbWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzID0gbW9tZW50c1swXTtcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IG1vbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50c1tpXS5pc1ZhbGlkKCkgfHwgbW9tZW50c1tpXVtmbl0ocmVzKSkge1xuICAgICAgICAgICAgICAgIHJlcyA9IG1vbWVudHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgW10uc29ydCBpbnN0ZWFkP1xuICAgIGZ1bmN0aW9uIG1pbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQmVmb3JlJywgYXJncyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWF4ICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG5cbiAgICAgICAgcmV0dXJuIHBpY2tCeSgnaXNBZnRlcicsIGFyZ3MpO1xuICAgIH1cblxuICAgIHZhciBub3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdyA/IERhdGUubm93KCkgOiArKG5ldyBEYXRlKCkpO1xuICAgIH07XG5cbiAgICB2YXIgb3JkZXJpbmcgPSBbJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb25WYWxpZChtKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBtKSB7XG4gICAgICAgICAgICBpZiAoIShpbmRleE9mLmNhbGwob3JkZXJpbmcsIGtleSkgIT09IC0xICYmIChtW2tleV0gPT0gbnVsbCB8fCAhaXNOYU4obVtrZXldKSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuaXRIYXNEZWNpbWFsID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JkZXJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChtW29yZGVyaW5nW2ldXSkge1xuICAgICAgICAgICAgICAgIGlmICh1bml0SGFzRGVjaW1hbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9ubHkgYWxsb3cgbm9uLWludGVnZXJzIGZvciBzbWFsbGVzdCB1bml0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KG1bb3JkZXJpbmdbaV1dKSAhPT0gdG9JbnQobVtvcmRlcmluZ1tpXV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXRIYXNEZWNpbWFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQkMSgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKE5hTik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gRHVyYXRpb24gKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBub3JtYWxpemVkSW5wdXQgPSBub3JtYWxpemVPYmplY3RVbml0cyhkdXJhdGlvbiksXG4gICAgICAgICAgICB5ZWFycyA9IG5vcm1hbGl6ZWRJbnB1dC55ZWFyIHx8IDAsXG4gICAgICAgICAgICBxdWFydGVycyA9IG5vcm1hbGl6ZWRJbnB1dC5xdWFydGVyIHx8IDAsXG4gICAgICAgICAgICBtb250aHMgPSBub3JtYWxpemVkSW5wdXQubW9udGggfHwgMCxcbiAgICAgICAgICAgIHdlZWtzID0gbm9ybWFsaXplZElucHV0LndlZWsgfHwgbm9ybWFsaXplZElucHV0Lmlzb1dlZWsgfHwgMCxcbiAgICAgICAgICAgIGRheXMgPSBub3JtYWxpemVkSW5wdXQuZGF5IHx8IDAsXG4gICAgICAgICAgICBob3VycyA9IG5vcm1hbGl6ZWRJbnB1dC5ob3VyIHx8IDAsXG4gICAgICAgICAgICBtaW51dGVzID0gbm9ybWFsaXplZElucHV0Lm1pbnV0ZSB8fCAwLFxuICAgICAgICAgICAgc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5zZWNvbmQgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IG5vcm1hbGl6ZWRJbnB1dC5taWxsaXNlY29uZCB8fCAwO1xuXG4gICAgICAgIHRoaXMuX2lzVmFsaWQgPSBpc0R1cmF0aW9uVmFsaWQobm9ybWFsaXplZElucHV0KTtcblxuICAgICAgICAvLyByZXByZXNlbnRhdGlvbiBmb3IgZGF0ZUFkZFJlbW92ZVxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSArbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHNlY29uZHMgKiAxZTMgKyAvLyAxMDAwXG4gICAgICAgICAgICBtaW51dGVzICogNmU0ICsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBob3VycyAqIDEwMDAgKiA2MCAqIDYwOyAvL3VzaW5nIDEwMDAgKiA2MCAqIDYwIGluc3RlYWQgb2YgMzZlNSB0byBhdm9pZCBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvcnMgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzI5NzhcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBkYXRlQWRkUmVtb3ZlIHRyZWF0cyAyNCBob3VycyBhcyBkaWZmZXJlbnQgZnJvbSBhXG4gICAgICAgIC8vIGRheSB3aGVuIHdvcmtpbmcgYXJvdW5kIERTVCwgd2UgbmVlZCB0byBzdG9yZSB0aGVtIHNlcGFyYXRlbHlcbiAgICAgICAgdGhpcy5fZGF5cyA9ICtkYXlzICtcbiAgICAgICAgICAgIHdlZWtzICogNztcbiAgICAgICAgLy8gSXQgaXMgaW1wb3NzaWJsZSB0byB0cmFuc2xhdGUgbW9udGhzIGludG8gZGF5cyB3aXRob3V0IGtub3dpbmdcbiAgICAgICAgLy8gd2hpY2ggbW9udGhzIHlvdSBhcmUgYXJlIHRhbGtpbmcgYWJvdXQsIHNvIHdlIGhhdmUgdG8gc3RvcmVcbiAgICAgICAgLy8gaXQgc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fbW9udGhzID0gK21vbnRocyArXG4gICAgICAgICAgICBxdWFydGVycyAqIDMgK1xuICAgICAgICAgICAgeWVhcnMgKiAxMjtcblxuICAgICAgICB0aGlzLl9kYXRhID0ge307XG5cbiAgICAgICAgdGhpcy5fbG9jYWxlID0gZ2V0TG9jYWxlKCk7XG5cbiAgICAgICAgdGhpcy5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEdXJhdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNSb3VuZCAobnVtYmVyKSB7XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtMSAqIG51bWJlcikgKiAtMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBmdW5jdGlvbiBvZmZzZXQgKHRva2VuLCBzZXBhcmF0b3IpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLnV0Y09mZnNldCgpO1xuICAgICAgICAgICAgdmFyIHNpZ24gPSAnKyc7XG4gICAgICAgICAgICBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IC1vZmZzZXQ7XG4gICAgICAgICAgICAgICAgc2lnbiA9ICctJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzaWduICsgemVyb0ZpbGwofn4ob2Zmc2V0IC8gNjApLCAyKSArIHNlcGFyYXRvciArIHplcm9GaWxsKH5+KG9mZnNldCkgJSA2MCwgMik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9mZnNldCgnWicsICc6Jyk7XG4gICAgb2Zmc2V0KCdaWicsICcnKTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1onLCAgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUmVnZXhUb2tlbignWlonLCBtYXRjaFNob3J0T2Zmc2V0KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnWicsICdaWiddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl91c2VVVEMgPSB0cnVlO1xuICAgICAgICBjb25maWcuX3R6bSA9IG9mZnNldEZyb21TdHJpbmcobWF0Y2hTaG9ydE9mZnNldCwgaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gdGltZXpvbmUgY2h1bmtlclxuICAgIC8vICcrMTA6MDAnID4gWycxMCcsICAnMDAnXVxuICAgIC8vICctMTUzMCcgID4gWyctMTUnLCAnMzAnXVxuICAgIHZhciBjaHVua09mZnNldCA9IC8oW1xcK1xcLV18XFxkXFxkKS9naTtcblxuICAgIGZ1bmN0aW9uIG9mZnNldEZyb21TdHJpbmcobWF0Y2hlciwgc3RyaW5nKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gKHN0cmluZyB8fCAnJykubWF0Y2gobWF0Y2hlcik7XG5cbiAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNodW5rICAgPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0gfHwgW107XG4gICAgICAgIHZhciBwYXJ0cyAgID0gKGNodW5rICsgJycpLm1hdGNoKGNodW5rT2Zmc2V0KSB8fCBbJy0nLCAwLCAwXTtcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSArKHBhcnRzWzFdICogNjApICsgdG9JbnQocGFydHNbMl0pO1xuXG4gICAgICAgIHJldHVybiBtaW51dGVzID09PSAwID9cbiAgICAgICAgICAwIDpcbiAgICAgICAgICBwYXJ0c1swXSA9PT0gJysnID8gbWludXRlcyA6IC1taW51dGVzO1xuICAgIH1cblxuICAgIC8vIFJldHVybiBhIG1vbWVudCBmcm9tIGlucHV0LCB0aGF0IGlzIGxvY2FsL3V0Yy96b25lIGVxdWl2YWxlbnQgdG8gbW9kZWwuXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCBtb2RlbCkge1xuICAgICAgICB2YXIgcmVzLCBkaWZmO1xuICAgICAgICBpZiAobW9kZWwuX2lzVVRDKSB7XG4gICAgICAgICAgICByZXMgPSBtb2RlbC5jbG9uZSgpO1xuICAgICAgICAgICAgZGlmZiA9IChpc01vbWVudChpbnB1dCkgfHwgaXNEYXRlKGlucHV0KSA/IGlucHV0LnZhbHVlT2YoKSA6IGNyZWF0ZUxvY2FsKGlucHV0KS52YWx1ZU9mKCkpIC0gcmVzLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIC8vIFVzZSBsb3ctbGV2ZWwgYXBpLCBiZWNhdXNlIHRoaXMgZm4gaXMgbG93LWxldmVsIGFwaS5cbiAgICAgICAgICAgIHJlcy5fZC5zZXRUaW1lKHJlcy5fZC52YWx1ZU9mKCkgKyBkaWZmKTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChyZXMsIGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQpLmxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXREYXRlT2Zmc2V0IChtKSB7XG4gICAgICAgIC8vIE9uIEZpcmVmb3guMjQgRGF0ZSNnZXRUaW1lem9uZU9mZnNldCByZXR1cm5zIGEgZmxvYXRpbmcgcG9pbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L3B1bGwvMTg3MVxuICAgICAgICByZXR1cm4gLU1hdGgucm91bmQobS5fZC5nZXRUaW1lem9uZU9mZnNldCgpIC8gMTUpICogMTU7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgYSBtb21lbnQgaXMgbXV0YXRlZC5cbiAgICAvLyBJdCBpcyBpbnRlbmRlZCB0byBrZWVwIHRoZSBvZmZzZXQgaW4gc3luYyB3aXRoIHRoZSB0aW1lem9uZS5cbiAgICBob29rcy51cGRhdGVPZmZzZXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIC8vIGtlZXBMb2NhbFRpbWUgPSB0cnVlIG1lYW5zIG9ubHkgY2hhbmdlIHRoZSB0aW1lem9uZSwgd2l0aG91dFxuICAgIC8vIGFmZmVjdGluZyB0aGUgbG9jYWwgaG91ci4gU28gNTozMToyNiArMDMwMCAtLVt1dGNPZmZzZXQoMiwgdHJ1ZSldLS0+XG4gICAgLy8gNTozMToyNiArMDIwMCBJdCBpcyBwb3NzaWJsZSB0aGF0IDU6MzE6MjYgZG9lc24ndCBleGlzdCB3aXRoIG9mZnNldFxuICAgIC8vICswMjAwLCBzbyB3ZSBhZGp1c3QgdGhlIHRpbWUgYXMgbmVlZGVkLCB0byBiZSB2YWxpZC5cbiAgICAvL1xuICAgIC8vIEtlZXBpbmcgdGhlIHRpbWUgYWN0dWFsbHkgYWRkcy9zdWJ0cmFjdHMgKG9uZSBob3VyKVxuICAgIC8vIGZyb20gdGhlIGFjdHVhbCByZXByZXNlbnRlZCB0aW1lLiBUaGF0IGlzIHdoeSB3ZSBjYWxsIHVwZGF0ZU9mZnNldFxuICAgIC8vIGEgc2Vjb25kIHRpbWUuIEluIGNhc2UgaXQgd2FudHMgdXMgdG8gY2hhbmdlIHRoZSBvZmZzZXQgYWdhaW5cbiAgICAvLyBfY2hhbmdlSW5Qcm9ncmVzcyA9PSB0cnVlIGNhc2UsIHRoZW4gd2UgaGF2ZSB0byBhZGp1c3QsIGJlY2F1c2VcbiAgICAvLyB0aGVyZSBpcyBubyBzdWNoIHRpbWUgaW4gdGhlIGdpdmVuIHRpbWV6b25lLlxuICAgIGZ1bmN0aW9uIGdldFNldE9mZnNldCAoaW5wdXQsIGtlZXBMb2NhbFRpbWUsIGtlZXBNaW51dGVzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSB0aGlzLl9vZmZzZXQgfHwgMCxcbiAgICAgICAgICAgIGxvY2FsQWRqdXN0O1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhpbnB1dCkgPCAxNiAmJiAha2VlcE1pbnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0ICogNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzVVRDICYmIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEFkanVzdCA9IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBpbnB1dDtcbiAgICAgICAgICAgIHRoaXMuX2lzVVRDID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChsb2NhbEFkanVzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGQobG9jYWxBZGp1c3QsICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICE9PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmICgha2VlcExvY2FsVGltZSB8fCB0aGlzLl9jaGFuZ2VJblByb2dyZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFN1YnRyYWN0KHRoaXMsIGNyZWF0ZUR1cmF0aW9uKGlucHV0IC0gb2Zmc2V0LCAnbScpLCAxLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/IG9mZnNldCA6IGdldERhdGVPZmZzZXQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRab25lIChpbnB1dCwga2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IC1pbnB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoaW5wdXQsIGtlZXBMb2NhbFRpbWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAtdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE9mZnNldFRvVVRDIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnV0Y09mZnNldCgwLCBrZWVwTG9jYWxUaW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb0xvY2FsIChrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1VUQykge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3VidHJhY3QoZ2V0RGF0ZU9mZnNldCh0aGlzKSwgJ20nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldCAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90em0gIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodGhpcy5fdHptLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2kgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB2YXIgdFpvbmUgPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoT2Zmc2V0LCB0aGlzLl9pKTtcbiAgICAgICAgICAgIGlmICh0Wm9uZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQodFpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoMCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzQWxpZ25lZEhvdXJPZmZzZXQgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dCA9IGlucHV0ID8gY3JlYXRlTG9jYWwoaW5wdXQpLnV0Y09mZnNldCgpIDogMDtcblxuICAgICAgICByZXR1cm4gKHRoaXMudXRjT2Zmc2V0KCkgLSBpbnB1dCkgJSA2MCA9PT0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RheWxpZ2h0U2F2aW5nVGltZSAoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDApLnV0Y09mZnNldCgpIHx8XG4gICAgICAgICAgICB0aGlzLnV0Y09mZnNldCgpID4gdGhpcy5jbG9uZSgpLm1vbnRoKDUpLnV0Y09mZnNldCgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWVTaGlmdGVkICgpIHtcbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9pc0RTVFNoaWZ0ZWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEU1RTaGlmdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGMgPSB7fTtcblxuICAgICAgICBjb3B5Q29uZmlnKGMsIHRoaXMpO1xuICAgICAgICBjID0gcHJlcGFyZUNvbmZpZyhjKTtcblxuICAgICAgICBpZiAoYy5fYSkge1xuICAgICAgICAgICAgdmFyIG90aGVyID0gYy5faXNVVEMgPyBjcmVhdGVVVEMoYy5fYSkgOiBjcmVhdGVMb2NhbChjLl9hKTtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgY29tcGFyZUFycmF5cyhjLl9hLCBvdGhlci50b0FycmF5KCkpID4gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lzRFNUU2hpZnRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0xvY2FsICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gIXRoaXMuX2lzVVRDIDogZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNVdGNPZmZzZXQgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgJiYgdGhpcy5fb2Zmc2V0ID09PSAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQVNQLk5FVCBqc29uIGRhdGUgZm9ybWF0IHJlZ2V4XG4gICAgdmFyIGFzcE5ldFJlZ2V4ID0gL14oXFwtfFxcKyk/KD86KFxcZCopWy4gXSk/KFxcZCspXFw6KFxcZCspKD86XFw6KFxcZCspKFxcLlxcZCopPyk/JC87XG5cbiAgICAvLyBmcm9tIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvY2xvc3VyZV9nb29nX2RhdGVfZGF0ZS5qcy5zb3VyY2UuaHRtbFxuICAgIC8vIHNvbWV3aGF0IG1vcmUgaW4gbGluZSB3aXRoIDQuNC4zLjIgMjAwNCBzcGVjLCBidXQgYWxsb3dzIGRlY2ltYWwgYW55d2hlcmVcbiAgICAvLyBhbmQgZnVydGhlciBtb2RpZmllZCB0byBhbGxvdyBmb3Igc3RyaW5ncyBjb250YWluaW5nIGJvdGggd2VlayBhbmQgZGF5XG4gICAgdmFyIGlzb1JlZ2V4ID0gL14oLXxcXCspP1AoPzooWy0rXT9bMC05LC5dKilZKT8oPzooWy0rXT9bMC05LC5dKilNKT8oPzooWy0rXT9bMC05LC5dKilXKT8oPzooWy0rXT9bMC05LC5dKilEKT8oPzpUKD86KFstK10/WzAtOSwuXSopSCk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopUyk/KT8kLztcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUR1cmF0aW9uIChpbnB1dCwga2V5KSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGlucHV0LFxuICAgICAgICAgICAgLy8gbWF0Y2hpbmcgYWdhaW5zdCByZWdleHAgaXMgZXhwZW5zaXZlLCBkbyBpdCBvbiBkZW1hbmRcbiAgICAgICAgICAgIG1hdGNoID0gbnVsbCxcbiAgICAgICAgICAgIHNpZ24sXG4gICAgICAgICAgICByZXQsXG4gICAgICAgICAgICBkaWZmUmVzO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgbXMgOiBpbnB1dC5fbWlsbGlzZWNvbmRzLFxuICAgICAgICAgICAgICAgIGQgIDogaW5wdXQuX2RheXMsXG4gICAgICAgICAgICAgICAgTSAgOiBpbnB1dC5fbW9udGhzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbltrZXldID0gaW5wdXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uLm1pbGxpc2Vjb25kcyA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gYXNwTmV0UmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSAgOiAwLFxuICAgICAgICAgICAgICAgIGQgIDogdG9JbnQobWF0Y2hbREFURV0pICAgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBoICA6IHRvSW50KG1hdGNoW0hPVVJdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbSAgOiB0b0ludChtYXRjaFtNSU5VVEVdKSAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIHMgIDogdG9JbnQobWF0Y2hbU0VDT05EXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBtcyA6IHRvSW50KGFic1JvdW5kKG1hdGNoW01JTExJU0VDT05EXSAqIDEwMDApKSAqIHNpZ24gLy8gdGhlIG1pbGxpc2Vjb25kIGRlY2ltYWwgcG9pbnQgaXMgaW5jbHVkZWQgaW4gdGhlIG1hdGNoXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2UgaWYgKCEhKG1hdGNoID0gaXNvUmVnZXguZXhlYyhpbnB1dCkpKSB7XG4gICAgICAgICAgICBzaWduID0gKG1hdGNoWzFdID09PSAnLScpID8gLTEgOiAxO1xuICAgICAgICAgICAgZHVyYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgeSA6IHBhcnNlSXNvKG1hdGNoWzJdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBNIDogcGFyc2VJc28obWF0Y2hbM10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHcgOiBwYXJzZUlzbyhtYXRjaFs0XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgZCA6IHBhcnNlSXNvKG1hdGNoWzVdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBoIDogcGFyc2VJc28obWF0Y2hbNl0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIG0gOiBwYXJzZUlzbyhtYXRjaFs3XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgcyA6IHBhcnNlSXNvKG1hdGNoWzhdLCBzaWduKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkdXJhdGlvbiA9PSBudWxsKSB7Ly8gY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZHVyYXRpb24gPT09ICdvYmplY3QnICYmICgnZnJvbScgaW4gZHVyYXRpb24gfHwgJ3RvJyBpbiBkdXJhdGlvbikpIHtcbiAgICAgICAgICAgIGRpZmZSZXMgPSBtb21lbnRzRGlmZmVyZW5jZShjcmVhdGVMb2NhbChkdXJhdGlvbi5mcm9tKSwgY3JlYXRlTG9jYWwoZHVyYXRpb24udG8pKTtcblxuICAgICAgICAgICAgZHVyYXRpb24gPSB7fTtcbiAgICAgICAgICAgIGR1cmF0aW9uLm1zID0gZGlmZlJlcy5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICBkdXJhdGlvbi5NID0gZGlmZlJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXQgPSBuZXcgRHVyYXRpb24oZHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpc0R1cmF0aW9uKGlucHV0KSAmJiBoYXNPd25Qcm9wKGlucHV0LCAnX2xvY2FsZScpKSB7XG4gICAgICAgICAgICByZXQuX2xvY2FsZSA9IGlucHV0Ll9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGNyZWF0ZUR1cmF0aW9uLmZuID0gRHVyYXRpb24ucHJvdG90eXBlO1xuICAgIGNyZWF0ZUR1cmF0aW9uLmludmFsaWQgPSBjcmVhdGVJbnZhbGlkJDE7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUlzbyAoaW5wLCBzaWduKSB7XG4gICAgICAgIC8vIFdlJ2Qgbm9ybWFsbHkgdXNlIH5+aW5wIGZvciB0aGlzLCBidXQgdW5mb3J0dW5hdGVseSBpdCBhbHNvXG4gICAgICAgIC8vIGNvbnZlcnRzIGZsb2F0cyB0byBpbnRzLlxuICAgICAgICAvLyBpbnAgbWF5IGJlIHVuZGVmaW5lZCwgc28gY2FyZWZ1bCBjYWxsaW5nIHJlcGxhY2Ugb24gaXQuXG4gICAgICAgIHZhciByZXMgPSBpbnAgJiYgcGFyc2VGbG9hdChpbnAucmVwbGFjZSgnLCcsICcuJykpO1xuICAgICAgICAvLyBhcHBseSBzaWduIHdoaWxlIHdlJ3JlIGF0IGl0XG4gICAgICAgIHJldHVybiAoaXNOYU4ocmVzKSA/IDAgOiByZXMpICogc2lnbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKSB7XG4gICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICByZXMubW9udGhzID0gb3RoZXIubW9udGgoKSAtIGJhc2UubW9udGgoKSArXG4gICAgICAgICAgICAob3RoZXIueWVhcigpIC0gYmFzZS55ZWFyKCkpICogMTI7XG4gICAgICAgIGlmIChiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykuaXNBZnRlcihvdGhlcikpIHtcbiAgICAgICAgICAgIC0tcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSArb3RoZXIgLSArKGJhc2UuY2xvbmUoKS5hZGQocmVzLm1vbnRocywgJ00nKSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzO1xuICAgICAgICBpZiAoIShiYXNlLmlzVmFsaWQoKSAmJiBvdGhlci5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4ge21pbGxpc2Vjb25kczogMCwgbW9udGhzOiAwfTtcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyID0gY2xvbmVXaXRoT2Zmc2V0KG90aGVyLCBiYXNlKTtcbiAgICAgICAgaWYgKGJhc2UuaXNCZWZvcmUob3RoZXIpKSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKGJhc2UsIG90aGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2Uob3RoZXIsIGJhc2UpO1xuICAgICAgICAgICAgcmVzLm1pbGxpc2Vjb25kcyA9IC1yZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgcmVzLm1vbnRocyA9IC1yZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvLyBUT0RPOiByZW1vdmUgJ25hbWUnIGFyZyBhZnRlciBkZXByZWNhdGlvbiBpcyByZW1vdmVkXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkZXIoZGlyZWN0aW9uLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBkdXIsIHRtcDtcbiAgICAgICAgICAgIC8vaW52ZXJ0IHRoZSBhcmd1bWVudHMsIGJ1dCBjb21wbGFpbiBhYm91dCBpdFxuICAgICAgICAgICAgaWYgKHBlcmlvZCAhPT0gbnVsbCAmJiAhaXNOYU4oK3BlcmlvZCkpIHtcbiAgICAgICAgICAgICAgICBkZXByZWNhdGVTaW1wbGUobmFtZSwgJ21vbWVudCgpLicgKyBuYW1lICArICcocGVyaW9kLCBudW1iZXIpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgbW9tZW50KCkuJyArIG5hbWUgKyAnKG51bWJlciwgcGVyaW9kKS4gJyArXG4gICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2FkZC1pbnZlcnRlZC1wYXJhbS8gZm9yIG1vcmUgaW5mby4nKTtcbiAgICAgICAgICAgICAgICB0bXAgPSB2YWw7IHZhbCA9IHBlcmlvZDsgcGVyaW9kID0gdG1wO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/ICt2YWwgOiB2YWw7XG4gICAgICAgICAgICBkdXIgPSBjcmVhdGVEdXJhdGlvbih2YWwsIHBlcmlvZCk7XG4gICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBkdXIsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRTdWJ0cmFjdCAobW9tLCBkdXJhdGlvbiwgaXNBZGRpbmcsIHVwZGF0ZU9mZnNldCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gZHVyYXRpb24uX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgIGRheXMgPSBhYnNSb3VuZChkdXJhdGlvbi5fZGF5cyksXG4gICAgICAgICAgICBtb250aHMgPSBhYnNSb3VuZChkdXJhdGlvbi5fbW9udGhzKTtcblxuICAgICAgICBpZiAoIW1vbS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIC8vIE5vIG9wXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVPZmZzZXQgPSB1cGRhdGVPZmZzZXQgPT0gbnVsbCA/IHRydWUgOiB1cGRhdGVPZmZzZXQ7XG5cbiAgICAgICAgaWYgKG1vbnRocykge1xuICAgICAgICAgICAgc2V0TW9udGgobW9tLCBnZXQobW9tLCAnTW9udGgnKSArIG1vbnRocyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF5cykge1xuICAgICAgICAgICAgc2V0JDEobW9tLCAnRGF0ZScsIGdldChtb20sICdEYXRlJykgKyBkYXlzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIG1vbS5fZC5zZXRUaW1lKG1vbS5fZC52YWx1ZU9mKCkgKyBtaWxsaXNlY29uZHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZU9mZnNldCkge1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KG1vbSwgZGF5cyB8fCBtb250aHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFkZCAgICAgID0gY3JlYXRlQWRkZXIoMSwgJ2FkZCcpO1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZUFkZGVyKC0xLCAnc3VidHJhY3QnKTtcblxuICAgIGZ1bmN0aW9uIGdldENhbGVuZGFyRm9ybWF0KG15TW9tZW50LCBub3cpIHtcbiAgICAgICAgdmFyIGRpZmYgPSBteU1vbWVudC5kaWZmKG5vdywgJ2RheXMnLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIGRpZmYgPCAtNiA/ICdzYW1lRWxzZScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAtMSA/ICdsYXN0V2VlaycgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAwID8gJ2xhc3REYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMSA/ICdzYW1lRGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDIgPyAnbmV4dERheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCA3ID8gJ25leHRXZWVrJyA6ICdzYW1lRWxzZSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsZW5kYXIkMSAodGltZSwgZm9ybWF0cykge1xuICAgICAgICAvLyBXZSB3YW50IHRvIGNvbXBhcmUgdGhlIHN0YXJ0IG9mIHRvZGF5LCB2cyB0aGlzLlxuICAgICAgICAvLyBHZXR0aW5nIHN0YXJ0LW9mLXRvZGF5IGRlcGVuZHMgb24gd2hldGhlciB3ZSdyZSBsb2NhbC91dGMvb2Zmc2V0IG9yIG5vdC5cbiAgICAgICAgdmFyIG5vdyA9IHRpbWUgfHwgY3JlYXRlTG9jYWwoKSxcbiAgICAgICAgICAgIHNvZCA9IGNsb25lV2l0aE9mZnNldChub3csIHRoaXMpLnN0YXJ0T2YoJ2RheScpLFxuICAgICAgICAgICAgZm9ybWF0ID0gaG9va3MuY2FsZW5kYXJGb3JtYXQodGhpcywgc29kKSB8fCAnc2FtZUVsc2UnO1xuXG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRzICYmIChpc0Z1bmN0aW9uKGZvcm1hdHNbZm9ybWF0XSkgPyBmb3JtYXRzW2Zvcm1hdF0uY2FsbCh0aGlzLCBub3cpIDogZm9ybWF0c1tmb3JtYXRdKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQob3V0cHV0IHx8IHRoaXMubG9jYWxlRGF0YSgpLmNhbGVuZGFyKGZvcm1hdCwgdGhpcywgY3JlYXRlTG9jYWwobm93KSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQodGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCk7XG4gICAgICAgIGlmICghKHRoaXMuaXNWYWxpZCgpICYmIGxvY2FsSW5wdXQuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpIHx8ICdtaWxsaXNlY29uZCc7XG4gICAgICAgIGlmICh1bml0cyA9PT0gJ21pbGxpc2Vjb25kJykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZigpID4gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxJbnB1dC52YWx1ZU9mKCkgPCB0aGlzLmNsb25lKCkuc3RhcnRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpIDwgbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0JldHdlZW4gKGZyb20sIHRvLCB1bml0cywgaW5jbHVzaXZpdHkpIHtcbiAgICAgICAgdmFyIGxvY2FsRnJvbSA9IGlzTW9tZW50KGZyb20pID8gZnJvbSA6IGNyZWF0ZUxvY2FsKGZyb20pLFxuICAgICAgICAgICAgbG9jYWxUbyA9IGlzTW9tZW50KHRvKSA/IHRvIDogY3JlYXRlTG9jYWwodG8pO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbEZyb20uaXNWYWxpZCgpICYmIGxvY2FsVG8uaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGluY2x1c2l2aXR5ID0gaW5jbHVzaXZpdHkgfHwgJygpJztcbiAgICAgICAgcmV0dXJuIChpbmNsdXNpdml0eVswXSA9PT0gJygnID8gdGhpcy5pc0FmdGVyKGxvY2FsRnJvbSwgdW5pdHMpIDogIXRoaXMuaXNCZWZvcmUobG9jYWxGcm9tLCB1bml0cykpICYmXG4gICAgICAgICAgICAoaW5jbHVzaXZpdHlbMV0gPT09ICcpJyA/IHRoaXMuaXNCZWZvcmUobG9jYWxUbywgdW5pdHMpIDogIXRoaXMuaXNBZnRlcihsb2NhbFRvLCB1bml0cykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZSAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHZhciBsb2NhbElucHV0ID0gaXNNb21lbnQoaW5wdXQpID8gaW5wdXQgOiBjcmVhdGVMb2NhbChpbnB1dCksXG4gICAgICAgICAgICBpbnB1dE1zO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA9PT0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnB1dE1zID0gbG9jYWxJbnB1dC52YWx1ZU9mKCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKSA8PSBpbnB1dE1zICYmIGlucHV0TXMgPD0gdGhpcy5jbG9uZSgpLmVuZE9mKHVuaXRzKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWVPckFmdGVyIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0FmdGVyKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JCZWZvcmUgKGlucHV0LCB1bml0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWUoaW5wdXQsIHVuaXRzKSB8fCB0aGlzLmlzQmVmb3JlKGlucHV0LCB1bml0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGlmZiAoaW5wdXQsIHVuaXRzLCBhc0Zsb2F0KSB7XG4gICAgICAgIHZhciB0aGF0LFxuICAgICAgICAgICAgem9uZURlbHRhLFxuICAgICAgICAgICAgb3V0cHV0O1xuXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0ID0gY2xvbmVXaXRoT2Zmc2V0KGlucHV0LCB0aGlzKTtcblxuICAgICAgICBpZiAoIXRoYXQuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgem9uZURlbHRhID0gKHRoYXQudXRjT2Zmc2V0KCkgLSB0aGlzLnV0Y09mZnNldCgpKSAqIDZlNDtcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpIC8gMTI7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCk7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDM7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDFlMzsgYnJlYWs7IC8vIDEwMDBcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyA2ZTQ7IGJyZWFrOyAvLyAxMDAwICogNjBcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gMzZlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwXG4gICAgICAgICAgICBjYXNlICdkYXknOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQgLSB6b25lRGVsdGEpIC8gODY0ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDYwNDhlNTsgYnJlYWs7IC8vIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3LCBuZWdhdGUgZHN0XG4gICAgICAgICAgICBkZWZhdWx0OiBvdXRwdXQgPSB0aGlzIC0gdGhhdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc0Zsb2F0ID8gb3V0cHV0IDogYWJzRmxvb3Iob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aERpZmYgKGEsIGIpIHtcbiAgICAgICAgLy8gZGlmZmVyZW5jZSBpbiBtb250aHNcbiAgICAgICAgdmFyIHdob2xlTW9udGhEaWZmID0gKChiLnllYXIoKSAtIGEueWVhcigpKSAqIDEyKSArIChiLm1vbnRoKCkgLSBhLm1vbnRoKCkpLFxuICAgICAgICAgICAgLy8gYiBpcyBpbiAoYW5jaG9yIC0gMSBtb250aCwgYW5jaG9yICsgMSBtb250aClcbiAgICAgICAgICAgIGFuY2hvciA9IGEuY2xvbmUoKS5hZGQod2hvbGVNb250aERpZmYsICdtb250aHMnKSxcbiAgICAgICAgICAgIGFuY2hvcjIsIGFkanVzdDtcblxuICAgICAgICBpZiAoYiAtIGFuY2hvciA8IDApIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmIC0gMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IgLSBhbmNob3IyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuY2hvcjIgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmICsgMSwgJ21vbnRocycpO1xuICAgICAgICAgICAgLy8gbGluZWFyIGFjcm9zcyB0aGUgbW9udGhcbiAgICAgICAgICAgIGFkanVzdCA9IChiIC0gYW5jaG9yKSAvIChhbmNob3IyIC0gYW5jaG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgZm9yIG5lZ2F0aXZlIHplcm8sIHJldHVybiB6ZXJvIGlmIG5lZ2F0aXZlIHplcm9cbiAgICAgICAgcmV0dXJuIC0od2hvbGVNb250aERpZmYgKyBhZGp1c3QpIHx8IDA7XG4gICAgfVxuXG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzWic7XG4gICAgaG9va3MuZGVmYXVsdEZvcm1hdFV0YyA9ICdZWVlZLU1NLUREVEhIOm1tOnNzW1pdJztcblxuICAgIGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5sb2NhbGUoJ2VuJykuZm9ybWF0KCdkZGQgTU1NIEREIFlZWVkgSEg6bW06c3MgW0dNVF1aWicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSVNPU3RyaW5nKGtlZXBPZmZzZXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHV0YyA9IGtlZXBPZmZzZXQgIT09IHRydWU7XG4gICAgICAgIHZhciBtID0gdXRjID8gdGhpcy5jbG9uZSgpLnV0YygpIDogdGhpcztcbiAgICAgICAgaWYgKG0ueWVhcigpIDwgMCB8fCBtLnllYXIoKSA+IDk5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWVlZLU1NLUREW1RdSEg6bW06c3MuU1NTWicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKSkge1xuICAgICAgICAgICAgLy8gbmF0aXZlIGltcGxlbWVudGF0aW9uIGlzIH41MHggZmFzdGVyLCB1c2UgaXQgd2hlbiB3ZSBjYW5cbiAgICAgICAgICAgIGlmICh1dGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkgKyB0aGlzLnV0Y09mZnNldCgpICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnJlcGxhY2UoJ1onLCBmb3JtYXRNb21lbnQobSwgJ1onKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE1vbWVudChtLCB1dGMgPyAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1taXScgOiAnWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiByZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBhIG1vbWVudCB0aGF0IGNhblxuICAgICAqIGFsc28gYmUgZXZhbHVhdGVkIHRvIGdldCBhIG5ldyBtb21lbnQgd2hpY2ggaXMgdGhlIHNhbWVcbiAgICAgKlxuICAgICAqIEBsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9kaXN0L2xhdGVzdC9kb2NzL2FwaS91dGlsLmh0bWwjdXRpbF9jdXN0b21faW5zcGVjdF9mdW5jdGlvbl9vbl9vYmplY3RzXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiAnbW9tZW50LmludmFsaWQoLyogJyArIHRoaXMuX2kgKyAnICovKSc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZ1bmMgPSAnbW9tZW50JztcbiAgICAgICAgdmFyIHpvbmUgPSAnJztcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWwoKSkge1xuICAgICAgICAgICAgZnVuYyA9IHRoaXMudXRjT2Zmc2V0KCkgPT09IDAgPyAnbW9tZW50LnV0YycgOiAnbW9tZW50LnBhcnNlWm9uZSc7XG4gICAgICAgICAgICB6b25lID0gJ1onO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVmaXggPSAnWycgKyBmdW5jICsgJyhcIl0nO1xuICAgICAgICB2YXIgeWVhciA9ICgwIDw9IHRoaXMueWVhcigpICYmIHRoaXMueWVhcigpIDw9IDk5OTkpID8gJ1lZWVknIDogJ1lZWVlZWSc7XG4gICAgICAgIHZhciBkYXRldGltZSA9ICctTU0tRERbVF1ISDptbTpzcy5TU1MnO1xuICAgICAgICB2YXIgc3VmZml4ID0gem9uZSArICdbXCIpXSc7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KHByZWZpeCArIHllYXIgKyBkYXRldGltZSArIHN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9ybWF0IChpbnB1dFN0cmluZykge1xuICAgICAgICBpZiAoIWlucHV0U3RyaW5nKSB7XG4gICAgICAgICAgICBpbnB1dFN0cmluZyA9IHRoaXMuaXNVdGMoKSA/IGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgOiBob29rcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBvdXRwdXQgPSBmb3JtYXRNb21lbnQodGhpcywgaW5wdXRTdHJpbmcpO1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkucG9zdGZvcm1hdChvdXRwdXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb20gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHt0bzogdGhpcywgZnJvbTogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbShjcmVhdGVMb2NhbCgpLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0byAodGltZSwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiZcbiAgICAgICAgICAgICAgICAoKGlzTW9tZW50KHRpbWUpICYmIHRpbWUuaXNWYWxpZCgpKSB8fFxuICAgICAgICAgICAgICAgICBjcmVhdGVMb2NhbCh0aW1lKS5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oe2Zyb206IHRoaXMsIHRvOiB0aW1lfSkubG9jYWxlKHRoaXMubG9jYWxlKCkpLmh1bWFuaXplKCF3aXRob3V0U3VmZml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9Ob3cgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgLy8gSWYgcGFzc2VkIGEgbG9jYWxlIGtleSwgaXQgd2lsbCBzZXQgdGhlIGxvY2FsZSBmb3IgdGhpc1xuICAgIC8vIGluc3RhbmNlLiAgT3RoZXJ3aXNlLCBpdCB3aWxsIHJldHVybiB0aGUgbG9jYWxlIGNvbmZpZ3VyYXRpb25cbiAgICAvLyB2YXJpYWJsZXMgZm9yIHRoaXMgaW5zdGFuY2UuXG4gICAgZnVuY3Rpb24gbG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIG5ld0xvY2FsZURhdGE7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlLl9hYmJyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3TG9jYWxlRGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgaWYgKG5ld0xvY2FsZURhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvY2FsZSA9IG5ld0xvY2FsZURhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYW5nID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubGFuZygpIGlzIGRlcHJlY2F0ZWQuIEluc3RlYWQsIHVzZSBtb21lbnQoKS5sb2NhbGVEYXRhKCkgdG8gZ2V0IHRoZSBsYW5ndWFnZSBjb25maWd1cmF0aW9uLiBVc2UgbW9tZW50KCkubG9jYWxlKCkgdG8gY2hhbmdlIGxhbmd1YWdlcy4nLFxuICAgICAgICBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgKTtcblxuICAgIGZ1bmN0aW9uIGxvY2FsZURhdGEgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxlO1xuICAgIH1cblxuICAgIHZhciBNU19QRVJfU0VDT05EID0gMTAwMDtcbiAgICB2YXIgTVNfUEVSX01JTlVURSA9IDYwICogTVNfUEVSX1NFQ09ORDtcbiAgICB2YXIgTVNfUEVSX0hPVVIgPSA2MCAqIE1TX1BFUl9NSU5VVEU7XG4gICAgdmFyIE1TX1BFUl80MDBfWUVBUlMgPSAoMzY1ICogNDAwICsgOTcpICogMjQgKiBNU19QRVJfSE9VUjtcblxuICAgIC8vIGFjdHVhbCBtb2R1bG8gLSBoYW5kbGVzIG5lZ2F0aXZlIG51bWJlcnMgKGZvciBkYXRlcyBiZWZvcmUgMTk3MCk6XG4gICAgZnVuY3Rpb24gbW9kJDEoZGl2aWRlbmQsIGRpdmlzb3IpIHtcbiAgICAgICAgcmV0dXJuIChkaXZpZGVuZCAlIGRpdmlzb3IgKyBkaXZpc29yKSAlIGRpdmlzb3I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIHRoZSBkYXRlIGNvbnN0cnVjdG9yIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHksIG0sIGQpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHV0Y1N0YXJ0T2ZEYXRlKHksIG0sIGQpIHtcbiAgICAgICAgLy8gRGF0ZS5VVEMgcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIHJldHVybiBEYXRlLlVUQyh5ICsgNDAwLCBtLCBkKSAtIE1TX1BFUl80MDBfWUVBUlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSwgbSwgZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFydE9mICh1bml0cykge1xuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIGlmICh1bml0cyA9PT0gdW5kZWZpbmVkIHx8IHVuaXRzID09PSAnbWlsbGlzZWNvbmQnIHx8ICF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRPZkRhdGUgPSB0aGlzLl9pc1VUQyA/IHV0Y1N0YXJ0T2ZEYXRlIDogbG9jYWxTdGFydE9mRGF0ZTtcblxuICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgLSB0aGlzLm1vbnRoKCkgJSAzLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSB0aGlzLndlZWtkYXkoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2hvdXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLCBNU19QRVJfSE9VUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLl9kLnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICB0aW1lIC09IG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfU0VDT05EKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmRPZiAodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpICsgMSwgMCwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncXVhcnRlcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCkgLSB0aGlzLm1vbnRoKCkgJSAzICsgMywgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbW9udGgnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpICsgMSwgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkgKyA3KSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdpc29XZWVrJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgLSAodGhpcy5pc29XZWVrZGF5KCkgLSAxKSArIDcpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSwgdGhpcy5kYXRlKCkgKyAxKSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfSE9VUiAtIG1vZCQxKHRpbWUgKyAodGhpcy5faXNVVEMgPyAwIDogdGhpcy51dGNPZmZzZXQoKSAqIE1TX1BFUl9NSU5VVEUpLCBNU19QRVJfSE9VUikgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfTUlOVVRFIC0gbW9kJDEodGltZSwgTVNfUEVSX01JTlVURSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Vjb25kJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSArPSBNU19QRVJfU0VDT05EIC0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZC5zZXRUaW1lKHRpbWUpO1xuICAgICAgICBob29rcy51cGRhdGVPZmZzZXQodGhpcywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbHVlT2YgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZC52YWx1ZU9mKCkgLSAoKHRoaXMuX29mZnNldCB8fCAwKSAqIDYwMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bml4ICgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy52YWx1ZU9mKCkgLyAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0RhdGUgKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUodGhpcy52YWx1ZU9mKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQXJyYXkgKCkge1xuICAgICAgICB2YXIgbSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBbbS55ZWFyKCksIG0ubW9udGgoKSwgbS5kYXRlKCksIG0uaG91cigpLCBtLm1pbnV0ZSgpLCBtLnNlY29uZCgpLCBtLm1pbGxpc2Vjb25kKCldO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvT2JqZWN0ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IG0ueWVhcigpLFxuICAgICAgICAgICAgbW9udGhzOiBtLm1vbnRoKCksXG4gICAgICAgICAgICBkYXRlOiBtLmRhdGUoKSxcbiAgICAgICAgICAgIGhvdXJzOiBtLmhvdXJzKCksXG4gICAgICAgICAgICBtaW51dGVzOiBtLm1pbnV0ZXMoKSxcbiAgICAgICAgICAgIHNlY29uZHM6IG0uc2Vjb25kcygpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiBtLm1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICAgICAgLy8gbmV3IERhdGUoTmFOKS50b0pTT04oKSA9PT0gbnVsbFxuICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLnRvSVNPU3RyaW5nKCkgOiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVmFsaWQkMiAoKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNpbmdGbGFncyAoKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoe30sIGdldFBhcnNpbmdGbGFncyh0aGlzKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52YWxpZEF0ICgpIHtcbiAgICAgICAgcmV0dXJuIGdldFBhcnNpbmdGbGFncyh0aGlzKS5vdmVyZmxvdztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGlvbkRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDogdGhpcy5faSxcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5fZixcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxuICAgICAgICAgICAgaXNVVEM6IHRoaXMuX2lzVVRDLFxuICAgICAgICAgICAgc3RyaWN0OiB0aGlzLl9zdHJpY3RcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ2dnJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnR0cnLCAyXSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc29XZWVrWWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYWRkV2Vla1llYXJGb3JtYXRUb2tlbiAodG9rZW4sIGdldHRlcikge1xuICAgICAgICBhZGRGb3JtYXRUb2tlbigwLCBbdG9rZW4sIHRva2VuLmxlbmd0aF0sIDAsIGdldHRlcik7XG4gICAgfVxuXG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZycsICAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdnZ2dnZycsICAgICd3ZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0cnLCAgJ2lzb1dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignR0dHR0cnLCAnaXNvV2Vla1llYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnd2Vla1llYXInLCAnZ2cnKTtcbiAgICBhZGRVbml0QWxpYXMoJ2lzb1dlZWtZZWFyJywgJ0dHJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd3ZWVrWWVhcicsIDEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnaXNvV2Vla1llYXInLCAxKTtcblxuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRycsICAgICAgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdHRycsICAgICBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignZ2cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0cnLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0dHR0cnLCAgbWF0Y2gxdG82LCBtYXRjaDYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnZ2dnJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZ2dnZycsICdnZ2dnZycsICdHR0dHJywgJ0dHR0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuLnN1YnN0cigwLCAyKV0gPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnJywgJ0dHJ10sIGZ1bmN0aW9uIChpbnB1dCwgd2VlaywgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB3ZWVrW3Rva2VuXSA9IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFdlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICAgIHRoaXMud2VlaygpLFxuICAgICAgICAgICAgICAgIHRoaXMud2Vla2RheSgpLFxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrLmRvdyxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3kpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldElTT1dlZWtZZWFyIChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZ2V0U2V0V2Vla1llYXJIZWxwZXIuY2FsbCh0aGlzLFxuICAgICAgICAgICAgICAgIGlucHV0LCB0aGlzLmlzb1dlZWsoKSwgdGhpcy5pc29XZWVrZGF5KCksIDEsIDQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldElTT1dlZWtzSW5ZZWFyICgpIHtcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHZhciB3ZWVrSW5mbyA9IHRoaXMubG9jYWxlRGF0YSgpLl93ZWVrO1xuICAgICAgICByZXR1cm4gd2Vla3NJblllYXIodGhpcy55ZWFyKCksIHdlZWtJbmZvLmRvdywgd2Vla0luZm8uZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhckhlbHBlcihpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtzVGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIodGhpcywgZG93LCBkb3kpLnllYXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3ZWVrc1RhcmdldCA9IHdlZWtzSW5ZZWFyKGlucHV0LCBkb3csIGRveSk7XG4gICAgICAgICAgICBpZiAod2VlayA+IHdlZWtzVGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgd2VlayA9IHdlZWtzVGFyZ2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldFdlZWtBbGwuY2FsbCh0aGlzLCBpbnB1dCwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0V2Vla0FsbCh3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhckRhdGEgPSBkYXlPZlllYXJGcm9tV2Vla3Mod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSxcbiAgICAgICAgICAgIGRhdGUgPSBjcmVhdGVVVENEYXRlKGRheU9mWWVhckRhdGEueWVhciwgMCwgZGF5T2ZZZWFyRGF0YS5kYXlPZlllYXIpO1xuXG4gICAgICAgIHRoaXMueWVhcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpO1xuICAgICAgICB0aGlzLm1vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSk7XG4gICAgICAgIHRoaXMuZGF0ZShkYXRlLmdldFVUQ0RhdGUoKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdRJywgMCwgJ1FvJywgJ3F1YXJ0ZXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygncXVhcnRlcicsICdRJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdxdWFydGVyJywgNyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdRJywgbWF0Y2gxKTtcbiAgICBhZGRQYXJzZVRva2VuKCdRJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtNT05USF0gPSAodG9JbnQoaW5wdXQpIC0gMSkgKiAzO1xuICAgIH0pO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0UXVhcnRlciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBNYXRoLmNlaWwoKHRoaXMubW9udGgoKSArIDEpIC8gMykgOiB0aGlzLm1vbnRoKChpbnB1dCAtIDEpICogMyArIHRoaXMubW9udGgoKSAlIDMpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEJywgWydERCcsIDJdLCAnRG8nLCAnZGF0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdkYXRlJywgJ0QnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXRlJywgOSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdEJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignREQnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignRG8nLCBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHJldHVybiBpc1N0cmljdCA/XG4gICAgICAgICAgKGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZSB8fCBsb2NhbGUuX29yZGluYWxQYXJzZSkgOlxuICAgICAgICAgIGxvY2FsZS5fZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQ7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnRCcsICdERCddLCBEQVRFKTtcbiAgICBhZGRQYXJzZVRva2VuKCdEbycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbREFURV0gPSB0b0ludChpbnB1dC5tYXRjaChtYXRjaDF0bzIpWzBdKTtcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXREYXlPZk1vbnRoID0gbWFrZUdldFNldCgnRGF0ZScsIHRydWUpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0RERCcsIFsnRERERCcsIDNdLCAnREREbycsICdkYXlPZlllYXInKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5T2ZZZWFyJywgJ0RERCcpO1xuXG4gICAgLy8gUFJJT1JJVFlcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2RheU9mWWVhcicsIDQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignREREJywgIG1hdGNoMXRvMyk7XG4gICAgYWRkUmVnZXhUb2tlbignRERERCcsIG1hdGNoMyk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ0RERCcsICdEREREJ10sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRvSW50KGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldERheU9mWWVhciAoaW5wdXQpIHtcbiAgICAgICAgdmFyIGRheU9mWWVhciA9IE1hdGgucm91bmQoKHRoaXMuY2xvbmUoKS5zdGFydE9mKCdkYXknKSAtIHRoaXMuY2xvbmUoKS5zdGFydE9mKCd5ZWFyJykpIC8gODY0ZTUpICsgMTtcbiAgICAgICAgcmV0dXJuIGlucHV0ID09IG51bGwgPyBkYXlPZlllYXIgOiB0aGlzLmFkZCgoaW5wdXQgLSBkYXlPZlllYXIpLCAnZCcpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdtJywgWydtbScsIDJdLCAwLCAnbWludXRlJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbnV0ZScsICdtJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaW51dGUnLCAxNCk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdtJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignbW0nLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ20nLCAnbW0nXSwgTUlOVVRFKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRNaW51dGUgPSBtYWtlR2V0U2V0KCdNaW51dGVzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3MnLCBbJ3NzJywgMl0sIDAsICdzZWNvbmQnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnc2Vjb25kJywgJ3MnKTtcblxuICAgIC8vIFBSSU9SSVRZXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3NlY29uZCcsIDE1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3MnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdzcycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRQYXJzZVRva2VuKFsncycsICdzcyddLCBTRUNPTkQpO1xuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldFNlY29uZCA9IG1ha2VHZXRTZXQoJ1NlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUycsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIH5+KHRoaXMubWlsbGlzZWNvbmQoKSAvIDEwKTtcbiAgICB9KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTJywgM10sIDAsICdtaWxsaXNlY29uZCcpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTUycsIDRdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTJywgNV0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTUycsIDZdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwO1xuICAgIH0pO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnU1NTU1NTUycsIDddLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTJywgOF0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWlsbGlzZWNvbmQoKSAqIDEwMDAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1NTUycsIDldLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDAwO1xuICAgIH0pO1xuXG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ21pbGxpc2Vjb25kJywgJ21zJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtaWxsaXNlY29uZCcsIDE2KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ1MnLCAgICBtYXRjaDF0bzMsIG1hdGNoMSk7XG4gICAgYWRkUmVnZXhUb2tlbignU1MnLCAgIG1hdGNoMXRvMywgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdTU1MnLCAgbWF0Y2gxdG8zLCBtYXRjaDMpO1xuXG4gICAgdmFyIHRva2VuO1xuICAgIGZvciAodG9rZW4gPSAnU1NTUyc7IHRva2VuLmxlbmd0aCA8PSA5OyB0b2tlbiArPSAnUycpIHtcbiAgICAgICAgYWRkUmVnZXhUb2tlbih0b2tlbiwgbWF0Y2hVbnNpZ25lZCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VNcyhpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTUlMTElTRUNPTkRdID0gdG9JbnQoKCcwLicgKyBpbnB1dCkgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmb3IgKHRva2VuID0gJ1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIHBhcnNlTXMpO1xuICAgIH1cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWlsbGlzZWNvbmQgPSBtYWtlR2V0U2V0KCdNaWxsaXNlY29uZHMnLCBmYWxzZSk7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbigneicsICAwLCAwLCAnem9uZUFiYnInKTtcbiAgICBhZGRGb3JtYXRUb2tlbignenonLCAwLCAwLCAnem9uZU5hbWUnKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFpvbmVBYmJyICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzVVRDID8gJ1VUQycgOiAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRab25lTmFtZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdDb29yZGluYXRlZCBVbml2ZXJzYWwgVGltZScgOiAnJztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8gPSBNb21lbnQucHJvdG90eXBlO1xuXG4gICAgcHJvdG8uYWRkICAgICAgICAgICAgICAgPSBhZGQ7XG4gICAgcHJvdG8uY2FsZW5kYXIgICAgICAgICAgPSBjYWxlbmRhciQxO1xuICAgIHByb3RvLmNsb25lICAgICAgICAgICAgID0gY2xvbmU7XG4gICAgcHJvdG8uZGlmZiAgICAgICAgICAgICAgPSBkaWZmO1xuICAgIHByb3RvLmVuZE9mICAgICAgICAgICAgID0gZW5kT2Y7XG4gICAgcHJvdG8uZm9ybWF0ICAgICAgICAgICAgPSBmb3JtYXQ7XG4gICAgcHJvdG8uZnJvbSAgICAgICAgICAgICAgPSBmcm9tO1xuICAgIHByb3RvLmZyb21Ob3cgICAgICAgICAgID0gZnJvbU5vdztcbiAgICBwcm90by50byAgICAgICAgICAgICAgICA9IHRvO1xuICAgIHByb3RvLnRvTm93ICAgICAgICAgICAgID0gdG9Ob3c7XG4gICAgcHJvdG8uZ2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdHZXQ7XG4gICAgcHJvdG8uaW52YWxpZEF0ICAgICAgICAgPSBpbnZhbGlkQXQ7XG4gICAgcHJvdG8uaXNBZnRlciAgICAgICAgICAgPSBpc0FmdGVyO1xuICAgIHByb3RvLmlzQmVmb3JlICAgICAgICAgID0gaXNCZWZvcmU7XG4gICAgcHJvdG8uaXNCZXR3ZWVuICAgICAgICAgPSBpc0JldHdlZW47XG4gICAgcHJvdG8uaXNTYW1lICAgICAgICAgICAgPSBpc1NhbWU7XG4gICAgcHJvdG8uaXNTYW1lT3JBZnRlciAgICAgPSBpc1NhbWVPckFmdGVyO1xuICAgIHByb3RvLmlzU2FtZU9yQmVmb3JlICAgID0gaXNTYW1lT3JCZWZvcmU7XG4gICAgcHJvdG8uaXNWYWxpZCAgICAgICAgICAgPSBpc1ZhbGlkJDI7XG4gICAgcHJvdG8ubGFuZyAgICAgICAgICAgICAgPSBsYW5nO1xuICAgIHByb3RvLmxvY2FsZSAgICAgICAgICAgID0gbG9jYWxlO1xuICAgIHByb3RvLmxvY2FsZURhdGEgICAgICAgID0gbG9jYWxlRGF0YTtcbiAgICBwcm90by5tYXggICAgICAgICAgICAgICA9IHByb3RvdHlwZU1heDtcbiAgICBwcm90by5taW4gICAgICAgICAgICAgICA9IHByb3RvdHlwZU1pbjtcbiAgICBwcm90by5wYXJzaW5nRmxhZ3MgICAgICA9IHBhcnNpbmdGbGFncztcbiAgICBwcm90by5zZXQgICAgICAgICAgICAgICA9IHN0cmluZ1NldDtcbiAgICBwcm90by5zdGFydE9mICAgICAgICAgICA9IHN0YXJ0T2Y7XG4gICAgcHJvdG8uc3VidHJhY3QgICAgICAgICAgPSBzdWJ0cmFjdDtcbiAgICBwcm90by50b0FycmF5ICAgICAgICAgICA9IHRvQXJyYXk7XG4gICAgcHJvdG8udG9PYmplY3QgICAgICAgICAgPSB0b09iamVjdDtcbiAgICBwcm90by50b0RhdGUgICAgICAgICAgICA9IHRvRGF0ZTtcbiAgICBwcm90by50b0lTT1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nO1xuICAgIHByb3RvLmluc3BlY3QgICAgICAgICAgID0gaW5zcGVjdDtcbiAgICBwcm90by50b0pTT04gICAgICAgICAgICA9IHRvSlNPTjtcbiAgICBwcm90by50b1N0cmluZyAgICAgICAgICA9IHRvU3RyaW5nO1xuICAgIHByb3RvLnVuaXggICAgICAgICAgICAgID0gdW5peDtcbiAgICBwcm90by52YWx1ZU9mICAgICAgICAgICA9IHZhbHVlT2Y7XG4gICAgcHJvdG8uY3JlYXRpb25EYXRhICAgICAgPSBjcmVhdGlvbkRhdGE7XG4gICAgcHJvdG8ueWVhciAgICAgICA9IGdldFNldFllYXI7XG4gICAgcHJvdG8uaXNMZWFwWWVhciA9IGdldElzTGVhcFllYXI7XG4gICAgcHJvdG8ud2Vla1llYXIgICAgPSBnZXRTZXRXZWVrWWVhcjtcbiAgICBwcm90by5pc29XZWVrWWVhciA9IGdldFNldElTT1dlZWtZZWFyO1xuICAgIHByb3RvLnF1YXJ0ZXIgPSBwcm90by5xdWFydGVycyA9IGdldFNldFF1YXJ0ZXI7XG4gICAgcHJvdG8ubW9udGggICAgICAgPSBnZXRTZXRNb250aDtcbiAgICBwcm90by5kYXlzSW5Nb250aCA9IGdldERheXNJbk1vbnRoO1xuICAgIHByb3RvLndlZWsgICAgICAgICAgID0gcHJvdG8ud2Vla3MgICAgICAgID0gZ2V0U2V0V2VlaztcbiAgICBwcm90by5pc29XZWVrICAgICAgICA9IHByb3RvLmlzb1dlZWtzICAgICA9IGdldFNldElTT1dlZWs7XG4gICAgcHJvdG8ud2Vla3NJblllYXIgICAgPSBnZXRXZWVrc0luWWVhcjtcbiAgICBwcm90by5pc29XZWVrc0luWWVhciA9IGdldElTT1dlZWtzSW5ZZWFyO1xuICAgIHByb3RvLmRhdGUgICAgICAgPSBnZXRTZXREYXlPZk1vbnRoO1xuICAgIHByb3RvLmRheSAgICAgICAgPSBwcm90by5kYXlzICAgICAgICAgICAgID0gZ2V0U2V0RGF5T2ZXZWVrO1xuICAgIHByb3RvLndlZWtkYXkgICAgPSBnZXRTZXRMb2NhbGVEYXlPZldlZWs7XG4gICAgcHJvdG8uaXNvV2Vla2RheSA9IGdldFNldElTT0RheU9mV2VlaztcbiAgICBwcm90by5kYXlPZlllYXIgID0gZ2V0U2V0RGF5T2ZZZWFyO1xuICAgIHByb3RvLmhvdXIgPSBwcm90by5ob3VycyA9IGdldFNldEhvdXI7XG4gICAgcHJvdG8ubWludXRlID0gcHJvdG8ubWludXRlcyA9IGdldFNldE1pbnV0ZTtcbiAgICBwcm90by5zZWNvbmQgPSBwcm90by5zZWNvbmRzID0gZ2V0U2V0U2Vjb25kO1xuICAgIHByb3RvLm1pbGxpc2Vjb25kID0gcHJvdG8ubWlsbGlzZWNvbmRzID0gZ2V0U2V0TWlsbGlzZWNvbmQ7XG4gICAgcHJvdG8udXRjT2Zmc2V0ICAgICAgICAgICAgPSBnZXRTZXRPZmZzZXQ7XG4gICAgcHJvdG8udXRjICAgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1VUQztcbiAgICBwcm90by5sb2NhbCAgICAgICAgICAgICAgICA9IHNldE9mZnNldFRvTG9jYWw7XG4gICAgcHJvdG8ucGFyc2Vab25lICAgICAgICAgICAgPSBzZXRPZmZzZXRUb1BhcnNlZE9mZnNldDtcbiAgICBwcm90by5oYXNBbGlnbmVkSG91ck9mZnNldCA9IGhhc0FsaWduZWRIb3VyT2Zmc2V0O1xuICAgIHByb3RvLmlzRFNUICAgICAgICAgICAgICAgID0gaXNEYXlsaWdodFNhdmluZ1RpbWU7XG4gICAgcHJvdG8uaXNMb2NhbCAgICAgICAgICAgICAgPSBpc0xvY2FsO1xuICAgIHByb3RvLmlzVXRjT2Zmc2V0ICAgICAgICAgID0gaXNVdGNPZmZzZXQ7XG4gICAgcHJvdG8uaXNVdGMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by5pc1VUQyAgICAgICAgICAgICAgICA9IGlzVXRjO1xuICAgIHByb3RvLnpvbmVBYmJyID0gZ2V0Wm9uZUFiYnI7XG4gICAgcHJvdG8uem9uZU5hbWUgPSBnZXRab25lTmFtZTtcbiAgICBwcm90by5kYXRlcyAgPSBkZXByZWNhdGUoJ2RhdGVzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBkYXRlIGluc3RlYWQuJywgZ2V0U2V0RGF5T2ZNb250aCk7XG4gICAgcHJvdG8ubW9udGhzID0gZGVwcmVjYXRlKCdtb250aHMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbnRoIGluc3RlYWQnLCBnZXRTZXRNb250aCk7XG4gICAgcHJvdG8ueWVhcnMgID0gZGVwcmVjYXRlKCd5ZWFycyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgeWVhciBpbnN0ZWFkJywgZ2V0U2V0WWVhcik7XG4gICAgcHJvdG8uem9uZSAgID0gZGVwcmVjYXRlKCdtb21lbnQoKS56b25lIGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQoKS51dGNPZmZzZXQgaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy96b25lLycsIGdldFNldFpvbmUpO1xuICAgIHByb3RvLmlzRFNUU2hpZnRlZCA9IGRlcHJlY2F0ZSgnaXNEU1RTaGlmdGVkIGlzIGRlcHJlY2F0ZWQuIFNlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RzdC1zaGlmdGVkLyBmb3IgbW9yZSBpbmZvcm1hdGlvbicsIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVbml4IChpbnB1dCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwoaW5wdXQgKiAxMDAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJblpvbmUgKCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5wYXJzZVpvbmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVQYXJzZVBvc3RGb3JtYXQgKHN0cmluZykge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgIH1cblxuICAgIHZhciBwcm90byQxID0gTG9jYWxlLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDEuY2FsZW5kYXIgICAgICAgID0gY2FsZW5kYXI7XG4gICAgcHJvdG8kMS5sb25nRGF0ZUZvcm1hdCAgPSBsb25nRGF0ZUZvcm1hdDtcbiAgICBwcm90byQxLmludmFsaWREYXRlICAgICA9IGludmFsaWREYXRlO1xuICAgIHByb3RvJDEub3JkaW5hbCAgICAgICAgID0gb3JkaW5hbDtcbiAgICBwcm90byQxLnByZXBhcnNlICAgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnBvc3Rmb3JtYXQgICAgICA9IHByZVBhcnNlUG9zdEZvcm1hdDtcbiAgICBwcm90byQxLnJlbGF0aXZlVGltZSAgICA9IHJlbGF0aXZlVGltZTtcbiAgICBwcm90byQxLnBhc3RGdXR1cmUgICAgICA9IHBhc3RGdXR1cmU7XG4gICAgcHJvdG8kMS5zZXQgICAgICAgICAgICAgPSBzZXQ7XG5cbiAgICBwcm90byQxLm1vbnRocyAgICAgICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRocztcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0ICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1Nob3J0O1xuICAgIHByb3RvJDEubW9udGhzUGFyc2UgICAgICAgPSAgICAgICAgbG9jYWxlTW9udGhzUGFyc2U7XG4gICAgcHJvdG8kMS5tb250aHNSZWdleCAgICAgICA9IG1vbnRoc1JlZ2V4O1xuICAgIHByb3RvJDEubW9udGhzU2hvcnRSZWdleCAgPSBtb250aHNTaG9ydFJlZ2V4O1xuICAgIHByb3RvJDEud2VlayA9IGxvY2FsZVdlZWs7XG4gICAgcHJvdG8kMS5maXJzdERheU9mWWVhciA9IGxvY2FsZUZpcnN0RGF5T2ZZZWFyO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZldlZWsgPSBsb2NhbGVGaXJzdERheU9mV2VlaztcblxuICAgIHByb3RvJDEud2Vla2RheXMgICAgICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXM7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pbiAgICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c01pbjtcbiAgICBwcm90byQxLndlZWtkYXlzU2hvcnQgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzU2hvcnQ7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1BhcnNlICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1BhcnNlO1xuXG4gICAgcHJvdG8kMS53ZWVrZGF5c1JlZ2V4ICAgICAgID0gICAgICAgIHdlZWtkYXlzUmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0UmVnZXggID0gICAgICAgIHdlZWtkYXlzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWtkYXlzTWluUmVnZXggICAgPSAgICAgICAgd2Vla2RheXNNaW5SZWdleDtcblxuICAgIHByb3RvJDEuaXNQTSA9IGxvY2FsZUlzUE07XG4gICAgcHJvdG8kMS5tZXJpZGllbSA9IGxvY2FsZU1lcmlkaWVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0JDEgKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCBzZXR0ZXIpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpO1xuICAgICAgICB2YXIgdXRjID0gY3JlYXRlVVRDKCkuc2V0KHNldHRlciwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gbG9jYWxlW2ZpZWxkXSh1dGMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRoc0ltcGwgKGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgaW5kZXgsIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIGksIGZpZWxkLCAnbW9udGgnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8vICgpXG4gICAgLy8gKDUpXG4gICAgLy8gKGZtdCwgNSlcbiAgICAvLyAoZm10KVxuICAgIC8vICh0cnVlKVxuICAgIC8vICh0cnVlLCA1KVxuICAgIC8vICh0cnVlLCBmbXQsIDUpXG4gICAgLy8gKHRydWUsIGZtdClcbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNJbXBsIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsIGZpZWxkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxlU29ydGVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGlmIChpc051bWJlcihmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3JtYXQgPSBsb2NhbGVTb3J0ZWQ7XG4gICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgIGxvY2FsZVNvcnRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IGdldExvY2FsZSgpLFxuICAgICAgICAgICAgc2hpZnQgPSBsb2NhbGVTb3J0ZWQgPyBsb2NhbGUuX3dlZWsuZG93IDogMDtcblxuICAgICAgICBpZiAoaW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldCQxKGZvcm1hdCwgKGluZGV4ICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgb3V0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIG91dFtpXSA9IGdldCQxKGZvcm1hdCwgKGkgKyBzaGlmdCkgJSA3LCBmaWVsZCwgJ2RheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdE1vbnRocyAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRocycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNTaG9ydCAoZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdE1vbnRoc0ltcGwoZm9ybWF0LCBpbmRleCwgJ21vbnRoc1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNTaG9ydCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzU2hvcnQnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0V2Vla2RheXNNaW4gKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c01pbicpO1xuICAgIH1cblxuICAgIGdldFNldEdsb2JhbExvY2FsZSgnZW4nLCB7XG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSh0aHxzdHxuZHxyZCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAodG9JbnQobnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG4gICAgaG9va3MubGFuZyA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmcgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGUgaW5zdGVhZC4nLCBnZXRTZXRHbG9iYWxMb2NhbGUpO1xuICAgIGhvb2tzLmxhbmdEYXRhID0gZGVwcmVjYXRlKCdtb21lbnQubGFuZ0RhdGEgaXMgZGVwcmVjYXRlZC4gVXNlIG1vbWVudC5sb2NhbGVEYXRhIGluc3RlYWQuJywgZ2V0TG9jYWxlKTtcblxuICAgIHZhciBtYXRoQWJzID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBhYnMgKCkge1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgICAgPSB0aGlzLl9kYXRhO1xuXG4gICAgICAgIHRoaXMuX21pbGxpc2Vjb25kcyA9IG1hdGhBYnModGhpcy5fbWlsbGlzZWNvbmRzKTtcbiAgICAgICAgdGhpcy5fZGF5cyAgICAgICAgID0gbWF0aEFicyh0aGlzLl9kYXlzKTtcbiAgICAgICAgdGhpcy5fbW9udGhzICAgICAgID0gbWF0aEFicyh0aGlzLl9tb250aHMpO1xuXG4gICAgICAgIGRhdGEubWlsbGlzZWNvbmRzICA9IG1hdGhBYnMoZGF0YS5taWxsaXNlY29uZHMpO1xuICAgICAgICBkYXRhLnNlY29uZHMgICAgICAgPSBtYXRoQWJzKGRhdGEuc2Vjb25kcyk7XG4gICAgICAgIGRhdGEubWludXRlcyAgICAgICA9IG1hdGhBYnMoZGF0YS5taW51dGVzKTtcbiAgICAgICAgZGF0YS5ob3VycyAgICAgICAgID0gbWF0aEFicyhkYXRhLmhvdXJzKTtcbiAgICAgICAgZGF0YS5tb250aHMgICAgICAgID0gbWF0aEFicyhkYXRhLm1vbnRocyk7XG4gICAgICAgIGRhdGEueWVhcnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS55ZWFycyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QkMSAoZHVyYXRpb24sIGlucHV0LCB2YWx1ZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUR1cmF0aW9uKGlucHV0LCB2YWx1ZSk7XG5cbiAgICAgICAgZHVyYXRpb24uX21pbGxpc2Vjb25kcyArPSBkaXJlY3Rpb24gKiBvdGhlci5fbWlsbGlzZWNvbmRzO1xuICAgICAgICBkdXJhdGlvbi5fZGF5cyAgICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9kYXlzO1xuICAgICAgICBkdXJhdGlvbi5fbW9udGhzICAgICAgICs9IGRpcmVjdGlvbiAqIG90aGVyLl9tb250aHM7XG5cbiAgICAgICAgcmV0dXJuIGR1cmF0aW9uLl9idWJibGUoKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBhZGQoMSwgJ3MnKSBvciBhZGQoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gYWRkJDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIDEpO1xuICAgIH1cblxuICAgIC8vIHN1cHBvcnRzIG9ubHkgMi4wLXN0eWxlIHN1YnRyYWN0KDEsICdzJykgb3Igc3VidHJhY3QoZHVyYXRpb24pXG4gICAgZnVuY3Rpb24gc3VidHJhY3QkMSAoaW5wdXQsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBhZGRTdWJ0cmFjdCQxKHRoaXMsIGlucHV0LCB2YWx1ZSwgLTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFic0NlaWwgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IobnVtYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1YmJsZSAoKSB7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG4gICAgICAgIHZhciBkYXlzICAgICAgICAgPSB0aGlzLl9kYXlzO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gdGhpcy5fbW9udGhzO1xuICAgICAgICB2YXIgZGF0YSAgICAgICAgID0gdGhpcy5fZGF0YTtcbiAgICAgICAgdmFyIHNlY29uZHMsIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycywgbW9udGhzRnJvbURheXM7XG5cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1peCBvZiBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmFsdWVzLCBidWJibGUgZG93biBmaXJzdFxuICAgICAgICAvLyBjaGVjazogaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzIxNjZcbiAgICAgICAgaWYgKCEoKG1pbGxpc2Vjb25kcyA+PSAwICYmIGRheXMgPj0gMCAmJiBtb250aHMgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAobWlsbGlzZWNvbmRzIDw9IDAgJiYgZGF5cyA8PSAwICYmIG1vbnRocyA8PSAwKSkpIHtcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kcyArPSBhYnNDZWlsKG1vbnRoc1RvRGF5cyhtb250aHMpICsgZGF5cykgKiA4NjRlNTtcbiAgICAgICAgICAgIGRheXMgPSAwO1xuICAgICAgICAgICAgbW9udGhzID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBidWJibGVzIHVwIHZhbHVlcywgc2VlIHRoZSB0ZXN0cyBmb3JcbiAgICAgICAgLy8gZXhhbXBsZXMgb2Ygd2hhdCB0aGF0IG1lYW5zLlxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyA9IG1pbGxpc2Vjb25kcyAlIDEwMDA7XG5cbiAgICAgICAgc2Vjb25kcyAgICAgICAgICAgPSBhYnNGbG9vcihtaWxsaXNlY29uZHMgLyAxMDAwKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgPSBzZWNvbmRzICUgNjA7XG5cbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICA9IG1pbnV0ZXMgJSA2MDtcblxuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgID0gaG91cnMgJSAyNDtcblxuICAgICAgICBkYXlzICs9IGFic0Zsb29yKGhvdXJzIC8gMjQpO1xuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF5cyB0byBtb250aHNcbiAgICAgICAgbW9udGhzRnJvbURheXMgPSBhYnNGbG9vcihkYXlzVG9Nb250aHMoZGF5cykpO1xuICAgICAgICBtb250aHMgKz0gbW9udGhzRnJvbURheXM7XG4gICAgICAgIGRheXMgLT0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzRnJvbURheXMpKTtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzID0gYWJzRmxvb3IobW9udGhzIC8gMTIpO1xuICAgICAgICBtb250aHMgJT0gMTI7XG5cbiAgICAgICAgZGF0YS5kYXlzICAgPSBkYXlzO1xuICAgICAgICBkYXRhLm1vbnRocyA9IG1vbnRocztcbiAgICAgICAgZGF0YS55ZWFycyAgPSB5ZWFycztcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlzVG9Nb250aHMgKGRheXMpIHtcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTQ2MDk3IGRheXMgKHRha2luZyBpbnRvIGFjY291bnQgbGVhcCB5ZWFyIHJ1bGVzKVxuICAgICAgICAvLyA0MDAgeWVhcnMgaGF2ZSAxMiBtb250aHMgPT09IDQ4MDBcbiAgICAgICAgcmV0dXJuIGRheXMgKiA0ODAwIC8gMTQ2MDk3O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vbnRoc1RvRGF5cyAobW9udGhzKSB7XG4gICAgICAgIC8vIHRoZSByZXZlcnNlIG9mIGRheXNUb01vbnRoc1xuICAgICAgICByZXR1cm4gbW9udGhzICogMTQ2MDk3IC8gNDgwMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcyAodW5pdHMpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF5cztcbiAgICAgICAgdmFyIG1vbnRocztcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IHRoaXMuX21pbGxpc2Vjb25kcztcblxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcblxuICAgICAgICBpZiAodW5pdHMgPT09ICdtb250aCcgfHwgdW5pdHMgPT09ICdxdWFydGVyJyB8fCB1bml0cyA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICBkYXlzID0gdGhpcy5fZGF5cyArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgbW9udGhzID0gdGhpcy5fbW9udGhzICsgZGF5c1RvTW9udGhzKGRheXMpO1xuICAgICAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vbnRoJzogICByZXR1cm4gbW9udGhzO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOiByZXR1cm4gbW9udGhzIC8gMztcbiAgICAgICAgICAgICAgICBjYXNlICd5ZWFyJzogICAgcmV0dXJuIG1vbnRocyAvIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG1pbGxpc2Vjb25kcyBzZXBhcmF0ZWx5IGJlY2F1c2Ugb2YgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgKGlzc3VlICMxODY3KVxuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBNYXRoLnJvdW5kKG1vbnRoc1RvRGF5cyh0aGlzLl9tb250aHMpKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd3ZWVrJyAgIDogcmV0dXJuIGRheXMgLyA3ICAgICArIG1pbGxpc2Vjb25kcyAvIDYwNDhlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdkYXknICAgIDogcmV0dXJuIGRheXMgICAgICAgICArIG1pbGxpc2Vjb25kcyAvIDg2NGU1O1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hvdXInICAgOiByZXR1cm4gZGF5cyAqIDI0ICAgICsgbWlsbGlzZWNvbmRzIC8gMzZlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdtaW51dGUnIDogcmV0dXJuIGRheXMgKiAxNDQwICArIG1pbGxpc2Vjb25kcyAvIDZlNDtcbiAgICAgICAgICAgICAgICBjYXNlICdzZWNvbmQnIDogcmV0dXJuIGRheXMgKiA4NjQwMCArIG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICAgICAgICAgICAgLy8gTWF0aC5mbG9vciBwcmV2ZW50cyBmbG9hdGluZyBwb2ludCBtYXRoIGVycm9ycyBoZXJlXG4gICAgICAgICAgICAgICAgY2FzZSAnbWlsbGlzZWNvbmQnOiByZXR1cm4gTWF0aC5mbG9vcihkYXlzICogODY0ZTUpICsgbWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcignVW5rbm93biB1bml0ICcgKyB1bml0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBVc2UgdGhpcy5hcygnbXMnKT9cbiAgICBmdW5jdGlvbiB2YWx1ZU9mJDEgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgK1xuICAgICAgICAgICAgdGhpcy5fZGF5cyAqIDg2NGU1ICtcbiAgICAgICAgICAgICh0aGlzLl9tb250aHMgJSAxMikgKiAyNTkyZTYgK1xuICAgICAgICAgICAgdG9JbnQodGhpcy5fbW9udGhzIC8gMTIpICogMzE1MzZlNlxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VBcyAoYWxpYXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFzKGFsaWFzKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgYXNNaWxsaXNlY29uZHMgPSBtYWtlQXMoJ21zJyk7XG4gICAgdmFyIGFzU2Vjb25kcyAgICAgID0gbWFrZUFzKCdzJyk7XG4gICAgdmFyIGFzTWludXRlcyAgICAgID0gbWFrZUFzKCdtJyk7XG4gICAgdmFyIGFzSG91cnMgICAgICAgID0gbWFrZUFzKCdoJyk7XG4gICAgdmFyIGFzRGF5cyAgICAgICAgID0gbWFrZUFzKCdkJyk7XG4gICAgdmFyIGFzV2Vla3MgICAgICAgID0gbWFrZUFzKCd3Jyk7XG4gICAgdmFyIGFzTW9udGhzICAgICAgID0gbWFrZUFzKCdNJyk7XG4gICAgdmFyIGFzUXVhcnRlcnMgICAgID0gbWFrZUFzKCdRJyk7XG4gICAgdmFyIGFzWWVhcnMgICAgICAgID0gbWFrZUFzKCd5Jyk7XG5cbiAgICBmdW5jdGlvbiBjbG9uZSQxICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldCQyICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpc1t1bml0cyArICdzJ10oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlR2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2RhdGFbbmFtZV0gOiBOYU47XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IG1ha2VHZXR0ZXIoJ21pbGxpc2Vjb25kcycpO1xuICAgIHZhciBzZWNvbmRzICAgICAgPSBtYWtlR2V0dGVyKCdzZWNvbmRzJyk7XG4gICAgdmFyIG1pbnV0ZXMgICAgICA9IG1ha2VHZXR0ZXIoJ21pbnV0ZXMnKTtcbiAgICB2YXIgaG91cnMgICAgICAgID0gbWFrZUdldHRlcignaG91cnMnKTtcbiAgICB2YXIgZGF5cyAgICAgICAgID0gbWFrZUdldHRlcignZGF5cycpO1xuICAgIHZhciBtb250aHMgICAgICAgPSBtYWtlR2V0dGVyKCdtb250aHMnKTtcbiAgICB2YXIgeWVhcnMgICAgICAgID0gbWFrZUdldHRlcigneWVhcnMnKTtcblxuICAgIGZ1bmN0aW9uIHdlZWtzICgpIHtcbiAgICAgICAgcmV0dXJuIGFic0Zsb29yKHRoaXMuZGF5cygpIC8gNyk7XG4gICAgfVxuXG4gICAgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDtcbiAgICB2YXIgdGhyZXNob2xkcyA9IHtcbiAgICAgICAgc3M6IDQ0LCAgICAgICAgIC8vIGEgZmV3IHNlY29uZHMgdG8gc2Vjb25kc1xuICAgICAgICBzIDogNDUsICAgICAgICAgLy8gc2Vjb25kcyB0byBtaW51dGVcbiAgICAgICAgbSA6IDQ1LCAgICAgICAgIC8vIG1pbnV0ZXMgdG8gaG91clxuICAgICAgICBoIDogMjIsICAgICAgICAgLy8gaG91cnMgdG8gZGF5XG4gICAgICAgIGQgOiAyNiwgICAgICAgICAvLyBkYXlzIHRvIG1vbnRoXG4gICAgICAgIE0gOiAxMSAgICAgICAgICAvLyBtb250aHMgdG8geWVhclxuICAgIH07XG5cbiAgICAvLyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1vbWVudC5mbi5mcm9tLCBtb21lbnQuZm4uZnJvbU5vdywgYW5kIG1vbWVudC5kdXJhdGlvbi5mbi5odW1hbml6ZVxuICAgIGZ1bmN0aW9uIHN1YnN0aXR1dGVUaW1lQWdvKHN0cmluZywgbnVtYmVyLCB3aXRob3V0U3VmZml4LCBpc0Z1dHVyZSwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUucmVsYXRpdmVUaW1lKG51bWJlciB8fCAxLCAhIXdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSQxIChwb3NOZWdEdXJhdGlvbiwgd2l0aG91dFN1ZmZpeCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IGNyZWF0ZUR1cmF0aW9uKHBvc05lZ0R1cmF0aW9uKS5hYnMoKTtcbiAgICAgICAgdmFyIHNlY29uZHMgID0gcm91bmQoZHVyYXRpb24uYXMoJ3MnKSk7XG4gICAgICAgIHZhciBtaW51dGVzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdtJykpO1xuICAgICAgICB2YXIgaG91cnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygnaCcpKTtcbiAgICAgICAgdmFyIGRheXMgICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2QnKSk7XG4gICAgICAgIHZhciBtb250aHMgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdNJykpO1xuICAgICAgICB2YXIgeWVhcnMgICAgPSByb3VuZChkdXJhdGlvbi5hcygneScpKTtcblxuICAgICAgICB2YXIgYSA9IHNlY29uZHMgPD0gdGhyZXNob2xkcy5zcyAmJiBbJ3MnLCBzZWNvbmRzXSAgfHxcbiAgICAgICAgICAgICAgICBzZWNvbmRzIDwgdGhyZXNob2xkcy5zICAgJiYgWydzcycsIHNlY29uZHNdIHx8XG4gICAgICAgICAgICAgICAgbWludXRlcyA8PSAxICAgICAgICAgICAgICYmIFsnbSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPCB0aHJlc2hvbGRzLm0gICAmJiBbJ21tJywgbWludXRlc10gfHxcbiAgICAgICAgICAgICAgICBob3VycyAgIDw9IDEgICAgICAgICAgICAgJiYgWydoJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8IHRocmVzaG9sZHMuaCAgICYmIFsnaGgnLCBob3Vyc10gICB8fFxuICAgICAgICAgICAgICAgIGRheXMgICAgPD0gMSAgICAgICAgICAgICAmJiBbJ2QnXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDwgdGhyZXNob2xkcy5kICAgJiYgWydkZCcsIGRheXNdICAgIHx8XG4gICAgICAgICAgICAgICAgbW9udGhzICA8PSAxICAgICAgICAgICAgICYmIFsnTSddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPCB0aHJlc2hvbGRzLk0gICAmJiBbJ01NJywgbW9udGhzXSAgfHxcbiAgICAgICAgICAgICAgICB5ZWFycyAgIDw9IDEgICAgICAgICAgICAgJiYgWyd5J10gICAgICAgICAgIHx8IFsneXknLCB5ZWFyc107XG5cbiAgICAgICAgYVsyXSA9IHdpdGhvdXRTdWZmaXg7XG4gICAgICAgIGFbM10gPSArcG9zTmVnRHVyYXRpb24gPiAwO1xuICAgICAgICBhWzRdID0gbG9jYWxlO1xuICAgICAgICByZXR1cm4gc3Vic3RpdHV0ZVRpbWVBZ28uYXBwbHkobnVsbCwgYSk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCB0aGUgcm91bmRpbmcgZnVuY3Rpb24gZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVJvdW5kaW5nIChyb3VuZGluZ0Z1bmN0aW9uKSB7XG4gICAgICAgIGlmIChyb3VuZGluZ0Z1bmN0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mKHJvdW5kaW5nRnVuY3Rpb24pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByb3VuZCA9IHJvdW5kaW5nRnVuY3Rpb247XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBhbGxvd3MgeW91IHRvIHNldCBhIHRocmVzaG9sZCBmb3IgcmVsYXRpdmUgdGltZSBzdHJpbmdzXG4gICAgZnVuY3Rpb24gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkICh0aHJlc2hvbGQsIGxpbWl0KSB7XG4gICAgICAgIGlmICh0aHJlc2hvbGRzW3RocmVzaG9sZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW1pdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhyZXNob2xkc1t0aHJlc2hvbGRdO1xuICAgICAgICB9XG4gICAgICAgIHRocmVzaG9sZHNbdGhyZXNob2xkXSA9IGxpbWl0O1xuICAgICAgICBpZiAodGhyZXNob2xkID09PSAncycpIHtcbiAgICAgICAgICAgIHRocmVzaG9sZHMuc3MgPSBsaW1pdCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVtYW5pemUgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9jYWxlID0gdGhpcy5sb2NhbGVEYXRhKCk7XG4gICAgICAgIHZhciBvdXRwdXQgPSByZWxhdGl2ZVRpbWUkMSh0aGlzLCAhd2l0aFN1ZmZpeCwgbG9jYWxlKTtcblxuICAgICAgICBpZiAod2l0aFN1ZmZpeCkge1xuICAgICAgICAgICAgb3V0cHV0ID0gbG9jYWxlLnBhc3RGdXR1cmUoK3RoaXMsIG91dHB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbG9jYWxlLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWJzJDEgPSBNYXRoLmFicztcblxuICAgIGZ1bmN0aW9uIHNpZ24oeCkge1xuICAgICAgICByZXR1cm4gKCh4ID4gMCkgLSAoeCA8IDApKSB8fCAreDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyQxKCkge1xuICAgICAgICAvLyBmb3IgSVNPIHN0cmluZ3Mgd2UgZG8gbm90IHVzZSB0aGUgbm9ybWFsIGJ1YmJsaW5nIHJ1bGVzOlxuICAgICAgICAvLyAgKiBtaWxsaXNlY29uZHMgYnViYmxlIHVwIHVudGlsIHRoZXkgYmVjb21lIGhvdXJzXG4gICAgICAgIC8vICAqIGRheXMgZG8gbm90IGJ1YmJsZSBhdCBhbGxcbiAgICAgICAgLy8gICogbW9udGhzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSB5ZWFyc1xuICAgICAgICAvLyBUaGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gY29udGV4dC1mcmVlIGNvbnZlcnNpb24gYmV0d2VlbiBob3VycyBhbmQgZGF5c1xuICAgICAgICAvLyAodGhpbmsgb2YgY2xvY2sgY2hhbmdlcylcbiAgICAgICAgLy8gYW5kIGFsc28gbm90IGJldHdlZW4gZGF5cyBhbmQgbW9udGhzICgyOC0zMSBkYXlzIHBlciBtb250aClcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2Vjb25kcyA9IGFicyQxKHRoaXMuX21pbGxpc2Vjb25kcykgLyAxMDAwO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gYWJzJDEodGhpcy5fZGF5cyk7XG4gICAgICAgIHZhciBtb250aHMgICAgICAgPSBhYnMkMSh0aGlzLl9tb250aHMpO1xuICAgICAgICB2YXIgbWludXRlcywgaG91cnMsIHllYXJzO1xuXG4gICAgICAgIC8vIDM2MDAgc2Vjb25kcyAtPiA2MCBtaW51dGVzIC0+IDEgaG91clxuICAgICAgICBtaW51dGVzICAgICAgICAgICA9IGFic0Zsb29yKHNlY29uZHMgLyA2MCk7XG4gICAgICAgIGhvdXJzICAgICAgICAgICAgID0gYWJzRmxvb3IobWludXRlcyAvIDYwKTtcbiAgICAgICAgc2Vjb25kcyAlPSA2MDtcbiAgICAgICAgbWludXRlcyAlPSA2MDtcblxuICAgICAgICAvLyAxMiBtb250aHMgLT4gMSB5ZWFyXG4gICAgICAgIHllYXJzICA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG5cbiAgICAgICAgLy8gaW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL2RvcmRpbGxlL21vbWVudC1pc29kdXJhdGlvbi9ibG9iL21hc3Rlci9tb21lbnQuaXNvZHVyYXRpb24uanNcbiAgICAgICAgdmFyIFkgPSB5ZWFycztcbiAgICAgICAgdmFyIE0gPSBtb250aHM7XG4gICAgICAgIHZhciBEID0gZGF5cztcbiAgICAgICAgdmFyIGggPSBob3VycztcbiAgICAgICAgdmFyIG0gPSBtaW51dGVzO1xuICAgICAgICB2YXIgcyA9IHNlY29uZHMgPyBzZWNvbmRzLnRvRml4ZWQoMykucmVwbGFjZSgvXFwuPzArJC8sICcnKSA6ICcnO1xuICAgICAgICB2YXIgdG90YWwgPSB0aGlzLmFzU2Vjb25kcygpO1xuXG4gICAgICAgIGlmICghdG90YWwpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHNhbWUgYXMgQyMncyAoTm9kYSkgYW5kIHB5dGhvbiAoaXNvZGF0ZSkuLi5cbiAgICAgICAgICAgIC8vIGJ1dCBub3Qgb3RoZXIgSlMgKGdvb2cuZGF0ZSlcbiAgICAgICAgICAgIHJldHVybiAnUDBEJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbFNpZ24gPSB0b3RhbCA8IDAgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIHltU2lnbiA9IHNpZ24odGhpcy5fbW9udGhzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGRheXNTaWduID0gc2lnbih0aGlzLl9kYXlzKSAhPT0gc2lnbih0b3RhbCkgPyAnLScgOiAnJztcbiAgICAgICAgdmFyIGhtc1NpZ24gPSBzaWduKHRoaXMuX21pbGxpc2Vjb25kcykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG5cbiAgICAgICAgcmV0dXJuIHRvdGFsU2lnbiArICdQJyArXG4gICAgICAgICAgICAoWSA/IHltU2lnbiArIFkgKyAnWScgOiAnJykgK1xuICAgICAgICAgICAgKE0gPyB5bVNpZ24gKyBNICsgJ00nIDogJycpICtcbiAgICAgICAgICAgIChEID8gZGF5c1NpZ24gKyBEICsgJ0QnIDogJycpICtcbiAgICAgICAgICAgICgoaCB8fCBtIHx8IHMpID8gJ1QnIDogJycpICtcbiAgICAgICAgICAgIChoID8gaG1zU2lnbiArIGggKyAnSCcgOiAnJykgK1xuICAgICAgICAgICAgKG0gPyBobXNTaWduICsgbSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAocyA/IGhtc1NpZ24gKyBzICsgJ1MnIDogJycpO1xuICAgIH1cblxuICAgIHZhciBwcm90byQyID0gRHVyYXRpb24ucHJvdG90eXBlO1xuXG4gICAgcHJvdG8kMi5pc1ZhbGlkICAgICAgICA9IGlzVmFsaWQkMTtcbiAgICBwcm90byQyLmFicyAgICAgICAgICAgID0gYWJzO1xuICAgIHByb3RvJDIuYWRkICAgICAgICAgICAgPSBhZGQkMTtcbiAgICBwcm90byQyLnN1YnRyYWN0ICAgICAgID0gc3VidHJhY3QkMTtcbiAgICBwcm90byQyLmFzICAgICAgICAgICAgID0gYXM7XG4gICAgcHJvdG8kMi5hc01pbGxpc2Vjb25kcyA9IGFzTWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuYXNTZWNvbmRzICAgICAgPSBhc1NlY29uZHM7XG4gICAgcHJvdG8kMi5hc01pbnV0ZXMgICAgICA9IGFzTWludXRlcztcbiAgICBwcm90byQyLmFzSG91cnMgICAgICAgID0gYXNIb3VycztcbiAgICBwcm90byQyLmFzRGF5cyAgICAgICAgID0gYXNEYXlzO1xuICAgIHByb3RvJDIuYXNXZWVrcyAgICAgICAgPSBhc1dlZWtzO1xuICAgIHByb3RvJDIuYXNNb250aHMgICAgICAgPSBhc01vbnRocztcbiAgICBwcm90byQyLmFzUXVhcnRlcnMgICAgID0gYXNRdWFydGVycztcbiAgICBwcm90byQyLmFzWWVhcnMgICAgICAgID0gYXNZZWFycztcbiAgICBwcm90byQyLnZhbHVlT2YgICAgICAgID0gdmFsdWVPZiQxO1xuICAgIHByb3RvJDIuX2J1YmJsZSAgICAgICAgPSBidWJibGU7XG4gICAgcHJvdG8kMi5jbG9uZSAgICAgICAgICA9IGNsb25lJDE7XG4gICAgcHJvdG8kMi5nZXQgICAgICAgICAgICA9IGdldCQyO1xuICAgIHByb3RvJDIubWlsbGlzZWNvbmRzICAgPSBtaWxsaXNlY29uZHM7XG4gICAgcHJvdG8kMi5zZWNvbmRzICAgICAgICA9IHNlY29uZHM7XG4gICAgcHJvdG8kMi5taW51dGVzICAgICAgICA9IG1pbnV0ZXM7XG4gICAgcHJvdG8kMi5ob3VycyAgICAgICAgICA9IGhvdXJzO1xuICAgIHByb3RvJDIuZGF5cyAgICAgICAgICAgPSBkYXlzO1xuICAgIHByb3RvJDIud2Vla3MgICAgICAgICAgPSB3ZWVrcztcbiAgICBwcm90byQyLm1vbnRocyAgICAgICAgID0gbW9udGhzO1xuICAgIHByb3RvJDIueWVhcnMgICAgICAgICAgPSB5ZWFycztcbiAgICBwcm90byQyLmh1bWFuaXplICAgICAgID0gaHVtYW5pemU7XG4gICAgcHJvdG8kMi50b0lTT1N0cmluZyAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b1N0cmluZyAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi50b0pTT04gICAgICAgICA9IHRvSVNPU3RyaW5nJDE7XG4gICAgcHJvdG8kMi5sb2NhbGUgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90byQyLmxvY2FsZURhdGEgICAgID0gbG9jYWxlRGF0YTtcblxuICAgIHByb3RvJDIudG9Jc29TdHJpbmcgPSBkZXByZWNhdGUoJ3RvSXNvU3RyaW5nKCkgaXMgZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSB0b0lTT1N0cmluZygpIGluc3RlYWQgKG5vdGljZSB0aGUgY2FwaXRhbHMpJywgdG9JU09TdHJpbmckMSk7XG4gICAgcHJvdG8kMi5sYW5nID0gbGFuZztcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdYJywgMCwgMCwgJ3VuaXgnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigneCcsIDAsIDAsICd2YWx1ZU9mJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCd4JywgbWF0Y2hTaWduZWQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1gnLCBtYXRjaFRpbWVzdGFtcCk7XG4gICAgYWRkUGFyc2VUb2tlbignWCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShwYXJzZUZsb2F0KGlucHV0LCAxMCkgKiAxMDAwKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCd4JywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKHRvSW50KGlucHV0KSk7XG4gICAgfSk7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cblxuICAgIGhvb2tzLnZlcnNpb24gPSAnMi4yNC4wJztcblxuICAgIHNldEhvb2tDYWxsYmFjayhjcmVhdGVMb2NhbCk7XG5cbiAgICBob29rcy5mbiAgICAgICAgICAgICAgICAgICAgPSBwcm90bztcbiAgICBob29rcy5taW4gICAgICAgICAgICAgICAgICAgPSBtaW47XG4gICAgaG9va3MubWF4ICAgICAgICAgICAgICAgICAgID0gbWF4O1xuICAgIGhvb2tzLm5vdyAgICAgICAgICAgICAgICAgICA9IG5vdztcbiAgICBob29rcy51dGMgICAgICAgICAgICAgICAgICAgPSBjcmVhdGVVVEM7XG4gICAgaG9va3MudW5peCAgICAgICAgICAgICAgICAgID0gY3JlYXRlVW5peDtcbiAgICBob29rcy5tb250aHMgICAgICAgICAgICAgICAgPSBsaXN0TW9udGhzO1xuICAgIGhvb2tzLmlzRGF0ZSAgICAgICAgICAgICAgICA9IGlzRGF0ZTtcbiAgICBob29rcy5sb2NhbGUgICAgICAgICAgICAgICAgPSBnZXRTZXRHbG9iYWxMb2NhbGU7XG4gICAgaG9va3MuaW52YWxpZCAgICAgICAgICAgICAgID0gY3JlYXRlSW52YWxpZDtcbiAgICBob29rcy5kdXJhdGlvbiAgICAgICAgICAgICAgPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBob29rcy5pc01vbWVudCAgICAgICAgICAgICAgPSBpc01vbWVudDtcbiAgICBob29rcy53ZWVrZGF5cyAgICAgICAgICAgICAgPSBsaXN0V2Vla2RheXM7XG4gICAgaG9va3MucGFyc2Vab25lICAgICAgICAgICAgID0gY3JlYXRlSW5ab25lO1xuICAgIGhvb2tzLmxvY2FsZURhdGEgICAgICAgICAgICA9IGdldExvY2FsZTtcbiAgICBob29rcy5pc0R1cmF0aW9uICAgICAgICAgICAgPSBpc0R1cmF0aW9uO1xuICAgIGhvb2tzLm1vbnRoc1Nob3J0ICAgICAgICAgICA9IGxpc3RNb250aHNTaG9ydDtcbiAgICBob29rcy53ZWVrZGF5c01pbiAgICAgICAgICAgPSBsaXN0V2Vla2RheXNNaW47XG4gICAgaG9va3MuZGVmaW5lTG9jYWxlICAgICAgICAgID0gZGVmaW5lTG9jYWxlO1xuICAgIGhvb2tzLnVwZGF0ZUxvY2FsZSAgICAgICAgICA9IHVwZGF0ZUxvY2FsZTtcbiAgICBob29rcy5sb2NhbGVzICAgICAgICAgICAgICAgPSBsaXN0TG9jYWxlcztcbiAgICBob29rcy53ZWVrZGF5c1Nob3J0ICAgICAgICAgPSBsaXN0V2Vla2RheXNTaG9ydDtcbiAgICBob29rcy5ub3JtYWxpemVVbml0cyAgICAgICAgPSBub3JtYWxpemVVbml0cztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVSb3VuZGluZyAgPSBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZztcbiAgICBob29rcy5yZWxhdGl2ZVRpbWVUaHJlc2hvbGQgPSBnZXRTZXRSZWxhdGl2ZVRpbWVUaHJlc2hvbGQ7XG4gICAgaG9va3MuY2FsZW5kYXJGb3JtYXQgICAgICAgID0gZ2V0Q2FsZW5kYXJGb3JtYXQ7XG4gICAgaG9va3MucHJvdG90eXBlICAgICAgICAgICAgID0gcHJvdG87XG5cbiAgICAvLyBjdXJyZW50bHkgSFRNTDUgaW5wdXQgdHlwZSBvbmx5IHN1cHBvcnRzIDI0LWhvdXIgZm9ybWF0c1xuICAgIGhvb2tzLkhUTUw1X0ZNVCA9IHtcbiAgICAgICAgREFURVRJTUVfTE9DQUw6ICdZWVlZLU1NLUREVEhIOm1tJywgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRldGltZS1sb2NhbFwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX1NFQ09ORFM6ICdZWVlZLU1NLUREVEhIOm1tOnNzJywgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMX01TOiAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLCAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBEQVRFOiAnWVlZWS1NTS1ERCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPlxuICAgICAgICBUSU1FOiAnSEg6bW0nLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPlxuICAgICAgICBUSU1FX1NFQ09ORFM6ICdISDptbTpzcycsICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMVwiIC8+XG4gICAgICAgIFRJTUVfTVM6ICdISDptbTpzcy5TU1MnLCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwidGltZVwiIHN0ZXA9XCIwLjAwMVwiIC8+XG4gICAgICAgIFdFRUs6ICdHR0dHLVtXXVdXJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwid2Vla1wiIC8+XG4gICAgICAgIE1PTlRIOiAnWVlZWS1NTScgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwibW9udGhcIiAvPlxuICAgIH07XG5cbiAgICByZXR1cm4gaG9va3M7XG5cbn0pKSk7XG4iLCJleHBvcnQgdmFyIG5hbWUgPSBcImQzXCI7XG5leHBvcnQgdmFyIHZlcnNpb24gPSBcIjUuMTIuMFwiO1xuZXhwb3J0IHZhciBkZXNjcmlwdGlvbiA9IFwiRGF0YS1Ecml2ZW4gRG9jdW1lbnRzXCI7XG5leHBvcnQgdmFyIGtleXdvcmRzID0gW1wiZG9tXCIsXCJ2aXN1YWxpemF0aW9uXCIsXCJzdmdcIixcImFuaW1hdGlvblwiLFwiY2FudmFzXCJdO1xuZXhwb3J0IHZhciBob21lcGFnZSA9IFwiaHR0cHM6Ly9kM2pzLm9yZ1wiO1xuZXhwb3J0IHZhciBsaWNlbnNlID0gXCJCU0QtMy1DbGF1c2VcIjtcbmV4cG9ydCB2YXIgYXV0aG9yID0ge1wibmFtZVwiOlwiTWlrZSBCb3N0b2NrXCIsXCJ1cmxcIjpcImh0dHBzOi8vYm9zdC5vY2tzLm9yZy9taWtlXCJ9O1xuZXhwb3J0IHZhciBtYWluID0gXCJkaXN0L2QzLm5vZGUuanNcIjtcbmV4cG9ydCB2YXIgdW5wa2cgPSBcImRpc3QvZDMubWluLmpzXCI7XG5leHBvcnQgdmFyIGpzZGVsaXZyID0gXCJkaXN0L2QzLm1pbi5qc1wiO1xuZXhwb3J0IHZhciBtb2R1bGUgPSBcImluZGV4LmpzXCI7XG5leHBvcnQgdmFyIHJlcG9zaXRvcnkgPSB7XCJ0eXBlXCI6XCJnaXRcIixcInVybFwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLmdpdFwifTtcbmV4cG9ydCB2YXIgZmlsZXMgPSBbXCJkaXN0LyoqLyouanNcIixcImluZGV4LmpzXCJdO1xuZXhwb3J0IHZhciBzY3JpcHRzID0ge1wicHJldGVzdFwiOlwicmltcmFmIGRpc3QgJiYgbWtkaXIgZGlzdCAmJiBqc29uMm1vZHVsZSBwYWNrYWdlLmpzb24gPiBkaXN0L3BhY2thZ2UuanMgJiYgcm9sbHVwIC1jXCIsXCJ0ZXN0XCI6XCJ0YXBlICd0ZXN0LyoqLyotdGVzdC5qcydcIixcInByZXB1Ymxpc2hPbmx5XCI6XCJ5YXJuIHRlc3RcIixcInBvc3RwdWJsaXNoXCI6XCJnaXQgcHVzaCAmJiBnaXQgcHVzaCAtLXRhZ3MgJiYgY2QgLi4vZDMuZ2l0aHViLmNvbSAmJiBnaXQgcHVsbCAmJiBjcCAuLi9kMy9kaXN0L2QzLmpzIGQzLnY1LmpzICYmIGNwIC4uL2QzL2Rpc3QvZDMubWluLmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgYWRkIGQzLnY1LmpzIGQzLnY1Lm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCJkMyAke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgcHVzaCAmJiBjZCAtICYmIGNkIC4uL2QzLWJvd2VyICYmIGdpdCBwdWxsICYmIGNwIC4uL2QzL0xJQ0VOU0UgLi4vZDMvUkVBRE1FLm1kIC4uL2QzL2Rpc3QvZDMuanMgLi4vZDMvZGlzdC9kMy5taW4uanMgLiAmJiBnaXQgYWRkIC0tIExJQ0VOU0UgUkVBRE1FLm1kIGQzLmpzIGQzLm1pbi5qcyAmJiBnaXQgY29tbWl0IC1tIFxcXCIke25wbV9wYWNrYWdlX3ZlcnNpb259XFxcIiAmJiBnaXQgdGFnIC1hbSBcXFwiJHtucG1fcGFja2FnZV92ZXJzaW9ufVxcXCIgdiR7bnBtX3BhY2thZ2VfdmVyc2lvbn0gJiYgZ2l0IHB1c2ggJiYgZ2l0IHB1c2ggLS10YWdzICYmIGNkIC0gJiYgemlwIC1qIGRpc3QvZDMuemlwIC0tIExJQ0VOU0UgUkVBRE1FLm1kIEFQSS5tZCBDSEFOR0VTLm1kIGRpc3QvZDMuanMgZGlzdC9kMy5taW4uanNcIn07XG5leHBvcnQgdmFyIGRldkRlcGVuZGVuY2llcyA9IHtcImpzb24ybW9kdWxlXCI6XCIwLjBcIixcInJpbXJhZlwiOlwiMlwiLFwicm9sbHVwXCI6XCIxXCIsXCJyb2xsdXAtcGx1Z2luLWFzY2lpXCI6XCIwLjBcIixcInJvbGx1cC1wbHVnaW4tbm9kZS1yZXNvbHZlXCI6XCIzXCIsXCJyb2xsdXAtcGx1Z2luLXRlcnNlclwiOlwiNVwiLFwidGFwZVwiOlwiNFwifTtcbmV4cG9ydCB2YXIgZGVwZW5kZW5jaWVzID0ge1wiZDMtYXJyYXlcIjpcIjFcIixcImQzLWF4aXNcIjpcIjFcIixcImQzLWJydXNoXCI6XCIxXCIsXCJkMy1jaG9yZFwiOlwiMVwiLFwiZDMtY29sbGVjdGlvblwiOlwiMVwiLFwiZDMtY29sb3JcIjpcIjFcIixcImQzLWNvbnRvdXJcIjpcIjFcIixcImQzLWRpc3BhdGNoXCI6XCIxXCIsXCJkMy1kcmFnXCI6XCIxXCIsXCJkMy1kc3ZcIjpcIjFcIixcImQzLWVhc2VcIjpcIjFcIixcImQzLWZldGNoXCI6XCIxXCIsXCJkMy1mb3JjZVwiOlwiMVwiLFwiZDMtZm9ybWF0XCI6XCIxXCIsXCJkMy1nZW9cIjpcIjFcIixcImQzLWhpZXJhcmNoeVwiOlwiMVwiLFwiZDMtaW50ZXJwb2xhdGVcIjpcIjFcIixcImQzLXBhdGhcIjpcIjFcIixcImQzLXBvbHlnb25cIjpcIjFcIixcImQzLXF1YWR0cmVlXCI6XCIxXCIsXCJkMy1yYW5kb21cIjpcIjFcIixcImQzLXNjYWxlXCI6XCIyXCIsXCJkMy1zY2FsZS1jaHJvbWF0aWNcIjpcIjFcIixcImQzLXNlbGVjdGlvblwiOlwiMVwiLFwiZDMtc2hhcGVcIjpcIjFcIixcImQzLXRpbWVcIjpcIjFcIixcImQzLXRpbWUtZm9ybWF0XCI6XCIyXCIsXCJkMy10aW1lclwiOlwiMVwiLFwiZDMtdHJhbnNpdGlvblwiOlwiMVwiLFwiZDMtdm9yb25vaVwiOlwiMVwiLFwiZDMtem9vbVwiOlwiMVwifTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGJpc2VjdG9yIGZyb20gXCIuL2Jpc2VjdG9yXCI7XG5cbnZhciBhc2NlbmRpbmdCaXNlY3QgPSBiaXNlY3Rvcihhc2NlbmRpbmcpO1xuZXhwb3J0IHZhciBiaXNlY3RSaWdodCA9IGFzY2VuZGluZ0Jpc2VjdC5yaWdodDtcbmV4cG9ydCB2YXIgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgZikge1xuICBpZiAoZiA9PSBudWxsKSBmID0gcGFpcjtcbiAgdmFyIGkgPSAwLCBuID0gYXJyYXkubGVuZ3RoIC0gMSwgcCA9IGFycmF5WzBdLCBwYWlycyA9IG5ldyBBcnJheShuIDwgMCA/IDAgOiBuKTtcbiAgd2hpbGUgKGkgPCBuKSBwYWlyc1tpXSA9IGYocCwgcCA9IGFycmF5WysraV0pO1xuICByZXR1cm4gcGFpcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWlyKGEsIGIpIHtcbiAgcmV0dXJuIFthLCBiXTtcbn1cbiIsImltcG9ydCB7cGFpcn0gZnJvbSBcIi4vcGFpcnNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzMCwgdmFsdWVzMSwgcmVkdWNlKSB7XG4gIHZhciBuMCA9IHZhbHVlczAubGVuZ3RoLFxuICAgICAgbjEgPSB2YWx1ZXMxLmxlbmd0aCxcbiAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuMCAqIG4xKSxcbiAgICAgIGkwLFxuICAgICAgaTEsXG4gICAgICBpLFxuICAgICAgdmFsdWUwO1xuXG4gIGlmIChyZWR1Y2UgPT0gbnVsbCkgcmVkdWNlID0gcGFpcjtcblxuICBmb3IgKGkwID0gaSA9IDA7IGkwIDwgbjA7ICsraTApIHtcbiAgICBmb3IgKHZhbHVlMCA9IHZhbHVlczBbaTBdLCBpMSA9IDA7IGkxIDwgbjE7ICsraTEsICsraSkge1xuICAgICAgdmFsdWVzW2ldID0gcmVkdWNlKHZhbHVlMCwgdmFsdWVzMVtpMV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBiIDwgYSA/IC0xIDogYiA+IGEgPyAxIDogYiA+PSBhID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPT09IG51bGwgPyBOYU4gOiAreDtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBtID0gMCxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG1lYW4gPSAwLFxuICAgICAgdmFsdWUsXG4gICAgICBkZWx0YSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSB7XG4gICAgICAgIGRlbHRhID0gdmFsdWUgLSBtZWFuO1xuICAgICAgICBtZWFuICs9IGRlbHRhIC8gKyttO1xuICAgICAgICBzdW0gKz0gZGVsdGEgKiAodmFsdWUgLSBtZWFuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobSA+IDEpIHJldHVybiBzdW0gLyAobSAtIDEpO1xufVxuIiwiaW1wb3J0IHZhcmlhbmNlIGZyb20gXCIuL3ZhcmlhbmNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5LCBmKSB7XG4gIHZhciB2ID0gdmFyaWFuY2UoYXJyYXksIGYpO1xuICByZXR1cm4gdiA/IE1hdGguc3FydCh2KSA6IHY7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBtaW4sXG4gICAgICBtYXg7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVzW2ldKSAhPSBudWxsICYmIHZhbHVlID49IHZhbHVlKSB7XG4gICAgICAgIG1pbiA9IG1heCA9IHZhbHVlO1xuICAgICAgICB3aGlsZSAoKytpIDwgbikgeyAvLyBDb21wYXJlIHRoZSByZW1haW5pbmcgdmFsdWVzLlxuICAgICAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChtaW4gPiB2YWx1ZSkgbWluID0gdmFsdWU7XG4gICAgICAgICAgICBpZiAobWF4IDwgdmFsdWUpIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIEZpbmQgdGhlIGZpcnN0IGNvbXBhcmFibGUgdmFsdWUuXG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlb2YodmFsdWVzW2ldLCBpLCB2YWx1ZXMpKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAobWluID4gdmFsdWUpIG1pbiA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKG1heCA8IHZhbHVlKSBtYXggPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW21pbiwgbWF4XTtcbn1cbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICBzdGFydCA9ICtzdGFydCwgc3RvcCA9ICtzdG9wLCBzdGVwID0gKG4gPSBhcmd1bWVudHMubGVuZ3RoKSA8IDIgPyAoc3RvcCA9IHN0YXJ0LCBzdGFydCA9IDAsIDEpIDogbiA8IDMgPyAxIDogK3N0ZXA7XG5cbiAgdmFyIGkgPSAtMSxcbiAgICAgIG4gPSBNYXRoLm1heCgwLCBNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSkgfCAwLFxuICAgICAgcmFuZ2UgPSBuZXcgQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICByYW5nZVtpXSA9IHN0YXJ0ICsgaSAqIHN0ZXA7XG4gIH1cblxuICByZXR1cm4gcmFuZ2U7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZyh2YWx1ZXMubGVuZ3RoKSAvIE1hdGguTE4yKSArIDE7XG59XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGJpc2VjdCBmcm9tIFwiLi9iaXNlY3RcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGV4dGVudCBmcm9tIFwiLi9leHRlbnRcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuaW1wb3J0IHJhbmdlIGZyb20gXCIuL3JhbmdlXCI7XG5pbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiLi90aWNrc1wiO1xuaW1wb3J0IHN0dXJnZXMgZnJvbSBcIi4vdGhyZXNob2xkL3N0dXJnZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB2YWx1ZSA9IGlkZW50aXR5LFxuICAgICAgZG9tYWluID0gZXh0ZW50LFxuICAgICAgdGhyZXNob2xkID0gc3R1cmdlcztcblxuICBmdW5jdGlvbiBoaXN0b2dyYW0oZGF0YSkge1xuICAgIHZhciBpLFxuICAgICAgICBuID0gZGF0YS5sZW5ndGgsXG4gICAgICAgIHgsXG4gICAgICAgIHZhbHVlcyA9IG5ldyBBcnJheShuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHZhbHVlKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIH1cblxuICAgIHZhciB4eiA9IGRvbWFpbih2YWx1ZXMpLFxuICAgICAgICB4MCA9IHh6WzBdLFxuICAgICAgICB4MSA9IHh6WzFdLFxuICAgICAgICB0eiA9IHRocmVzaG9sZCh2YWx1ZXMsIHgwLCB4MSk7XG5cbiAgICAvLyBDb252ZXJ0IG51bWJlciBvZiB0aHJlc2hvbGRzIGludG8gdW5pZm9ybSB0aHJlc2hvbGRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eikpIHtcbiAgICAgIHR6ID0gdGlja1N0ZXAoeDAsIHgxLCB0eik7XG4gICAgICB0eiA9IHJhbmdlKE1hdGguY2VpbCh4MCAvIHR6KSAqIHR6LCB4MSwgdHopOyAvLyBleGNsdXNpdmVcbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgYW55IHRocmVzaG9sZHMgb3V0c2lkZSB0aGUgZG9tYWluLlxuICAgIHZhciBtID0gdHoubGVuZ3RoO1xuICAgIHdoaWxlICh0elswXSA8PSB4MCkgdHouc2hpZnQoKSwgLS1tO1xuICAgIHdoaWxlICh0elttIC0gMV0gPiB4MSkgdHoucG9wKCksIC0tbTtcblxuICAgIHZhciBiaW5zID0gbmV3IEFycmF5KG0gKyAxKSxcbiAgICAgICAgYmluO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBiaW5zLlxuICAgIGZvciAoaSA9IDA7IGkgPD0gbTsgKytpKSB7XG4gICAgICBiaW4gPSBiaW5zW2ldID0gW107XG4gICAgICBiaW4ueDAgPSBpID4gMCA/IHR6W2kgLSAxXSA6IHgwO1xuICAgICAgYmluLngxID0gaSA8IG0gPyB0eltpXSA6IHgxO1xuICAgIH1cblxuICAgIC8vIEFzc2lnbiBkYXRhIHRvIGJpbnMgYnkgdmFsdWUsIGlnbm9yaW5nIGFueSBvdXRzaWRlIHRoZSBkb21haW4uXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgeCA9IHZhbHVlc1tpXTtcbiAgICAgIGlmICh4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgYmluc1tiaXNlY3QodHosIHgsIDAsIG0pXS5wdXNoKGRhdGFbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiaW5zO1xuICB9XG5cbiAgaGlzdG9ncmFtLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgaGlzdG9ncmFtKSA6IHZhbHVlO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbX1swXSwgX1sxXV0pLCBoaXN0b2dyYW0pIDogZG9tYWluO1xuICB9O1xuXG4gIGhpc3RvZ3JhbS50aHJlc2hvbGRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRocmVzaG9sZCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogQXJyYXkuaXNBcnJheShfKSA/IGNvbnN0YW50KHNsaWNlLmNhbGwoXykpIDogY29uc3RhbnQoXyksIGhpc3RvZ3JhbSkgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgcmV0dXJuIGhpc3RvZ3JhbTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgcCwgdmFsdWVvZikge1xuICBpZiAodmFsdWVvZiA9PSBudWxsKSB2YWx1ZW9mID0gbnVtYmVyO1xuICBpZiAoIShuID0gdmFsdWVzLmxlbmd0aCkpIHJldHVybjtcbiAgaWYgKChwID0gK3ApIDw9IDAgfHwgbiA8IDIpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbMF0sIDAsIHZhbHVlcyk7XG4gIGlmIChwID49IDEpIHJldHVybiArdmFsdWVvZih2YWx1ZXNbbiAtIDFdLCBuIC0gMSwgdmFsdWVzKTtcbiAgdmFyIG4sXG4gICAgICBpID0gKG4gLSAxKSAqIHAsXG4gICAgICBpMCA9IE1hdGguZmxvb3IoaSksXG4gICAgICB2YWx1ZTAgPSArdmFsdWVvZih2YWx1ZXNbaTBdLCBpMCwgdmFsdWVzKSxcbiAgICAgIHZhbHVlMSA9ICt2YWx1ZW9mKHZhbHVlc1tpMCArIDFdLCBpMCArIDEsIHZhbHVlcyk7XG4gIHJldHVybiB2YWx1ZTAgKyAodmFsdWUxIC0gdmFsdWUwKSAqIChpIC0gaTApO1xufVxuIiwiaW1wb3J0IHttYXB9IGZyb20gXCIuLi9hcnJheVwiO1xuaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi4vcXVhbnRpbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBtaW4sIG1heCkge1xuICB2YWx1ZXMgPSBtYXAuY2FsbCh2YWx1ZXMsIG51bWJlcikuc29ydChhc2NlbmRpbmcpO1xuICByZXR1cm4gTWF0aC5jZWlsKChtYXggLSBtaW4pIC8gKDIgKiAocXVhbnRpbGUodmFsdWVzLCAwLjc1KSAtIHF1YW50aWxlKHZhbHVlcywgMC4yNSkpICogTWF0aC5wb3codmFsdWVzLmxlbmd0aCwgLTEgLyAzKSkpO1xufVxuIiwiaW1wb3J0IGRldmlhdGlvbiBmcm9tIFwiLi4vZGV2aWF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgbWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguY2VpbCgobWF4IC0gbWluKSAvICgzLjUgKiBkZXZpYXRpb24odmFsdWVzKSAqIE1hdGgucG93KHZhbHVlcy5sZW5ndGgsIC0xIC8gMykpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1heDtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiB2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgbWF4ID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICAgIG1heCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXg7XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgbSA9IG4sXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIHN1bSA9IDA7XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBlbHNlIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKCFpc05hTih2YWx1ZSA9IG51bWJlcih2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkpKSBzdW0gKz0gdmFsdWU7XG4gICAgICBlbHNlIC0tbTtcbiAgICB9XG4gIH1cblxuICBpZiAobSkgcmV0dXJuIHN1bSAvIG07XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcbmltcG9ydCBxdWFudGlsZSBmcm9tIFwiLi9xdWFudGlsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBudW1iZXJzID0gW107XG5cbiAgaWYgKHZhbHVlb2YgPT0gbnVsbCkge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAoIWlzTmFOKHZhbHVlID0gbnVtYmVyKHZhbHVlc1tpXSkpKSB7XG4gICAgICAgIG51bWJlcnMucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICghaXNOYU4odmFsdWUgPSBudW1iZXIodmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpKSkge1xuICAgICAgICBudW1iZXJzLnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBxdWFudGlsZShudW1iZXJzLnNvcnQoYXNjZW5kaW5nKSwgMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcywgdmFsdWVvZikge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBpID0gLTEsXG4gICAgICB2YWx1ZSxcbiAgICAgIG1pbjtcblxuICBpZiAodmFsdWVvZiA9PSBudWxsKSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZXNbaV0pICE9IG51bGwgJiYgdmFsdWUgPj0gdmFsdWUpIHtcbiAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIHdoaWxlICgrK2kgPCBuKSB7IC8vIENvbXBhcmUgdGhlIHJlbWFpbmluZyB2YWx1ZXMuXG4gICAgICAgICAgaWYgKCh2YWx1ZSA9IHZhbHVlc1tpXSkgIT0gbnVsbCAmJiBtaW4gPiB2YWx1ZSkge1xuICAgICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZWxzZSB7XG4gICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gRmluZCB0aGUgZmlyc3QgY29tcGFyYWJsZSB2YWx1ZS5cbiAgICAgIGlmICgodmFsdWUgPSB2YWx1ZW9mKHZhbHVlc1tpXSwgaSwgdmFsdWVzKSkgIT0gbnVsbCAmJiB2YWx1ZSA+PSB2YWx1ZSkge1xuICAgICAgICBtaW4gPSB2YWx1ZTtcbiAgICAgICAgd2hpbGUgKCsraSA8IG4pIHsgLy8gQ29tcGFyZSB0aGUgcmVtYWluaW5nIHZhbHVlcy5cbiAgICAgICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpICE9IG51bGwgJiYgbWluID4gdmFsdWUpIHtcbiAgICAgICAgICAgIG1pbiA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaW47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICB2YXIgaSA9IGluZGV4ZXMubGVuZ3RoLCBwZXJtdXRlcyA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkgcGVybXV0ZXNbaV0gPSBhcnJheVtpbmRleGVzW2ldXTtcbiAgcmV0dXJuIHBlcm11dGVzO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzLCBjb21wYXJlKSB7XG4gIGlmICghKG4gPSB2YWx1ZXMubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgaiA9IDAsXG4gICAgICB4aSxcbiAgICAgIHhqID0gdmFsdWVzW2pdO1xuXG4gIGlmIChjb21wYXJlID09IG51bGwpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBpZiAoY29tcGFyZSh4aSA9IHZhbHVlc1tpXSwgeGopIDwgMCB8fCBjb21wYXJlKHhqLCB4aikgIT09IDApIHtcbiAgICAgIHhqID0geGksIGogPSBpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wYXJlKHhqLCB4aikgPT09IDApIHJldHVybiBqO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIGkwLCBpMSkge1xuICB2YXIgbSA9IChpMSA9PSBudWxsID8gYXJyYXkubGVuZ3RoIDogaTEpIC0gKGkwID0gaTAgPT0gbnVsbCA/IDAgOiAraTApLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W20gKyBpMF07XG4gICAgYXJyYXlbbSArIGkwXSA9IGFycmF5W2kgKyBpMF07XG4gICAgYXJyYXlbaSArIGkwXSA9IHQ7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgdmFyIG4gPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgaSA9IC0xLFxuICAgICAgdmFsdWUsXG4gICAgICBzdW0gPSAwO1xuXG4gIGlmICh2YWx1ZW9mID09IG51bGwpIHtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlc1tpXSkgc3VtICs9IHZhbHVlOyAvLyBOb3RlOiB6ZXJvIGFuZCBudWxsIGFyZSBlcXVpdmFsZW50LlxuICAgIH1cbiAgfVxuXG4gIGVsc2Uge1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodmFsdWUgPSArdmFsdWVvZih2YWx1ZXNbaV0sIGksIHZhbHVlcykpIHN1bSArPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuIiwiaW1wb3J0IG1pbiBmcm9tIFwiLi9taW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0cml4KSB7XG4gIGlmICghKG4gPSBtYXRyaXgubGVuZ3RoKSkgcmV0dXJuIFtdO1xuICBmb3IgKHZhciBpID0gLTEsIG0gPSBtaW4obWF0cml4LCBsZW5ndGgpLCB0cmFuc3Bvc2UgPSBuZXcgQXJyYXkobSk7ICsraSA8IG07KSB7XG4gICAgZm9yICh2YXIgaiA9IC0xLCBuLCByb3cgPSB0cmFuc3Bvc2VbaV0gPSBuZXcgQXJyYXkobik7ICsraiA8IG47KSB7XG4gICAgICByb3dbal0gPSBtYXRyaXhbal1baV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0cmFuc3Bvc2U7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aChkKSB7XG4gIHJldHVybiBkLmxlbmd0aDtcbn1cbiIsImltcG9ydCB0cmFuc3Bvc2UgZnJvbSBcIi4vdHJhbnNwb3NlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHRvcCA9IDEsXG4gICAgcmlnaHQgPSAyLFxuICAgIGJvdHRvbSA9IDMsXG4gICAgbGVmdCA9IDQsXG4gICAgZXBzaWxvbiA9IDFlLTY7XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZVgoeCkge1xuICByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyAoeCArIDAuNSkgKyBcIiwwKVwiO1xufVxuXG5mdW5jdGlvbiB0cmFuc2xhdGVZKHkpIHtcbiAgcmV0dXJuIFwidHJhbnNsYXRlKDAsXCIgKyAoeSArIDAuNSkgKyBcIilcIjtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHNjYWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2VudGVyKHNjYWxlKSB7XG4gIHZhciBvZmZzZXQgPSBNYXRoLm1heCgwLCBzY2FsZS5iYW5kd2lkdGgoKSAtIDEpIC8gMjsgLy8gQWRqdXN0IGZvciAwLjVweCBvZmZzZXQuXG4gIGlmIChzY2FsZS5yb3VuZCgpKSBvZmZzZXQgPSBNYXRoLnJvdW5kKG9mZnNldCk7XG4gIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgcmV0dXJuICtzY2FsZShkKSArIG9mZnNldDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW50ZXJpbmcoKSB7XG4gIHJldHVybiAhdGhpcy5fX2F4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXMob3JpZW50LCBzY2FsZSkge1xuICB2YXIgdGlja0FyZ3VtZW50cyA9IFtdLFxuICAgICAgdGlja1ZhbHVlcyA9IG51bGwsXG4gICAgICB0aWNrRm9ybWF0ID0gbnVsbCxcbiAgICAgIHRpY2tTaXplSW5uZXIgPSA2LFxuICAgICAgdGlja1NpemVPdXRlciA9IDYsXG4gICAgICB0aWNrUGFkZGluZyA9IDMsXG4gICAgICBrID0gb3JpZW50ID09PSB0b3AgfHwgb3JpZW50ID09PSBsZWZ0ID8gLTEgOiAxLFxuICAgICAgeCA9IG9yaWVudCA9PT0gbGVmdCB8fCBvcmllbnQgPT09IHJpZ2h0ID8gXCJ4XCIgOiBcInlcIixcbiAgICAgIHRyYW5zZm9ybSA9IG9yaWVudCA9PT0gdG9wIHx8IG9yaWVudCA9PT0gYm90dG9tID8gdHJhbnNsYXRlWCA6IHRyYW5zbGF0ZVk7XG5cbiAgZnVuY3Rpb24gYXhpcyhjb250ZXh0KSB7XG4gICAgdmFyIHZhbHVlcyA9IHRpY2tWYWx1ZXMgPT0gbnVsbCA/IChzY2FsZS50aWNrcyA/IHNjYWxlLnRpY2tzLmFwcGx5KHNjYWxlLCB0aWNrQXJndW1lbnRzKSA6IHNjYWxlLmRvbWFpbigpKSA6IHRpY2tWYWx1ZXMsXG4gICAgICAgIGZvcm1hdCA9IHRpY2tGb3JtYXQgPT0gbnVsbCA/IChzY2FsZS50aWNrRm9ybWF0ID8gc2NhbGUudGlja0Zvcm1hdC5hcHBseShzY2FsZSwgdGlja0FyZ3VtZW50cykgOiBpZGVudGl0eSkgOiB0aWNrRm9ybWF0LFxuICAgICAgICBzcGFjaW5nID0gTWF0aC5tYXgodGlja1NpemVJbm5lciwgMCkgKyB0aWNrUGFkZGluZyxcbiAgICAgICAgcmFuZ2UgPSBzY2FsZS5yYW5nZSgpLFxuICAgICAgICByYW5nZTAgPSArcmFuZ2VbMF0gKyAwLjUsXG4gICAgICAgIHJhbmdlMSA9ICtyYW5nZVtyYW5nZS5sZW5ndGggLSAxXSArIDAuNSxcbiAgICAgICAgcG9zaXRpb24gPSAoc2NhbGUuYmFuZHdpZHRoID8gY2VudGVyIDogbnVtYmVyKShzY2FsZS5jb3B5KCkpLFxuICAgICAgICBzZWxlY3Rpb24gPSBjb250ZXh0LnNlbGVjdGlvbiA/IGNvbnRleHQuc2VsZWN0aW9uKCkgOiBjb250ZXh0LFxuICAgICAgICBwYXRoID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi5kb21haW5cIikuZGF0YShbbnVsbF0pLFxuICAgICAgICB0aWNrID0gc2VsZWN0aW9uLnNlbGVjdEFsbChcIi50aWNrXCIpLmRhdGEodmFsdWVzLCBzY2FsZSkub3JkZXIoKSxcbiAgICAgICAgdGlja0V4aXQgPSB0aWNrLmV4aXQoKSxcbiAgICAgICAgdGlja0VudGVyID0gdGljay5lbnRlcigpLmFwcGVuZChcImdcIikuYXR0cihcImNsYXNzXCIsIFwidGlja1wiKSxcbiAgICAgICAgbGluZSA9IHRpY2suc2VsZWN0KFwibGluZVwiKSxcbiAgICAgICAgdGV4dCA9IHRpY2suc2VsZWN0KFwidGV4dFwiKTtcblxuICAgIHBhdGggPSBwYXRoLm1lcmdlKHBhdGguZW50ZXIoKS5pbnNlcnQoXCJwYXRoXCIsIFwiLnRpY2tcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImRvbWFpblwiKVxuICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcImN1cnJlbnRDb2xvclwiKSk7XG5cbiAgICB0aWNrID0gdGljay5tZXJnZSh0aWNrRW50ZXIpO1xuXG4gICAgbGluZSA9IGxpbmUubWVyZ2UodGlja0VudGVyLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJjdXJyZW50Q29sb3JcIilcbiAgICAgICAgLmF0dHIoeCArIFwiMlwiLCBrICogdGlja1NpemVJbm5lcikpO1xuXG4gICAgdGV4dCA9IHRleHQubWVyZ2UodGlja0VudGVyLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiY3VycmVudENvbG9yXCIpXG4gICAgICAgIC5hdHRyKHgsIGsgKiBzcGFjaW5nKVxuICAgICAgICAuYXR0cihcImR5XCIsIG9yaWVudCA9PT0gdG9wID8gXCIwZW1cIiA6IG9yaWVudCA9PT0gYm90dG9tID8gXCIwLjcxZW1cIiA6IFwiMC4zMmVtXCIpKTtcblxuICAgIGlmIChjb250ZXh0ICE9PSBzZWxlY3Rpb24pIHtcbiAgICAgIHBhdGggPSBwYXRoLnRyYW5zaXRpb24oY29udGV4dCk7XG4gICAgICB0aWNrID0gdGljay50cmFuc2l0aW9uKGNvbnRleHQpO1xuICAgICAgbGluZSA9IGxpbmUudHJhbnNpdGlvbihjb250ZXh0KTtcbiAgICAgIHRleHQgPSB0ZXh0LnRyYW5zaXRpb24oY29udGV4dCk7XG5cbiAgICAgIHRpY2tFeGl0ID0gdGlja0V4aXQudHJhbnNpdGlvbihjb250ZXh0KVxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGlzRmluaXRlKGQgPSBwb3NpdGlvbihkKSkgPyB0cmFuc2Zvcm0oZCkgOiB0aGlzLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTsgfSk7XG5cbiAgICAgIHRpY2tFbnRlclxuICAgICAgICAgIC5hdHRyKFwib3BhY2l0eVwiLCBlcHNpbG9uKVxuICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHsgdmFyIHAgPSB0aGlzLnBhcmVudE5vZGUuX19heGlzOyByZXR1cm4gdHJhbnNmb3JtKHAgJiYgaXNGaW5pdGUocCA9IHAoZCkpID8gcCA6IHBvc2l0aW9uKGQpKTsgfSk7XG4gICAgfVxuXG4gICAgdGlja0V4aXQucmVtb3ZlKCk7XG5cbiAgICBwYXRoXG4gICAgICAgIC5hdHRyKFwiZFwiLCBvcmllbnQgPT09IGxlZnQgfHwgb3JpZW50ID09IHJpZ2h0XG4gICAgICAgICAgICA/ICh0aWNrU2l6ZU91dGVyID8gXCJNXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiLFwiICsgcmFuZ2UwICsgXCJIMC41VlwiICsgcmFuZ2UxICsgXCJIXCIgKyBrICogdGlja1NpemVPdXRlciA6IFwiTTAuNSxcIiArIHJhbmdlMCArIFwiVlwiICsgcmFuZ2UxKVxuICAgICAgICAgICAgOiAodGlja1NpemVPdXRlciA/IFwiTVwiICsgcmFuZ2UwICsgXCIsXCIgKyBrICogdGlja1NpemVPdXRlciArIFwiVjAuNUhcIiArIHJhbmdlMSArIFwiVlwiICsgayAqIHRpY2tTaXplT3V0ZXIgOiBcIk1cIiArIHJhbmdlMCArIFwiLDAuNUhcIiArIHJhbmdlMSkpO1xuXG4gICAgdGlja1xuICAgICAgICAuYXR0cihcIm9wYWNpdHlcIiwgMSlcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gdHJhbnNmb3JtKHBvc2l0aW9uKGQpKTsgfSk7XG5cbiAgICBsaW5lXG4gICAgICAgIC5hdHRyKHggKyBcIjJcIiwgayAqIHRpY2tTaXplSW5uZXIpO1xuXG4gICAgdGV4dFxuICAgICAgICAuYXR0cih4LCBrICogc3BhY2luZylcbiAgICAgICAgLnRleHQoZm9ybWF0KTtcblxuICAgIHNlbGVjdGlvbi5maWx0ZXIoZW50ZXJpbmcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgMTApXG4gICAgICAgIC5hdHRyKFwiZm9udC1mYW1pbHlcIiwgXCJzYW5zLXNlcmlmXCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgb3JpZW50ID09PSByaWdodCA/IFwic3RhcnRcIiA6IG9yaWVudCA9PT0gbGVmdCA/IFwiZW5kXCIgOiBcIm1pZGRsZVwiKTtcblxuICAgIHNlbGVjdGlvblxuICAgICAgICAuZWFjaChmdW5jdGlvbigpIHsgdGhpcy5fX2F4aXMgPSBwb3NpdGlvbjsgfSk7XG4gIH1cblxuICBheGlzLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlID0gXywgYXhpcykgOiBzY2FsZTtcbiAgfTtcblxuICBheGlzLnRpY2tzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRpY2tBcmd1bWVudHMgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIGF4aXM7XG4gIH07XG5cbiAgYXhpcy50aWNrQXJndW1lbnRzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tBcmd1bWVudHMgPSBfID09IG51bGwgPyBbXSA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja0FyZ3VtZW50cy5zbGljZSgpO1xuICB9O1xuXG4gIGF4aXMudGlja1ZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrVmFsdWVzID0gXyA9PSBudWxsID8gbnVsbCA6IHNsaWNlLmNhbGwoXyksIGF4aXMpIDogdGlja1ZhbHVlcyAmJiB0aWNrVmFsdWVzLnNsaWNlKCk7XG4gIH07XG5cbiAgYXhpcy50aWNrRm9ybWF0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tGb3JtYXQgPSBfLCBheGlzKSA6IHRpY2tGb3JtYXQ7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZUlubmVyID0gdGlja1NpemVPdXRlciA9ICtfLCBheGlzKSA6IHRpY2tTaXplSW5uZXI7XG4gIH07XG5cbiAgYXhpcy50aWNrU2l6ZUlubmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tTaXplSW5uZXIgPSArXywgYXhpcykgOiB0aWNrU2l6ZUlubmVyO1xuICB9O1xuXG4gIGF4aXMudGlja1NpemVPdXRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aWNrU2l6ZU91dGVyID0gK18sIGF4aXMpIDogdGlja1NpemVPdXRlcjtcbiAgfTtcblxuICBheGlzLnRpY2tQYWRkaW5nID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRpY2tQYWRkaW5nID0gK18sIGF4aXMpIDogdGlja1BhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzVG9wKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHRvcCwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc1JpZ2h0KHNjYWxlKSB7XG4gIHJldHVybiBheGlzKHJpZ2h0LCBzY2FsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBheGlzQm90dG9tKHNjYWxlKSB7XG4gIHJldHVybiBheGlzKGJvdHRvbSwgc2NhbGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXhpc0xlZnQoc2NhbGUpIHtcbiAgcmV0dXJuIGF4aXMobGVmdCwgc2NhbGUpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6IGZ1bmN0aW9uKCkge319O1xuXG5mdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCBfID0ge30sIHQ7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoISh0ID0gYXJndW1lbnRzW2ldICsgXCJcIikgfHwgKHQgaW4gXykpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3JcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZnVuY3Rpb24gY29uc3RhbnROdWxsKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgYmVmb3JlKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSksXG4gICAgICBzZWxlY3QgPSBiZWZvcmUgPT0gbnVsbCA/IGNvbnN0YW50TnVsbCA6IHR5cGVvZiBiZWZvcmUgPT09IFwiZnVuY3Rpb25cIiA/IGJlZm9yZSA6IHNlbGVjdG9yKGJlZm9yZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHNlbGVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IG51bGwpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyZW1vdmUpO1xufVxuIiwiZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lU2hhbGxvdygpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUoZmFsc2UpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5jbG9uZU5vZGUodHJ1ZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWVwKSB7XG4gIHJldHVybiB0aGlzLnNlbGVjdChkZWVwID8gc2VsZWN0aW9uX2Nsb25lRGVlcCA6IHNlbGVjdGlvbl9jbG9uZVNoYWxsb3cpO1xufVxuIiwidmFyIGZpbHRlckV2ZW50cyA9IHt9O1xuXG5leHBvcnQgdmFyIGV2ZW50ID0gbnVsbDtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgaWYgKCEoXCJvbm1vdXNlZW50ZXJcIiBpbiBlbGVtZW50KSkge1xuICAgIGZpbHRlckV2ZW50cyA9IHttb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLCBtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCJ9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbHRlckNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIGxpc3RlbmVyID0gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApO1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gICAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0aGlzICYmICEocmVsYXRlZC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzKSAmIDgpKSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICByZXR1cm4gZnVuY3Rpb24oZXZlbnQxKSB7XG4gICAgdmFyIGV2ZW50MCA9IGV2ZW50OyAvLyBFdmVudHMgY2FuIGJlIHJlZW50cmFudCAoZS5nLiwgZm9jdXMpLlxuICAgIGV2ZW50ID0gZXZlbnQxO1xuICAgIHRyeSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIHRoaXMuX19kYXRhX18sIGluZGV4LCBncm91cCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGV2ZW50ID0gZXZlbnQwO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25SZW1vdmUodHlwZW5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbjtcbiAgICBpZiAoIW9uKSByZXR1cm47XG4gICAgZm9yICh2YXIgaiA9IDAsIGkgPSAtMSwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgaWYgKG8gPSBvbltqXSwgKCF0eXBlbmFtZS50eXBlIHx8IG8udHlwZSA9PT0gdHlwZW5hbWUudHlwZSkgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvblsrK2ldID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCsraSkgb24ubGVuZ3RoID0gaTtcbiAgICBlbHNlIGRlbGV0ZSB0aGlzLl9fb247XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uQWRkKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgd3JhcCA9IGZpbHRlckV2ZW50cy5oYXNPd25Qcm9wZXJ0eSh0eXBlbmFtZS50eXBlKSA/IGZpbHRlckNvbnRleHRMaXN0ZW5lciA6IGNvbnRleHRMaXN0ZW5lcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIGksIGdyb3VwKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uLCBvLCBsaXN0ZW5lciA9IHdyYXAodmFsdWUsIGksIGdyb3VwKTtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAoKG8gPSBvbltqXSkudHlwZSA9PT0gdHlwZW5hbWUudHlwZSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciA9IGxpc3RlbmVyLCBvLmNhcHR1cmUgPSBjYXB0dXJlKTtcbiAgICAgICAgby52YWx1ZSA9IHZhbHVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0eXBlbmFtZS50eXBlLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgbyA9IHt0eXBlOiB0eXBlbmFtZS50eXBlLCBuYW1lOiB0eXBlbmFtZS5uYW1lLCB2YWx1ZTogdmFsdWUsIGxpc3RlbmVyOiBsaXN0ZW5lciwgY2FwdHVyZTogY2FwdHVyZX07XG4gICAgaWYgKCFvbikgdGhpcy5fX29uID0gW29dO1xuICAgIGVsc2Ugb24ucHVzaChvKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB0eXBlbmFtZXMgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIpLCBpLCBuID0gdHlwZW5hbWVzLmxlbmd0aCwgdDtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgb24gPSB0aGlzLm5vZGUoKS5fX29uO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGZvciAoaSA9IDAsIG8gPSBvbltqXTsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoKHQgPSB0eXBlbmFtZXNbaV0pLnR5cGUgPT09IG8udHlwZSAmJiB0Lm5hbWUgPT09IG8ubmFtZSkge1xuICAgICAgICAgIHJldHVybiBvLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIG9uID0gdmFsdWUgPyBvbkFkZCA6IG9uUmVtb3ZlO1xuICBpZiAoY2FwdHVyZSA9PSBudWxsKSBjYXB0dXJlID0gZmFsc2U7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBjYXB0dXJlKSk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3VzdG9tRXZlbnQoZXZlbnQxLCBsaXN0ZW5lciwgdGhhdCwgYXJncykge1xuICB2YXIgZXZlbnQwID0gZXZlbnQ7XG4gIGV2ZW50MS5zb3VyY2VFdmVudCA9IGV2ZW50O1xuICBldmVudCA9IGV2ZW50MTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0gZmluYWxseSB7XG4gICAgZXZlbnQgPSBldmVudDA7XG4gIH1cbn1cbiIsImltcG9ydCBkZWZhdWx0VmlldyBmcm9tIFwiLi4vd2luZG93XCI7XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQobm9kZSwgdHlwZSwgcGFyYW1zKSB7XG4gIHZhciB3aW5kb3cgPSBkZWZhdWx0Vmlldyhub2RlKSxcbiAgICAgIGV2ZW50ID0gd2luZG93LkN1c3RvbUV2ZW50O1xuXG4gIGlmICh0eXBlb2YgZXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGV2ZW50ID0gbmV3IGV2ZW50KHR5cGUsIHBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgZXZlbnQgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcbiAgICBpZiAocGFyYW1zKSBldmVudC5pbml0RXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlKSwgZXZlbnQuZGV0YWlsID0gcGFyYW1zLmRldGFpbDtcbiAgICBlbHNlIGV2ZW50LmluaXRFdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UpO1xuICB9XG5cbiAgbm9kZS5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zdGFudCh0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgcGFyYW1zID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZGlzcGF0Y2hGdW5jdGlvblxuICAgICAgOiBkaXNwYXRjaENvbnN0YW50KSh0eXBlLCBwYXJhbXMpKTtcbn1cbiIsImltcG9ydCBzZWxlY3Rpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0YSBmcm9tIFwiLi9kYXRhXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VudGVyIGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2V4aXQgZnJvbSBcIi4vZXhpdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9qb2luIGZyb20gXCIuL2pvaW5cIjtcbmltcG9ydCBzZWxlY3Rpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fb3JkZXIgZnJvbSBcIi4vb3JkZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc29ydCBmcm9tIFwiLi9zb3J0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NhbGwgZnJvbSBcIi4vY2FsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlcyBmcm9tIFwiLi9ub2Rlc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9ub2RlIGZyb20gXCIuL25vZGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2l6ZSBmcm9tIFwiLi9zaXplXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VtcHR5IGZyb20gXCIuL2VtcHR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCBzZWxlY3Rpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCBzZWxlY3Rpb25fcHJvcGVydHkgZnJvbSBcIi4vcHJvcGVydHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xhc3NlZCBmcm9tIFwiLi9jbGFzc2VkXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9odG1sIGZyb20gXCIuL2h0bWxcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmFpc2UgZnJvbSBcIi4vcmFpc2VcIjtcbmltcG9ydCBzZWxlY3Rpb25fbG93ZXIgZnJvbSBcIi4vbG93ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXBwZW5kIGZyb20gXCIuL2FwcGVuZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnNlcnQgZnJvbSBcIi4vaW5zZXJ0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2xvbmUgZnJvbSBcIi4vY2xvbmVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZGF0dW0gZnJvbSBcIi4vZGF0dW1cIjtcbmltcG9ydCBzZWxlY3Rpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCBzZWxlY3Rpb25fZGlzcGF0Y2ggZnJvbSBcIi4vZGlzcGF0Y2hcIjtcblxuZXhwb3J0IHZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0aW9uKGdyb3VwcywgcGFyZW50cykge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XV0sIHJvb3QpO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgb3JkZXI6IHNlbGVjdGlvbl9vcmRlcixcbiAgc29ydDogc2VsZWN0aW9uX3NvcnQsXG4gIGNhbGw6IHNlbGVjdGlvbl9jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX25vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fbm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3NpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9lYWNoLFxuICBhdHRyOiBzZWxlY3Rpb25fYXR0cixcbiAgc3R5bGU6IHNlbGVjdGlvbl9zdHlsZSxcbiAgcHJvcGVydHk6IHNlbGVjdGlvbl9wcm9wZXJ0eSxcbiAgY2xhc3NlZDogc2VsZWN0aW9uX2NsYXNzZWQsXG4gIHRleHQ6IHNlbGVjdGlvbl90ZXh0LFxuICBodG1sOiBzZWxlY3Rpb25faHRtbCxcbiAgcmFpc2U6IHNlbGVjdGlvbl9yYWlzZSxcbiAgbG93ZXI6IHNlbGVjdGlvbl9sb3dlcixcbiAgYXBwZW5kOiBzZWxlY3Rpb25fYXBwZW5kLFxuICBpbnNlcnQ6IHNlbGVjdGlvbl9pbnNlcnQsXG4gIHJlbW92ZTogc2VsZWN0aW9uX3JlbW92ZSxcbiAgY2xvbmU6IHNlbGVjdGlvbl9jbG9uZSxcbiAgZGF0dW06IHNlbGVjdGlvbl9kYXR1bSxcbiAgb246IHNlbGVjdGlvbl9vbixcbiAgZGlzcGF0Y2g6IHNlbGVjdGlvbl9kaXNwYXRjaFxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2VsZWN0aW9uO1xuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2VsZWN0b3JBbGwgZnJvbSBcIi4uL3NlbGVjdG9yQWxsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGVzID0gbmV3IEFycmF5KHRoaXMuc2l6ZSgpKSwgaSA9IC0xO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7IG5vZGVzWysraV0gPSB0aGlzOyB9KTtcbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHZhciBub2RlID0gZ3JvdXBbaV07XG4gICAgICBpZiAobm9kZSkgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNpemUgPSAwO1xuICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7ICsrc2l6ZTsgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiAhdGhpcy5ub2RlKCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSBjYWxsYmFjay5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0KGNyZWF0b3IobmFtZSkuY2FsbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKTtcbn1cbiIsInZhciBuZXh0SWQgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2NhbCgpIHtcbiAgcmV0dXJuIG5ldyBMb2NhbDtcbn1cblxuZnVuY3Rpb24gTG9jYWwoKSB7XG4gIHRoaXMuXyA9IFwiQFwiICsgKCsrbmV4dElkKS50b1N0cmluZygzNik7XG59XG5cbkxvY2FsLnByb3RvdHlwZSA9IGxvY2FsLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExvY2FsLFxuICBnZXQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl87XG4gICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgcmV0dXJuIG5vZGVbaWRdO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5vZGVbdGhpcy5fXSA9IHZhbHVlO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fIGluIG5vZGUgJiYgZGVsZXRlIG5vZGVbdGhpcy5fXTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiLi9zZWxlY3Rpb24vb25cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjdXJyZW50ID0gZXZlbnQsIHNvdXJjZTtcbiAgd2hpbGUgKHNvdXJjZSA9IGN1cnJlbnQuc291cmNlRXZlbnQpIGN1cnJlbnQgPSBzb3VyY2U7XG4gIHJldHVybiBjdXJyZW50O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgZXZlbnQpIHtcbiAgdmFyIHN2ZyA9IG5vZGUub3duZXJTVkdFbGVtZW50IHx8IG5vZGU7XG5cbiAgaWYgKHN2Zy5jcmVhdGVTVkdQb2ludCkge1xuICAgIHZhciBwb2ludCA9IHN2Zy5jcmVhdGVTVkdQb2ludCgpO1xuICAgIHBvaW50LnggPSBldmVudC5jbGllbnRYLCBwb2ludC55ID0gZXZlbnQuY2xpZW50WTtcbiAgICBwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShub2RlLmdldFNjcmVlbkNUTSgpLmludmVyc2UoKSk7XG4gICAgcmV0dXJuIFtwb2ludC54LCBwb2ludC55XTtcbiAgfVxuXG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIFtldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gbm9kZS5jbGllbnRMZWZ0LCBldmVudC5jbGllbnRZIC0gcmVjdC50b3AgLSBub2RlLmNsaWVudFRvcF07XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHZhciBldmVudCA9IHNvdXJjZUV2ZW50KCk7XG4gIGlmIChldmVudC5jaGFuZ2VkVG91Y2hlcykgZXZlbnQgPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgcmV0dXJuIHBvaW50KG5vZGUsIGV2ZW50KTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0sIFtkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdKVxuICAgICAgOiBuZXcgU2VsZWN0aW9uKFtzZWxlY3RvciA9PSBudWxsID8gW10gOiBzZWxlY3Rvcl0sIHJvb3QpO1xufVxuIiwiaW1wb3J0IHNvdXJjZUV2ZW50IGZyb20gXCIuL3NvdXJjZUV2ZW50XCI7XG5pbXBvcnQgcG9pbnQgZnJvbSBcIi4vcG9pbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgdG91Y2hlcywgaWRlbnRpZmllcikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIGlkZW50aWZpZXIgPSB0b3VjaGVzLCB0b3VjaGVzID0gc291cmNlRXZlbnQoKS5jaGFuZ2VkVG91Y2hlcztcblxuICBmb3IgKHZhciBpID0gMCwgbiA9IHRvdWNoZXMgPyB0b3VjaGVzLmxlbmd0aCA6IDAsIHRvdWNoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCh0b3VjaCA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJldHVybiBwb2ludChub2RlLCB0b3VjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQgc291cmNlRXZlbnQgZnJvbSBcIi4vc291cmNlRXZlbnRcIjtcbmltcG9ydCBwb2ludCBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB0b3VjaGVzKSB7XG4gIGlmICh0b3VjaGVzID09IG51bGwpIHRvdWNoZXMgPSBzb3VyY2VFdmVudCgpLnRvdWNoZXM7XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0b3VjaGVzID8gdG91Y2hlcy5sZW5ndGggOiAwLCBwb2ludHMgPSBuZXcgQXJyYXkobik7IGkgPCBuOyArK2kpIHtcbiAgICBwb2ludHNbaV0gPSBwb2ludChub2RlLCB0b3VjaGVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBwb2ludHM7XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2V2ZW50IGZyb20gXCIuL25vZXZlbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmlldykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbm9ldmVudCwgdHJ1ZSk7XG4gIGlmIChcIm9uc2VsZWN0c3RhcnRcIiBpbiByb290KSB7XG4gICAgc2VsZWN0aW9uLm9uKFwic2VsZWN0c3RhcnQuZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICByb290Ll9fbm9zZWxlY3QgPSByb290LnN0eWxlLk1velVzZXJTZWxlY3Q7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gXCJub25lXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHllc2RyYWcodmlldywgbm9jbGljaykge1xuICB2YXIgcm9vdCA9IHZpZXcuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgc2VsZWN0aW9uID0gc2VsZWN0KHZpZXcpLm9uKFwiZHJhZ3N0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIGlmIChub2NsaWNrKSB7XG4gICAgc2VsZWN0aW9uLm9uKFwiY2xpY2suZHJhZ1wiLCBub2V2ZW50LCB0cnVlKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBzZWxlY3Rpb24ub24oXCJjbGljay5kcmFnXCIsIG51bGwpOyB9LCAwKTtcbiAgfVxuICBpZiAoXCJvbnNlbGVjdHN0YXJ0XCIgaW4gcm9vdCkge1xuICAgIHNlbGVjdGlvbi5vbihcInNlbGVjdHN0YXJ0LmRyYWdcIiwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gcm9vdC5fX25vc2VsZWN0O1xuICAgIGRlbGV0ZSByb290Ll9fbm9zZWxlY3Q7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRHJhZ0V2ZW50KHRhcmdldCwgdHlwZSwgc3ViamVjdCwgaWQsIGFjdGl2ZSwgeCwgeSwgZHgsIGR5LCBkaXNwYXRjaCkge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zdWJqZWN0ID0gc3ViamVjdDtcbiAgdGhpcy5pZGVudGlmaWVyID0gaWQ7XG4gIHRoaXMuYWN0aXZlID0gYWN0aXZlO1xuICB0aGlzLnggPSB4O1xuICB0aGlzLnkgPSB5O1xuICB0aGlzLmR4ID0gZHg7XG4gIHRoaXMuZHkgPSBkeTtcbiAgdGhpcy5fID0gZGlzcGF0Y2g7XG59XG5cbkRyYWdFdmVudC5wcm90b3R5cGUub24gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHZhbHVlID0gdGhpcy5fLm9uLmFwcGx5KHRoaXMuXywgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlID09PSB0aGlzLl8gPyB0aGlzIDogdmFsdWU7XG59O1xuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2V2ZW50LCBjdXN0b21FdmVudCwgc2VsZWN0LCBtb3VzZSwgdG91Y2h9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBub2RyYWcsIHt5ZXNkcmFnfSBmcm9tIFwiLi9ub2RyYWcuanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgRHJhZ0V2ZW50IGZyb20gXCIuL2V2ZW50LmpzXCI7XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb250YWluZXIoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRTdWJqZWN0KGQpIHtcbiAgcmV0dXJuIGQgPT0gbnVsbCA/IHt4OiBldmVudC54LCB5OiBldmVudC55fSA6IGQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGNvbnRhaW5lciA9IGRlZmF1bHRDb250YWluZXIsXG4gICAgICBzdWJqZWN0ID0gZGVmYXVsdFN1YmplY3QsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAgZ2VzdHVyZXMgPSB7fSxcbiAgICAgIGxpc3RlbmVycyA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJkcmFnXCIsIFwiZW5kXCIpLFxuICAgICAgYWN0aXZlID0gMCxcbiAgICAgIG1vdXNlZG93bngsXG4gICAgICBtb3VzZWRvd255LFxuICAgICAgbW91c2Vtb3ZpbmcsXG4gICAgICB0b3VjaGVuZGluZyxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiBkcmFnKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAub24oXCJtb3VzZWRvd24uZHJhZ1wiLCBtb3VzZWRvd25lZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmRyYWdcIiwgdG91Y2hzdGFydGVkKVxuICAgICAgICAub24oXCJ0b3VjaG1vdmUuZHJhZ1wiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5kcmFnIHRvdWNoY2FuY2VsLmRyYWdcIiwgdG91Y2hlbmRlZClcbiAgICAgICAgLnN0eWxlKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKVxuICAgICAgICAuc3R5bGUoXCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3JcIiwgXCJyZ2JhKDAsMCwwLDApXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnZXN0dXJlID0gYmVmb3Jlc3RhcnQoXCJtb3VzZVwiLCBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgbW91c2UsIHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKCFnZXN0dXJlKSByZXR1cm47XG4gICAgc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLmRyYWdcIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLmRyYWdcIiwgbW91c2V1cHBlZCwgdHJ1ZSk7XG4gICAgbm9kcmFnKGV2ZW50LnZpZXcpO1xuICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICBtb3VzZW1vdmluZyA9IGZhbHNlO1xuICAgIG1vdXNlZG93bnggPSBldmVudC5jbGllbnRYO1xuICAgIG1vdXNlZG93bnkgPSBldmVudC5jbGllbnRZO1xuICAgIGdlc3R1cmUoXCJzdGFydFwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNlbW92ZWQoKSB7XG4gICAgbm9ldmVudCgpO1xuICAgIGlmICghbW91c2Vtb3ZpbmcpIHtcbiAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSBtb3VzZWRvd254LCBkeSA9IGV2ZW50LmNsaWVudFkgLSBtb3VzZWRvd255O1xuICAgICAgbW91c2Vtb3ZpbmcgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgIH1cbiAgICBnZXN0dXJlcy5tb3VzZShcImRyYWdcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgIHNlbGVjdChldmVudC52aWV3KS5vbihcIm1vdXNlbW92ZS5kcmFnIG1vdXNldXAuZHJhZ1wiLCBudWxsKTtcbiAgICB5ZXNkcmFnKGV2ZW50LnZpZXcsIG1vdXNlbW92aW5nKTtcbiAgICBub2V2ZW50KCk7XG4gICAgZ2VzdHVyZXMubW91c2UoXCJlbmRcIik7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIGMgPSBjb250YWluZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBiZWZvcmVzdGFydCh0b3VjaGVzW2ldLmlkZW50aWZpZXIsIGMsIHRvdWNoLCB0aGlzLCBhcmd1bWVudHMpKSB7XG4gICAgICAgIG5vcHJvcGFnYXRpb24oKTtcbiAgICAgICAgZ2VzdHVyZShcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNobW92ZWQoKSB7XG4gICAgdmFyIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCBnZXN0dXJlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKGdlc3R1cmUgPSBnZXN0dXJlc1t0b3VjaGVzW2ldLmlkZW50aWZpZXJdKSB7XG4gICAgICAgIG5vZXZlbnQoKTtcbiAgICAgICAgZ2VzdHVyZShcImRyYWdcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICB2YXIgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIGdlc3R1cmU7XG5cbiAgICBpZiAodG91Y2hlbmRpbmcpIGNsZWFyVGltZW91dCh0b3VjaGVuZGluZyk7XG4gICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoZ2VzdHVyZSA9IGdlc3R1cmVzW3RvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgICBnZXN0dXJlKFwiZW5kXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGJlZm9yZXN0YXJ0KGlkLCBjb250YWluZXIsIHBvaW50LCB0aGF0LCBhcmdzKSB7XG4gICAgdmFyIHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgcywgZHgsIGR5LFxuICAgICAgICBzdWJsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuY29weSgpO1xuXG4gICAgaWYgKCFjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIFwiYmVmb3Jlc3RhcnRcIiwgcywgaWQsIGFjdGl2ZSwgcFswXSwgcFsxXSwgMCwgMCwgc3VibGlzdGVuZXJzKSwgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKGV2ZW50LnN1YmplY3QgPSBzID0gc3ViamVjdC5hcHBseSh0aGF0LCBhcmdzKSkgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgZHggPSBzLnggLSBwWzBdIHx8IDA7XG4gICAgICBkeSA9IHMueSAtIHBbMV0gfHwgMDtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pKSByZXR1cm47XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZ2VzdHVyZSh0eXBlKSB7XG4gICAgICB2YXIgcDAgPSBwLCBuO1xuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJzdGFydFwiOiBnZXN0dXJlc1tpZF0gPSBnZXN0dXJlLCBuID0gYWN0aXZlKys7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiZW5kXCI6IGRlbGV0ZSBnZXN0dXJlc1tpZF0sIC0tYWN0aXZlOyAvLyBub2JyZWFrXG4gICAgICAgIGNhc2UgXCJkcmFnXCI6IHAgPSBwb2ludChjb250YWluZXIsIGlkKSwgbiA9IGFjdGl2ZTsgYnJlYWs7XG4gICAgICB9XG4gICAgICBjdXN0b21FdmVudChuZXcgRHJhZ0V2ZW50KGRyYWcsIHR5cGUsIHMsIGlkLCBuLCBwWzBdICsgZHgsIHBbMV0gKyBkeSwgcFswXSAtIHAwWzBdLCBwWzFdIC0gcDBbMV0sIHN1Ymxpc3RlbmVycyksIHN1Ymxpc3RlbmVycy5hcHBseSwgc3VibGlzdGVuZXJzLCBbdHlwZSwgdGhhdCwgYXJnc10pO1xuICAgIH07XG4gIH1cblxuICBkcmFnLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGRyYWcpIDogZmlsdGVyO1xuICB9O1xuXG4gIGRyYWcuY29udGFpbmVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRhaW5lciA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoXyksIGRyYWcpIDogY29udGFpbmVyO1xuICB9O1xuXG4gIGRyYWcuc3ViamVjdCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdWJqZWN0ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChfKSwgZHJhZykgOiBzdWJqZWN0O1xuICB9O1xuXG4gIGRyYWcudG91Y2hhYmxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRvdWNoYWJsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoISFfKSwgZHJhZykgOiB0b3VjaGFibGU7XG4gIH07XG5cbiAgZHJhZy5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBkcmFnIDogdmFsdWU7XG4gIH07XG5cbiAgZHJhZy5jbGlja0Rpc3RhbmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsaWNrRGlzdGFuY2UyID0gKF8gPSArXykgKiBfLCBkcmFnKSA6IE1hdGguc3FydChjbGlja0Rpc3RhbmNlMik7XG4gIH07XG5cbiAgcmV0dXJuIGRyYWc7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC8sXG4gICAgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBjb3B5OiBmdW5jdGlvbihjaGFubmVscykge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyB0aGlzLmNvbnN0cnVjdG9yLCB0aGlzLCBjaGFubmVscyk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5kaXNwbGF5YWJsZSgpO1xuICB9LFxuICBoZXg6IGNvbG9yX2Zvcm1hdEhleCwgLy8gRGVwcmVjYXRlZCEgVXNlIGNvbG9yLmZvcm1hdEhleC5cbiAgZm9ybWF0SGV4OiBjb2xvcl9mb3JtYXRIZXgsXG4gIGZvcm1hdEhzbDogY29sb3JfZm9ybWF0SHNsLFxuICBmb3JtYXRSZ2I6IGNvbG9yX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IGNvbG9yX2Zvcm1hdFJnYlxufSk7XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0SGV4KCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdEhzbCgpIHtcbiAgcmV0dXJuIGhzbENvbnZlcnQodGhpcykuZm9ybWF0SHNsKCk7XG59XG5cbmZ1bmN0aW9uIGNvbG9yX2Zvcm1hdFJnYigpIHtcbiAgcmV0dXJuIHRoaXMucmdiKCkuZm9ybWF0UmdiKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbTtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKC0wLjUgPD0gdGhpcy5yICYmIHRoaXMuciA8IDI1NS41KVxuICAgICAgICAmJiAoLTAuNSA8PSB0aGlzLmcgJiYgdGhpcy5nIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuYiAmJiB0aGlzLmIgPCAyNTUuNSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiByZ2JfZm9ybWF0SGV4LCAvLyBEZXByZWNhdGVkISBVc2UgY29sb3IuZm9ybWF0SGV4LlxuICBmb3JtYXRIZXg6IHJnYl9mb3JtYXRIZXgsXG4gIGZvcm1hdFJnYjogcmdiX2Zvcm1hdFJnYixcbiAgdG9TdHJpbmc6IHJnYl9mb3JtYXRSZ2Jcbn0pKTtcblxuZnVuY3Rpb24gcmdiX2Zvcm1hdEhleCgpIHtcbiAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xufVxuXG5mdW5jdGlvbiByZ2JfZm9ybWF0UmdiKCkge1xuICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLnIpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xufVxuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBmb3JtYXRIc2w6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICAgIHJldHVybiAoYSA9PT0gMSA/IFwiaHNsKFwiIDogXCJoc2xhKFwiKVxuICAgICAgICArICh0aGlzLmggfHwgMCkgKyBcIiwgXCJcbiAgICAgICAgKyAodGhpcy5zIHx8IDApICogMTAwICsgXCIlLCBcIlxuICAgICAgICArICh0aGlzLmwgfHwgMCkgKiAxMDAgKyBcIiVcIlxuICAgICAgICArIChhID09PSAxID8gXCIpXCIgOiBcIiwgXCIgKyBhICsgXCIpXCIpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxuLy8gaHR0cHM6Ly9vYnNlcnZhYmxlaHEuY29tL0BtYm9zdG9jay9sYWItYW5kLXJnYlxudmFyIEsgPSAxOCxcbiAgICBYbiA9IDAuOTY0MjIsXG4gICAgWW4gPSAxLFxuICAgIFpuID0gMC44MjUyMSxcbiAgICB0MCA9IDQgLyAyOSxcbiAgICB0MSA9IDYgLyAyOSxcbiAgICB0MiA9IDMgKiB0MSAqIHQxLFxuICAgIHQzID0gdDEgKiB0MSAqIHQxO1xuXG5mdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gaGNsMmxhYihvKTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IHJnYjJscmdiKG8uciksXG4gICAgICBnID0gcmdiMmxyZ2Ioby5nKSxcbiAgICAgIGIgPSByZ2IybHJnYihvLmIpLFxuICAgICAgeSA9IHh5ejJsYWIoKDAuMjIyNTA0NSAqIHIgKyAwLjcxNjg3ODYgKiBnICsgMC4wNjA2MTY5ICogYikgLyBZbiksIHgsIHo7XG4gIGlmIChyID09PSBnICYmIGcgPT09IGIpIHggPSB6ID0geTsgZWxzZSB7XG4gICAgeCA9IHh5ejJsYWIoKDAuNDM2MDc0NyAqIHIgKyAwLjM4NTA2NDkgKiBnICsgMC4xNDMwODA0ICogYikgLyBYbik7XG4gICAgeiA9IHh5ejJsYWIoKDAuMDEzOTMyMiAqIHIgKyAwLjA5NzEwNDUgKiBnICsgMC43MTQxNzMzICogYikgLyBabik7XG4gIH1cbiAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5hID0gK2E7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XG4gICAgeCA9IFhuICogbGFiMnh5eih4KTtcbiAgICB5ID0gWW4gKiBsYWIyeHl6KHkpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBscmdiMnJnYiggMy4xMzM4NTYxICogeCAtIDEuNjE2ODY2NyAqIHkgLSAwLjQ5MDYxNDYgKiB6KSxcbiAgICAgIGxyZ2IycmdiKC0wLjk3ODc2ODQgKiB4ICsgMS45MTYxNDE1ICogeSArIDAuMDMzNDU0MCAqIHopLFxuICAgICAgbHJnYjJyZ2IoIDAuMDcxOTQ1MyAqIHggLSAwLjIyODk5MTQgKiB5ICsgMS40MDUyNDI3ICogeiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbn1cblxuZnVuY3Rpb24gbHJnYjJyZ2IoeCkge1xuICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbn1cblxuZnVuY3Rpb24gcmdiMmxyZ2IoeCkge1xuICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbn1cblxuZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gIGlmIChvLmEgPT09IDAgJiYgby5iID09PSAwKSByZXR1cm4gbmV3IEhjbChOYU4sIDAgPCBvLmwgJiYgby5sIDwgMTAwID8gMCA6IE5hTiwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxjaChsLCBjLCBoLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChsKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZnVuY3Rpb24gaGNsMmxhYihvKSB7XG4gIGlmIChpc05hTihvLmgpKSByZXR1cm4gbmV3IExhYihvLmwsIDAsIDAsIG8ub3BhY2l0eSk7XG4gIHZhciBoID0gby5oICogZGVnMnJhZDtcbiAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG59XG5cbmRlZmluZShIY2wsIGhjbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhjbDJsYWIodGhpcykucmdiKCk7XG4gIH1cbn0pKTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZFwiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBuYiA9IGIgPyBiLmxlbmd0aCA6IDAsXG4gICAgICBuYSA9IGEgPyBNYXRoLm1pbihuYiwgYS5sZW5ndGgpIDogMCxcbiAgICAgIHggPSBuZXcgQXJyYXkobmEpLFxuICAgICAgYyA9IG5ldyBBcnJheShuYiksXG4gICAgICBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSB4W2ldID0gdmFsdWUoYVtpXSwgYltpXSk7XG4gIGZvciAoOyBpIDwgbmI7ICsraSkgY1tpXSA9IGJbaV07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgY1tpXSA9IHhbaV0odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBkID0gbmV3IERhdGU7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBkLnNldFRpbWUoYSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlXCI7XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGVcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdFwiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmdcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBhcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFuZ2UpIHtcbiAgdmFyIG4gPSByYW5nZS5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHJhbmdlW01hdGgubWF4KDAsIE1hdGgubWluKG4gLSAxLCBNYXRoLmZsb29yKHQgKiBuKSkpXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0gaHVlKCthLCArYik7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIHggPSBpKHQpO1xuICAgIHJldHVybiB4IC0gMzYwICogTWF0aC5mbG9vcih4IC8gMzYwKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSArIGIgKiB0KTtcbiAgfTtcbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2VcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsInZhciByaG8gPSBNYXRoLlNRUlQyLFxuICAgIHJobzIgPSAyLFxuICAgIHJobzQgPSA0LFxuICAgIGVwc2lsb24yID0gMWUtMTI7XG5cbmZ1bmN0aW9uIGNvc2goeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpICsgMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gc2luaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgLSAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiB0YW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKDIgKiB4KSkgLSAxKSAvICh4ICsgMSk7XG59XG5cbi8vIHAwID0gW3V4MCwgdXkwLCB3MF1cbi8vIHAxID0gW3V4MSwgdXkxLCB3MV1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHAwLCBwMSkge1xuICB2YXIgdXgwID0gcDBbMF0sIHV5MCA9IHAwWzFdLCB3MCA9IHAwWzJdLFxuICAgICAgdXgxID0gcDFbMF0sIHV5MSA9IHAxWzFdLCB3MSA9IHAxWzJdLFxuICAgICAgZHggPSB1eDEgLSB1eDAsXG4gICAgICBkeSA9IHV5MSAtIHV5MCxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICBpLFxuICAgICAgUztcblxuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHUwIOKJhSB1MS5cbiAgaWYgKGQyIDwgZXBzaWxvbjIpIHtcbiAgICBTID0gTWF0aC5sb2codzEgLyB3MCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHQgKiBkeCxcbiAgICAgICAgdXkwICsgdCAqIGR5LFxuICAgICAgICB3MCAqIE1hdGguZXhwKHJobyAqIHQgKiBTKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICAvLyBHZW5lcmFsIGNhc2UuXG4gIGVsc2Uge1xuICAgIHZhciBkMSA9IE1hdGguc3FydChkMiksXG4gICAgICAgIGIwID0gKHcxICogdzEgLSB3MCAqIHcwICsgcmhvNCAqIGQyKSAvICgyICogdzAgKiByaG8yICogZDEpLFxuICAgICAgICBiMSA9ICh3MSAqIHcxIC0gdzAgKiB3MCAtIHJobzQgKiBkMikgLyAoMiAqIHcxICogcmhvMiAqIGQxKSxcbiAgICAgICAgcjAgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjAgKiBiMCArIDEpIC0gYjApLFxuICAgICAgICByMSA9IE1hdGgubG9nKE1hdGguc3FydChiMSAqIGIxICsgMSkgLSBiMSk7XG4gICAgUyA9IChyMSAtIHIwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIHMgPSB0ICogUyxcbiAgICAgICAgICBjb3NocjAgPSBjb3NoKHIwKSxcbiAgICAgICAgICB1ID0gdzAgLyAocmhvMiAqIGQxKSAqIChjb3NocjAgKiB0YW5oKHJobyAqIHMgKyByMCkgLSBzaW5oKHIwKSk7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB1ICogZHgsXG4gICAgICAgIHV5MCArIHUgKiBkeSxcbiAgICAgICAgdzAgKiBjb3NocjAgLyBjb3NoKHJobyAqIHMgKyByMClcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgaS5kdXJhdGlvbiA9IFMgKiAxMDAwO1xuXG4gIHJldHVybiBpO1xufVxuIiwiaW1wb3J0IHtoc2wgYXMgY29sb3JIc2x9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBoc2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIc2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIc2woZW5kKSkuaCksXG4gICAgICAgIHMgPSBjb2xvcihzdGFydC5zLCBlbmQucyksXG4gICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhzbChodWUpO1xuZXhwb3J0IHZhciBoc2xMb25nID0gaHNsKGNvbG9yKTtcbiIsImltcG9ydCB7bGFiIGFzIGNvbG9yTGFifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciBmcm9tIFwiLi9jb2xvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIoc3RhcnQsIGVuZCkge1xuICB2YXIgbCA9IGNvbG9yKChzdGFydCA9IGNvbG9yTGFiKHN0YXJ0KSkubCwgKGVuZCA9IGNvbG9yTGFiKGVuZCkpLmwpLFxuICAgICAgYSA9IGNvbG9yKHN0YXJ0LmEsIGVuZC5hKSxcbiAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgIHN0YXJ0LmEgPSBhKHQpO1xuICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gIH07XG59XG4iLCJpbXBvcnQge2hjbCBhcyBjb2xvckhjbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGhjbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhjbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhjbChlbmQpKS5oKSxcbiAgICAgICAgYyA9IGNvbG9yKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaGNsKGh1ZSk7XG5leHBvcnQgdmFyIGhjbExvbmcgPSBoY2woY29sb3IpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXggYXMgY29sb3JDdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaHVlKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgIHkgPSAreTtcblxuICAgIGZ1bmN0aW9uIGN1YmVoZWxpeChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjb2xvckN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4LmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4O1xuICB9KSgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3ViZWhlbGl4KGh1ZSk7XG5leHBvcnQgdmFyIGN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgoY29sb3IpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGllY2V3aXNlKGludGVycG9sYXRlLCB2YWx1ZXMpIHtcbiAgdmFyIGkgPSAwLCBuID0gdmFsdWVzLmxlbmd0aCAtIDEsIHYgPSB2YWx1ZXNbMF0sIEkgPSBuZXcgQXJyYXkobiA8IDAgPyAwIDogbik7XG4gIHdoaWxlIChpIDwgbikgSVtpXSA9IGludGVycG9sYXRlKHYsIHYgPSB2YWx1ZXNbKytpXSk7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMSwgTWF0aC5mbG9vcih0ICo9IG4pKSk7XG4gICAgcmV0dXJuIElbaV0odCAtIGkpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW50ZXJwb2xhdG9yLCBuKSB7XG4gIHZhciBzYW1wbGVzID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgc2FtcGxlc1tpXSA9IGludGVycG9sYXRvcihpIC8gKG4gLSAxKSk7XG4gIHJldHVybiBzYW1wbGVzO1xufVxuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7VGltZXIsIG5vd30gZnJvbSBcIi4vdGltZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyLCB0b3RhbCA9IGRlbGF5O1xuICBpZiAoZGVsYXkgPT0gbnVsbCkgcmV0dXJuIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpLCB0O1xuICBkZWxheSA9ICtkZWxheSwgdGltZSA9IHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWU7XG4gIHQucmVzdGFydChmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICBlbGFwc2VkICs9IHRvdGFsO1xuICAgIHQucmVzdGFydCh0aWNrLCB0b3RhbCArPSBkZWxheSwgdGltZSk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge2dldCwgaW5pdH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZGVsYXlGdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlbGF5Q29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZGVsYXlGdW5jdGlvblxuICAgICAgICAgIDogZGVsYXlDb25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZGVsYXk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkdXJhdGlvbkZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkdXJhdGlvbkNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gZHVyYXRpb25GdW5jdGlvblxuICAgICAgICAgIDogZHVyYXRpb25Db25zdGFudCkoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZHVyYXRpb247XG59XG4iLCJpbXBvcnQge2dldCwgc2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5lYXNlID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaChlYXNlQ29uc3RhbnQoaWQsIHZhbHVlKSlcbiAgICAgIDogZ2V0KHRoaXMubm9kZSgpLCBpZCkuZWFzZTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gc3R5bGVOdWxsKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgc3RyaW5nMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHN0cmluZzEwID0gc3RyaW5nMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyksXG4gICAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgc3RyaW5nMSA9IHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZU1heWJlUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciBvbjAsIG9uMSwgbGlzdGVuZXIwLCBrZXkgPSBcInN0eWxlLlwiICsgbmFtZSwgZXZlbnQgPSBcImVuZC5cIiArIGtleSwgcmVtb3ZlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbixcbiAgICAgICAgbGlzdGVuZXIgPSBzY2hlZHVsZS52YWx1ZVtrZXldID09IG51bGwgPyByZW1vdmUgfHwgKHJlbW92ZSA9IHN0eWxlUmVtb3ZlKG5hbWUpKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCB8fCBsaXN0ZW5lcjAgIT09IGxpc3RlbmVyKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKGV2ZW50LCBsaXN0ZW5lcjAgPSBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlTnVsbChuYW1lLCBpKSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUpKVxuICAgIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSkpXG4gICAgICAuZWFjaChzdHlsZU1heWJlUmVtb3ZlKHRoaXMuX2lkLCBuYW1lKSlcbiAgICA6IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUpLCBwcmlvcml0eSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIG51bGwpO1xufVxuIiwiZnVuY3Rpb24gc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlMSA9IHZhbHVlKHRoaXMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTEgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZTE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLnR3ZWVuKFwidGV4dFwiLCB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyB0ZXh0RnVuY3Rpb24odHdlZW5WYWx1ZSh0aGlzLCBcInRleHRcIiwgdmFsdWUpKVxuICAgICAgOiB0ZXh0Q29uc3RhbnQodmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCIpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fb24gZnJvbSBcIi4vb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3JlbW92ZSBmcm9tIFwiLi9yZW1vdmVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3NlbGVjdGlvbiBmcm9tIFwiLi9zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZVR3ZWVuIGZyb20gXCIuL3N0eWxlVHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHQgZnJvbSBcIi4vdGV4dFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90d2VlbiBmcm9tIFwiLi90d2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZW5kIGZyb20gXCIuL2VuZFwiO1xuXG52YXIgaWQgPSAwO1xuXG5leHBvcnQgZnVuY3Rpb24gVHJhbnNpdGlvbihncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG4gIHRoaXMuX25hbWUgPSBuYW1lO1xuICB0aGlzLl9pZCA9IGlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHNlbGVjdGlvbigpLnRyYW5zaXRpb24obmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdJZCgpIHtcbiAgcmV0dXJuICsraWQ7XG59XG5cbnZhciBzZWxlY3Rpb25fcHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZTtcblxuVHJhbnNpdGlvbi5wcm90b3R5cGUgPSB0cmFuc2l0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRyYW5zaXRpb24sXG4gIHNlbGVjdDogdHJhbnNpdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogdHJhbnNpdGlvbl9zZWxlY3RBbGwsXG4gIGZpbHRlcjogdHJhbnNpdGlvbl9maWx0ZXIsXG4gIG1lcmdlOiB0cmFuc2l0aW9uX21lcmdlLFxuICBzZWxlY3Rpb246IHRyYW5zaXRpb25fc2VsZWN0aW9uLFxuICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uX3RyYW5zaXRpb24sXG4gIGNhbGw6IHNlbGVjdGlvbl9wcm90b3R5cGUuY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9wcm90b3R5cGUubm9kZSxcbiAgc2l6ZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX3Byb3RvdHlwZS5lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX3Byb3RvdHlwZS5lYWNoLFxuICBvbjogdHJhbnNpdGlvbl9vbixcbiAgYXR0cjogdHJhbnNpdGlvbl9hdHRyLFxuICBhdHRyVHdlZW46IHRyYW5zaXRpb25fYXR0clR3ZWVuLFxuICBzdHlsZTogdHJhbnNpdGlvbl9zdHlsZSxcbiAgc3R5bGVUd2VlbjogdHJhbnNpdGlvbl9zdHlsZVR3ZWVuLFxuICB0ZXh0OiB0cmFuc2l0aW9uX3RleHQsXG4gIHJlbW92ZTogdHJhbnNpdGlvbl9yZW1vdmUsXG4gIHR3ZWVuOiB0cmFuc2l0aW9uX3R3ZWVuLFxuICBkZWxheTogdHJhbnNpdGlvbl9kZWxheSxcbiAgZHVyYXRpb246IHRyYW5zaXRpb25fZHVyYXRpb24sXG4gIGVhc2U6IHRyYW5zaXRpb25fZWFzZSxcbiAgZW5kOiB0cmFuc2l0aW9uX2VuZFxufTtcbiIsImV4cG9ydCBmdW5jdGlvbiBsaW5lYXIodCkge1xuICByZXR1cm4gK3Q7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgcmV0dXJuIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVhZE91dCh0KSB7XG4gIHJldHVybiB0ICogKDIgLSB0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0IDogLS10ICogKDIgLSB0KSArIDEpIC8gMjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwidmFyIGV4cG9uZW50ID0gMztcblxuZXhwb3J0IHZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICB9XG5cbiAgcG9seUluLmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW47XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seU91dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZSk7XG4gIH1cblxuICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5T3V0O1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdyh0LCBlKSA6IDIgLSBNYXRoLnBvdygyIC0gdCwgZSkpIC8gMjtcbiAgfVxuXG4gIHBvbHlJbk91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluT3V0O1xufSkoZXhwb25lbnQpO1xuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBleHBJbih0KSB7XG4gIHJldHVybiBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBPdXQodCkge1xuICByZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhwSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdygyLCAxMCAqIHQgLSAxMCkgOiAyIC0gTWF0aC5wb3coMiwgMTAgLSAxMCAqIHQpKSAvIDI7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY2lyY2xlSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguc3FydCgxIC0gdCAqIHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2lyY2xlT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBNYXRoLnNxcnQoMSAtIHQgKiB0KSA6IE1hdGguc3FydCgxIC0gKHQgLT0gMikgKiB0KSArIDEpIC8gMjtcbn1cbiIsInZhciBiMSA9IDQgLyAxMSxcbiAgICBiMiA9IDYgLyAxMSxcbiAgICBiMyA9IDggLyAxMSxcbiAgICBiNCA9IDMgLyA0LFxuICAgIGI1ID0gOSAvIDExLFxuICAgIGI2ID0gMTAgLyAxMSxcbiAgICBiNyA9IDE1IC8gMTYsXG4gICAgYjggPSAyMSAvIDIyLFxuICAgIGI5ID0gNjMgLyA2NCxcbiAgICBiMCA9IDEgLyBiMSAvIGIxO1xuXG5leHBvcnQgZnVuY3Rpb24gYm91bmNlSW4odCkge1xuICByZXR1cm4gMSAtIGJvdW5jZU91dCgxIC0gdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICByZXR1cm4gKHQgPSArdCkgPCBiMSA/IGIwICogdCAqIHQgOiB0IDwgYjMgPyBiMCAqICh0IC09IGIyKSAqIHQgKyBiNCA6IHQgPCBiNiA/IGIwICogKHQgLT0gYjUpICogdCArIGI3IDogYjAgKiAodCAtPSBiOCkgKiB0ICsgYjk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IDEgLSBib3VuY2VPdXQoMSAtIHQpIDogYm91bmNlT3V0KHQgLSAxKSArIDEpIC8gMjtcbn1cbiIsInZhciBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuXG5leHBvcnQgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfVxuXG4gIGJhY2tJbi5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tJbjtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH1cblxuICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja091dDtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICB9XG5cbiAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luT3V0O1xufSkob3ZlcnNob290KTtcbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL3RyYW5zaXRpb24vaW5kZXhcIjtcbmltcG9ydCB7U0NIRURVTEVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5cbnZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgaTtcblxuICBpZiAoc2NoZWR1bGVzKSB7XG4gICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5zdGF0ZSA+IFNDSEVEVUxFRCAmJiBzY2hlZHVsZS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihbW25vZGVdXSwgcm9vdCwgbmFtZSwgK2kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIHR5cGUsIHNlbGVjdGlvbikge1xuICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zZWxlY3Rpb24gPSBzZWxlY3Rpb247XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge2N1c3RvbUV2ZW50LCBldmVudCwgdG91Y2gsIG1vdXNlLCBzZWxlY3R9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7aW50ZXJydXB0fSBmcm9tIFwiZDMtdHJhbnNpdGlvblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQgQnJ1c2hFdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IG5vZXZlbnQsIHtub3Byb3BhZ2F0aW9ufSBmcm9tIFwiLi9ub2V2ZW50LmpzXCI7XG5cbnZhciBNT0RFX0RSQUcgPSB7bmFtZTogXCJkcmFnXCJ9LFxuICAgIE1PREVfU1BBQ0UgPSB7bmFtZTogXCJzcGFjZVwifSxcbiAgICBNT0RFX0hBTkRMRSA9IHtuYW1lOiBcImhhbmRsZVwifSxcbiAgICBNT0RFX0NFTlRFUiA9IHtuYW1lOiBcImNlbnRlclwifTtcblxuZnVuY3Rpb24gbnVtYmVyMShlKSB7XG4gIHJldHVybiBbK2VbMF0sICtlWzFdXTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyMihlKSB7XG4gIHJldHVybiBbbnVtYmVyMShlWzBdKSwgbnVtYmVyMShlWzFdKV07XG59XG5cbmZ1bmN0aW9uIHRvdWNoZXIoaWRlbnRpZmllcikge1xuICByZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRvdWNoKHRhcmdldCwgZXZlbnQudG91Y2hlcywgaWRlbnRpZmllcik7XG4gIH07XG59XG5cbnZhciBYID0ge1xuICBuYW1lOiBcInhcIixcbiAgaGFuZGxlczogW1wid1wiLCBcImVcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeCwgZSkgeyByZXR1cm4geCA9PSBudWxsID8gbnVsbCA6IFtbK3hbMF0sIGVbMF1bMV1dLCBbK3hbMV0sIGVbMV1bMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzBdLCB4eVsxXVswXV07IH1cbn07XG5cbnZhciBZID0ge1xuICBuYW1lOiBcInlcIixcbiAgaGFuZGxlczogW1wiblwiLCBcInNcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeSwgZSkgeyByZXR1cm4geSA9PSBudWxsID8gbnVsbCA6IFtbZVswXVswXSwgK3lbMF1dLCBbZVsxXVswXSwgK3lbMV1dXTsgfSxcbiAgb3V0cHV0OiBmdW5jdGlvbih4eSkgeyByZXR1cm4geHkgJiYgW3h5WzBdWzFdLCB4eVsxXVsxXV07IH1cbn07XG5cbnZhciBYWSA9IHtcbiAgbmFtZTogXCJ4eVwiLFxuICBoYW5kbGVzOiBbXCJuXCIsIFwid1wiLCBcImVcIiwgXCJzXCIsIFwibndcIiwgXCJuZVwiLCBcInN3XCIsIFwic2VcIl0ubWFwKHR5cGUpLFxuICBpbnB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5ID09IG51bGwgPyBudWxsIDogbnVtYmVyMih4eSk7IH0sXG4gIG91dHB1dDogZnVuY3Rpb24oeHkpIHsgcmV0dXJuIHh5OyB9XG59O1xuXG52YXIgY3Vyc29ycyA9IHtcbiAgb3ZlcmxheTogXCJjcm9zc2hhaXJcIixcbiAgc2VsZWN0aW9uOiBcIm1vdmVcIixcbiAgbjogXCJucy1yZXNpemVcIixcbiAgZTogXCJldy1yZXNpemVcIixcbiAgczogXCJucy1yZXNpemVcIixcbiAgdzogXCJldy1yZXNpemVcIixcbiAgbnc6IFwibndzZS1yZXNpemVcIixcbiAgbmU6IFwibmVzdy1yZXNpemVcIixcbiAgc2U6IFwibndzZS1yZXNpemVcIixcbiAgc3c6IFwibmVzdy1yZXNpemVcIlxufTtcblxudmFyIGZsaXBYID0ge1xuICBlOiBcIndcIixcbiAgdzogXCJlXCIsXG4gIG53OiBcIm5lXCIsXG4gIG5lOiBcIm53XCIsXG4gIHNlOiBcInN3XCIsXG4gIHN3OiBcInNlXCJcbn07XG5cbnZhciBmbGlwWSA9IHtcbiAgbjogXCJzXCIsXG4gIHM6IFwiblwiLFxuICBudzogXCJzd1wiLFxuICBuZTogXCJzZVwiLFxuICBzZTogXCJuZVwiLFxuICBzdzogXCJud1wiXG59O1xuXG52YXIgc2lnbnNYID0ge1xuICBvdmVybGF5OiArMSxcbiAgc2VsZWN0aW9uOiArMSxcbiAgbjogbnVsbCxcbiAgZTogKzEsXG4gIHM6IG51bGwsXG4gIHc6IC0xLFxuICBudzogLTEsXG4gIG5lOiArMSxcbiAgc2U6ICsxLFxuICBzdzogLTFcbn07XG5cbnZhciBzaWduc1kgPSB7XG4gIG92ZXJsYXk6ICsxLFxuICBzZWxlY3Rpb246ICsxLFxuICBuOiAtMSxcbiAgZTogbnVsbCxcbiAgczogKzEsXG4gIHc6IG51bGwsXG4gIG53OiAtMSxcbiAgbmU6IC0xLFxuICBzZTogKzEsXG4gIHN3OiArMVxufTtcblxuZnVuY3Rpb24gdHlwZSh0KSB7XG4gIHJldHVybiB7dHlwZTogdH07XG59XG5cbi8vIElnbm9yZSByaWdodC1jbGljaywgc2luY2UgdGhhdCBzaG91bGQgb3BlbiB0aGUgY29udGV4dCBtZW51LlxuZnVuY3Rpb24gZGVmYXVsdEZpbHRlcigpIHtcbiAgcmV0dXJuICFldmVudC5jdHJsS2V5ICYmICFldmVudC5idXR0b247XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFeHRlbnQoKSB7XG4gIHZhciBzdmcgPSB0aGlzLm93bmVyU1ZHRWxlbWVudCB8fCB0aGlzO1xuICBpZiAoc3ZnLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICBzdmcgPSBzdmcudmlld0JveC5iYXNlVmFsO1xuICAgIHJldHVybiBbW3N2Zy54LCBzdmcueV0sIFtzdmcueCArIHN2Zy53aWR0aCwgc3ZnLnkgKyBzdmcuaGVpZ2h0XV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtzdmcud2lkdGguYmFzZVZhbC52YWx1ZSwgc3ZnLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUb3VjaGFibGUoKSB7XG4gIHJldHVybiBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgfHwgKFwib250b3VjaHN0YXJ0XCIgaW4gdGhpcyk7XG59XG5cbi8vIExpa2UgZDMubG9jYWwsIGJ1dCB3aXRoIHRoZSBuYW1lIOKAnF9fYnJ1c2jigJ0gcmF0aGVyIHRoYW4gYXV0by1nZW5lcmF0ZWQuXG5mdW5jdGlvbiBsb2NhbChub2RlKSB7XG4gIHdoaWxlICghbm9kZS5fX2JydXNoKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuO1xuICByZXR1cm4gbm9kZS5fX2JydXNoO1xufVxuXG5mdW5jdGlvbiBlbXB0eShleHRlbnQpIHtcbiAgcmV0dXJuIGV4dGVudFswXVswXSA9PT0gZXh0ZW50WzFdWzBdXG4gICAgICB8fCBleHRlbnRbMF1bMV0gPT09IGV4dGVudFsxXVsxXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJydXNoU2VsZWN0aW9uKG5vZGUpIHtcbiAgdmFyIHN0YXRlID0gbm9kZS5fX2JydXNoO1xuICByZXR1cm4gc3RhdGUgPyBzdGF0ZS5kaW0ub3V0cHV0KHN0YXRlLnNlbGVjdGlvbikgOiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJ1c2hYKCkge1xuICByZXR1cm4gYnJ1c2goWCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBicnVzaFkoKSB7XG4gIHJldHVybiBicnVzaChZKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBicnVzaChYWSk7XG59XG5cbmZ1bmN0aW9uIGJydXNoKGRpbSkge1xuICB2YXIgZXh0ZW50ID0gZGVmYXVsdEV4dGVudCxcbiAgICAgIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXIsXG4gICAgICB0b3VjaGFibGUgPSBkZWZhdWx0VG91Y2hhYmxlLFxuICAgICAga2V5cyA9IHRydWUsXG4gICAgICBsaXN0ZW5lcnMgPSBkaXNwYXRjaChicnVzaCwgXCJzdGFydFwiLCBcImJydXNoXCIsIFwiZW5kXCIpLFxuICAgICAgaGFuZGxlU2l6ZSA9IDYsXG4gICAgICB0b3VjaGVuZGluZztcblxuICBmdW5jdGlvbiBicnVzaChncm91cCkge1xuICAgIHZhciBvdmVybGF5ID0gZ3JvdXBcbiAgICAgICAgLnByb3BlcnR5KFwiX19icnVzaFwiLCBpbml0aWFsaXplKVxuICAgICAgLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAuZGF0YShbdHlwZShcIm92ZXJsYXlcIildKTtcblxuICAgIG92ZXJsYXkuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJvdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIilcbiAgICAgICAgLmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KVxuICAgICAgLm1lcmdlKG92ZXJsYXkpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBleHRlbnQgPSBsb2NhbCh0aGlzKS5leHRlbnQ7XG4gICAgICAgICAgc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBleHRlbnRbMF1bMF0pXG4gICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBleHRlbnRbMF1bMV0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdKVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV0pO1xuICAgICAgICB9KTtcblxuICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb25cIilcbiAgICAgIC5kYXRhKFt0eXBlKFwic2VsZWN0aW9uXCIpXSlcbiAgICAgIC5lbnRlcigpLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNlbGVjdGlvblwiKVxuICAgICAgICAuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzLnNlbGVjdGlvbilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiIzc3N1wiKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiI2ZmZlwiKVxuICAgICAgICAuYXR0cihcInNoYXBlLXJlbmRlcmluZ1wiLCBcImNyaXNwRWRnZXNcIik7XG5cbiAgICB2YXIgaGFuZGxlID0gZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgLmRhdGEoZGltLmhhbmRsZXMsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZTsgfSk7XG5cbiAgICBoYW5kbGUuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgaGFuZGxlLmVudGVyKCkuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwiaGFuZGxlIGhhbmRsZS0tXCIgKyBkLnR5cGU7IH0pXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGN1cnNvcnNbZC50eXBlXTsgfSk7XG5cbiAgICBncm91cFxuICAgICAgICAuZWFjaChyZWRyYXcpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcImFsbFwiKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uYnJ1c2hcIiwgc3RhcnRlZClcbiAgICAgIC5maWx0ZXIodG91Y2hhYmxlKVxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmJydXNoXCIsIHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS5icnVzaFwiLCB0b3VjaG1vdmVkKVxuICAgICAgICAub24oXCJ0b3VjaGVuZC5icnVzaCB0b3VjaGNhbmNlbC5icnVzaFwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICBicnVzaC5tb3ZlID0gZnVuY3Rpb24oZ3JvdXAsIHNlbGVjdGlvbikge1xuICAgIGlmIChncm91cC5zZWxlY3Rpb24pIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLm9uKFwic3RhcnQuYnJ1c2hcIiwgZnVuY3Rpb24oKSB7IGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5iZWZvcmVzdGFydCgpLnN0YXJ0KCk7IH0pXG4gICAgICAgICAgLm9uKFwiaW50ZXJydXB0LmJydXNoIGVuZC5icnVzaFwiLCBmdW5jdGlvbigpIHsgZW1pdHRlcih0aGlzLCBhcmd1bWVudHMpLmVuZCgpOyB9KVxuICAgICAgICAgIC50d2VlbihcImJydXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICAgICAgICAgIHN0YXRlID0gdGhhdC5fX2JydXNoLFxuICAgICAgICAgICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uMCA9IHN0YXRlLnNlbGVjdGlvbixcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc2VsZWN0aW9uLCBzdGF0ZS5leHRlbnQpLFxuICAgICAgICAgICAgICAgIGkgPSBpbnRlcnBvbGF0ZShzZWxlY3Rpb24wLCBzZWxlY3Rpb24xKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gdHdlZW4odCkge1xuICAgICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSB0ID09PSAxICYmIHNlbGVjdGlvbjEgPT09IG51bGwgPyBudWxsIDogaSh0KTtcbiAgICAgICAgICAgICAgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICAgICAgICAgIGVtaXQuYnJ1c2goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbjAgIT09IG51bGwgJiYgc2VsZWN0aW9uMSAhPT0gbnVsbCA/IHR3ZWVuIDogdHdlZW4oMSk7XG4gICAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoYXQuX19icnVzaCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24xID0gZGltLmlucHV0KHR5cGVvZiBzZWxlY3Rpb24gPT09IFwiZnVuY3Rpb25cIiA/IHNlbGVjdGlvbi5hcHBseSh0aGF0LCBhcmdzKSA6IHNlbGVjdGlvbiwgc3RhdGUuZXh0ZW50KSxcbiAgICAgICAgICAgICAgICBlbWl0ID0gZW1pdHRlcih0aGF0LCBhcmdzKS5iZWZvcmVzdGFydCgpO1xuXG4gICAgICAgICAgICBpbnRlcnJ1cHQodGhhdCk7XG4gICAgICAgICAgICBzdGF0ZS5zZWxlY3Rpb24gPSBzZWxlY3Rpb24xID09PSBudWxsID8gbnVsbCA6IHNlbGVjdGlvbjE7XG4gICAgICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgICAgIGVtaXQuc3RhcnQoKS5icnVzaCgpLmVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBicnVzaC5jbGVhciA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgYnJ1c2gubW92ZShncm91cCwgbnVsbCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVkcmF3KCkge1xuICAgIHZhciBncm91cCA9IHNlbGVjdCh0aGlzKSxcbiAgICAgICAgc2VsZWN0aW9uID0gbG9jYWwodGhpcykuc2VsZWN0aW9uO1xuXG4gICAgaWYgKHNlbGVjdGlvbikge1xuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLnNlbGVjdGlvblwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgc2VsZWN0aW9uWzBdWzBdKVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBzZWxlY3Rpb25bMF1bMV0pXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzZWxlY3Rpb25bMV1bMF0gLSBzZWxlY3Rpb25bMF1bMF0pXG4gICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc2VsZWN0aW9uWzFdWzFdIC0gc2VsZWN0aW9uWzBdWzFdKTtcblxuICAgICAgZ3JvdXAuc2VsZWN0QWxsKFwiLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgbnVsbClcbiAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gZC50eXBlW2QudHlwZS5sZW5ndGggLSAxXSA9PT0gXCJlXCIgPyBzZWxlY3Rpb25bMV1bMF0gLSBoYW5kbGVTaXplIC8gMiA6IHNlbGVjdGlvblswXVswXSAtIGhhbmRsZVNpemUgLyAyOyB9KVxuICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkLnR5cGVbMF0gPT09IFwic1wiID8gc2VsZWN0aW9uWzFdWzFdIC0gaGFuZGxlU2l6ZSAvIDIgOiBzZWxlY3Rpb25bMF1bMV0gLSBoYW5kbGVTaXplIC8gMjsgfSlcbiAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJuXCIgfHwgZC50eXBlID09PSBcInNcIiA/IHNlbGVjdGlvblsxXVswXSAtIHNlbGVjdGlvblswXVswXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudHlwZSA9PT0gXCJlXCIgfHwgZC50eXBlID09PSBcIndcIiA/IHNlbGVjdGlvblsxXVsxXSAtIHNlbGVjdGlvblswXVsxXSArIGhhbmRsZVNpemUgOiBoYW5kbGVTaXplOyB9KTtcbiAgICB9XG5cbiAgICBlbHNlIHtcbiAgICAgIGdyb3VwLnNlbGVjdEFsbChcIi5zZWxlY3Rpb24sLmhhbmRsZVwiKVxuICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgICAgLmF0dHIoXCJ4XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ5XCIsIG51bGwpXG4gICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBudWxsKVxuICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXR0ZXIodGhhdCwgYXJncywgY2xlYW4pIHtcbiAgICByZXR1cm4gKCFjbGVhbiAmJiB0aGF0Ll9fYnJ1c2guZW1pdHRlcikgfHwgbmV3IEVtaXR0ZXIodGhhdCwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBFbWl0dGVyKHRoYXQsIGFyZ3MpIHtcbiAgICB0aGlzLnRoYXQgPSB0aGF0O1xuICAgIHRoaXMuYXJncyA9IGFyZ3M7XG4gICAgdGhpcy5zdGF0ZSA9IHRoYXQuX19icnVzaDtcbiAgICB0aGlzLmFjdGl2ZSA9IDA7XG4gIH1cblxuICBFbWl0dGVyLnByb3RvdHlwZSA9IHtcbiAgICBiZWZvcmVzdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoKyt0aGlzLmFjdGl2ZSA9PT0gMSkgdGhpcy5zdGF0ZS5lbWl0dGVyID0gdGhpcywgdGhpcy5zdGFydGluZyA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLnN0YXJ0aW5nKSB0aGlzLnN0YXJ0aW5nID0gZmFsc2UsIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgZWxzZSB0aGlzLmVtaXQoXCJicnVzaFwiKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYnJ1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbWl0KFwiYnJ1c2hcIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkgZGVsZXRlIHRoaXMuc3RhdGUuZW1pdHRlciwgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgQnJ1c2hFdmVudChicnVzaCwgdHlwZSwgZGltLm91dHB1dCh0aGlzLnN0YXRlLnNlbGVjdGlvbikpLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN0YXJ0ZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nICYmICFldmVudC50b3VjaGVzKSByZXR1cm47XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzLFxuICAgICAgICB0eXBlID0gZXZlbnQudGFyZ2V0Ll9fZGF0YV9fLnR5cGUsXG4gICAgICAgIG1vZGUgPSAoa2V5cyAmJiBldmVudC5tZXRhS2V5ID8gdHlwZSA9IFwib3ZlcmxheVwiIDogdHlwZSkgPT09IFwic2VsZWN0aW9uXCIgPyBNT0RFX0RSQUcgOiAoa2V5cyAmJiBldmVudC5hbHRLZXkgPyBNT0RFX0NFTlRFUiA6IE1PREVfSEFORExFKSxcbiAgICAgICAgc2lnblggPSBkaW0gPT09IFkgPyBudWxsIDogc2lnbnNYW3R5cGVdLFxuICAgICAgICBzaWduWSA9IGRpbSA9PT0gWCA/IG51bGwgOiBzaWduc1lbdHlwZV0sXG4gICAgICAgIHN0YXRlID0gbG9jYWwodGhhdCksXG4gICAgICAgIGV4dGVudCA9IHN0YXRlLmV4dGVudCxcbiAgICAgICAgc2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uLFxuICAgICAgICBXID0gZXh0ZW50WzBdWzBdLCB3MCwgdzEsXG4gICAgICAgIE4gPSBleHRlbnRbMF1bMV0sIG4wLCBuMSxcbiAgICAgICAgRSA9IGV4dGVudFsxXVswXSwgZTAsIGUxLFxuICAgICAgICBTID0gZXh0ZW50WzFdWzFdLCBzMCwgczEsXG4gICAgICAgIGR4ID0gMCxcbiAgICAgICAgZHkgPSAwLFxuICAgICAgICBtb3ZpbmcsXG4gICAgICAgIHNoaWZ0aW5nID0gc2lnblggJiYgc2lnblkgJiYga2V5cyAmJiBldmVudC5zaGlmdEtleSxcbiAgICAgICAgbG9ja1gsXG4gICAgICAgIGxvY2tZLFxuICAgICAgICBwb2ludGVyID0gZXZlbnQudG91Y2hlcyA/IHRvdWNoZXIoZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcikgOiBtb3VzZSxcbiAgICAgICAgcG9pbnQwID0gcG9pbnRlcih0aGF0KSxcbiAgICAgICAgcG9pbnQgPSBwb2ludDAsXG4gICAgICAgIGVtaXQgPSBlbWl0dGVyKHRoYXQsIGFyZ3VtZW50cywgdHJ1ZSkuYmVmb3Jlc3RhcnQoKTtcblxuICAgIGlmICh0eXBlID09PSBcIm92ZXJsYXlcIikge1xuICAgICAgaWYgKHNlbGVjdGlvbikgbW92aW5nID0gdHJ1ZTtcbiAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiA9IFtcbiAgICAgICAgW3cwID0gZGltID09PSBZID8gVyA6IHBvaW50MFswXSwgbjAgPSBkaW0gPT09IFggPyBOIDogcG9pbnQwWzFdXSxcbiAgICAgICAgW2UwID0gZGltID09PSBZID8gRSA6IHcwLCBzMCA9IGRpbSA9PT0gWCA/IFMgOiBuMF1cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHcwID0gc2VsZWN0aW9uWzBdWzBdO1xuICAgICAgbjAgPSBzZWxlY3Rpb25bMF1bMV07XG4gICAgICBlMCA9IHNlbGVjdGlvblsxXVswXTtcbiAgICAgIHMwID0gc2VsZWN0aW9uWzFdWzFdO1xuICAgIH1cblxuICAgIHcxID0gdzA7XG4gICAgbjEgPSBuMDtcbiAgICBlMSA9IGUwO1xuICAgIHMxID0gczA7XG5cbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QodGhhdClcbiAgICAgICAgLmF0dHIoXCJwb2ludGVyLWV2ZW50c1wiLCBcIm5vbmVcIik7XG5cbiAgICB2YXIgb3ZlcmxheSA9IGdyb3VwLnNlbGVjdEFsbChcIi5vdmVybGF5XCIpXG4gICAgICAgIC5hdHRyKFwiY3Vyc29yXCIsIGN1cnNvcnNbdHlwZV0pO1xuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIGVtaXQubW92ZWQgPSBtb3ZlZDtcbiAgICAgIGVtaXQuZW5kZWQgPSBlbmRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHZpZXcgPSBzZWxlY3QoZXZlbnQudmlldylcbiAgICAgICAgICAub24oXCJtb3VzZW1vdmUuYnJ1c2hcIiwgbW92ZWQsIHRydWUpXG4gICAgICAgICAgLm9uKFwibW91c2V1cC5icnVzaFwiLCBlbmRlZCwgdHJ1ZSk7XG4gICAgICBpZiAoa2V5cykgdmlld1xuICAgICAgICAgIC5vbihcImtleWRvd24uYnJ1c2hcIiwga2V5ZG93bmVkLCB0cnVlKVxuICAgICAgICAgIC5vbihcImtleXVwLmJydXNoXCIsIGtleXVwcGVkLCB0cnVlKVxuXG4gICAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICB9XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaW50ZXJydXB0KHRoYXQpO1xuICAgIHJlZHJhdy5jYWxsKHRoYXQpO1xuICAgIGVtaXQuc3RhcnQoKTtcblxuICAgIGZ1bmN0aW9uIG1vdmVkKCkge1xuICAgICAgdmFyIHBvaW50MSA9IHBvaW50ZXIodGhhdCk7XG4gICAgICBpZiAoc2hpZnRpbmcgJiYgIWxvY2tYICYmICFsb2NrWSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocG9pbnQxWzBdIC0gcG9pbnRbMF0pID4gTWF0aC5hYnMocG9pbnQxWzFdIC0gcG9pbnRbMV0pKSBsb2NrWSA9IHRydWU7XG4gICAgICAgIGVsc2UgbG9ja1ggPSB0cnVlO1xuICAgICAgfVxuICAgICAgcG9pbnQgPSBwb2ludDE7XG4gICAgICBtb3ZpbmcgPSB0cnVlO1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgbW92ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vdmUoKSB7XG4gICAgICB2YXIgdDtcblxuICAgICAgZHggPSBwb2ludFswXSAtIHBvaW50MFswXTtcbiAgICAgIGR5ID0gcG9pbnRbMV0gLSBwb2ludDBbMV07XG5cbiAgICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIE1PREVfU1BBQ0U6XG4gICAgICAgIGNhc2UgTU9ERV9EUkFHOiB7XG4gICAgICAgICAgaWYgKHNpZ25YKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTAgKyBkeDtcbiAgICAgICAgICBpZiAoc2lnblkpIGR5ID0gTWF0aC5tYXgoTiAtIG4wLCBNYXRoLm1pbihTIC0gczAsIGR5KSksIG4xID0gbjAgKyBkeSwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9IQU5ETEU6IHtcbiAgICAgICAgICBpZiAoc2lnblggPCAwKSBkeCA9IE1hdGgubWF4KFcgLSB3MCwgTWF0aC5taW4oRSAtIHcwLCBkeCkpLCB3MSA9IHcwICsgZHgsIGUxID0gZTA7XG4gICAgICAgICAgZWxzZSBpZiAoc2lnblggPiAwKSBkeCA9IE1hdGgubWF4KFcgLSBlMCwgTWF0aC5taW4oRSAtIGUwLCBkeCkpLCB3MSA9IHcwLCBlMSA9IGUwICsgZHg7XG4gICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgZHkgPSBNYXRoLm1heChOIC0gbjAsIE1hdGgubWluKFMgLSBuMCwgZHkpKSwgbjEgPSBuMCArIGR5LCBzMSA9IHMwO1xuICAgICAgICAgIGVsc2UgaWYgKHNpZ25ZID4gMCkgZHkgPSBNYXRoLm1heChOIC0gczAsIE1hdGgubWluKFMgLSBzMCwgZHkpKSwgbjEgPSBuMCwgczEgPSBzMCArIGR5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgTU9ERV9DRU5URVI6IHtcbiAgICAgICAgICBpZiAoc2lnblgpIHcxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgdzAgLSBkeCAqIHNpZ25YKSksIGUxID0gTWF0aC5tYXgoVywgTWF0aC5taW4oRSwgZTAgKyBkeCAqIHNpZ25YKSk7XG4gICAgICAgICAgaWYgKHNpZ25ZKSBuMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIG4wIC0gZHkgKiBzaWduWSkpLCBzMSA9IE1hdGgubWF4KE4sIE1hdGgubWluKFMsIHMwICsgZHkgKiBzaWduWSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlMSA8IHcxKSB7XG4gICAgICAgIHNpZ25YICo9IC0xO1xuICAgICAgICB0ID0gdzAsIHcwID0gZTAsIGUwID0gdDtcbiAgICAgICAgdCA9IHcxLCB3MSA9IGUxLCBlMSA9IHQ7XG4gICAgICAgIGlmICh0eXBlIGluIGZsaXBYKSBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlID0gZmxpcFhbdHlwZV1dKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHMxIDwgbjEpIHtcbiAgICAgICAgc2lnblkgKj0gLTE7XG4gICAgICAgIHQgPSBuMCwgbjAgPSBzMCwgczAgPSB0O1xuICAgICAgICB0ID0gbjEsIG4xID0gczEsIHMxID0gdDtcbiAgICAgICAgaWYgKHR5cGUgaW4gZmxpcFkpIG92ZXJsYXkuYXR0cihcImN1cnNvclwiLCBjdXJzb3JzW3R5cGUgPSBmbGlwWVt0eXBlXV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUuc2VsZWN0aW9uKSBzZWxlY3Rpb24gPSBzdGF0ZS5zZWxlY3Rpb247IC8vIE1heSBiZSBzZXQgYnkgYnJ1c2gubW92ZSFcbiAgICAgIGlmIChsb2NrWCkgdzEgPSBzZWxlY3Rpb25bMF1bMF0sIGUxID0gc2VsZWN0aW9uWzFdWzBdO1xuICAgICAgaWYgKGxvY2tZKSBuMSA9IHNlbGVjdGlvblswXVsxXSwgczEgPSBzZWxlY3Rpb25bMV1bMV07XG5cbiAgICAgIGlmIChzZWxlY3Rpb25bMF1bMF0gIT09IHcxXG4gICAgICAgICAgfHwgc2VsZWN0aW9uWzBdWzFdICE9PSBuMVxuICAgICAgICAgIHx8IHNlbGVjdGlvblsxXVswXSAhPT0gZTFcbiAgICAgICAgICB8fCBzZWxlY3Rpb25bMV1bMV0gIT09IHMxKSB7XG4gICAgICAgIHN0YXRlLnNlbGVjdGlvbiA9IFtbdzEsIG4xXSwgW2UxLCBzMV1dO1xuICAgICAgICByZWRyYXcuY2FsbCh0aGF0KTtcbiAgICAgICAgZW1pdC5icnVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVuZGVkKCkge1xuICAgICAgbm9wcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgICAgaWYgKGV2ZW50LnRvdWNoZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGlmICh0b3VjaGVuZGluZykgY2xlYXJUaW1lb3V0KHRvdWNoZW5kaW5nKTtcbiAgICAgICAgdG91Y2hlbmRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaGVuZGluZyA9IG51bGw7IH0sIDUwMCk7IC8vIEdob3N0IGNsaWNrcyBhcmUgZGVsYXllZCFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgbW92aW5nKTtcbiAgICAgICAgdmlldy5vbihcImtleWRvd24uYnJ1c2gga2V5dXAuYnJ1c2ggbW91c2Vtb3ZlLmJydXNoIG1vdXNldXAuYnJ1c2hcIiwgbnVsbCk7XG4gICAgICB9XG4gICAgICBncm91cC5hdHRyKFwicG9pbnRlci1ldmVudHNcIiwgXCJhbGxcIik7XG4gICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5vdmVybGF5KTtcbiAgICAgIGlmIChzdGF0ZS5zZWxlY3Rpb24pIHNlbGVjdGlvbiA9IHN0YXRlLnNlbGVjdGlvbjsgLy8gTWF5IGJlIHNldCBieSBicnVzaC5tb3ZlIChvbiBzdGFydCkhXG4gICAgICBpZiAoZW1wdHkoc2VsZWN0aW9uKSkgc3RhdGUuc2VsZWN0aW9uID0gbnVsbCwgcmVkcmF3LmNhbGwodGhhdCk7XG4gICAgICBlbWl0LmVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtleWRvd25lZCgpIHtcbiAgICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDE2OiB7IC8vIFNISUZUXG4gICAgICAgICAgc2hpZnRpbmcgPSBzaWduWCAmJiBzaWduWTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDE4OiB7IC8vIEFMVFxuICAgICAgICAgIGlmIChtb2RlID09PSBNT0RFX0hBTkRMRSkge1xuICAgICAgICAgICAgaWYgKHNpZ25YKSBlMCA9IGUxIC0gZHggKiBzaWduWCwgdzAgPSB3MSArIGR4ICogc2lnblg7XG4gICAgICAgICAgICBpZiAoc2lnblkpIHMwID0gczEgLSBkeSAqIHNpZ25ZLCBuMCA9IG4xICsgZHkgKiBzaWduWTtcbiAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIG1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAzMjogeyAvLyBTUEFDRTsgdGFrZXMgcHJpb3JpdHkgb3ZlciBBTFRcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9IQU5ETEUgfHwgbW9kZSA9PT0gTU9ERV9DRU5URVIpIHtcbiAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTEgLSBkeDsgZWxzZSBpZiAoc2lnblggPiAwKSB3MCA9IHcxIC0gZHg7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxIC0gZHk7IGVsc2UgaWYgKHNpZ25ZID4gMCkgbjAgPSBuMSAtIGR5O1xuICAgICAgICAgICAgbW9kZSA9IE1PREVfU1BBQ0U7XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29ycy5zZWxlY3Rpb24pO1xuICAgICAgICAgICAgbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm47XG4gICAgICB9XG4gICAgICBub2V2ZW50KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24ga2V5dXBwZWQoKSB7XG4gICAgICBzd2l0Y2ggKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAxNjogeyAvLyBTSElGVFxuICAgICAgICAgIGlmIChzaGlmdGluZykge1xuICAgICAgICAgICAgbG9ja1ggPSBsb2NrWSA9IHNoaWZ0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMTg6IHsgLy8gQUxUXG4gICAgICAgICAgaWYgKG1vZGUgPT09IE1PREVfQ0VOVEVSKSB7XG4gICAgICAgICAgICBpZiAoc2lnblggPCAwKSBlMCA9IGUxOyBlbHNlIGlmIChzaWduWCA+IDApIHcwID0gdzE7XG4gICAgICAgICAgICBpZiAoc2lnblkgPCAwKSBzMCA9IHMxOyBlbHNlIGlmIChzaWduWSA+IDApIG4wID0gbjE7XG4gICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMzI6IHsgLy8gU1BBQ0VcbiAgICAgICAgICBpZiAobW9kZSA9PT0gTU9ERV9TUEFDRSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgICAgICAgICBpZiAoc2lnblgpIGUwID0gZTEgLSBkeCAqIHNpZ25YLCB3MCA9IHcxICsgZHggKiBzaWduWDtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZKSBzMCA9IHMxIC0gZHkgKiBzaWduWSwgbjAgPSBuMSArIGR5ICogc2lnblk7XG4gICAgICAgICAgICAgIG1vZGUgPSBNT0RFX0NFTlRFUjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzaWduWCA8IDApIGUwID0gZTE7IGVsc2UgaWYgKHNpZ25YID4gMCkgdzAgPSB3MTtcbiAgICAgICAgICAgICAgaWYgKHNpZ25ZIDwgMCkgczAgPSBzMTsgZWxzZSBpZiAoc2lnblkgPiAwKSBuMCA9IG4xO1xuICAgICAgICAgICAgICBtb2RlID0gTU9ERV9IQU5ETEU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvdmVybGF5LmF0dHIoXCJjdXJzb3JcIiwgY3Vyc29yc1t0eXBlXSk7XG4gICAgICAgICAgICBtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5vZXZlbnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaG1vdmVkKCkge1xuICAgIGVtaXR0ZXIodGhpcywgYXJndW1lbnRzKS5tb3ZlZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2hlbmRlZCgpIHtcbiAgICBlbWl0dGVyKHRoaXMsIGFyZ3VtZW50cykuZW5kZWQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgdmFyIHN0YXRlID0gdGhpcy5fX2JydXNoIHx8IHtzZWxlY3Rpb246IG51bGx9O1xuICAgIHN0YXRlLmV4dGVudCA9IG51bWJlcjIoZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIHN0YXRlLmRpbSA9IGRpbTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBicnVzaC5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXh0ZW50ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChudW1iZXIyKF8pKSwgYnJ1c2gpIDogZXh0ZW50O1xuICB9O1xuXG4gIGJydXNoLmZpbHRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChmaWx0ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGJydXNoKSA6IGZpbHRlcjtcbiAgfTtcblxuICBicnVzaC5oYW5kbGVTaXplID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGhhbmRsZVNpemUgPSArXywgYnJ1c2gpIDogaGFuZGxlU2l6ZTtcbiAgfTtcblxuICBicnVzaC5rZXlNb2RpZmllcnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoa2V5cyA9ICEhXywgYnJ1c2gpIDoga2V5cztcbiAgfTtcblxuICBicnVzaC5vbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGxpc3RlbmVycy5vbi5hcHBseShsaXN0ZW5lcnMsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHZhbHVlID09PSBsaXN0ZW5lcnMgPyBicnVzaCA6IHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiBicnVzaDtcbn1cbiIsImV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbiIsImltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHttYXgsIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG5mdW5jdGlvbiBjb21wYXJlVmFsdWUoY29tcGFyZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBjb21wYXJlKFxuICAgICAgYS5zb3VyY2UudmFsdWUgKyBhLnRhcmdldC52YWx1ZSxcbiAgICAgIGIuc291cmNlLnZhbHVlICsgYi50YXJnZXQudmFsdWVcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHBhZEFuZ2xlID0gMCxcbiAgICAgIHNvcnRHcm91cHMgPSBudWxsLFxuICAgICAgc29ydFN1Ymdyb3VwcyA9IG51bGwsXG4gICAgICBzb3J0Q2hvcmRzID0gbnVsbDtcblxuICBmdW5jdGlvbiBjaG9yZChtYXRyaXgpIHtcbiAgICB2YXIgbiA9IG1hdHJpeC5sZW5ndGgsXG4gICAgICAgIGdyb3VwU3VtcyA9IFtdLFxuICAgICAgICBncm91cEluZGV4ID0gcmFuZ2UobiksXG4gICAgICAgIHN1Ymdyb3VwSW5kZXggPSBbXSxcbiAgICAgICAgY2hvcmRzID0gW10sXG4gICAgICAgIGdyb3VwcyA9IGNob3Jkcy5ncm91cHMgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShuICogbiksXG4gICAgICAgIGssXG4gICAgICAgIHgsXG4gICAgICAgIHgwLFxuICAgICAgICBkeCxcbiAgICAgICAgaSxcbiAgICAgICAgajtcblxuICAgIC8vIENvbXB1dGUgdGhlIHN1bS5cbiAgICBrID0gMCwgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgeCA9IDAsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgeCArPSBtYXRyaXhbaV1bal07XG4gICAgICB9XG4gICAgICBncm91cFN1bXMucHVzaCh4KTtcbiAgICAgIHN1Ymdyb3VwSW5kZXgucHVzaChyYW5nZShuKSk7XG4gICAgICBrICs9IHg7XG4gICAgfVxuXG4gICAgLy8gU29ydCBncm91cHPigKZcbiAgICBpZiAoc29ydEdyb3VwcykgZ3JvdXBJbmRleC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBzb3J0R3JvdXBzKGdyb3VwU3Vtc1thXSwgZ3JvdXBTdW1zW2JdKTtcbiAgICB9KTtcblxuICAgIC8vIFNvcnQgc3ViZ3JvdXBz4oCmXG4gICAgaWYgKHNvcnRTdWJncm91cHMpIHN1Ymdyb3VwSW5kZXguZm9yRWFjaChmdW5jdGlvbihkLCBpKSB7XG4gICAgICBkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gc29ydFN1Ymdyb3VwcyhtYXRyaXhbaV1bYV0sIG1hdHJpeFtpXVtiXSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIENvbnZlcnQgdGhlIHN1bSB0byBzY2FsaW5nIGZhY3RvciBmb3IgWzAsIDJwaV0uXG4gICAgLy8gVE9ETyBBbGxvdyBzdGFydCBhbmQgZW5kIGFuZ2xlIHRvIGJlIHNwZWNpZmllZD9cbiAgICAvLyBUT0RPIEFsbG93IHBhZGRpbmcgdG8gYmUgc3BlY2lmaWVkIGFzIHBlcmNlbnRhZ2U/XG4gICAgayA9IG1heCgwLCB0YXUgLSBwYWRBbmdsZSAqIG4pIC8gaztcbiAgICBkeCA9IGsgPyBwYWRBbmdsZSA6IHRhdSAvIG47XG5cbiAgICAvLyBDb21wdXRlIHRoZSBzdGFydCBhbmQgZW5kIGFuZ2xlIGZvciBlYWNoIGdyb3VwIGFuZCBzdWJncm91cC5cbiAgICAvLyBOb3RlOiBPcGVyYSBoYXMgYSBidWcgcmVvcmRlcmluZyBvYmplY3QgbGl0ZXJhbCBwcm9wZXJ0aWVzIVxuICAgIHggPSAwLCBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB4MCA9IHgsIGogPSAtMTsgd2hpbGUgKCsraiA8IG4pIHtcbiAgICAgICAgdmFyIGRpID0gZ3JvdXBJbmRleFtpXSxcbiAgICAgICAgICAgIGRqID0gc3ViZ3JvdXBJbmRleFtkaV1bal0sXG4gICAgICAgICAgICB2ID0gbWF0cml4W2RpXVtkal0sXG4gICAgICAgICAgICBhMCA9IHgsXG4gICAgICAgICAgICBhMSA9IHggKz0gdiAqIGs7XG4gICAgICAgIHN1Ymdyb3Vwc1tkaiAqIG4gKyBkaV0gPSB7XG4gICAgICAgICAgaW5kZXg6IGRpLFxuICAgICAgICAgIHN1YmluZGV4OiBkaixcbiAgICAgICAgICBzdGFydEFuZ2xlOiBhMCxcbiAgICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgICAgdmFsdWU6IHZcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGdyb3Vwc1tkaV0gPSB7XG4gICAgICAgIGluZGV4OiBkaSxcbiAgICAgICAgc3RhcnRBbmdsZTogeDAsXG4gICAgICAgIGVuZEFuZ2xlOiB4LFxuICAgICAgICB2YWx1ZTogZ3JvdXBTdW1zW2RpXVxuICAgICAgfTtcbiAgICAgIHggKz0gZHg7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgY2hvcmRzIGZvciBlYWNoIChub24tZW1wdHkpIHN1Ymdyb3VwLXN1Ymdyb3VwIGxpbmsuXG4gICAgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaiA9IGkgLSAxOyB3aGlsZSAoKytqIDwgbikge1xuICAgICAgICB2YXIgc291cmNlID0gc3ViZ3JvdXBzW2ogKiBuICsgaV0sXG4gICAgICAgICAgICB0YXJnZXQgPSBzdWJncm91cHNbaSAqIG4gKyBqXTtcbiAgICAgICAgaWYgKHNvdXJjZS52YWx1ZSB8fCB0YXJnZXQudmFsdWUpIHtcbiAgICAgICAgICBjaG9yZHMucHVzaChzb3VyY2UudmFsdWUgPCB0YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgPyB7c291cmNlOiB0YXJnZXQsIHRhcmdldDogc291cmNlfVxuICAgICAgICAgICAgICA6IHtzb3VyY2U6IHNvdXJjZSwgdGFyZ2V0OiB0YXJnZXR9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzb3J0Q2hvcmRzID8gY2hvcmRzLnNvcnQoc29ydENob3JkcykgOiBjaG9yZHM7XG4gIH1cblxuICBjaG9yZC5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IG1heCgwLCBfKSwgY2hvcmQpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgY2hvcmQuc29ydEdyb3VwcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0R3JvdXBzID0gXywgY2hvcmQpIDogc29ydEdyb3VwcztcbiAgfTtcblxuICBjaG9yZC5zb3J0U3ViZ3JvdXBzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnRTdWJncm91cHMgPSBfLCBjaG9yZCkgOiBzb3J0U3ViZ3JvdXBzO1xuICB9O1xuXG4gIGNob3JkLnNvcnRDaG9yZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoXyA9PSBudWxsID8gc29ydENob3JkcyA9IG51bGwgOiAoc29ydENob3JkcyA9IGNvbXBhcmVWYWx1ZShfKSkuXyA9IF8sIGNob3JkKSA6IHNvcnRDaG9yZHMgJiYgc29ydENob3Jkcy5fO1xuICB9O1xuXG4gIHJldHVybiBjaG9yZDtcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgdGF1ID0gMiAqIHBpLFxuICAgIGVwc2lsb24gPSAxZS02LFxuICAgIHRhdUVwc2lsb24gPSB0YXUgLSBlcHNpbG9uO1xuXG5mdW5jdGlvbiBQYXRoKCkge1xuICB0aGlzLl94MCA9IHRoaXMuX3kwID0gLy8gc3RhcnQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuX3gxID0gdGhpcy5feTEgPSBudWxsOyAvLyBlbmQgb2YgY3VycmVudCBzdWJwYXRoXG4gIHRoaXMuXyA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHBhdGgoKSB7XG4gIHJldHVybiBuZXcgUGF0aDtcbn1cblxuUGF0aC5wcm90b3R5cGUgPSBwYXRoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFBhdGgsXG4gIG1vdmVUbzogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MCA9IHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTAgPSB0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgY2xvc2VQYXRoOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5feDEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3gxID0gdGhpcy5feDAsIHRoaXMuX3kxID0gdGhpcy5feTA7XG4gICAgICB0aGlzLl8gKz0gXCJaXCI7XG4gICAgfVxuICB9LFxuICBsaW5lVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgcXVhZHJhdGljQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiUVwiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAodGhpcy5feDEgPSAreCkgKyBcIixcIiArICh0aGlzLl95MSA9ICt5KTtcbiAgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJDXCIgKyAoK3gxKSArIFwiLFwiICsgKCt5MSkgKyBcIixcIiArICgreDIpICsgXCIsXCIgKyAoK3kyKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGFyY1RvOiBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Miwgcikge1xuICAgIHgxID0gK3gxLCB5MSA9ICt5MSwgeDIgPSAreDIsIHkyID0gK3kyLCByID0gK3I7XG4gICAgdmFyIHgwID0gdGhpcy5feDEsXG4gICAgICAgIHkwID0gdGhpcy5feTEsXG4gICAgICAgIHgyMSA9IHgyIC0geDEsXG4gICAgICAgIHkyMSA9IHkyIC0geTEsXG4gICAgICAgIHgwMSA9IHgwIC0geDEsXG4gICAgICAgIHkwMSA9IHkwIC0geTEsXG4gICAgICAgIGwwMV8yID0geDAxICogeDAxICsgeTAxICogeTAxO1xuXG4gICAgLy8gSXMgdGhlIHJhZGl1cyBuZWdhdGl2ZT8gRXJyb3IuXG4gICAgaWYgKHIgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJuZWdhdGl2ZSByYWRpdXM6IFwiICsgcik7XG5cbiAgICAvLyBJcyB0aGlzIHBhdGggZW1wdHk/IE1vdmUgdG8gKHgxLHkxKS5cbiAgICBpZiAodGhpcy5feDEgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuXyArPSBcIk1cIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE9yLCBpcyAoeDEseTEpIGNvaW5jaWRlbnQgd2l0aCAoeDAseTApPyBEbyBub3RoaW5nLlxuICAgIGVsc2UgaWYgKCEobDAxXzIgPiBlcHNpbG9uKSk7XG5cbiAgICAvLyBPciwgYXJlICh4MCx5MCksICh4MSx5MSkgYW5kICh4Mix5MikgY29sbGluZWFyP1xuICAgIC8vIEVxdWl2YWxlbnRseSwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgyLHkyKT9cbiAgICAvLyBPciwgaXMgdGhlIHJhZGl1cyB6ZXJvPyBMaW5lIHRvICh4MSx5MSkuXG4gICAgZWxzZSBpZiAoIShNYXRoLmFicyh5MDEgKiB4MjEgLSB5MjEgKiB4MDEpID4gZXBzaWxvbikgfHwgIXIpIHtcbiAgICAgIHRoaXMuXyArPSBcIkxcIiArICh0aGlzLl94MSA9IHgxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEpO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgZHJhdyBhbiBhcmMhXG4gICAgZWxzZSB7XG4gICAgICB2YXIgeDIwID0geDIgLSB4MCxcbiAgICAgICAgICB5MjAgPSB5MiAtIHkwLFxuICAgICAgICAgIGwyMV8yID0geDIxICogeDIxICsgeTIxICogeTIxLFxuICAgICAgICAgIGwyMF8yID0geDIwICogeDIwICsgeTIwICogeTIwLFxuICAgICAgICAgIGwyMSA9IE1hdGguc3FydChsMjFfMiksXG4gICAgICAgICAgbDAxID0gTWF0aC5zcXJ0KGwwMV8yKSxcbiAgICAgICAgICBsID0gciAqIE1hdGgudGFuKChwaSAtIE1hdGguYWNvcygobDIxXzIgKyBsMDFfMiAtIGwyMF8yKSAvICgyICogbDIxICogbDAxKSkpIC8gMiksXG4gICAgICAgICAgdDAxID0gbCAvIGwwMSxcbiAgICAgICAgICB0MjEgPSBsIC8gbDIxO1xuXG4gICAgICAvLyBJZiB0aGUgc3RhcnQgdGFuZ2VudCBpcyBub3QgY29pbmNpZGVudCB3aXRoICh4MCx5MCksIGxpbmUgdG8uXG4gICAgICBpZiAoTWF0aC5hYnModDAxIC0gMSkgPiBlcHNpbG9uKSB7XG4gICAgICAgIHRoaXMuXyArPSBcIkxcIiArICh4MSArIHQwMSAqIHgwMSkgKyBcIixcIiArICh5MSArIHQwMSAqIHkwMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDAsXCIgKyAoKyh5MDEgKiB4MjAgPiB4MDEgKiB5MjApKSArIFwiLFwiICsgKHRoaXMuX3gxID0geDEgKyB0MjEgKiB4MjEpICsgXCIsXCIgKyAodGhpcy5feTEgPSB5MSArIHQyMSAqIHkyMSk7XG4gICAgfVxuICB9LFxuICBhcmM6IGZ1bmN0aW9uKHgsIHksIHIsIGEwLCBhMSwgY2N3KSB7XG4gICAgeCA9ICt4LCB5ID0gK3ksIHIgPSArciwgY2N3ID0gISFjY3c7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJpbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge2NvcywgaGFsZlBpLCBzaW59IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNvdXJjZShkKSB7XG4gIHJldHVybiBkLnNvdXJjZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRhcmdldChkKSB7XG4gIHJldHVybiBkLnRhcmdldDtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFJhZGl1cyhkKSB7XG4gIHJldHVybiBkLnJhZGl1cztcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFN0YXJ0QW5nbGUoZCkge1xuICByZXR1cm4gZC5zdGFydEFuZ2xlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RW5kQW5nbGUoZCkge1xuICByZXR1cm4gZC5lbmRBbmdsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzb3VyY2UgPSBkZWZhdWx0U291cmNlLFxuICAgICAgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCxcbiAgICAgIHJhZGl1cyA9IGRlZmF1bHRSYWRpdXMsXG4gICAgICBzdGFydEFuZ2xlID0gZGVmYXVsdFN0YXJ0QW5nbGUsXG4gICAgICBlbmRBbmdsZSA9IGRlZmF1bHRFbmRBbmdsZSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHJpYmJvbigpIHtcbiAgICB2YXIgYnVmZmVyLFxuICAgICAgICBhcmd2ID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLFxuICAgICAgICBzID0gc291cmNlLmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICB0ID0gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3YpLFxuICAgICAgICBzciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSBzLCBhcmd2KSksXG4gICAgICAgIHNhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGksXG4gICAgICAgIHNhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpLFxuICAgICAgICBzeDAgPSBzciAqIGNvcyhzYTApLFxuICAgICAgICBzeTAgPSBzciAqIHNpbihzYTApLFxuICAgICAgICB0ciA9ICtyYWRpdXMuYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSB0LCBhcmd2KSksXG4gICAgICAgIHRhMCA9IHN0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndikgLSBoYWxmUGksXG4gICAgICAgIHRhMSA9IGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3YpIC0gaGFsZlBpO1xuXG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuXG4gICAgY29udGV4dC5tb3ZlVG8oc3gwLCBzeTApO1xuICAgIGNvbnRleHQuYXJjKDAsIDAsIHNyLCBzYTAsIHNhMSk7XG4gICAgaWYgKHNhMCAhPT0gdGEwIHx8IHNhMSAhPT0gdGExKSB7IC8vIFRPRE8gc3IgIT09IHRyP1xuICAgICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHRyICogY29zKHRhMCksIHRyICogc2luKHRhMCkpO1xuICAgICAgY29udGV4dC5hcmMoMCwgMCwgdHIsIHRhMCwgdGExKTtcbiAgICB9XG4gICAgY29udGV4dC5xdWFkcmF0aWNDdXJ2ZVRvKDAsIDAsIHN4MCwgc3kwKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIGNvbnRleHQgPSBudWxsLCBidWZmZXIgKyBcIlwiIHx8IG51bGw7XG4gIH1cblxuICByaWJib24ucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCByaWJib24pIDogcmFkaXVzO1xuICB9O1xuXG4gIHJpYmJvbi5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcmliYm9uKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgcmliYm9uLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHJpYmJvbikgOiBlbmRBbmdsZTtcbiAgfTtcblxuICByaWJib24uc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIHJpYmJvbikgOiBzb3VyY2U7XG4gIH07XG5cbiAgcmliYm9uLnRhcmdldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0YXJnZXQgPSBfLCByaWJib24pIDogdGFyZ2V0O1xuICB9O1xuXG4gIHJpYmJvbi5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCByaWJib24pIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gcmliYm9uO1xufVxuIiwiZXhwb3J0IHZhciBwcmVmaXggPSBcIiRcIjtcblxuZnVuY3Rpb24gTWFwKCkge31cblxuTWFwLnByb3RvdHlwZSA9IG1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBNYXAsXG4gIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIChwcmVmaXggKyBrZXkpIGluIHRoaXM7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXNbcHJlZml4ICsga2V5XTtcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdGhpc1twcmVmaXggKyBrZXldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHByb3BlcnR5ID0gcHJlZml4ICsga2V5O1xuICAgIHJldHVybiBwcm9wZXJ0eSBpbiB0aGlzICYmIGRlbGV0ZSB0aGlzW3Byb3BlcnR5XTtcbiAgfSxcbiAgY2xlYXI6IGZ1bmN0aW9uKCkge1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSBkZWxldGUgdGhpc1twcm9wZXJ0eV07XG4gIH0sXG4gIGtleXM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGtleXMucHVzaChwcm9wZXJ0eS5zbGljZSgxKSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH0sXG4gIHZhbHVlczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSB2YWx1ZXMucHVzaCh0aGlzW3Byb3BlcnR5XSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfSxcbiAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVudHJpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgZW50cmllcy5wdXNoKHtrZXk6IHByb3BlcnR5LnNsaWNlKDEpLCB2YWx1ZTogdGhpc1twcm9wZXJ0eV19KTtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfSxcbiAgc2l6ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNpemUgPSAwO1xuICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMpIGlmIChwcm9wZXJ0eVswXSA9PT0gcHJlZml4KSArK3NpemU7XG4gICAgcmV0dXJuIHNpemU7XG4gIH0sXG4gIGVtcHR5OiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiB0aGlzKSBpZiAocHJvcGVydHlbMF0gPT09IHByZWZpeCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBlYWNoOiBmdW5jdGlvbihmKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcykgaWYgKHByb3BlcnR5WzBdID09PSBwcmVmaXgpIGYodGhpc1twcm9wZXJ0eV0sIHByb3BlcnR5LnNsaWNlKDEpLCB0aGlzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwKG9iamVjdCwgZikge1xuICB2YXIgbWFwID0gbmV3IE1hcDtcblxuICAvLyBDb3B5IGNvbnN0cnVjdG9yLlxuICBpZiAob2JqZWN0IGluc3RhbmNlb2YgTWFwKSBvYmplY3QuZWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7IG1hcC5zZXQoa2V5LCB2YWx1ZSk7IH0pO1xuXG4gIC8vIEluZGV4IGFycmF5IGJ5IG51bWVyaWMgaW5kZXggb3Igc3BlY2lmaWVkIGtleSBmdW5jdGlvbi5cbiAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IG9iamVjdC5sZW5ndGgsXG4gICAgICAgIG87XG5cbiAgICBpZiAoZiA9PSBudWxsKSB3aGlsZSAoKytpIDwgbikgbWFwLnNldChpLCBvYmplY3RbaV0pO1xuICAgIGVsc2Ugd2hpbGUgKCsraSA8IG4pIG1hcC5zZXQoZihvID0gb2JqZWN0W2ldLCBpLCBvYmplY3QpLCBvKTtcbiAgfVxuXG4gIC8vIENvbnZlcnQgb2JqZWN0IHRvIG1hcC5cbiAgZWxzZSBpZiAob2JqZWN0KSBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSBtYXAuc2V0KGtleSwgb2JqZWN0W2tleV0pO1xuXG4gIHJldHVybiBtYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcDtcbiIsImltcG9ydCBtYXAgZnJvbSBcIi4vbWFwXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIga2V5cyA9IFtdLFxuICAgICAgc29ydEtleXMgPSBbXSxcbiAgICAgIHNvcnRWYWx1ZXMsXG4gICAgICByb2xsdXAsXG4gICAgICBuZXN0O1xuXG4gIGZ1bmN0aW9uIGFwcGx5KGFycmF5LCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpIHtcbiAgICBpZiAoZGVwdGggPj0ga2V5cy5sZW5ndGgpIHtcbiAgICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGFycmF5LnNvcnQoc29ydFZhbHVlcyk7XG4gICAgICByZXR1cm4gcm9sbHVwICE9IG51bGwgPyByb2xsdXAoYXJyYXkpIDogYXJyYXk7XG4gICAgfVxuXG4gICAgdmFyIGkgPSAtMSxcbiAgICAgICAgbiA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAga2V5ID0ga2V5c1tkZXB0aCsrXSxcbiAgICAgICAga2V5VmFsdWUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICB2YWx1ZXNCeUtleSA9IG1hcCgpLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVJlc3VsdCgpO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh2YWx1ZXMgPSB2YWx1ZXNCeUtleS5nZXQoa2V5VmFsdWUgPSBrZXkodmFsdWUgPSBhcnJheVtpXSkgKyBcIlwiKSkge1xuICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZXNCeUtleS5zZXQoa2V5VmFsdWUsIFt2YWx1ZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlc0J5S2V5LmVhY2goZnVuY3Rpb24odmFsdWVzLCBrZXkpIHtcbiAgICAgIHNldFJlc3VsdChyZXN1bHQsIGtleSwgYXBwbHkodmFsdWVzLCBkZXB0aCwgY3JlYXRlUmVzdWx0LCBzZXRSZXN1bHQpKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBlbnRyaWVzKG1hcCwgZGVwdGgpIHtcbiAgICBpZiAoKytkZXB0aCA+IGtleXMubGVuZ3RoKSByZXR1cm4gbWFwO1xuICAgIHZhciBhcnJheSwgc29ydEtleSA9IHNvcnRLZXlzW2RlcHRoIC0gMV07XG4gICAgaWYgKHJvbGx1cCAhPSBudWxsICYmIGRlcHRoID49IGtleXMubGVuZ3RoKSBhcnJheSA9IG1hcC5lbnRyaWVzKCk7XG4gICAgZWxzZSBhcnJheSA9IFtdLCBtYXAuZWFjaChmdW5jdGlvbih2LCBrKSB7IGFycmF5LnB1c2goe2tleTogaywgdmFsdWVzOiBlbnRyaWVzKHYsIGRlcHRoKX0pOyB9KTtcbiAgICByZXR1cm4gc29ydEtleSAhPSBudWxsID8gYXJyYXkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiBzb3J0S2V5KGEua2V5LCBiLmtleSk7IH0pIDogYXJyYXk7XG4gIH1cblxuICByZXR1cm4gbmVzdCA9IHtcbiAgICBvYmplY3Q6IGZ1bmN0aW9uKGFycmF5KSB7IHJldHVybiBhcHBseShhcnJheSwgMCwgY3JlYXRlT2JqZWN0LCBzZXRPYmplY3QpOyB9LFxuICAgIG1hcDogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGFwcGx5KGFycmF5LCAwLCBjcmVhdGVNYXAsIHNldE1hcCk7IH0sXG4gICAgZW50cmllczogZnVuY3Rpb24oYXJyYXkpIHsgcmV0dXJuIGVudHJpZXMoYXBwbHkoYXJyYXksIDAsIGNyZWF0ZU1hcCwgc2V0TWFwKSwgMCk7IH0sXG4gICAga2V5OiBmdW5jdGlvbihkKSB7IGtleXMucHVzaChkKTsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydEtleXM6IGZ1bmN0aW9uKG9yZGVyKSB7IHNvcnRLZXlzW2tleXMubGVuZ3RoIC0gMV0gPSBvcmRlcjsgcmV0dXJuIG5lc3Q7IH0sXG4gICAgc29ydFZhbHVlczogZnVuY3Rpb24ob3JkZXIpIHsgc29ydFZhbHVlcyA9IG9yZGVyOyByZXR1cm4gbmVzdDsgfSxcbiAgICByb2xsdXA6IGZ1bmN0aW9uKGYpIHsgcm9sbHVwID0gZjsgcmV0dXJuIG5lc3Q7IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0KCkge1xuICByZXR1cm4ge307XG59XG5cbmZ1bmN0aW9uIHNldE9iamVjdChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gbWFwKCk7XG59XG5cbmZ1bmN0aW9uIHNldE1hcChtYXAsIGtleSwgdmFsdWUpIHtcbiAgbWFwLnNldChrZXksIHZhbHVlKTtcbn1cbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBtYXAsIHByZWZpeH0gZnJvbSBcIi4vbWFwXCI7XG5cbmZ1bmN0aW9uIFNldCgpIHt9XG5cbnZhciBwcm90byA9IG1hcC5wcm90b3R5cGU7XG5cblNldC5wcm90b3R5cGUgPSBzZXQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2V0LFxuICBoYXM6IHByb3RvLmhhcyxcbiAgYWRkOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhbHVlICs9IFwiXCI7XG4gICAgdGhpc1twcmVmaXggKyB2YWx1ZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcmVtb3ZlOiBwcm90by5yZW1vdmUsXG4gIGNsZWFyOiBwcm90by5jbGVhcixcbiAgdmFsdWVzOiBwcm90by5rZXlzLFxuICBzaXplOiBwcm90by5zaXplLFxuICBlbXB0eTogcHJvdG8uZW1wdHksXG4gIGVhY2g6IHByb3RvLmVhY2hcbn07XG5cbmZ1bmN0aW9uIHNldChvYmplY3QsIGYpIHtcbiAgdmFyIHNldCA9IG5ldyBTZXQ7XG5cbiAgLy8gQ29weSBjb25zdHJ1Y3Rvci5cbiAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFNldCkgb2JqZWN0LmVhY2goZnVuY3Rpb24odmFsdWUpIHsgc2V0LmFkZCh2YWx1ZSk7IH0pO1xuXG4gIC8vIE90aGVyd2lzZSwgYXNzdW1lIGl04oCZcyBhbiBhcnJheS5cbiAgZWxzZSBpZiAob2JqZWN0KSB7XG4gICAgdmFyIGkgPSAtMSwgbiA9IG9iamVjdC5sZW5ndGg7XG4gICAgaWYgKGYgPT0gbnVsbCkgd2hpbGUgKCsraSA8IG4pIHNldC5hZGQob2JqZWN0W2ldKTtcbiAgICBlbHNlIHdoaWxlICgrK2kgPCBuKSBzZXQuYWRkKGYob2JqZWN0W2ldLCBpLCBvYmplY3QpKTtcbiAgfVxuXG4gIHJldHVybiBzZXQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hcCkge1xuICB2YXIga2V5cyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSBrZXlzLnB1c2goa2V5KTtcbiAgcmV0dXJuIGtleXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIHZhbHVlcyA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gbWFwKSB2YWx1ZXMucHVzaChtYXBba2V5XSk7XG4gIHJldHVybiB2YWx1ZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXApIHtcbiAgdmFyIGVudHJpZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG1hcCkgZW50cmllcy5wdXNoKHtrZXk6IGtleSwgdmFsdWU6IG1hcFtrZXldfSk7XG4gIHJldHVybiBlbnRyaWVzO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJpbmcpIHtcbiAgdmFyIGkgPSAwLCBuID0gcmluZy5sZW5ndGgsIGFyZWEgPSByaW5nW24gLSAxXVsxXSAqIHJpbmdbMF1bMF0gLSByaW5nW24gLSAxXVswXSAqIHJpbmdbMF1bMV07XG4gIHdoaWxlICgrK2kgPCBuKSBhcmVhICs9IHJpbmdbaSAtIDFdWzFdICogcmluZ1tpXVswXSAtIHJpbmdbaSAtIDFdWzBdICogcmluZ1tpXVsxXTtcbiAgcmV0dXJuIGFyZWE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJpbmcsIGhvbGUpIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGhvbGUubGVuZ3RoLCBjO1xuICB3aGlsZSAoKytpIDwgbikgaWYgKGMgPSByaW5nQ29udGFpbnMocmluZywgaG9sZVtpXSkpIHJldHVybiBjO1xuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gcmluZ0NvbnRhaW5zKHJpbmcsIHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSwgY29udGFpbnMgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSByaW5nLmxlbmd0aCwgaiA9IG4gLSAxOyBpIDwgbjsgaiA9IGkrKykge1xuICAgIHZhciBwaSA9IHJpbmdbaV0sIHhpID0gcGlbMF0sIHlpID0gcGlbMV0sIHBqID0gcmluZ1tqXSwgeGogPSBwalswXSwgeWogPSBwalsxXTtcbiAgICBpZiAoc2VnbWVudENvbnRhaW5zKHBpLCBwaiwgcG9pbnQpKSByZXR1cm4gMDtcbiAgICBpZiAoKCh5aSA+IHkpICE9PSAoeWogPiB5KSkgJiYgKCh4IDwgKHhqIC0geGkpICogKHkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSkpKSBjb250YWlucyA9IC1jb250YWlucztcbiAgfVxuICByZXR1cm4gY29udGFpbnM7XG59XG5cbmZ1bmN0aW9uIHNlZ21lbnRDb250YWlucyhhLCBiLCBjKSB7XG4gIHZhciBpOyByZXR1cm4gY29sbGluZWFyKGEsIGIsIGMpICYmIHdpdGhpbihhW2kgPSArKGFbMF0gPT09IGJbMF0pXSwgY1tpXSwgYltpXSk7XG59XG5cbmZ1bmN0aW9uIGNvbGxpbmVhcihhLCBiLCBjKSB7XG4gIHJldHVybiAoYlswXSAtIGFbMF0pICogKGNbMV0gLSBhWzFdKSA9PT0gKGNbMF0gLSBhWzBdKSAqIChiWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhpbihwLCBxLCByKSB7XG4gIHJldHVybiBwIDw9IHEgJiYgcSA8PSByIHx8IHIgPD0gcSAmJiBxIDw9IHA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHt9XG4iLCJpbXBvcnQge2V4dGVudCwgdGhyZXNob2xkU3R1cmdlcywgdGlja1N0ZXAsIHJhbmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuaW1wb3J0IGFyZWEgZnJvbSBcIi4vYXJlYVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnNcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcblxudmFyIGNhc2VzID0gW1xuICBbXSxcbiAgW1tbMS4wLCAxLjVdLCBbMC41LCAxLjBdXV0sXG4gIFtbWzEuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjUsIDEuMF0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMS4wLCAwLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzAuNSwgMS4wXV0sIFtbMS4wLCAwLjVdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMC41XSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjAsIDAuNV0sIFswLjUsIDEuMF1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS4wLCAwLjVdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzEuMCwgMC41XV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDAuNV1dLCBbWzEuNSwgMS4wXSwgWzEuMCwgMS41XV1dLFxuICBbW1sxLjUsIDEuMF0sIFsxLjAsIDAuNV1dXSxcbiAgW1tbMC41LCAxLjBdLCBbMS41LCAxLjBdXV0sXG4gIFtbWzEuMCwgMS41XSwgWzEuNSwgMS4wXV1dLFxuICBbW1swLjUsIDEuMF0sIFsxLjAsIDEuNV1dXSxcbiAgW11cbl07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgdGhyZXNob2xkID0gdGhyZXNob2xkU3R1cmdlcyxcbiAgICAgIHNtb290aCA9IHNtb290aExpbmVhcjtcblxuICBmdW5jdGlvbiBjb250b3Vycyh2YWx1ZXMpIHtcbiAgICB2YXIgdHogPSB0aHJlc2hvbGQodmFsdWVzKTtcblxuICAgIC8vIENvbnZlcnQgbnVtYmVyIG9mIHRocmVzaG9sZHMgaW50byB1bmlmb3JtIHRocmVzaG9sZHMuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR6KSkge1xuICAgICAgdmFyIGRvbWFpbiA9IGV4dGVudCh2YWx1ZXMpLCBzdGFydCA9IGRvbWFpblswXSwgc3RvcCA9IGRvbWFpblsxXTtcbiAgICAgIHR6ID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIHR6KTtcbiAgICAgIHR6ID0gcmFuZ2UoTWF0aC5mbG9vcihzdGFydCAvIHR6KSAqIHR6LCBNYXRoLmZsb29yKHN0b3AgLyB0eikgKiB0eiwgdHopO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eiA9IHR6LnNsaWNlKCkuc29ydChhc2NlbmRpbmcpO1xuICAgIH1cblxuICAgIHJldHVybiB0ei5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBjb250b3VyKHZhbHVlcywgdmFsdWUpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gQWNjdW11bGF0ZSwgc21vb3RoIGNvbnRvdXIgcmluZ3MsIGFzc2lnbiBob2xlcyB0byBleHRlcmlvciByaW5ncy5cbiAgLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL21ib3N0b2NrL3NoYXBlZmlsZS9ibG9iL3YwLjYuMi9zaHAvcG9seWdvbi5qc1xuICBmdW5jdGlvbiBjb250b3VyKHZhbHVlcywgdmFsdWUpIHtcbiAgICB2YXIgcG9seWdvbnMgPSBbXSxcbiAgICAgICAgaG9sZXMgPSBbXTtcblxuICAgIGlzb3JpbmdzKHZhbHVlcywgdmFsdWUsIGZ1bmN0aW9uKHJpbmcpIHtcbiAgICAgIHNtb290aChyaW5nLCB2YWx1ZXMsIHZhbHVlKTtcbiAgICAgIGlmIChhcmVhKHJpbmcpID4gMCkgcG9seWdvbnMucHVzaChbcmluZ10pO1xuICAgICAgZWxzZSBob2xlcy5wdXNoKHJpbmcpO1xuICAgIH0pO1xuXG4gICAgaG9sZXMuZm9yRWFjaChmdW5jdGlvbihob2xlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbiA9IHBvbHlnb25zLmxlbmd0aCwgcG9seWdvbjsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAoY29udGFpbnMoKHBvbHlnb24gPSBwb2x5Z29uc1tpXSlbMF0sIGhvbGUpICE9PSAtMSkge1xuICAgICAgICAgIHBvbHlnb24ucHVzaChob2xlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIk11bHRpUG9seWdvblwiLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgY29vcmRpbmF0ZXM6IHBvbHlnb25zXG4gICAgfTtcbiAgfVxuXG4gIC8vIE1hcmNoaW5nIHNxdWFyZXMgd2l0aCBpc29saW5lcyBzdGl0Y2hlZCBpbnRvIHJpbmdzLlxuICAvLyBCYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdG9wb2pzb24vdG9wb2pzb24tY2xpZW50L2Jsb2IvdjMuMC4wL3NyYy9zdGl0Y2guanNcbiAgZnVuY3Rpb24gaXNvcmluZ3ModmFsdWVzLCB2YWx1ZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnJhZ21lbnRCeVN0YXJ0ID0gbmV3IEFycmF5LFxuICAgICAgICBmcmFnbWVudEJ5RW5kID0gbmV3IEFycmF5LFxuICAgICAgICB4LCB5LCB0MCwgdDEsIHQyLCB0MztcblxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGZpcnN0IHJvdyAoeSA9IC0xLCB0MiA9IHQzID0gMCkuXG4gICAgeCA9IHkgPSAtMTtcbiAgICB0MSA9IHZhbHVlc1swXSA+PSB2YWx1ZTtcbiAgICBjYXNlc1t0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDAgPSB0MSwgdDEgPSB2YWx1ZXNbeCArIDFdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDAgfCB0MSA8PCAxXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuICAgIGNhc2VzW3QxIDw8IDBdLmZvckVhY2goc3RpdGNoKTtcblxuICAgIC8vIEdlbmVyYWwgY2FzZSBmb3IgdGhlIGludGVybWVkaWF0ZSByb3dzLlxuICAgIHdoaWxlICgrK3kgPCBkeSAtIDEpIHtcbiAgICAgIHggPSAtMTtcbiAgICAgIHQxID0gdmFsdWVzW3kgKiBkeCArIGR4XSA+PSB2YWx1ZTtcbiAgICAgIHQyID0gdmFsdWVzW3kgKiBkeF0gPj0gdmFsdWU7XG4gICAgICBjYXNlc1t0MSA8PCAxIHwgdDIgPDwgMl0uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgICB0MCA9IHQxLCB0MSA9IHZhbHVlc1t5ICogZHggKyBkeCArIHggKyAxXSA+PSB2YWx1ZTtcbiAgICAgICAgdDMgPSB0MiwgdDIgPSB2YWx1ZXNbeSAqIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgICBjYXNlc1t0MCB8IHQxIDw8IDEgfCB0MiA8PCAyIHwgdDMgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuICAgICAgfVxuICAgICAgY2FzZXNbdDEgfCB0MiA8PCAzXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIGZvciB0aGUgbGFzdCByb3cgKHkgPSBkeSAtIDEsIHQwID0gdDEgPSAwKS5cbiAgICB4ID0gLTE7XG4gICAgdDIgPSB2YWx1ZXNbeSAqIGR4XSA+PSB2YWx1ZTtcbiAgICBjYXNlc1t0MiA8PCAyXS5mb3JFYWNoKHN0aXRjaCk7XG4gICAgd2hpbGUgKCsreCA8IGR4IC0gMSkge1xuICAgICAgdDMgPSB0MiwgdDIgPSB2YWx1ZXNbeSAqIGR4ICsgeCArIDFdID49IHZhbHVlO1xuICAgICAgY2FzZXNbdDIgPDwgMiB8IHQzIDw8IDNdLmZvckVhY2goc3RpdGNoKTtcbiAgICB9XG4gICAgY2FzZXNbdDIgPDwgM10uZm9yRWFjaChzdGl0Y2gpO1xuXG4gICAgZnVuY3Rpb24gc3RpdGNoKGxpbmUpIHtcbiAgICAgIHZhciBzdGFydCA9IFtsaW5lWzBdWzBdICsgeCwgbGluZVswXVsxXSArIHldLFxuICAgICAgICAgIGVuZCA9IFtsaW5lWzFdWzBdICsgeCwgbGluZVsxXVsxXSArIHldLFxuICAgICAgICAgIHN0YXJ0SW5kZXggPSBpbmRleChzdGFydCksXG4gICAgICAgICAgZW5kSW5kZXggPSBpbmRleChlbmQpLFxuICAgICAgICAgIGYsIGc7XG4gICAgICBpZiAoZiA9IGZyYWdtZW50QnlFbmRbc3RhcnRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5U3RhcnRbZW5kSW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGRlbGV0ZSBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZi5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2cuZW5kXSA9IHtzdGFydDogZi5zdGFydCwgZW5kOiBnLmVuZCwgcmluZzogZi5yaW5nLmNvbmNhdChnLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlFbmRbZi5lbmRdO1xuICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgZnJhZ21lbnRCeUVuZFtmLmVuZCA9IGVuZEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZiA9IGZyYWdtZW50QnlTdGFydFtlbmRJbmRleF0pIHtcbiAgICAgICAgaWYgKGcgPSBmcmFnbWVudEJ5RW5kW3N0YXJ0SW5kZXhdKSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBkZWxldGUgZnJhZ21lbnRCeUVuZFtnLmVuZF07XG4gICAgICAgICAgaWYgKGYgPT09IGcpIHtcbiAgICAgICAgICAgIGYucmluZy5wdXNoKGVuZCk7XG4gICAgICAgICAgICBjYWxsYmFjayhmLnJpbmcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmcmFnbWVudEJ5U3RhcnRbZy5zdGFydF0gPSBmcmFnbWVudEJ5RW5kW2YuZW5kXSA9IHtzdGFydDogZy5zdGFydCwgZW5kOiBmLmVuZCwgcmluZzogZy5yaW5nLmNvbmNhdChmLnJpbmcpfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGZyYWdtZW50QnlTdGFydFtmLnN0YXJ0XTtcbiAgICAgICAgICBmLnJpbmcudW5zaGlmdChzdGFydCk7XG4gICAgICAgICAgZnJhZ21lbnRCeVN0YXJ0W2Yuc3RhcnQgPSBzdGFydEluZGV4XSA9IGY7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdtZW50QnlTdGFydFtzdGFydEluZGV4XSA9IGZyYWdtZW50QnlFbmRbZW5kSW5kZXhdID0ge3N0YXJ0OiBzdGFydEluZGV4LCBlbmQ6IGVuZEluZGV4LCByaW5nOiBbc3RhcnQsIGVuZF19O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluZGV4KHBvaW50KSB7XG4gICAgcmV0dXJuIHBvaW50WzBdICogMiArIHBvaW50WzFdICogKGR4ICsgMSkgKiA0O1xuICB9XG5cbiAgZnVuY3Rpb24gc21vb3RoTGluZWFyKHJpbmcsIHZhbHVlcywgdmFsdWUpIHtcbiAgICByaW5nLmZvckVhY2goZnVuY3Rpb24ocG9pbnQpIHtcbiAgICAgIHZhciB4ID0gcG9pbnRbMF0sXG4gICAgICAgICAgeSA9IHBvaW50WzFdLFxuICAgICAgICAgIHh0ID0geCB8IDAsXG4gICAgICAgICAgeXQgPSB5IHwgMCxcbiAgICAgICAgICB2MCxcbiAgICAgICAgICB2MSA9IHZhbHVlc1t5dCAqIGR4ICsgeHRdO1xuICAgICAgaWYgKHggPiAwICYmIHggPCBkeCAmJiB4dCA9PT0geCkge1xuICAgICAgICB2MCA9IHZhbHVlc1t5dCAqIGR4ICsgeHQgLSAxXTtcbiAgICAgICAgcG9pbnRbMF0gPSB4ICsgKHZhbHVlIC0gdjApIC8gKHYxIC0gdjApIC0gMC41O1xuICAgICAgfVxuICAgICAgaWYgKHkgPiAwICYmIHkgPCBkeSAmJiB5dCA9PT0geSkge1xuICAgICAgICB2MCA9IHZhbHVlc1soeXQgLSAxKSAqIGR4ICsgeHRdO1xuICAgICAgICBwb2ludFsxXSA9IHkgKyAodmFsdWUgLSB2MCkgLyAodjEgLSB2MCkgLSAwLjU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb250b3Vycy5jb250b3VyID0gY29udG91cjtcblxuICBjb250b3Vycy5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9IE1hdGguY2VpbChfWzBdKSwgXzEgPSBNYXRoLmNlaWwoX1sxXSk7XG4gICAgaWYgKCEoXzAgPiAwKSB8fCAhKF8xID4gMCkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2l6ZVwiKTtcbiAgICByZXR1cm4gZHggPSBfMCwgZHkgPSBfMSwgY29udG91cnM7XG4gIH07XG5cbiAgY29udG91cnMudGhyZXNob2xkcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aHJlc2hvbGQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IEFycmF5LmlzQXJyYXkoXykgPyBjb25zdGFudChzbGljZS5jYWxsKF8pKSA6IGNvbnN0YW50KF8pLCBjb250b3VycykgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgY29udG91cnMuc21vb3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNtb290aCA9IF8gPyBzbW9vdGhMaW5lYXIgOiBub29wLCBjb250b3VycykgOiBzbW9vdGggPT09IHNtb290aExpbmVhcjtcbiAgfTtcblxuICByZXR1cm4gY29udG91cnM7XG59XG4iLCIvLyBUT0RPIE9wdGltaXplIGVkZ2UgY2FzZXMuXG4vLyBUT0RPIE9wdGltaXplIGluZGV4IGNhbGN1bGF0aW9uLlxuLy8gVE9ETyBPcHRpbWl6ZSBhcmd1bWVudHMuXG5leHBvcnQgZnVuY3Rpb24gYmx1clgoc291cmNlLCB0YXJnZXQsIHIpIHtcbiAgdmFyIG4gPSBzb3VyY2Uud2lkdGgsXG4gICAgICBtID0gc291cmNlLmhlaWdodCxcbiAgICAgIHcgPSAociA8PCAxKSArIDE7XG4gIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHNyID0gMDsgaSA8IG4gKyByOyArK2kpIHtcbiAgICAgIGlmIChpIDwgbikge1xuICAgICAgICBzciArPSBzb3VyY2UuZGF0YVtpICsgaiAqIG5dO1xuICAgICAgfVxuICAgICAgaWYgKGkgPj0gcikge1xuICAgICAgICBpZiAoaSA+PSB3KSB7XG4gICAgICAgICAgc3IgLT0gc291cmNlLmRhdGFbaSAtIHcgKyBqICogbl07XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LmRhdGFbaSAtIHIgKyBqICogbl0gPSBzciAvIE1hdGgubWluKGkgKyAxLCBuIC0gMSArIHcgLSBpLCB3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gVE9ETyBPcHRpbWl6ZSBlZGdlIGNhc2VzLlxuLy8gVE9ETyBPcHRpbWl6ZSBpbmRleCBjYWxjdWxhdGlvbi5cbi8vIFRPRE8gT3B0aW1pemUgYXJndW1lbnRzLlxuZXhwb3J0IGZ1bmN0aW9uIGJsdXJZKHNvdXJjZSwgdGFyZ2V0LCByKSB7XG4gIHZhciBuID0gc291cmNlLndpZHRoLFxuICAgICAgbSA9IHNvdXJjZS5oZWlnaHQsXG4gICAgICB3ID0gKHIgPDwgMSkgKyAxO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGZvciAodmFyIGogPSAwLCBzciA9IDA7IGogPCBtICsgcjsgKytqKSB7XG4gICAgICBpZiAoaiA8IG0pIHtcbiAgICAgICAgc3IgKz0gc291cmNlLmRhdGFbaSArIGogKiBuXTtcbiAgICAgIH1cbiAgICAgIGlmIChqID49IHIpIHtcbiAgICAgICAgaWYgKGogPj0gdykge1xuICAgICAgICAgIHNyIC09IHNvdXJjZS5kYXRhW2kgKyAoaiAtIHcpICogbl07XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LmRhdGFbaSArIChqIC0gcikgKiBuXSA9IHNyIC8gTWF0aC5taW4oaiArIDEsIG0gLSAxICsgdyAtIGosIHcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHttYXgsIHJhbmdlLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtibHVyWCwgYmx1cll9IGZyb20gXCIuL2JsdXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGNvbnRvdXJzIGZyb20gXCIuL2NvbnRvdXJzXCI7XG5cbmZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgcmV0dXJuIGRbMV07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRXZWlnaHQoKSB7XG4gIHJldHVybiAxO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBkZWZhdWx0WCxcbiAgICAgIHkgPSBkZWZhdWx0WSxcbiAgICAgIHdlaWdodCA9IGRlZmF1bHRXZWlnaHQsXG4gICAgICBkeCA9IDk2MCxcbiAgICAgIGR5ID0gNTAwLFxuICAgICAgciA9IDIwLCAvLyBibHVyIHJhZGl1c1xuICAgICAgayA9IDIsIC8vIGxvZzIoZ3JpZCBjZWxsIHNpemUpXG4gICAgICBvID0gciAqIDMsIC8vIGdyaWQgb2Zmc2V0LCB0byBwYWQgZm9yIGJsdXJcbiAgICAgIG4gPSAoZHggKyBvICogMikgPj4gaywgLy8gZ3JpZCB3aWR0aFxuICAgICAgbSA9IChkeSArIG8gKiAyKSA+PiBrLCAvLyBncmlkIGhlaWdodFxuICAgICAgdGhyZXNob2xkID0gY29uc3RhbnQoMjApO1xuXG4gIGZ1bmN0aW9uIGRlbnNpdHkoZGF0YSkge1xuICAgIHZhciB2YWx1ZXMwID0gbmV3IEZsb2F0MzJBcnJheShuICogbSksXG4gICAgICAgIHZhbHVlczEgPSBuZXcgRmxvYXQzMkFycmF5KG4gKiBtKTtcblxuICAgIGRhdGEuZm9yRWFjaChmdW5jdGlvbihkLCBpLCBkYXRhKSB7XG4gICAgICB2YXIgeGkgPSAoK3goZCwgaSwgZGF0YSkgKyBvKSA+PiBrLFxuICAgICAgICAgIHlpID0gKCt5KGQsIGksIGRhdGEpICsgbykgPj4gayxcbiAgICAgICAgICB3aSA9ICt3ZWlnaHQoZCwgaSwgZGF0YSk7XG4gICAgICBpZiAoeGkgPj0gMCAmJiB4aSA8IG4gJiYgeWkgPj0gMCAmJiB5aSA8IG0pIHtcbiAgICAgICAgdmFsdWVzMFt4aSArIHlpICogbl0gKz0gd2k7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUT0RPIE9wdGltaXplLlxuICAgIGJsdXJYKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCByID4+IGspO1xuICAgIGJsdXJZKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCByID4+IGspO1xuICAgIGJsdXJYKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCByID4+IGspO1xuICAgIGJsdXJZKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCByID4+IGspO1xuICAgIGJsdXJYKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMwfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczF9LCByID4+IGspO1xuICAgIGJsdXJZKHt3aWR0aDogbiwgaGVpZ2h0OiBtLCBkYXRhOiB2YWx1ZXMxfSwge3dpZHRoOiBuLCBoZWlnaHQ6IG0sIGRhdGE6IHZhbHVlczB9LCByID4+IGspO1xuXG4gICAgdmFyIHR6ID0gdGhyZXNob2xkKHZhbHVlczApO1xuXG4gICAgLy8gQ29udmVydCBudW1iZXIgb2YgdGhyZXNob2xkcyBpbnRvIHVuaWZvcm0gdGhyZXNob2xkcy5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHopKSB7XG4gICAgICB2YXIgc3RvcCA9IG1heCh2YWx1ZXMwKTtcbiAgICAgIHR6ID0gdGlja1N0ZXAoMCwgc3RvcCwgdHopO1xuICAgICAgdHogPSByYW5nZSgwLCBNYXRoLmZsb29yKHN0b3AgLyB0eikgKiB0eiwgdHopO1xuICAgICAgdHouc2hpZnQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udG91cnMoKVxuICAgICAgICAudGhyZXNob2xkcyh0eilcbiAgICAgICAgLnNpemUoW24sIG1dKVxuICAgICAgKHZhbHVlczApXG4gICAgICAgIC5tYXAodHJhbnNmb3JtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybShnZW9tZXRyeSkge1xuICAgIGdlb21ldHJ5LnZhbHVlICo9IE1hdGgucG93KDIsIC0yICogayk7IC8vIERlbnNpdHkgaW4gcG9pbnRzIHBlciBzcXVhcmUgcGl4ZWwuXG4gICAgZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1Qb2x5Z29uKTtcbiAgICByZXR1cm4gZ2VvbWV0cnk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Qb2x5Z29uKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMuZm9yRWFjaCh0cmFuc2Zvcm1SaW5nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVJpbmcoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcy5mb3JFYWNoKHRyYW5zZm9ybVBvaW50KTtcbiAgfVxuXG4gIC8vIFRPRE8gT3B0aW1pemUuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybVBvaW50KGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXNbMF0gPSBjb29yZGluYXRlc1swXSAqIE1hdGgucG93KDIsIGspIC0gbztcbiAgICBjb29yZGluYXRlc1sxXSA9IGNvb3JkaW5hdGVzWzFdICogTWF0aC5wb3coMiwgaykgLSBvO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzaXplKCkge1xuICAgIG8gPSByICogMztcbiAgICBuID0gKGR4ICsgbyAqIDIpID4+IGs7XG4gICAgbSA9IChkeSArIG8gKiAyKSA+PiBrO1xuICAgIHJldHVybiBkZW5zaXR5O1xuICB9XG5cbiAgZGVuc2l0eS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB4O1xuICB9O1xuXG4gIGRlbnNpdHkueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGRlbnNpdHkpIDogeTtcbiAgfTtcblxuICBkZW5zaXR5LndlaWdodCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh3ZWlnaHQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgZGVuc2l0eSkgOiB3ZWlnaHQ7XG4gIH07XG5cbiAgZGVuc2l0eS5zaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIFtkeCwgZHldO1xuICAgIHZhciBfMCA9IE1hdGguY2VpbChfWzBdKSwgXzEgPSBNYXRoLmNlaWwoX1sxXSk7XG4gICAgaWYgKCEoXzAgPj0gMCkgJiYgIShfMCA+PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBzaXplXCIpO1xuICAgIHJldHVybiBkeCA9IF8wLCBkeSA9IF8xLCByZXNpemUoKTtcbiAgfTtcblxuICBkZW5zaXR5LmNlbGxTaXplID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIDEgPDwgaztcbiAgICBpZiAoISgoXyA9ICtfKSA+PSAxKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjZWxsIHNpemVcIik7XG4gICAgcmV0dXJuIGsgPSBNYXRoLmZsb29yKE1hdGgubG9nKF8pIC8gTWF0aC5MTjIpLCByZXNpemUoKTtcbiAgfTtcblxuICBkZW5zaXR5LnRocmVzaG9sZHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhyZXNob2xkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBBcnJheS5pc0FycmF5KF8pID8gY29uc3RhbnQoc2xpY2UuY2FsbChfKSkgOiBjb25zdGFudChfKSwgZGVuc2l0eSkgOiB0aHJlc2hvbGQ7XG4gIH07XG5cbiAgZGVuc2l0eS5iYW5kd2lkdGggPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gTWF0aC5zcXJ0KHIgKiAociArIDEpKTtcbiAgICBpZiAoISgoXyA9ICtfKSA+PSAwKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBiYW5kd2lkdGhcIik7XG4gICAgcmV0dXJuIHIgPSBNYXRoLnJvdW5kKChNYXRoLnNxcnQoNCAqIF8gKiBfICsgMSkgLSAxKSAvIDIpLCByZXNpemUoKTtcbiAgfTtcblxuICByZXR1cm4gZGVuc2l0eTtcbn1cbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5mdW5jdGlvbiBwYWQodmFsdWUsIHdpZHRoKSB7XG4gIHZhciBzID0gdmFsdWUgKyBcIlwiLCBsZW5ndGggPSBzLmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbigwKSArIHMgOiBzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgPCAwID8gXCItXCIgKyBwYWQoLXllYXIsIDYpXG4gICAgOiB5ZWFyID4gOTk5OSA/IFwiK1wiICsgcGFkKHllYXIsIDYpXG4gICAgOiBwYWQoeWVhciwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBzZWNvbmRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBcIkludmFsaWQgRGF0ZVwiXG4gICAgICA6IGZvcm1hdFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENEYXRlKCksIDIpXG4gICAgICArIChtaWxsaXNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCIuXCIgKyBwYWQobWlsbGlzZWNvbmRzLCAzKSArIFwiWlwiXG4gICAgICA6IHNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCJaXCJcbiAgICAgIDogbWludXRlcyB8fCBob3VycyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCJaXCJcbiAgICAgIDogXCJcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlbGltaXRlcikge1xuICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgIERFTElNSVRFUiA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKHRleHQsIGYpIHtcbiAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgIGNvbHVtbnMgPSByb3csIGNvbnZlcnQgPSBmID8gY3VzdG9tQ29udmVydGVyKHJvdywgZikgOiBvYmplY3RDb252ZXJ0ZXIocm93KTtcbiAgICB9KTtcbiAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IFtdO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICB2YXIgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gY3VycmVudCBsaW5lIG51bWJlclxuICAgICAgICB0LCAvLyBjdXJyZW50IHRva2VuXG4gICAgICAgIGVvZiA9IE4gPD0gMCwgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0Y/XG4gICAgICAgIGVvbCA9IGZhbHNlOyAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgIC8vIFN0cmlwIHRoZSB0cmFpbGluZyBuZXdsaW5lLlxuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBORVdMSU5FKSAtLU47XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IFJFVFVSTikgLS1OO1xuXG4gICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICBpZiAoZW9mKSByZXR1cm4gRU9GO1xuICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cbiAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlcy5cbiAgICAgIHZhciBpLCBqID0gSSwgYztcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IFFVT1RFKSB7XG4gICAgICAgIHdoaWxlIChJKysgPCBOICYmIHRleHQuY2hhckNvZGVBdChJKSAhPT0gUVVPVEUgfHwgdGV4dC5jaGFyQ29kZUF0KCsrSSkgPT09IFFVT1RFKTtcbiAgICAgICAgaWYgKChpID0gSSkgPj0gTikgZW9mID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkgLSAxKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lLlxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChpID0gSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gREVMSU1JVEVSKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgaSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBsYXN0IHRva2VuIGJlZm9yZSBFT0YuXG4gICAgICByZXR1cm4gZW9mID0gdHJ1ZSwgdGV4dC5zbGljZShqLCBOKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikgcm93LnB1c2godCksIHQgPSB0b2tlbigpO1xuICAgICAgaWYgKGYgJiYgKHJvdyA9IGYocm93LCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgcmV0dXJuIGNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IGZvcm1hdERhdGUodmFsdWUpXG4gICAgICAgIDogcmVGb3JtYXQudGVzdCh2YWx1ZSArPSBcIlwiKSA/IFwiXFxcIlwiICsgdmFsdWUucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXRCb2R5OiBmb3JtYXRCb2R5LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRCb2R5ID0gY3N2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdEJvZHkgPSB0c3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXV0b1R5cGUob2JqZWN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XS50cmltKCksIG51bWJlcjtcbiAgICBpZiAoIXZhbHVlKSB2YWx1ZSA9IG51bGw7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwidHJ1ZVwiKSB2YWx1ZSA9IHRydWU7XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IFwiZmFsc2VcIikgdmFsdWUgPSBmYWxzZTtcbiAgICBlbHNlIGlmICh2YWx1ZSA9PT0gXCJOYU5cIikgdmFsdWUgPSBOYU47XG4gICAgZWxzZSBpZiAoIWlzTmFOKG51bWJlciA9ICt2YWx1ZSkpIHZhbHVlID0gbnVtYmVyO1xuICAgIGVsc2UgaWYgKC9eKFstK11cXGR7Mn0pP1xcZHs0fSgtXFxkezJ9KC1cXGR7Mn0pPyk/KFRcXGR7Mn06XFxkezJ9KDpcXGR7Mn0oXFwuXFxkezN9KT8pPyhafFstK11cXGR7Mn06XFxkezJ9KT8pPyQvLnRlc3QodmFsdWUpKSB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICBlbHNlIGNvbnRpbnVlO1xuICAgIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cbiIsImZ1bmN0aW9uIHJlc3BvbnNlQmxvYihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQmxvYik7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUFycmF5QnVmZmVyKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlQXJyYXlCdWZmZXIpO1xufVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB7Y3N2UGFyc2UsIGRzdkZvcm1hdCwgdHN2UGFyc2V9IGZyb20gXCJkMy1kc3ZcIjtcbmltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIGNzdiA9IGRzdlBhcnNlKGNzdlBhcnNlKTtcbmV4cG9ydCB2YXIgdHN2ID0gZHN2UGFyc2UodHN2UGFyc2UpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5pdCkgaW1hZ2Vba2V5XSA9IGluaXRba2V5XTtcbiAgICBpbWFnZS5vbmVycm9yID0gcmVqZWN0O1xuICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyByZXNvbHZlKGltYWdlKTsgfTtcbiAgICBpbWFnZS5zcmMgPSBpbnB1dDtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZXNwb25zZUpzb24ocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUpzb24pO1xufVxuIiwiaW1wb3J0IHRleHQgZnJvbSBcIi4vdGV4dFwiO1xuXG5mdW5jdGlvbiBwYXJzZXIodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGluaXQpICB7XG4gICAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24odGV4dCkge1xuICAgICAgcmV0dXJuIChuZXcgRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgdHlwZSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlcihcImFwcGxpY2F0aW9uL3htbFwiKTtcblxuZXhwb3J0IHZhciBodG1sID0gcGFyc2VyKFwidGV4dC9odG1sXCIpO1xuXG5leHBvcnQgdmFyIHN2ZyA9IHBhcnNlcihcImltYWdlL3N2Zyt4bWxcIik7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBub2RlcztcblxuICBpZiAoeCA9PSBudWxsKSB4ID0gMDtcbiAgaWYgKHkgPT0gbnVsbCkgeSA9IDA7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHN4ID0gMCxcbiAgICAgICAgc3kgPSAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBzeCArPSBub2RlLngsIHN5ICs9IG5vZGUueTtcbiAgICB9XG5cbiAgICBmb3IgKHN4ID0gc3ggLyBuIC0geCwgc3kgPSBzeSAvIG4gLSB5LCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgbm9kZSA9IG5vZGVzW2ldLCBub2RlLnggLT0gc3gsIG5vZGUueSAtPSBzeTtcbiAgICB9XG4gIH1cblxuICBmb3JjZS5pbml0aWFsaXplID0gZnVuY3Rpb24oXykge1xuICAgIG5vZGVzID0gXztcbiAgfTtcblxuICBmb3JjZS54ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHggPSArXywgZm9yY2UpIDogeDtcbiAgfTtcblxuICBmb3JjZS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSArXywgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMWUtNjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGQpIHtcbiAgdmFyIHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQpLFxuICAgICAgeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCk7XG4gIHJldHVybiBhZGQodGhpcy5jb3Zlcih4LCB5KSwgeCwgeSwgZCk7XG59XG5cbmZ1bmN0aW9uIGFkZCh0cmVlLCB4LCB5LCBkKSB7XG4gIGlmIChpc05hTih4KSB8fCBpc05hTih5KSkgcmV0dXJuIHRyZWU7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciBwYXJlbnQsXG4gICAgICBub2RlID0gdHJlZS5fcm9vdCxcbiAgICAgIGxlYWYgPSB7ZGF0YTogZH0sXG4gICAgICB4MCA9IHRyZWUuX3gwLFxuICAgICAgeTAgPSB0cmVlLl95MCxcbiAgICAgIHgxID0gdHJlZS5feDEsXG4gICAgICB5MSA9IHRyZWUuX3kxLFxuICAgICAgeG0sXG4gICAgICB5bSxcbiAgICAgIHhwLFxuICAgICAgeXAsXG4gICAgICByaWdodCxcbiAgICAgIGJvdHRvbSxcbiAgICAgIGksXG4gICAgICBqO1xuXG4gIC8vIElmIHRoZSB0cmVlIGlzIGVtcHR5LCBpbml0aWFsaXplIHRoZSByb290IGFzIGEgbGVhZi5cbiAgaWYgKCFub2RlKSByZXR1cm4gdHJlZS5fcm9vdCA9IGxlYWYsIHRyZWU7XG5cbiAgLy8gRmluZCB0aGUgZXhpc3RpbmcgbGVhZiBmb3IgdGhlIG5ldyBwb2ludCwgb3IgYWRkIGl0LlxuICB3aGlsZSAobm9kZS5sZW5ndGgpIHtcbiAgICBpZiAocmlnaHQgPSB4ID49ICh4bSA9ICh4MCArIHgxKSAvIDIpKSB4MCA9IHhtOyBlbHNlIHgxID0geG07XG4gICAgaWYgKGJvdHRvbSA9IHkgPj0gKHltID0gKHkwICsgeTEpIC8gMikpIHkwID0geW07IGVsc2UgeTEgPSB5bTtcbiAgICBpZiAocGFyZW50ID0gbm9kZSwgIShub2RlID0gbm9kZVtpID0gYm90dG9tIDw8IDEgfCByaWdodF0pKSByZXR1cm4gcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbiAgfVxuXG4gIC8vIElzIHRoZSBuZXcgcG9pbnQgaXMgZXhhY3RseSBjb2luY2lkZW50IHdpdGggdGhlIGV4aXN0aW5nIHBvaW50P1xuICB4cCA9ICt0cmVlLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgeXAgPSArdHJlZS5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSk7XG4gIGlmICh4ID09PSB4cCAmJiB5ID09PSB5cCkgcmV0dXJuIGxlYWYubmV4dCA9IG5vZGUsIHBhcmVudCA/IHBhcmVudFtpXSA9IGxlYWYgOiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBPdGhlcndpc2UsIHNwbGl0IHRoZSBsZWFmIG5vZGUgdW50aWwgdGhlIG9sZCBhbmQgbmV3IHBvaW50IGFyZSBzZXBhcmF0ZWQuXG4gIGRvIHtcbiAgICBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnRbaV0gPSBuZXcgQXJyYXkoNCkgOiB0cmVlLl9yb290ID0gbmV3IEFycmF5KDQpO1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICB9IHdoaWxlICgoaSA9IGJvdHRvbSA8PCAxIHwgcmlnaHQpID09PSAoaiA9ICh5cCA+PSB5bSkgPDwgMSB8ICh4cCA+PSB4bSkpKTtcbiAgcmV0dXJuIHBhcmVudFtqXSA9IG5vZGUsIHBhcmVudFtpXSA9IGxlYWYsIHRyZWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRBbGwoZGF0YSkge1xuICB2YXIgZCwgaSwgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4eiA9IG5ldyBBcnJheShuKSxcbiAgICAgIHl6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeDAgPSBJbmZpbml0eSxcbiAgICAgIHkwID0gSW5maW5pdHksXG4gICAgICB4MSA9IC1JbmZpbml0eSxcbiAgICAgIHkxID0gLUluZmluaXR5O1xuXG4gIC8vIENvbXB1dGUgdGhlIHBvaW50cyBhbmQgdGhlaXIgZXh0ZW50LlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKGlzTmFOKHggPSArdGhpcy5feC5jYWxsKG51bGwsIGQgPSBkYXRhW2ldKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSBjb250aW51ZTtcbiAgICB4eltpXSA9IHg7XG4gICAgeXpbaV0gPSB5O1xuICAgIGlmICh4IDwgeDApIHgwID0geDtcbiAgICBpZiAoeCA+IHgxKSB4MSA9IHg7XG4gICAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICAgIGlmICh5ID4geTEpIHkxID0geTtcbiAgfVxuXG4gIC8vIElmIHRoZXJlIHdlcmUgbm8gKHZhbGlkKSBwb2ludHMsIGFib3J0LlxuICBpZiAoeDAgPiB4MSB8fCB5MCA+IHkxKSByZXR1cm4gdGhpcztcblxuICAvLyBFeHBhbmQgdGhlIHRyZWUgdG8gY292ZXIgdGhlIG5ldyBwb2ludHMuXG4gIHRoaXMuY292ZXIoeDAsIHkwKS5jb3Zlcih4MSwgeTEpO1xuXG4gIC8vIEFkZCB0aGUgbmV3IHBvaW50cy5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgIGFkZCh0aGlzLCB4eltpXSwgeXpbaV0sIGRhdGFbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCB5KSB7XG4gIGlmIChpc05hTih4ID0gK3gpIHx8IGlzTmFOKHkgPSAreSkpIHJldHVybiB0aGlzOyAvLyBpZ25vcmUgaW52YWxpZCBwb2ludHNcblxuICB2YXIgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSA9IHRoaXMuX3gxLFxuICAgICAgeTEgPSB0aGlzLl95MTtcblxuICAvLyBJZiB0aGUgcXVhZHRyZWUgaGFzIG5vIGV4dGVudCwgaW5pdGlhbGl6ZSB0aGVtLlxuICAvLyBJbnRlZ2VyIGV4dGVudCBhcmUgbmVjZXNzYXJ5IHNvIHRoYXQgaWYgd2UgbGF0ZXIgZG91YmxlIHRoZSBleHRlbnQsXG4gIC8vIHRoZSBleGlzdGluZyBxdWFkcmFudCBib3VuZGFyaWVzIGRvbuKAmXQgY2hhbmdlIGR1ZSB0byBmbG9hdGluZyBwb2ludCBlcnJvciFcbiAgaWYgKGlzTmFOKHgwKSkge1xuICAgIHgxID0gKHgwID0gTWF0aC5mbG9vcih4KSkgKyAxO1xuICAgIHkxID0gKHkwID0gTWF0aC5mbG9vcih5KSkgKyAxO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlLCBkb3VibGUgcmVwZWF0ZWRseSB0byBjb3Zlci5cbiAgZWxzZSB7XG4gICAgdmFyIHogPSB4MSAtIHgwLFxuICAgICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICBpO1xuXG4gICAgd2hpbGUgKHgwID4geCB8fCB4ID49IHgxIHx8IHkwID4geSB8fCB5ID49IHkxKSB7XG4gICAgICBpID0gKHkgPCB5MCkgPDwgMSB8ICh4IDwgeDApO1xuICAgICAgcGFyZW50ID0gbmV3IEFycmF5KDQpLCBwYXJlbnRbaV0gPSBub2RlLCBub2RlID0gcGFyZW50LCB6ICo9IDI7XG4gICAgICBzd2l0Y2ggKGkpIHtcbiAgICAgICAgY2FzZSAwOiB4MSA9IHgwICsgeiwgeTEgPSB5MCArIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDE6IHgwID0geDEgLSB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogeDEgPSB4MCArIHosIHkwID0geTEgLSB6OyBicmVhaztcbiAgICAgICAgY2FzZSAzOiB4MCA9IHgxIC0geiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9yb290ICYmIHRoaXMuX3Jvb3QubGVuZ3RoKSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHRoaXMuX3gwID0geDA7XG4gIHRoaXMuX3kwID0geTA7XG4gIHRoaXMuX3gxID0geDE7XG4gIHRoaXMuX3kxID0geTE7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5ub2RlID0gbm9kZTtcbiAgdGhpcy54MCA9IHgwO1xuICB0aGlzLnkwID0geTA7XG4gIHRoaXMueDEgPSB4MTtcbiAgdGhpcy55MSA9IHkxO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRYKGQpIHtcbiAgcmV0dXJuIGRbMF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feCA9IF8sIHRoaXMpIDogdGhpcy5feDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0WShkKSB7XG4gIHJldHVybiBkWzFdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihfKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRoaXMuX3kgPSBfLCB0aGlzKSA6IHRoaXMuX3k7XG59XG4iLCJpbXBvcnQgdHJlZV9hZGQsIHthZGRBbGwgYXMgdHJlZV9hZGRBbGx9IGZyb20gXCIuL2FkZFwiO1xuaW1wb3J0IHRyZWVfY292ZXIgZnJvbSBcIi4vY292ZXJcIjtcbmltcG9ydCB0cmVlX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHRyZWVfZXh0ZW50IGZyb20gXCIuL2V4dGVudFwiO1xuaW1wb3J0IHRyZWVfZmluZCBmcm9tIFwiLi9maW5kXCI7XG5pbXBvcnQgdHJlZV9yZW1vdmUsIHtyZW1vdmVBbGwgYXMgdHJlZV9yZW1vdmVBbGx9IGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyZWVfcm9vdCBmcm9tIFwiLi9yb290XCI7XG5pbXBvcnQgdHJlZV9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCB0cmVlX3Zpc2l0IGZyb20gXCIuL3Zpc2l0XCI7XG5pbXBvcnQgdHJlZV92aXNpdEFmdGVyIGZyb20gXCIuL3Zpc2l0QWZ0ZXJcIjtcbmltcG9ydCB0cmVlX3gsIHtkZWZhdWx0WH0gZnJvbSBcIi4veFwiO1xuaW1wb3J0IHRyZWVfeSwge2RlZmF1bHRZfSBmcm9tIFwiLi95XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YWR0cmVlKG5vZGVzLCB4LCB5KSB7XG4gIHZhciB0cmVlID0gbmV3IFF1YWR0cmVlKHggPT0gbnVsbCA/IGRlZmF1bHRYIDogeCwgeSA9PSBudWxsID8gZGVmYXVsdFkgOiB5LCBOYU4sIE5hTiwgTmFOLCBOYU4pO1xuICByZXR1cm4gbm9kZXMgPT0gbnVsbCA/IHRyZWUgOiB0cmVlLmFkZEFsbChub2Rlcyk7XG59XG5cbmZ1bmN0aW9uIFF1YWR0cmVlKHgsIHksIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHRoaXMuX3ggPSB4O1xuICB0aGlzLl95ID0geTtcbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgdGhpcy5fcm9vdCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gbGVhZl9jb3B5KGxlYWYpIHtcbiAgdmFyIGNvcHkgPSB7ZGF0YTogbGVhZi5kYXRhfSwgbmV4dCA9IGNvcHk7XG4gIHdoaWxlIChsZWFmID0gbGVhZi5uZXh0KSBuZXh0ID0gbmV4dC5uZXh0ID0ge2RhdGE6IGxlYWYuZGF0YX07XG4gIHJldHVybiBjb3B5O1xufVxuXG52YXIgdHJlZVByb3RvID0gcXVhZHRyZWUucHJvdG90eXBlID0gUXVhZHRyZWUucHJvdG90eXBlO1xuXG50cmVlUHJvdG8uY29weSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29weSA9IG5ldyBRdWFkdHJlZSh0aGlzLl94LCB0aGlzLl95LCB0aGlzLl94MCwgdGhpcy5feTAsIHRoaXMuX3gxLCB0aGlzLl95MSksXG4gICAgICBub2RlID0gdGhpcy5fcm9vdCxcbiAgICAgIG5vZGVzLFxuICAgICAgY2hpbGQ7XG5cbiAgaWYgKCFub2RlKSByZXR1cm4gY29weTtcblxuICBpZiAoIW5vZGUubGVuZ3RoKSByZXR1cm4gY29weS5fcm9vdCA9IGxlYWZfY29weShub2RlKSwgY29weTtcblxuICBub2RlcyA9IFt7c291cmNlOiBub2RlLCB0YXJnZXQ6IGNvcHkuX3Jvb3QgPSBuZXcgQXJyYXkoNCl9XTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgKytpKSB7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlLnNvdXJjZVtpXSkge1xuICAgICAgICBpZiAoY2hpbGQubGVuZ3RoKSBub2Rlcy5wdXNoKHtzb3VyY2U6IGNoaWxkLCB0YXJnZXQ6IG5vZGUudGFyZ2V0W2ldID0gbmV3IEFycmF5KDQpfSk7XG4gICAgICAgIGVsc2Ugbm9kZS50YXJnZXRbaV0gPSBsZWFmX2NvcHkoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb3B5O1xufTtcblxudHJlZVByb3RvLmFkZCA9IHRyZWVfYWRkO1xudHJlZVByb3RvLmFkZEFsbCA9IHRyZWVfYWRkQWxsO1xudHJlZVByb3RvLmNvdmVyID0gdHJlZV9jb3ZlcjtcbnRyZWVQcm90by5kYXRhID0gdHJlZV9kYXRhO1xudHJlZVByb3RvLmV4dGVudCA9IHRyZWVfZXh0ZW50O1xudHJlZVByb3RvLmZpbmQgPSB0cmVlX2ZpbmQ7XG50cmVlUHJvdG8ucmVtb3ZlID0gdHJlZV9yZW1vdmU7XG50cmVlUHJvdG8ucmVtb3ZlQWxsID0gdHJlZV9yZW1vdmVBbGw7XG50cmVlUHJvdG8ucm9vdCA9IHRyZWVfcm9vdDtcbnRyZWVQcm90by5zaXplID0gdHJlZV9zaXplO1xudHJlZVByb3RvLnZpc2l0ID0gdHJlZV92aXNpdDtcbnRyZWVQcm90by52aXNpdEFmdGVyID0gdHJlZV92aXNpdEFmdGVyO1xudHJlZVByb3RvLnggPSB0cmVlX3g7XG50cmVlUHJvdG8ueSA9IHRyZWVfeTtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGVcIjtcbmltcG9ydCB7cXVhZHRyZWV9IGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuXG5mdW5jdGlvbiB4KGQpIHtcbiAgcmV0dXJuIGQueCArIGQudng7XG59XG5cbmZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZC55ICsgZC52eTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmFkaXVzKSB7XG4gIHZhciBub2RlcyxcbiAgICAgIHJhZGlpLFxuICAgICAgc3RyZW5ndGggPSAxLFxuICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgaWYgKHR5cGVvZiByYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgcmFkaXVzID0gY29uc3RhbnQocmFkaXVzID09IG51bGwgPyAxIDogK3JhZGl1cyk7XG5cbiAgZnVuY3Rpb24gZm9yY2UoKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICAgIHRyZWUsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIHhpLFxuICAgICAgICB5aSxcbiAgICAgICAgcmksXG4gICAgICAgIHJpMjtcblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICB0cmVlID0gcXVhZHRyZWUobm9kZXMsIHgsIHkpLnZpc2l0QWZ0ZXIocHJlcGFyZSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgcmkgPSByYWRpaVtub2RlLmluZGV4XSwgcmkyID0gcmkgKiByaTtcbiAgICAgICAgeGkgPSBub2RlLnggKyBub2RlLnZ4O1xuICAgICAgICB5aSA9IG5vZGUueSArIG5vZGUudnk7XG4gICAgICAgIHRyZWUudmlzaXQoYXBwbHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5KHF1YWQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgICB2YXIgZGF0YSA9IHF1YWQuZGF0YSwgcmogPSBxdWFkLnIsIHIgPSByaSArIHJqO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgaWYgKGRhdGEuaW5kZXggPiBub2RlLmluZGV4KSB7XG4gICAgICAgICAgdmFyIHggPSB4aSAtIGRhdGEueCAtIGRhdGEudngsXG4gICAgICAgICAgICAgIHkgPSB5aSAtIGRhdGEueSAtIGRhdGEudnksXG4gICAgICAgICAgICAgIGwgPSB4ICogeCArIHkgKiB5O1xuICAgICAgICAgIGlmIChsIDwgciAqIHIpIHtcbiAgICAgICAgICAgIGlmICh4ID09PSAwKSB4ID0gamlnZ2xlKCksIGwgKz0geCAqIHg7XG4gICAgICAgICAgICBpZiAoeSA9PT0gMCkgeSA9IGppZ2dsZSgpLCBsICs9IHkgKiB5O1xuICAgICAgICAgICAgbCA9IChyIC0gKGwgPSBNYXRoLnNxcnQobCkpKSAvIGwgKiBzdHJlbmd0aDtcbiAgICAgICAgICAgIG5vZGUudnggKz0gKHggKj0gbCkgKiAociA9IChyaiAqPSByaikgLyAocmkyICsgcmopKTtcbiAgICAgICAgICAgIG5vZGUudnkgKz0gKHkgKj0gbCkgKiByO1xuICAgICAgICAgICAgZGF0YS52eCAtPSB4ICogKHIgPSAxIC0gcik7XG4gICAgICAgICAgICBkYXRhLnZ5IC09IHkgKiByO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4geDAgPiB4aSArIHIgfHwgeDEgPCB4aSAtIHIgfHwgeTAgPiB5aSArIHIgfHwgeTEgPCB5aSAtIHI7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGFyZShxdWFkKSB7XG4gICAgaWYgKHF1YWQuZGF0YSkgcmV0dXJuIHF1YWQuciA9IHJhZGlpW3F1YWQuZGF0YS5pbmRleF07XG4gICAgZm9yICh2YXIgaSA9IHF1YWQuciA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChxdWFkW2ldICYmIHF1YWRbaV0uciA+IHF1YWQucikge1xuICAgICAgICBxdWFkLnIgPSBxdWFkW2ldLnI7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG4gICAgcmFkaWkgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCByYWRpaVtub2RlLmluZGV4XSA9ICtyYWRpdXMobm9kZSwgaSwgbm9kZXMpO1xuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gK18sIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiByYWRpdXM7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkYXRhID0gW107XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmNvdmVyKCtfWzBdWzBdLCArX1swXVsxXSkuY292ZXIoK19bMV1bMF0sICtfWzFdWzFdKVxuICAgICAgOiBpc05hTih0aGlzLl94MCkgPyB1bmRlZmluZWQgOiBbW3RoaXMuX3gwLCB0aGlzLl95MF0sIFt0aGlzLl94MSwgdGhpcy5feTFdXTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gIHZhciBkYXRhLFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSxcbiAgICAgIHkxLFxuICAgICAgeDIsXG4gICAgICB5MixcbiAgICAgIHgzID0gdGhpcy5feDEsXG4gICAgICB5MyA9IHRoaXMuX3kxLFxuICAgICAgcXVhZHMgPSBbXSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcSxcbiAgICAgIGk7XG5cbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgeDAsIHkwLCB4MywgeTMpKTtcbiAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgZWxzZSB7XG4gICAgeDAgPSB4IC0gcmFkaXVzLCB5MCA9IHkgLSByYWRpdXM7XG4gICAgeDMgPSB4ICsgcmFkaXVzLCB5MyA9IHkgKyByYWRpdXM7XG4gICAgcmFkaXVzICo9IHJhZGl1cztcbiAgfVxuXG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcblxuICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgaWYgKCEobm9kZSA9IHEubm9kZSlcbiAgICAgICAgfHwgKHgxID0gcS54MCkgPiB4M1xuICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgIHx8ICh4MiA9IHEueDEpIDwgeDBcbiAgICAgICAgfHwgKHkyID0gcS55MSkgPCB5MCkgY29udGludWU7XG5cbiAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDEgKyB4MikgLyAyLFxuICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgcXVhZHMucHVzaChcbiAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMV0sIHhtLCB5MSwgeDIsIHltKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXG4gICAgICApO1xuXG4gICAgICAvLyBWaXNpdCB0aGUgY2xvc2VzdCBxdWFkcmFudCBmaXJzdC5cbiAgICAgIGlmIChpID0gKHkgPj0geW0pIDw8IDEgfCAoeCA+PSB4bSkpIHtcbiAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxXSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldID0gcTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWaXNpdCB0aGlzIHBvaW50LiAoVmlzaXRpbmcgY29pbmNpZGVudCBwb2ludHMgaXNu4oCZdCBuZWNlc3NhcnkhKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGR4ID0geCAtICt0aGlzLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkeSA9IHkgLSArdGhpcy5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkMiA8IHJhZGl1cykge1xuICAgICAgICB2YXIgZCA9IE1hdGguc3FydChyYWRpdXMgPSBkMik7XG4gICAgICAgIHgwID0geCAtIGQsIHkwID0geSAtIGQ7XG4gICAgICAgIHgzID0geCArIGQsIHkzID0geSArIGQ7XG4gICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcmV0YWluZXIsXG4gICAgICBwcmV2aW91cyxcbiAgICAgIG5leHQsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgIGlmIChwYXJlbnRbKGkgKyAxKSAmIDNdIHx8IHBhcmVudFsoaSArIDIpICYgM10gfHwgcGFyZW50WyhpICsgMykgJiAzXSkgcmV0YWluZXIgPSBwYXJlbnQsIGogPSBpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICB3aGlsZSAobm9kZS5kYXRhICE9PSBkKSBpZiAoIShwcmV2aW91cyA9IG5vZGUsIG5vZGUgPSBub2RlLm5leHQpKSByZXR1cm4gdGhpcztcbiAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XG5cbiAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXG4gICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsKGRhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9yb290O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gKytzaXplOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgcSwgbm9kZSA9IHRoaXMuX3Jvb3QsIGNoaWxkLCB4MCwgeTAsIHgxLCB5MTtcbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBuZXh0ID0gW10sIHE7XG4gIGlmICh0aGlzLl9yb290KSBxdWFkcy5wdXNoKG5ldyBRdWFkKHRoaXMuX3Jvb3QsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICB2YXIgbm9kZSA9IHEubm9kZTtcbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciBjaGlsZCwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxLCB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgfVxuICAgIG5leHQucHVzaChxKTtcbiAgfVxuICB3aGlsZSAocSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhxLm5vZGUsIHEueDAsIHEueTAsIHEueDEsIHEueTEpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgamlnZ2xlIGZyb20gXCIuL2ppZ2dsZVwiO1xuaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5cbmZ1bmN0aW9uIGluZGV4KGQpIHtcbiAgcmV0dXJuIGQuaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGZpbmQobm9kZUJ5SWQsIG5vZGVJZCkge1xuICB2YXIgbm9kZSA9IG5vZGVCeUlkLmdldChub2RlSWQpO1xuICBpZiAoIW5vZGUpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxpbmtzKSB7XG4gIHZhciBpZCA9IGluZGV4LFxuICAgICAgc3RyZW5ndGggPSBkZWZhdWx0U3RyZW5ndGgsXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZSA9IGNvbnN0YW50KDMwKSxcbiAgICAgIGRpc3RhbmNlcyxcbiAgICAgIG5vZGVzLFxuICAgICAgY291bnQsXG4gICAgICBiaWFzLFxuICAgICAgaXRlcmF0aW9ucyA9IDE7XG5cbiAgaWYgKGxpbmtzID09IG51bGwpIGxpbmtzID0gW107XG5cbiAgZnVuY3Rpb24gZGVmYXVsdFN0cmVuZ3RoKGxpbmspIHtcbiAgICByZXR1cm4gMSAvIE1hdGgubWluKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSwgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgayA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGsgPCBpdGVyYXRpb25zOyArK2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsaW5rLCBzb3VyY2UsIHRhcmdldCwgeCwgeSwgbCwgYjsgaSA8IG47ICsraSkge1xuICAgICAgICBsaW5rID0gbGlua3NbaV0sIHNvdXJjZSA9IGxpbmsuc291cmNlLCB0YXJnZXQgPSBsaW5rLnRhcmdldDtcbiAgICAgICAgeCA9IHRhcmdldC54ICsgdGFyZ2V0LnZ4IC0gc291cmNlLnggLSBzb3VyY2UudnggfHwgamlnZ2xlKCk7XG4gICAgICAgIHkgPSB0YXJnZXQueSArIHRhcmdldC52eSAtIHNvdXJjZS55IC0gc291cmNlLnZ5IHx8IGppZ2dsZSgpO1xuICAgICAgICBsID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICBsID0gKGwgLSBkaXN0YW5jZXNbaV0pIC8gbCAqIGFscGhhICogc3RyZW5ndGhzW2ldO1xuICAgICAgICB4ICo9IGwsIHkgKj0gbDtcbiAgICAgICAgdGFyZ2V0LnZ4IC09IHggKiAoYiA9IGJpYXNbaV0pO1xuICAgICAgICB0YXJnZXQudnkgLT0geSAqIGI7XG4gICAgICAgIHNvdXJjZS52eCArPSB4ICogKGIgPSAxIC0gYik7XG4gICAgICAgIHNvdXJjZS52eSArPSB5ICogYjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGlmICghbm9kZXMpIHJldHVybjtcblxuICAgIHZhciBpLFxuICAgICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgICBtID0gbGlua3MubGVuZ3RoLFxuICAgICAgICBub2RlQnlJZCA9IG1hcChub2RlcywgaWQpLFxuICAgICAgICBsaW5rO1xuXG4gICAgZm9yIChpID0gMCwgY291bnQgPSBuZXcgQXJyYXkobik7IGkgPCBtOyArK2kpIHtcbiAgICAgIGxpbmsgPSBsaW5rc1tpXSwgbGluay5pbmRleCA9IGk7XG4gICAgICBpZiAodHlwZW9mIGxpbmsuc291cmNlICE9PSBcIm9iamVjdFwiKSBsaW5rLnNvdXJjZSA9IGZpbmQobm9kZUJ5SWQsIGxpbmsuc291cmNlKTtcbiAgICAgIGlmICh0eXBlb2YgbGluay50YXJnZXQgIT09IFwib2JqZWN0XCIpIGxpbmsudGFyZ2V0ID0gZmluZChub2RlQnlJZCwgbGluay50YXJnZXQpO1xuICAgICAgY291bnRbbGluay5zb3VyY2UuaW5kZXhdID0gKGNvdW50W2xpbmsuc291cmNlLmluZGV4XSB8fCAwKSArIDE7XG4gICAgICBjb3VudFtsaW5rLnRhcmdldC5pbmRleF0gPSAoY291bnRbbGluay50YXJnZXQuaW5kZXhdIHx8IDApICsgMTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwLCBiaWFzID0gbmV3IEFycmF5KG0pOyBpIDwgbTsgKytpKSB7XG4gICAgICBsaW5rID0gbGlua3NbaV0sIGJpYXNbaV0gPSBjb3VudFtsaW5rLnNvdXJjZS5pbmRleF0gLyAoY291bnRbbGluay5zb3VyY2UuaW5kZXhdICsgY291bnRbbGluay50YXJnZXQuaW5kZXhdKTtcbiAgICB9XG5cbiAgICBzdHJlbmd0aHMgPSBuZXcgQXJyYXkobSksIGluaXRpYWxpemVTdHJlbmd0aCgpO1xuICAgIGRpc3RhbmNlcyA9IG5ldyBBcnJheShtKSwgaW5pdGlhbGl6ZURpc3RhbmNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplU3RyZW5ndGgoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBsaW5rcy5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9ICtzdHJlbmd0aChsaW5rc1tpXSwgaSwgbGlua3MpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemVEaXN0YW5jZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGxpbmtzLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgZGlzdGFuY2VzW2ldID0gK2Rpc3RhbmNlKGxpbmtzW2ldLCBpLCBsaW5rcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLmxpbmtzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxpbmtzID0gXywgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBsaW5rcztcbiAgfTtcblxuICBmb3JjZS5pZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpZCA9IF8sIGZvcmNlKSA6IGlkO1xuICB9O1xuXG4gIGZvcmNlLml0ZXJhdGlvbnMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaXRlcmF0aW9ucyA9ICtfLCBmb3JjZSkgOiBpdGVyYXRpb25zO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemVTdHJlbmd0aCgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplRGlzdGFuY2UoKSwgZm9yY2UpIDogZGlzdGFuY2U7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge21hcH0gZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmltcG9ydCB7dGltZXJ9IGZyb20gXCJkMy10aW1lclwiO1xuXG5leHBvcnQgZnVuY3Rpb24geChkKSB7XG4gIHJldHVybiBkLng7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KGQpIHtcbiAgcmV0dXJuIGQueTtcbn1cblxudmFyIGluaXRpYWxSYWRpdXMgPSAxMCxcbiAgICBpbml0aWFsQW5nbGUgPSBNYXRoLlBJICogKDMgLSBNYXRoLnNxcnQoNSkpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2Rlcykge1xuICB2YXIgc2ltdWxhdGlvbixcbiAgICAgIGFscGhhID0gMSxcbiAgICAgIGFscGhhTWluID0gMC4wMDEsXG4gICAgICBhbHBoYURlY2F5ID0gMSAtIE1hdGgucG93KGFscGhhTWluLCAxIC8gMzAwKSxcbiAgICAgIGFscGhhVGFyZ2V0ID0gMCxcbiAgICAgIHZlbG9jaXR5RGVjYXkgPSAwLjYsXG4gICAgICBmb3JjZXMgPSBtYXAoKSxcbiAgICAgIHN0ZXBwZXIgPSB0aW1lcihzdGVwKSxcbiAgICAgIGV2ZW50ID0gZGlzcGF0Y2goXCJ0aWNrXCIsIFwiZW5kXCIpO1xuXG4gIGlmIChub2RlcyA9PSBudWxsKSBub2RlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHN0ZXAoKSB7XG4gICAgdGljaygpO1xuICAgIGV2ZW50LmNhbGwoXCJ0aWNrXCIsIHNpbXVsYXRpb24pO1xuICAgIGlmIChhbHBoYSA8IGFscGhhTWluKSB7XG4gICAgICBzdGVwcGVyLnN0b3AoKTtcbiAgICAgIGV2ZW50LmNhbGwoXCJlbmRcIiwgc2ltdWxhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGljayhpdGVyYXRpb25zKSB7XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7XG5cbiAgICBpZiAoaXRlcmF0aW9ucyA9PT0gdW5kZWZpbmVkKSBpdGVyYXRpb25zID0gMTtcblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaXRlcmF0aW9uczsgKytrKSB7XG4gICAgICBhbHBoYSArPSAoYWxwaGFUYXJnZXQgLSBhbHBoYSkgKiBhbHBoYURlY2F5O1xuXG4gICAgICBmb3JjZXMuZWFjaChmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICAgICAgZm9yY2UoYWxwaGEpO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5meCA9PSBudWxsKSBub2RlLnggKz0gbm9kZS52eCAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueCA9IG5vZGUuZngsIG5vZGUudnggPSAwO1xuICAgICAgICBpZiAobm9kZS5meSA9PSBudWxsKSBub2RlLnkgKz0gbm9kZS52eSAqPSB2ZWxvY2l0eURlY2F5O1xuICAgICAgICBlbHNlIG5vZGUueSA9IG5vZGUuZnksIG5vZGUudnkgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaW11bGF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZU5vZGVzKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUuaW5kZXggPSBpO1xuICAgICAgaWYgKG5vZGUuZnggIT0gbnVsbCkgbm9kZS54ID0gbm9kZS5meDtcbiAgICAgIGlmIChub2RlLmZ5ICE9IG51bGwpIG5vZGUueSA9IG5vZGUuZnk7XG4gICAgICBpZiAoaXNOYU4obm9kZS54KSB8fCBpc05hTihub2RlLnkpKSB7XG4gICAgICAgIHZhciByYWRpdXMgPSBpbml0aWFsUmFkaXVzICogTWF0aC5zcXJ0KGkpLCBhbmdsZSA9IGkgKiBpbml0aWFsQW5nbGU7XG4gICAgICAgIG5vZGUueCA9IHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgbm9kZS55ID0gcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzTmFOKG5vZGUudngpIHx8IGlzTmFOKG5vZGUudnkpKSB7XG4gICAgICAgIG5vZGUudnggPSBub2RlLnZ5ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplRm9yY2UoZm9yY2UpIHtcbiAgICBpZiAoZm9yY2UuaW5pdGlhbGl6ZSkgZm9yY2UuaW5pdGlhbGl6ZShub2Rlcyk7XG4gICAgcmV0dXJuIGZvcmNlO1xuICB9XG5cbiAgaW5pdGlhbGl6ZU5vZGVzKCk7XG5cbiAgcmV0dXJuIHNpbXVsYXRpb24gPSB7XG4gICAgdGljazogdGljayxcblxuICAgIHJlc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0ZXBwZXIucmVzdGFydChzdGVwKSwgc2ltdWxhdGlvbjtcbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3RlcHBlci5zdG9wKCksIHNpbXVsYXRpb247XG4gICAgfSxcblxuICAgIG5vZGVzOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlcyA9IF8sIGluaXRpYWxpemVOb2RlcygpLCBmb3JjZXMuZWFjaChpbml0aWFsaXplRm9yY2UpLCBzaW11bGF0aW9uKSA6IG5vZGVzO1xuICAgIH0sXG5cbiAgICBhbHBoYTogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSArXywgc2ltdWxhdGlvbikgOiBhbHBoYTtcbiAgICB9LFxuXG4gICAgYWxwaGFNaW46IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhTWluID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFNaW47XG4gICAgfSxcblxuICAgIGFscGhhRGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhRGVjYXkgPSArXywgc2ltdWxhdGlvbikgOiArYWxwaGFEZWNheTtcbiAgICB9LFxuXG4gICAgYWxwaGFUYXJnZXQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhVGFyZ2V0ID0gK18sIHNpbXVsYXRpb24pIDogYWxwaGFUYXJnZXQ7XG4gICAgfSxcblxuICAgIHZlbG9jaXR5RGVjYXk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZlbG9jaXR5RGVjYXkgPSAxIC0gXywgc2ltdWxhdGlvbikgOiAxIC0gdmVsb2NpdHlEZWNheTtcbiAgICB9LFxuXG4gICAgZm9yY2U6IGZ1bmN0aW9uKG5hbWUsIF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMSA/ICgoXyA9PSBudWxsID8gZm9yY2VzLnJlbW92ZShuYW1lKSA6IGZvcmNlcy5zZXQobmFtZSwgaW5pdGlhbGl6ZUZvcmNlKF8pKSksIHNpbXVsYXRpb24pIDogZm9yY2VzLmdldChuYW1lKTtcbiAgICB9LFxuXG4gICAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgbiA9IG5vZGVzLmxlbmd0aCxcbiAgICAgICAgICBkeCxcbiAgICAgICAgICBkeSxcbiAgICAgICAgICBkMixcbiAgICAgICAgICBub2RlLFxuICAgICAgICAgIGNsb3Nlc3Q7XG5cbiAgICAgIGlmIChyYWRpdXMgPT0gbnVsbCkgcmFkaXVzID0gSW5maW5pdHk7XG4gICAgICBlbHNlIHJhZGl1cyAqPSByYWRpdXM7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBkeCA9IHggLSBub2RlLng7XG4gICAgICAgIGR5ID0geSAtIG5vZGUueTtcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgICAgaWYgKGQyIDwgcmFkaXVzKSBjbG9zZXN0ID0gbm9kZSwgcmFkaXVzID0gZDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9zZXN0O1xuICAgIH0sXG5cbiAgICBvbjogZnVuY3Rpb24obmFtZSwgXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gKGV2ZW50Lm9uKG5hbWUsIF8pLCBzaW11bGF0aW9uKSA6IGV2ZW50Lm9uKG5hbWUpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IGppZ2dsZSBmcm9tIFwiLi9qaWdnbGVcIjtcbmltcG9ydCB7cXVhZHRyZWV9IGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuaW1wb3J0IHt4LCB5fSBmcm9tIFwiLi9zaW11bGF0aW9uXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMsXG4gICAgICBub2RlLFxuICAgICAgYWxwaGEsXG4gICAgICBzdHJlbmd0aCA9IGNvbnN0YW50KC0zMCksXG4gICAgICBzdHJlbmd0aHMsXG4gICAgICBkaXN0YW5jZU1pbjIgPSAxLFxuICAgICAgZGlzdGFuY2VNYXgyID0gSW5maW5pdHksXG4gICAgICB0aGV0YTIgPSAwLjgxO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKF8pIHtcbiAgICB2YXIgaSwgbiA9IG5vZGVzLmxlbmd0aCwgdHJlZSA9IHF1YWR0cmVlKG5vZGVzLCB4LCB5KS52aXNpdEFmdGVyKGFjY3VtdWxhdGUpO1xuICAgIGZvciAoYWxwaGEgPSBfLCBpID0gMDsgaSA8IG47ICsraSkgbm9kZSA9IG5vZGVzW2ldLCB0cmVlLnZpc2l0KGFwcGx5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBub2RlID0gbm9kZXNbaV0sIHN0cmVuZ3Roc1tub2RlLmluZGV4XSA9ICtzdHJlbmd0aChub2RlLCBpLCBub2Rlcyk7XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlKHF1YWQpIHtcbiAgICB2YXIgc3RyZW5ndGggPSAwLCBxLCBjLCB3ZWlnaHQgPSAwLCB4LCB5LCBpO1xuXG4gICAgLy8gRm9yIGludGVybmFsIG5vZGVzLCBhY2N1bXVsYXRlIGZvcmNlcyBmcm9tIGNoaWxkIHF1YWRyYW50cy5cbiAgICBpZiAocXVhZC5sZW5ndGgpIHtcbiAgICAgIGZvciAoeCA9IHkgPSBpID0gMDsgaSA8IDQ7ICsraSkge1xuICAgICAgICBpZiAoKHEgPSBxdWFkW2ldKSAmJiAoYyA9IE1hdGguYWJzKHEudmFsdWUpKSkge1xuICAgICAgICAgIHN0cmVuZ3RoICs9IHEudmFsdWUsIHdlaWdodCArPSBjLCB4ICs9IGMgKiBxLngsIHkgKz0gYyAqIHEueTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcXVhZC54ID0geCAvIHdlaWdodDtcbiAgICAgIHF1YWQueSA9IHkgLyB3ZWlnaHQ7XG4gICAgfVxuXG4gICAgLy8gRm9yIGxlYWYgbm9kZXMsIGFjY3VtdWxhdGUgZm9yY2VzIGZyb20gY29pbmNpZGVudCBxdWFkcmFudHMuXG4gICAgZWxzZSB7XG4gICAgICBxID0gcXVhZDtcbiAgICAgIHEueCA9IHEuZGF0YS54O1xuICAgICAgcS55ID0gcS5kYXRhLnk7XG4gICAgICBkbyBzdHJlbmd0aCArPSBzdHJlbmd0aHNbcS5kYXRhLmluZGV4XTtcbiAgICAgIHdoaWxlIChxID0gcS5uZXh0KTtcbiAgICB9XG5cbiAgICBxdWFkLnZhbHVlID0gc3RyZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseShxdWFkLCB4MSwgXywgeDIpIHtcbiAgICBpZiAoIXF1YWQudmFsdWUpIHJldHVybiB0cnVlO1xuXG4gICAgdmFyIHggPSBxdWFkLnggLSBub2RlLngsXG4gICAgICAgIHkgPSBxdWFkLnkgLSBub2RlLnksXG4gICAgICAgIHcgPSB4MiAtIHgxLFxuICAgICAgICBsID0geCAqIHggKyB5ICogeTtcblxuICAgIC8vIEFwcGx5IHRoZSBCYXJuZXMtSHV0IGFwcHJveGltYXRpb24gaWYgcG9zc2libGUuXG4gICAgLy8gTGltaXQgZm9yY2VzIGZvciB2ZXJ5IGNsb3NlIG5vZGVzOyByYW5kb21pemUgZGlyZWN0aW9uIGlmIGNvaW5jaWRlbnQuXG4gICAgaWYgKHcgKiB3IC8gdGhldGEyIDwgbCkge1xuICAgICAgaWYgKGwgPCBkaXN0YW5jZU1heDIpIHtcbiAgICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgICAgaWYgKHkgPT09IDApIHkgPSBqaWdnbGUoKSwgbCArPSB5ICogeTtcbiAgICAgICAgaWYgKGwgPCBkaXN0YW5jZU1pbjIpIGwgPSBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yICogbCk7XG4gICAgICAgIG5vZGUudnggKz0geCAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICAgIG5vZGUudnkgKz0geSAqIHF1YWQudmFsdWUgKiBhbHBoYSAvIGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIHByb2Nlc3MgcG9pbnRzIGRpcmVjdGx5LlxuICAgIGVsc2UgaWYgKHF1YWQubGVuZ3RoIHx8IGwgPj0gZGlzdGFuY2VNYXgyKSByZXR1cm47XG5cbiAgICAvLyBMaW1pdCBmb3JjZXMgZm9yIHZlcnkgY2xvc2Ugbm9kZXM7IHJhbmRvbWl6ZSBkaXJlY3Rpb24gaWYgY29pbmNpZGVudC5cbiAgICBpZiAocXVhZC5kYXRhICE9PSBub2RlIHx8IHF1YWQubmV4dCkge1xuICAgICAgaWYgKHggPT09IDApIHggPSBqaWdnbGUoKSwgbCArPSB4ICogeDtcbiAgICAgIGlmICh5ID09PSAwKSB5ID0gamlnZ2xlKCksIGwgKz0geSAqIHk7XG4gICAgICBpZiAobCA8IGRpc3RhbmNlTWluMikgbCA9IE1hdGguc3FydChkaXN0YW5jZU1pbjIgKiBsKTtcbiAgICB9XG5cbiAgICBkbyBpZiAocXVhZC5kYXRhICE9PSBub2RlKSB7XG4gICAgICB3ID0gc3RyZW5ndGhzW3F1YWQuZGF0YS5pbmRleF0gKiBhbHBoYSAvIGw7XG4gICAgICBub2RlLnZ4ICs9IHggKiB3O1xuICAgICAgbm9kZS52eSArPSB5ICogdztcbiAgICB9IHdoaWxlIChxdWFkID0gcXVhZC5uZXh0KTtcbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLmRpc3RhbmNlTWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRpc3RhbmNlTWluMiA9IF8gKiBfLCBmb3JjZSkgOiBNYXRoLnNxcnQoZGlzdGFuY2VNaW4yKTtcbiAgfTtcblxuICBmb3JjZS5kaXN0YW5jZU1heCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkaXN0YW5jZU1heDIgPSBfICogXywgZm9yY2UpIDogTWF0aC5zcXJ0KGRpc3RhbmNlTWF4Mik7XG4gIH07XG5cbiAgZm9yY2UudGhldGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhldGEyID0gXyAqIF8sIGZvcmNlKSA6IE1hdGguc3FydCh0aGV0YTIpO1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMsIHgsIHkpIHtcbiAgdmFyIG5vZGVzLFxuICAgICAgc3RyZW5ndGggPSBjb25zdGFudCgwLjEpLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgcmFkaXVzZXM7XG5cbiAgaWYgKHR5cGVvZiByYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgcmFkaXVzID0gY29uc3RhbnQoK3JhZGl1cyk7XG4gIGlmICh4ID09IG51bGwpIHggPSAwO1xuICBpZiAoeSA9PSBudWxsKSB5ID0gMDtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldLFxuICAgICAgICAgIGR4ID0gbm9kZS54IC0geCB8fCAxZS02LFxuICAgICAgICAgIGR5ID0gbm9kZS55IC0geSB8fCAxZS02LFxuICAgICAgICAgIHIgPSBNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpLFxuICAgICAgICAgIGsgPSAocmFkaXVzZXNbaV0gLSByKSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhIC8gcjtcbiAgICAgIG5vZGUudnggKz0gZHggKiBrO1xuICAgICAgbm9kZS52eSArPSBkeSAqIGs7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHJhZGl1c2VzID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHJhZGl1c2VzW2ldID0gK3JhZGl1cyhub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgICAgc3RyZW5ndGhzW2ldID0gaXNOYU4ocmFkaXVzZXNbaV0pID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfLCBpbml0aWFsaXplKCk7XG4gIH07XG5cbiAgZm9yY2Uuc3RyZW5ndGggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RyZW5ndGggPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgaW5pdGlhbGl6ZSgpLCBmb3JjZSkgOiBzdHJlbmd0aDtcbiAgfTtcblxuICBmb3JjZS5yYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogcmFkaXVzO1xuICB9O1xuXG4gIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfLCBmb3JjZSkgOiB4O1xuICB9O1xuXG4gIGZvcmNlLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9ICtfLCBmb3JjZSkgOiB5O1xuICB9O1xuXG4gIHJldHVybiBmb3JjZTtcbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHZhciBzdHJlbmd0aCA9IGNvbnN0YW50KDAuMSksXG4gICAgICBub2RlcyxcbiAgICAgIHN0cmVuZ3RocyxcbiAgICAgIHh6O1xuXG4gIGlmICh0eXBlb2YgeCAhPT0gXCJmdW5jdGlvblwiKSB4ID0gY29uc3RhbnQoeCA9PSBudWxsID8gMCA6ICt4KTtcblxuICBmdW5jdGlvbiBmb3JjZShhbHBoYSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBuID0gbm9kZXMubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUudnggKz0gKHh6W2ldIC0gbm9kZS54KSAqIHN0cmVuZ3Roc1tpXSAqIGFscGhhO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgaWYgKCFub2RlcykgcmV0dXJuO1xuICAgIHZhciBpLCBuID0gbm9kZXMubGVuZ3RoO1xuICAgIHN0cmVuZ3RocyA9IG5ldyBBcnJheShuKTtcbiAgICB4eiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBzdHJlbmd0aHNbaV0gPSBpc05hTih4eltpXSA9ICt4KG5vZGVzW2ldLCBpLCBub2RlcykpID8gMCA6ICtzdHJlbmd0aChub2Rlc1tpXSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIGZvcmNlLmluaXRpYWxpemUgPSBmdW5jdGlvbihfKSB7XG4gICAgbm9kZXMgPSBfO1xuICAgIGluaXRpYWxpemUoKTtcbiAgfTtcblxuICBmb3JjZS5zdHJlbmd0aCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzdHJlbmd0aCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHN0cmVuZ3RoO1xuICB9O1xuXG4gIGZvcmNlLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBpbml0aWFsaXplKCksIGZvcmNlKSA6IHg7XG4gIH07XG5cbiAgcmV0dXJuIGZvcmNlO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHkpIHtcbiAgdmFyIHN0cmVuZ3RoID0gY29uc3RhbnQoMC4xKSxcbiAgICAgIG5vZGVzLFxuICAgICAgc3RyZW5ndGhzLFxuICAgICAgeXo7XG5cbiAgaWYgKHR5cGVvZiB5ICE9PSBcImZ1bmN0aW9uXCIpIHkgPSBjb25zdGFudCh5ID09IG51bGwgPyAwIDogK3kpO1xuXG4gIGZ1bmN0aW9uIGZvcmNlKGFscGhhKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBub2Rlcy5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIG5vZGUgPSBub2Rlc1tpXSwgbm9kZS52eSArPSAoeXpbaV0gLSBub2RlLnkpICogc3RyZW5ndGhzW2ldICogYWxwaGE7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAoIW5vZGVzKSByZXR1cm47XG4gICAgdmFyIGksIG4gPSBub2Rlcy5sZW5ndGg7XG4gICAgc3RyZW5ndGhzID0gbmV3IEFycmF5KG4pO1xuICAgIHl6ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN0cmVuZ3Roc1tpXSA9IGlzTmFOKHl6W2ldID0gK3kobm9kZXNbaV0sIGksIG5vZGVzKSkgPyAwIDogK3N0cmVuZ3RoKG5vZGVzW2ldLCBpLCBub2Rlcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBub2RlcyA9IF87XG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9O1xuXG4gIGZvcmNlLnN0cmVuZ3RoID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0cmVuZ3RoID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogc3RyZW5ndGg7XG4gIH07XG5cbiAgZm9yY2UueSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGluaXRpYWxpemUoKSwgZm9yY2UpIDogeTtcbiAgfTtcblxuICByZXR1cm4gZm9yY2U7XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWwuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoe1xuICAgIGZpbGw6IG1hdGNoWzFdLFxuICAgIGFsaWduOiBtYXRjaFsyXSxcbiAgICBzaWduOiBtYXRjaFszXSxcbiAgICBzeW1ib2w6IG1hdGNoWzRdLFxuICAgIHplcm86IG1hdGNoWzVdLFxuICAgIHdpZHRoOiBtYXRjaFs2XSxcbiAgICBjb21tYTogbWF0Y2hbN10sXG4gICAgcHJlY2lzaW9uOiBtYXRjaFs4XSAmJiBtYXRjaFs4XS5zbGljZSgxKSxcbiAgICB0cmltOiBtYXRjaFs5XSxcbiAgICB0eXBlOiBtYXRjaFsxMF1cbiAgfSk7XG59XG5cbmZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUgPSBGb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlOyAvLyBpbnN0YW5jZW9mXG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIHRoaXMuZmlsbCA9IHNwZWNpZmllci5maWxsID09PSB1bmRlZmluZWQgPyBcIiBcIiA6IHNwZWNpZmllci5maWxsICsgXCJcIjtcbiAgdGhpcy5hbGlnbiA9IHNwZWNpZmllci5hbGlnbiA9PT0gdW5kZWZpbmVkID8gXCI+XCIgOiBzcGVjaWZpZXIuYWxpZ24gKyBcIlwiO1xuICB0aGlzLnNpZ24gPSBzcGVjaWZpZXIuc2lnbiA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBzcGVjaWZpZXIuc2lnbiArIFwiXCI7XG4gIHRoaXMuc3ltYm9sID0gc3BlY2lmaWVyLnN5bWJvbCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHNwZWNpZmllci5zeW1ib2wgKyBcIlwiO1xuICB0aGlzLnplcm8gPSAhIXNwZWNpZmllci56ZXJvO1xuICB0aGlzLndpZHRoID0gc3BlY2lmaWVyLndpZHRoID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLndpZHRoO1xuICB0aGlzLmNvbW1hID0gISFzcGVjaWZpZXIuY29tbWE7XG4gIHRoaXMucHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogK3NwZWNpZmllci5wcmVjaXNpb247XG4gIHRoaXMudHJpbSA9ICEhc3BlY2lmaWVyLnRyaW07XG4gIHRoaXMudHlwZSA9IHNwZWNpZmllci50eXBlID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnR5cGUgKyBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSB7IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaTAgPSAwOyB9IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbC5qc1wiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGUuanNcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl0sXG4gIG1pbnVzOiBcIi1cIlxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIGZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIGZvcm1hdFByZWZpeCA9IGxvY2FsZS5mb3JtYXRQcmVmaXg7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsKHgsIHApO1xuICBpZiAoIWQpIHJldHVybiB4ICsgXCJcIjtcbiAgdmFyIGNvZWZmaWNpZW50ID0gZFswXSxcbiAgICAgIGV4cG9uZW50ID0gZFsxXTtcbiAgcmV0dXJuIGV4cG9uZW50IDwgMCA/IFwiMC5cIiArIG5ldyBBcnJheSgtZXhwb25lbnQpLmpvaW4oXCIwXCIpICsgY29lZmZpY2llbnRcbiAgICAgIDogY29lZmZpY2llbnQubGVuZ3RoID4gZXhwb25lbnQgKyAxID8gY29lZmZpY2llbnQuc2xpY2UoMCwgZXhwb25lbnQgKyAxKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoZXhwb25lbnQgKyAxKVxuICAgICAgOiBjb2VmZmljaWVudCArIG5ldyBBcnJheShleHBvbmVudCAtIGNvZWZmaWNpZW50Lmxlbmd0aCArIDIpLmpvaW4oXCIwXCIpO1xufVxuIiwiaW1wb3J0IGZvcm1hdFByZWZpeEF1dG8gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGZvcm1hdFJvdW5kZWQgZnJvbSBcIi4vZm9ybWF0Um91bmRlZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIFwiJVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiAoeCAqIDEwMCkudG9GaXhlZChwKTsgfSxcbiAgXCJiXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMik7IH0sXG4gIFwiY1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiB4ICsgXCJcIjsgfSxcbiAgXCJkXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTApOyB9LFxuICBcImVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0V4cG9uZW50aWFsKHApOyB9LFxuICBcImZcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b0ZpeGVkKHApOyB9LFxuICBcImdcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4geC50b1ByZWNpc2lvbihwKTsgfSxcbiAgXCJvXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoOCk7IH0sXG4gIFwicFwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApOyB9LFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOyB9LFxuICBcInhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5pbXBvcnQgZm9ybWF0R3JvdXAgZnJvbSBcIi4vZm9ybWF0R3JvdXAuanNcIjtcbmltcG9ydCBmb3JtYXROdW1lcmFscyBmcm9tIFwiLi9mb3JtYXROdW1lcmFscy5qc1wiO1xuaW1wb3J0IGZvcm1hdFNwZWNpZmllciBmcm9tIFwiLi9mb3JtYXRTcGVjaWZpZXIuanNcIjtcbmltcG9ydCBmb3JtYXRUcmltIGZyb20gXCIuL2Zvcm1hdFRyaW0uanNcIjtcbmltcG9ydCBmb3JtYXRUeXBlcyBmcm9tIFwiLi9mb3JtYXRUeXBlcy5qc1wiO1xuaW1wb3J0IHtwcmVmaXhFeHBvbmVudH0gZnJvbSBcIi4vZm9ybWF0UHJlZml4QXV0by5qc1wiO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbnZhciBtYXAgPSBBcnJheS5wcm90b3R5cGUubWFwLFxuICAgIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyA9PT0gdW5kZWZpbmVkIHx8IGxvY2FsZS50aG91c2FuZHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0R3JvdXAobWFwLmNhbGwobG9jYWxlLmdyb3VwaW5nLCBOdW1iZXIpLCBsb2NhbGUudGhvdXNhbmRzICsgXCJcIiksXG4gICAgICBjdXJyZW5jeVByZWZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVswXSArIFwiXCIsXG4gICAgICBjdXJyZW5jeVN1ZmZpeCA9IGxvY2FsZS5jdXJyZW5jeSA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IGxvY2FsZS5jdXJyZW5jeVsxXSArIFwiXCIsXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwgPT09IHVuZGVmaW5lZCA/IFwiLlwiIDogbG9jYWxlLmRlY2ltYWwgKyBcIlwiLFxuICAgICAgbnVtZXJhbHMgPSBsb2NhbGUubnVtZXJhbHMgPT09IHVuZGVmaW5lZCA/IGlkZW50aXR5IDogZm9ybWF0TnVtZXJhbHMobWFwLmNhbGwobG9jYWxlLm51bWVyYWxzLCBTdHJpbmcpKSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCA9PT0gdW5kZWZpbmVkID8gXCIlXCIgOiBsb2NhbGUucGVyY2VudCArIFwiXCIsXG4gICAgICBtaW51cyA9IGxvY2FsZS5taW51cyA9PT0gdW5kZWZpbmVkID8gXCItXCIgOiBsb2NhbGUubWludXMgKyBcIlwiLFxuICAgICAgbmFuID0gbG9jYWxlLm5hbiA9PT0gdW5kZWZpbmVkID8gXCJOYU5cIiA6IGxvY2FsZS5uYW4gKyBcIlwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09PSB1bmRlZmluZWQgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVByZWZpeCA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5U3VmZml4IDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMDtcbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gZHVyaW5nIGZvcm1hdHRpbmcsIHRyZWF0IGFzIHBvc2l0aXZlLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDApIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuXG4gICAgICAgIHZhbHVlU3VmZml4ID0gKHR5cGUgPT09IFwic1wiID8gcHJlZml4ZXNbOCArIHByZWZpeEV4cG9uZW50IC8gM10gOiBcIlwiKSArIHZhbHVlU3VmZml4ICsgKHZhbHVlTmVnYXRpdmUgJiYgc2lnbiA9PT0gXCIoXCIgPyBcIilcIiA6IFwiXCIpO1xuXG4gICAgICAgIC8vIEJyZWFrIHRoZSBmb3JtYXR0ZWQgdmFsdWUgaW50byB0aGUgaW50ZWdlciDigJx2YWx1ZeKAnSBwYXJ0IHRoYXQgY2FuIGJlXG4gICAgICAgIC8vIGdyb3VwZWQsIGFuZCBmcmFjdGlvbmFsIG9yIGV4cG9uZW50aWFsIOKAnHN1ZmZpeOKAnSBwYXJ0IHRoYXQgaXMgbm90LlxuICAgICAgICBpZiAobWF5YmVTdWZmaXgpIHtcbiAgICAgICAgICBpID0gLTEsIG4gPSB2YWx1ZS5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgICAgICAgIGlmIChjID0gdmFsdWUuY2hhckNvZGVBdChpKSwgNDggPiBjIHx8IGMgPiA1Nykge1xuICAgICAgICAgICAgICB2YWx1ZVN1ZmZpeCA9IChjID09PSA0NiA/IGRlY2ltYWwgKyB2YWx1ZS5zbGljZShpICsgMSkgOiB2YWx1ZS5zbGljZShpKSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBub3QgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYmVmb3JlIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgIXplcm8pIHZhbHVlID0gZ3JvdXAodmFsdWUsIEluZmluaXR5KTtcblxuICAgICAgLy8gQ29tcHV0ZSB0aGUgcGFkZGluZy5cbiAgICAgIHZhciBsZW5ndGggPSB2YWx1ZVByZWZpeC5sZW5ndGggKyB2YWx1ZS5sZW5ndGggKyB2YWx1ZVN1ZmZpeC5sZW5ndGgsXG4gICAgICAgICAgcGFkZGluZyA9IGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSA6IFwiXCI7XG5cbiAgICAgIC8vIElmIHRoZSBmaWxsIGNoYXJhY3RlciBpcyBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBhZnRlciBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmIHplcm8pIHZhbHVlID0gZ3JvdXAocGFkZGluZyArIHZhbHVlLCBwYWRkaW5nLmxlbmd0aCA/IHdpZHRoIC0gdmFsdWVTdWZmaXgubGVuZ3RoIDogSW5maW5pdHkpLCBwYWRkaW5nID0gXCJcIjtcblxuICAgICAgLy8gUmVjb25zdHJ1Y3QgdGhlIGZpbmFsIG91dHB1dCBiYXNlZCBvbiB0aGUgZGVzaXJlZCBhbGlnbm1lbnQuXG4gICAgICBzd2l0Y2ggKGFsaWduKSB7XG4gICAgICAgIGNhc2UgXCI8XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZzsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCI9XCI6IHZhbHVlID0gdmFsdWVQcmVmaXggKyBwYWRkaW5nICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJeXCI6IHZhbHVlID0gcGFkZGluZy5zbGljZSgwLCBsZW5ndGggPSBwYWRkaW5nLmxlbmd0aCA+PiAxKSArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmcuc2xpY2UobGVuZ3RoKTsgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IHZhbHVlID0gcGFkZGluZyArIHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeDsgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudW1lcmFscyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgZm9ybWF0LnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gc3BlY2lmaWVyICsgXCJcIjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1hdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFByZWZpeChzcGVjaWZpZXIsIHZhbHVlKSB7XG4gICAgdmFyIGYgPSBuZXdGb3JtYXQoKHNwZWNpZmllciA9IGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpLCBzcGVjaWZpZXIudHlwZSA9IFwiZlwiLCBzcGVjaWZpZXIpKSxcbiAgICAgICAgZSA9IE1hdGgubWF4KC04LCBNYXRoLm1pbig4LCBNYXRoLmZsb29yKGV4cG9uZW50KHZhbHVlKSAvIDMpKSkgKiAzLFxuICAgICAgICBrID0gTWF0aC5wb3coMTAsIC1lKSxcbiAgICAgICAgcHJlZml4ID0gcHJlZml4ZXNbOCArIGUgLyAzXTtcbiAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBmKGsgKiB2YWx1ZSkgKyBwcmVmaXg7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBuZXdGb3JtYXQsXG4gICAgZm9ybWF0UHJlZml4OiBmb3JtYXRQcmVmaXhcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCAtZXhwb25lbnQoTWF0aC5hYnMoc3RlcCkpKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCIvLyBBZGRzIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgd2l0aCB0d2ljZSB0aGUgbm9ybWFsIHByZWNpc2lvbi5cbi8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuLy8gMzA14oCTMzYzICgxOTk3KS5cbi8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4vLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEFkZGVyO1xufVxuXG5mdW5jdGlvbiBBZGRlcigpIHtcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5BZGRlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucyA9IC8vIHJvdW5kZWQgdmFsdWVcbiAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICBhZGQodGVtcCwgeSwgdGhpcy50KTtcbiAgICBhZGQodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgIGlmICh0aGlzLnMpIHRoaXMudCArPSB0ZW1wLnQ7XG4gICAgZWxzZSB0aGlzLnMgPSB0ZW1wLnQ7XG4gIH0sXG4gIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnM7XG4gIH1cbn07XG5cbnZhciB0ZW1wID0gbmV3IEFkZGVyO1xuXG5mdW5jdGlvbiBhZGQoYWRkZXIsIGEsIGIpIHtcbiAgdmFyIHggPSBhZGRlci5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gIGFkZGVyLnQgPSAoYSAtIGF2KSArIChiIC0gYnYpO1xufVxuIiwiZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHF1YXJ0ZXJQaSA9IHBpIC8gNDtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgdmFyIGRlZ3JlZXMgPSAxODAgLyBwaTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IHBpIC8gMTgwO1xuXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuID0gTWF0aC5hdGFuO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBjZWlsID0gTWF0aC5jZWlsO1xuZXhwb3J0IHZhciBleHAgPSBNYXRoLmV4cDtcbmV4cG9ydCB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IHZhciBsb2cgPSBNYXRoLmxvZztcbmV4cG9ydCB2YXIgcG93ID0gTWF0aC5wb3c7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuZXhwb3J0IHZhciB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJmdW5jdGlvbiBzdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgc3RyZWFtKSB7XG4gIGlmIChnZW9tZXRyeSAmJiBzdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcbiAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn1cblxudmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn07XG5cbnZhciBzdHJlYW1HZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW0uc3BoZXJlKCk7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIG9iamVjdCA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSwgMCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0pO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHN0cmVhbSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIHN0cmVhbSwgY2xvc2VkKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICBzdHJlYW0ubGluZUVuZCgpO1xufVxuXG5mdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcbiAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgaWYgKG9iamVjdCAmJiBzdHJlYW1PYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSkge1xuICAgIHN0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgc3RyZWFtKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QsIHN0cmVhbSk7XG4gIH1cbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlclwiO1xuaW1wb3J0IHthdGFuMiwgY29zLCBxdWFydGVyUGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG5leHBvcnQgdmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAwLFxuICAgIHBoaTAwLFxuICAgIGxhbWJkYTAsXG4gICAgY29zUGhpMCxcbiAgICBzaW5QaGkwO1xuXG5leHBvcnQgdmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICBhcmVhU3VtLmFkZChhcmVhUmluZyA8IDAgPyB0YXUgKyBhcmVhUmluZyA6IGFyZWFSaW5nKTtcbiAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMubGluZUVuZCA9IHRoaXMucG9pbnQgPSBub29wO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdW0uYWRkKHRhdSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludChsYW1iZGEwMCwgcGhpMDApO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvcyhwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbihwaGkpO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpOyAvLyBoYWxmIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGZyb20gc291dGggcG9sZVxuXG4gIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcbiAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgY29zUGhpID0gY29zKHBoaSksXG4gICAgICBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpLFxuICAgICAgdSA9IGNvc1BoaTAgKiBjb3NQaGkgKyBrICogY29zKGFkTGFtYmRhKSxcbiAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4oYWRMYW1iZGEpO1xuICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvc1BoaSwgc2luUGhpMCA9IHNpblBoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGFyZWFTdW0ucmVzZXQoKTtcbiAgc3RyZWFtKG9iamVjdCwgYXJlYVN0cmVhbSk7XG4gIHJldHVybiBhcmVhU3VtICogMjtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gIHJldHVybiBbYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBhc2luKGNhcnRlc2lhblsyXSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuKHNwaGVyaWNhbCkge1xuICB2YXIgbGFtYmRhID0gc3BoZXJpY2FsWzBdLCBwaGkgPSBzcGhlcmljYWxbMV0sIGNvc1BoaSA9IGNvcyhwaGkpO1xuICByZXR1cm4gW2Nvc1BoaSAqIGNvcyhsYW1iZGEpLCBjb3NQaGkgKiBzaW4obGFtYmRhKSwgc2luKHBoaSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuRG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gYVxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkFkZEluUGxhY2UoYSwgYikge1xuICBhWzBdICs9IGJbMF0sIGFbMV0gKz0gYlsxXSwgYVsyXSArPSBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG59XG5cbi8vIFRPRE8gcmV0dXJuIGRcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGQpIHtcbiAgdmFyIGwgPSBzcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XG4gIGRbMF0gLz0gbCwgZFsxXSAvPSBsLCBkWzJdIC89IGw7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YXJlYVN0cmVhbSwgYXJlYVJpbmdTdW19IGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7YWJzLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG52YXIgbGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSwgLy8gYm91bmRzXG4gICAgbGFtYmRhMiwgLy8gcHJldmlvdXMgbGFtYmRhLWNvb3JkaW5hdGVcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgcDAsIC8vIHByZXZpb3VzIDNEIHBvaW50XG4gICAgZGVsdGFTdW0gPSBhZGRlcigpLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24pIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApLCBwaGkwID0gLShwaGkxID0gOTApO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludChsYW1iZGEsIHBoaSkge1xuICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyAqIHNpZ24sXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCkge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGFyZWFTdHJlYW0ubGluZUVuZCgpO1xuICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24pIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgcDAgPSBudWxsO1xufVxuXG4vLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbi8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG5mdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwID0gcGhpMCA9IEluZmluaXR5KTtcbiAgcmFuZ2VzID0gW107XG4gIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIGVwc2lsb24yLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBXMCwgVzEsXG4gICAgWDAsIFkwLCBaMCxcbiAgICBYMSwgWTEsIFoxLFxuICAgIFgyLCBZMiwgWjIsXG4gICAgbGFtYmRhMDAsIHBoaTAwLCAvLyBmaXJzdCBwb2ludFxuICAgIHgwLCB5MCwgejA7IC8vIHByZXZpb3VzIHBvaW50XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgc3BoZXJlOiBub29wLFxuICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcbiAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQ7XG4gIH1cbn07XG5cbi8vIEFyaXRobWV0aWMgbWVhbiBvZiBDYXJ0ZXNpYW4gdmVjdG9ycy5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeCwgeSwgeikge1xuICArK1cwO1xuICBYMCArPSAoeCAtIFgwKSAvIFcwO1xuICBZMCArPSAoeSAtIFkwKSAvIFcwO1xuICBaMCArPSAoeiAtIFowKSAvIFcwO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICB4MCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpO1xuICB5MCA9IGNvc1BoaSAqIHNpbihsYW1iZGEpO1xuICB6MCA9IHNpbihwaGkpO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50O1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHggPSBjb3NQaGkgKiBjb3MobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4obGFtYmRhKSxcbiAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgIHcgPSBhdGFuMihzcXJ0KCh3ID0geTAgKiB6IC0gejAgKiB5KSAqIHcgKyAodyA9IHowICogeCAtIHgwICogeikgKiB3ICsgKHcgPSB4MCAqIHkgLSB5MCAqIHgpICogdyksIHgwICogeCArIHkwICogeSArIHowICogeik7XG4gIFcxICs9IHc7XG4gIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG4vLyBTZWUgSi4gRS4gQnJvY2ssIFRoZSBJbmVydGlhIFRlbnNvciBmb3IgYSBTcGhlcmljYWwgVHJpYW5nbGUsXG4vLyBKLiBBcHBsaWVkIE1lY2hhbmljcyA0MiwgMjM5ICgxOTc1KS5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ0VuZCgpIHtcbiAgY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50O1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zKGxhbWJkYSk7XG4gIHkwID0gY29zUGhpICogc2luKGxhbWJkYSk7XG4gIHowID0gc2luKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgeCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpLFxuICAgICAgeSA9IGNvc1BoaSAqIHNpbihsYW1iZGEpLFxuICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgY3ggPSB5MCAqIHogLSB6MCAqIHksXG4gICAgICBjeSA9IHowICogeCAtIHgwICogeixcbiAgICAgIGN6ID0geDAgKiB5IC0geTAgKiB4LFxuICAgICAgbSA9IHNxcnQoY3ggKiBjeCArIGN5ICogY3kgKyBjeiAqIGN6KSxcbiAgICAgIHcgPSBhc2luKG0pLCAvLyBsaW5lIHdlaWdodCA9IGFuZ2xlXG4gICAgICB2ID0gbSAmJiAtdyAvIG07IC8vIGFyZWEgd2VpZ2h0IG11bHRpcGxpZXJcbiAgWDIgKz0gdiAqIGN4O1xuICBZMiArPSB2ICogY3k7XG4gIFoyICs9IHYgKiBjejtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIFcwID0gVzEgPVxuICBYMCA9IFkwID0gWjAgPVxuICBYMSA9IFkxID0gWjEgPVxuICBYMiA9IFkyID0gWjIgPSAwO1xuICBzdHJlYW0ob2JqZWN0LCBjZW50cm9pZFN0cmVhbSk7XG5cbiAgdmFyIHggPSBYMixcbiAgICAgIHkgPSBZMixcbiAgICAgIHogPSBaMixcbiAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgLy8gSWYgdGhlIGFyZWEtd2VpZ2h0ZWQgY2NlbnRyb2lkIGlzIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIGxlbmd0aC13ZWlnaHRlZCBjY2VudHJvaWQuXG4gIGlmIChtIDwgZXBzaWxvbjIpIHtcbiAgICB4ID0gWDEsIHkgPSBZMSwgeiA9IFoxO1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIGhhcyB6ZXJvIGxlbmd0aCwgZmFsbCBiYWNrIHRvIGFyaXRobWV0aWMgbWVhbiBvZiBwb2ludCB2ZWN0b3JzLlxuICAgIGlmIChXMSA8IGVwc2lsb24pIHggPSBYMCwgeSA9IFkwLCB6ID0gWjA7XG4gICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgaWYgKG0gPCBlcHNpbG9uMikgcmV0dXJuIFtOYU4sIE5hTl07XG4gIH1cblxuICByZXR1cm4gW2F0YW4yKHksIHgpICogZGVncmVlcywgYXNpbih6IC8gc3FydChtKSkgKiBkZWdyZWVzXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuXG4gIGZ1bmN0aW9uIGNvbXBvc2UoeCwgeSkge1xuICAgIHJldHVybiB4ID0gYSh4LCB5KSwgYih4WzBdLCB4WzFdKTtcbiAgfVxuXG4gIGlmIChhLmludmVydCAmJiBiLmludmVydCkgY29tcG9zZS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBiLmludmVydCh4LCB5KSwgeCAmJiBhLmludmVydCh4WzBdLCB4WzFdKTtcbiAgfTtcblxuICByZXR1cm4gY29tcG9zZTtcbn1cbiIsImltcG9ydCBjb21wb3NlIGZyb20gXCIuL2NvbXBvc2VcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBwaSwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gcm90YXRpb25JZGVudGl0eShsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2FicyhsYW1iZGEpID4gcGkgPyBsYW1iZGEgKyBNYXRoLnJvdW5kKC1sYW1iZGEgLyB0YXUpICogdGF1IDogbGFtYmRhLCBwaGldO1xufVxuXG5yb3RhdGlvbklkZW50aXR5LmludmVydCA9IHJvdGF0aW9uSWRlbnRpdHk7XG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICByZXR1cm4gKGRlbHRhTGFtYmRhICU9IHRhdSkgPyAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IGNvbXBvc2Uocm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpLCByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSlcbiAgICA6IHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSlcbiAgICA6IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSlcbiAgICA6IHJvdGF0aW9uSWRlbnRpdHkpO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgcmV0dXJuIGxhbWJkYSArPSBkZWx0YUxhbWJkYSwgW2xhbWJkYSA+IHBpID8gbGFtYmRhIC0gdGF1IDogbGFtYmRhIDwgLXBpID8gbGFtYmRhICsgdGF1IDogbGFtYmRhLCBwaGldO1xuICB9O1xufVxuXG5mdW5jdGlvbiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICB2YXIgcm90YXRpb24gPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpO1xuICByb3RhdGlvbi5pbnZlcnQgPSBmb3J3YXJkUm90YXRpb25MYW1iZGEoLWRlbHRhTGFtYmRhKTtcbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5mdW5jdGlvbiByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHZhciBjb3NEZWx0YVBoaSA9IGNvcyhkZWx0YVBoaSksXG4gICAgICBzaW5EZWx0YVBoaSA9IHNpbihkZWx0YVBoaSksXG4gICAgICBjb3NEZWx0YUdhbW1hID0gY29zKGRlbHRhR2FtbWEpLFxuICAgICAgc2luRGVsdGFHYW1tYSA9IHNpbihkZWx0YUdhbW1hKTtcblxuICBmdW5jdGlvbiByb3RhdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgICAgeCA9IGNvcyhsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YVBoaSArIHggKiBzaW5EZWx0YVBoaTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgLSBrICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpIC0geiAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhR2FtbWEgKyB5ICogc2luRGVsdGFHYW1tYSlcbiAgICBdO1xuICB9XG5cbiAgcm90YXRpb24uaW52ZXJ0ID0gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFHYW1tYSAtIHkgKiBzaW5EZWx0YUdhbW1hO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSArIHogKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgKyBrICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFQaGkgLSB4ICogc2luRGVsdGFQaGkpXG4gICAgXTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJvdGF0ZSkge1xuICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKHJvdGF0ZVswXSAqIHJhZGlhbnMsIHJvdGF0ZVsxXSAqIHJhZGlhbnMsIHJvdGF0ZS5sZW5ndGggPiAyID8gcm90YXRlWzJdICogcmFkaWFucyA6IDApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQoY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZShjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuICB9XG5cbiAgZm9yd2FyZC5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlLmludmVydChjb29yZGluYXRlc1swXSAqIHJhZGlhbnMsIGNvb3JkaW5hdGVzWzFdICogcmFkaWFucyk7XG4gICAgcmV0dXJuIGNvb3JkaW5hdGVzWzBdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzWzFdICo9IGRlZ3JlZXMsIGNvb3JkaW5hdGVzO1xuICB9O1xuXG4gIHJldHVybiBmb3J3YXJkO1xufVxuIiwiaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UsIHNwaGVyaWNhbH0gZnJvbSBcIi4vY2FydGVzaWFuXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7YWNvcywgY29zLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi9yb3RhdGlvblwiO1xuXG4vLyBHZW5lcmF0ZXMgYSBjaXJjbGUgY2VudGVyZWQgYXQgWzDCsCwgMMKwXSwgd2l0aCBhIGdpdmVuIHJhZGl1cyBhbmQgcHJlY2lzaW9uLlxuZXhwb3J0IGZ1bmN0aW9uIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgdDAsIHQxKSB7XG4gIGlmICghZGVsdGEpIHJldHVybjtcbiAgdmFyIGNvc1JhZGl1cyA9IGNvcyhyYWRpdXMpLFxuICAgICAgc2luUmFkaXVzID0gc2luKHJhZGl1cyksXG4gICAgICBzdGVwID0gZGlyZWN0aW9uICogZGVsdGE7XG4gIGlmICh0MCA9PSBudWxsKSB7XG4gICAgdDAgPSByYWRpdXMgKyBkaXJlY3Rpb24gKiB0YXU7XG4gICAgdDEgPSByYWRpdXMgLSBzdGVwIC8gMjtcbiAgfSBlbHNlIHtcbiAgICB0MCA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQwKTtcbiAgICB0MSA9IGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHQxKTtcbiAgICBpZiAoZGlyZWN0aW9uID4gMCA/IHQwIDwgdDEgOiB0MCA+IHQxKSB0MCArPSBkaXJlY3Rpb24gKiB0YXU7XG4gIH1cbiAgZm9yICh2YXIgcG9pbnQsIHQgPSB0MDsgZGlyZWN0aW9uID4gMCA/IHQgPiB0MSA6IHQgPCB0MTsgdCAtPSBzdGVwKSB7XG4gICAgcG9pbnQgPSBzcGhlcmljYWwoW2Nvc1JhZGl1cywgLXNpblJhZGl1cyAqIGNvcyh0KSwgLXNpblJhZGl1cyAqIHNpbih0KV0pO1xuICAgIHN0cmVhbS5wb2ludChwb2ludFswXSwgcG9pbnRbMV0pO1xuICB9XG59XG5cbi8vIFJldHVybnMgdGhlIHNpZ25lZCBhbmdsZSBvZiBhIGNhcnRlc2lhbiBwb2ludCByZWxhdGl2ZSB0byBbY29zUmFkaXVzLCAwLCAwXS5cbmZ1bmN0aW9uIGNpcmNsZVJhZGl1cyhjb3NSYWRpdXMsIHBvaW50KSB7XG4gIHBvaW50ID0gY2FydGVzaWFuKHBvaW50KSwgcG9pbnRbMF0gLT0gY29zUmFkaXVzO1xuICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKHBvaW50KTtcbiAgdmFyIHJhZGl1cyA9IGFjb3MoLXBvaW50WzFdKTtcbiAgcmV0dXJuICgoLXBvaW50WzJdIDwgMCA/IC1yYWRpdXMgOiByYWRpdXMpICsgdGF1IC0gZXBzaWxvbikgJSB0YXU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2VudGVyID0gY29uc3RhbnQoWzAsIDBdKSxcbiAgICAgIHJhZGl1cyA9IGNvbnN0YW50KDkwKSxcbiAgICAgIHByZWNpc2lvbiA9IGNvbnN0YW50KDYpLFxuICAgICAgcmluZyxcbiAgICAgIHJvdGF0ZSxcbiAgICAgIHN0cmVhbSA9IHtwb2ludDogcG9pbnR9O1xuXG4gIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICByaW5nLnB1c2goeCA9IHJvdGF0ZSh4LCB5KSk7XG4gICAgeFswXSAqPSBkZWdyZWVzLCB4WzFdICo9IGRlZ3JlZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjaXJjbGUoKSB7XG4gICAgdmFyIGMgPSBjZW50ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgciA9IHJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucyxcbiAgICAgICAgcCA9IHByZWNpc2lvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpICogcmFkaWFucztcbiAgICByaW5nID0gW107XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucygtY1swXSAqIHJhZGlhbnMsIC1jWzFdICogcmFkaWFucywgMCkuaW52ZXJ0O1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHIsIHAsIDEpO1xuICAgIGMgPSB7dHlwZTogXCJQb2x5Z29uXCIsIGNvb3JkaW5hdGVzOiBbcmluZ119O1xuICAgIHJpbmcgPSByb3RhdGUgPSBudWxsO1xuICAgIHJldHVybiBjO1xuICB9XG5cbiAgY2lyY2xlLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KFsrX1swXSwgK19bMV1dKSwgY2lyY2xlKSA6IGNlbnRlcjtcbiAgfTtcblxuICBjaXJjbGUucmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcmFkaXVzO1xuICB9O1xuXG4gIGNpcmNsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2lzaW9uID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGNpcmNsZSkgOiBwcmVjaXNpb247XG4gIH07XG5cbiAgcmV0dXJuIGNpcmNsZTtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbGluZXMgPSBbXSxcbiAgICAgIGxpbmU7XG4gIHJldHVybiB7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIGxpbmUucHVzaChbeCwgeV0pO1xuICAgIH0sXG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIGxpbmVzLnB1c2gobGluZSA9IFtdKTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IG5vb3AsXG4gICAgcmVqb2luOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSBsaW5lcy5wdXNoKGxpbmVzLnBvcCgpLmNvbmNhdChsaW5lcy5zaGlmdCgpKSk7XG4gICAgfSxcbiAgICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxpbmVzO1xuICAgICAgbGluZXMgPSBbXTtcbiAgICAgIGxpbmUgPSBudWxsO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhYnMoYVswXSAtIGJbMF0pIDwgZXBzaWxvbiAmJiBhYnMoYVsxXSAtIGJbMV0pIDwgZXBzaWxvbjtcbn1cbiIsImltcG9ydCBwb2ludEVxdWFsIGZyb20gXCIuLi9wb2ludEVxdWFsXCI7XG5cbmZ1bmN0aW9uIEludGVyc2VjdGlvbihwb2ludCwgcG9pbnRzLCBvdGhlciwgZW50cnkpIHtcbiAgdGhpcy54ID0gcG9pbnQ7XG4gIHRoaXMueiA9IHBvaW50cztcbiAgdGhpcy5vID0gb3RoZXI7IC8vIGFub3RoZXIgaW50ZXJzZWN0aW9uXG4gIHRoaXMuZSA9IGVudHJ5OyAvLyBpcyBhbiBlbnRyeT9cbiAgdGhpcy52ID0gZmFsc2U7IC8vIHZpc2l0ZWRcbiAgdGhpcy5uID0gdGhpcy5wID0gbnVsbDsgLy8gbmV4dCAmIHByZXZpb3VzXG59XG5cbi8vIEEgZ2VuZXJhbGl6ZWQgcG9seWdvbiBjbGlwcGluZyBhbGdvcml0aG06IGdpdmVuIGEgcG9seWdvbiB0aGF0IGhhcyBiZWVuIGN1dFxuLy8gaW50byBpdHMgdmlzaWJsZSBsaW5lIHNlZ21lbnRzLCBhbmQgcmVqb2lucyB0aGUgc2VnbWVudHMgYnkgaW50ZXJwb2xhdGluZ1xuLy8gYWxvbmcgdGhlIGNsaXAgZWRnZS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlZ21lbnRzLCBjb21wYXJlSW50ZXJzZWN0aW9uLCBzdGFydEluc2lkZSwgaW50ZXJwb2xhdGUsIHN0cmVhbSkge1xuICB2YXIgc3ViamVjdCA9IFtdLFxuICAgICAgY2xpcCA9IFtdLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgc2VnbWVudHMuZm9yRWFjaChmdW5jdGlvbihzZWdtZW50KSB7XG4gICAgaWYgKChuID0gc2VnbWVudC5sZW5ndGggLSAxKSA8PSAwKSByZXR1cm47XG4gICAgdmFyIG4sIHAwID0gc2VnbWVudFswXSwgcDEgPSBzZWdtZW50W25dLCB4O1xuXG4gICAgLy8gSWYgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50cyBvZiBhIHNlZ21lbnQgYXJlIGNvaW5jaWRlbnQsIHRoZW4gdHJlYXQgYXMgYVxuICAgIC8vIGNsb3NlZCByaW5nLiBUT0RPIGlmIGFsbCByaW5ncyBhcmUgY2xvc2VkLCB0aGVuIHRoZSB3aW5kaW5nIG9yZGVyIG9mIHRoZVxuICAgIC8vIGV4dGVyaW9yIHJpbmcgc2hvdWxkIGJlIGNoZWNrZWQuXG4gICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkge1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc3RyZWFtLnBvaW50KChwMCA9IHNlZ21lbnRbaV0pWzBdLCBwMFsxXSk7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBudWxsLCB4LCBmYWxzZSkpO1xuICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMSwgc2VnbWVudCwgbnVsbCwgZmFsc2UpKTtcbiAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMSwgbnVsbCwgeCwgdHJ1ZSkpO1xuICB9KTtcblxuICBpZiAoIXN1YmplY3QubGVuZ3RoKSByZXR1cm47XG5cbiAgY2xpcC5zb3J0KGNvbXBhcmVJbnRlcnNlY3Rpb24pO1xuICBsaW5rKHN1YmplY3QpO1xuICBsaW5rKGNsaXApO1xuXG4gIGZvciAoaSA9IDAsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGNsaXBbaV0uZSA9IHN0YXJ0SW5zaWRlID0gIXN0YXJ0SW5zaWRlO1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSxcbiAgICAgIHBvaW50cyxcbiAgICAgIHBvaW50O1xuXG4gIHdoaWxlICgxKSB7XG4gICAgLy8gRmluZCBmaXJzdCB1bnZpc2l0ZWQgaW50ZXJzZWN0aW9uLlxuICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICAgIGlzU3ViamVjdCA9IHRydWU7XG4gICAgd2hpbGUgKGN1cnJlbnQudikgaWYgKChjdXJyZW50ID0gY3VycmVudC5uKSA9PT0gc3RhcnQpIHJldHVybjtcbiAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIGRvIHtcbiAgICAgIGN1cnJlbnQudiA9IGN1cnJlbnQuby52ID0gdHJ1ZTtcbiAgICAgIGlmIChjdXJyZW50LmUpIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICBmb3IgKGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBpc1N1YmplY3QgPSAhaXNTdWJqZWN0O1xuICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGluayhhcnJheSkge1xuICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgYSA9IGFycmF5WzBdLFxuICAgICAgYjtcbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhLm4gPSBiID0gYXJyYXlbaV07XG4gICAgYi5wID0gYTtcbiAgICBhID0gYjtcbiAgfVxuICBhLm4gPSBiID0gYXJyYXlbMF07XG4gIGIucCA9IGE7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZX0gZnJvbSBcIi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBwaSwgcXVhcnRlclBpLCBzaWduLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aFwiO1xuXG52YXIgc3VtID0gYWRkZXIoKTtcblxuZnVuY3Rpb24gbG9uZ2l0dWRlKHBvaW50KSB7XG4gIGlmIChhYnMocG9pbnRbMF0pIDw9IHBpKVxuICAgIHJldHVybiBwb2ludFswXTtcbiAgZWxzZVxuICAgIHJldHVybiBzaWduKHBvaW50WzBdKSAqICgoYWJzKHBvaW50WzBdKSArIHBpKSAlIHRhdSAtIHBpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbiwgcG9pbnQpIHtcbiAgdmFyIGxhbWJkYSA9IGxvbmdpdHVkZShwb2ludCksXG4gICAgICBwaGkgPSBwb2ludFsxXSxcbiAgICAgIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgbm9ybWFsID0gW3NpbihsYW1iZGEpLCAtY29zKGxhbWJkYSksIDBdLFxuICAgICAgYW5nbGUgPSAwLFxuICAgICAgd2luZGluZyA9IDA7XG5cbiAgc3VtLnJlc2V0KCk7XG5cbiAgaWYgKHNpblBoaSA9PT0gMSkgcGhpID0gaGFsZlBpICsgZXBzaWxvbjtcbiAgZWxzZSBpZiAoc2luUGhpID09PSAtMSkgcGhpID0gLWhhbGZQaSAtIGVwc2lsb247XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IGxvbmdpdHVkZShwb2ludDApLFxuICAgICAgICBwaGkwID0gcG9pbnQwWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgc2luUGhpMCA9IHNpbihwaGkwKSxcbiAgICAgICAgY29zUGhpMCA9IGNvcyhwaGkwKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgIHZhciBwb2ludDEgPSByaW5nW2pdLFxuICAgICAgICAgIGxhbWJkYTEgPSBsb25naXR1ZGUocG9pbnQxKSxcbiAgICAgICAgICBwaGkxID0gcG9pbnQxWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgICBzaW5QaGkxID0gc2luKHBoaTEpLFxuICAgICAgICAgIGNvc1BoaTEgPSBjb3MocGhpMSksXG4gICAgICAgICAgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgICBzaWduID0gZGVsdGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgICAgICBhYnNEZWx0YSA9IHNpZ24gKiBkZWx0YSxcbiAgICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnNEZWx0YSA+IHBpLFxuICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgc3VtLmFkZChhdGFuMihrICogc2lnbiAqIHNpbihhYnNEZWx0YSksIGNvc1BoaTAgKiBjb3NQaGkxICsgayAqIGNvcyhhYnNEZWx0YSkpKTtcbiAgICAgIGFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGRlbHRhICsgc2lnbiAqIHRhdSA6IGRlbHRhO1xuXG4gICAgICAvLyBBcmUgdGhlIGxvbmdpdHVkZXMgZWl0aGVyIHNpZGUgb2YgdGhlIHBvaW504oCZcyBtZXJpZGlhbiAobGFtYmRhKSxcbiAgICAgIC8vIGFuZCBhcmUgdGhlIGxhdGl0dWRlcyBzbWFsbGVyIHRoYW4gdGhlIHBhcmFsbGVsIChwaGkpP1xuICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgdmFyIGFyYyA9IGNhcnRlc2lhbkNyb3NzKGNhcnRlc2lhbihwb2ludDApLCBjYXJ0ZXNpYW4ocG9pbnQxKSk7XG4gICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoYXJjKTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbnRlcnNlY3Rpb24pO1xuICAgICAgICB2YXIgcGhpQXJjID0gKGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAtMSA6IDEpICogYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICBpZiAocGhpID4gcGhpQXJjIHx8IHBoaSA9PT0gcGhpQXJjICYmIChhcmNbMF0gfHwgYXJjWzFdKSkge1xuICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0LCBkZXRlcm1pbmUgd2hldGhlciB0aGUgU291dGggcG9sZSBpcyBpbnNpZGUgb3Igb3V0c2lkZTpcbiAgLy9cbiAgLy8gSXQgaXMgaW5zaWRlIGlmOlxuICAvLyAqIHRoZSBwb2x5Z29uIHdpbmRzIGFyb3VuZCBpdCBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gIC8vICogdGhlIHBvbHlnb24gZG9lcyBub3QgKGN1bXVsYXRpdmVseSkgd2luZCBhcm91bmQgaXQsIGJ1dCBoYXMgYSBuZWdhdGl2ZVxuICAvLyAgIChjb3VudGVyLWNsb2Nrd2lzZSkgYXJlYS5cbiAgLy9cbiAgLy8gU2Vjb25kLCBjb3VudCB0aGUgKHNpZ25lZCkgbnVtYmVyIG9mIHRpbWVzIGEgc2VnbWVudCBjcm9zc2VzIGEgbGFtYmRhXG4gIC8vIGZyb20gdGhlIHBvaW50IHRvIHRoZSBTb3V0aCBwb2xlLiAgSWYgaXQgaXMgemVybywgdGhlbiB0aGUgcG9pbnQgaXMgdGhlXG4gIC8vIHNhbWUgc2lkZSBhcyB0aGUgU291dGggcG9sZS5cblxuICByZXR1cm4gKGFuZ2xlIDwgLWVwc2lsb24gfHwgYW5nbGUgPCBlcHNpbG9uICYmIHN1bSA8IC1lcHNpbG9uKSBeICh3aW5kaW5nICYgMSk7XG59XG4iLCJpbXBvcnQgY2xpcEJ1ZmZlciBmcm9tIFwiLi9idWZmZXJcIjtcbmltcG9ydCBjbGlwUmVqb2luIGZyb20gXCIuL3Jlam9pblwiO1xuaW1wb3J0IHtlcHNpbG9uLCBoYWxmUGl9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgcG9seWdvbkNvbnRhaW5zIGZyb20gXCIuLi9wb2x5Z29uQ29udGFpbnNcIjtcbmltcG9ydCB7bWVyZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2ludFZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc3RhcnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHNpbmspIHtcbiAgICB2YXIgbGluZSA9IGNsaXBMaW5lKHNpbmspLFxuICAgICAgICByaW5nQnVmZmVyID0gY2xpcEJ1ZmZlcigpLFxuICAgICAgICByaW5nU2luayA9IGNsaXBMaW5lKHJpbmdCdWZmZXIpLFxuICAgICAgICBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICBwb2x5Z29uLFxuICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgcmluZztcblxuICAgIHZhciBjbGlwID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgY2xpcC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIGNsaXAubGluZUVuZCA9IHJpbmdFbmQ7XG4gICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cyk7XG4gICAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25Db250YWlucyhwb2x5Z29uLCBzdGFydCk7XG4gICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgY2xpcFJlam9pbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzaW5rKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydEluc2lkZSkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uRW5kKCksIHBvbHlnb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICB9LFxuICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luay5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICBzaW5rLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGlmIChwb2ludFZpc2libGUobGFtYmRhLCBwaGkpKSBzaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmUucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICBsaW5lLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICBsaW5lLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludFJpbmcobGFtYmRhLCBwaGkpIHtcbiAgICAgIHJpbmcucHVzaChbbGFtYmRhLCBwaGldKTtcbiAgICAgIHJpbmdTaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICByaW5nU2luay5saW5lU3RhcnQoKTtcbiAgICAgIHJpbmcgPSBbXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgcmluZ1NpbmsubGluZUVuZCgpO1xuXG4gICAgICB2YXIgY2xlYW4gPSByaW5nU2luay5jbGVhbigpLFxuICAgICAgICAgIHJpbmdTZWdtZW50cyA9IHJpbmdCdWZmZXIucmVzdWx0KCksXG4gICAgICAgICAgaSwgbiA9IHJpbmdTZWdtZW50cy5sZW5ndGgsIG0sXG4gICAgICAgICAgc2VnbWVudCxcbiAgICAgICAgICBwb2ludDtcblxuICAgICAgcmluZy5wb3AoKTtcbiAgICAgIHBvbHlnb24ucHVzaChyaW5nKTtcbiAgICAgIHJpbmcgPSBudWxsO1xuXG4gICAgICBpZiAoIW4pIHJldHVybjtcblxuICAgICAgLy8gTm8gaW50ZXJzZWN0aW9ucy5cbiAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgc2VnbWVudCA9IHJpbmdTZWdtZW50c1swXTtcbiAgICAgICAgaWYgKChtID0gc2VnbWVudC5sZW5ndGggLSAxKSA+IDApIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzaW5rLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBSZWpvaW4gY29ubmVjdGVkIHNlZ21lbnRzLlxuICAgICAgLy8gVE9ETyByZXVzZSByaW5nQnVmZmVyLnJlam9pbigpP1xuICAgICAgaWYgKG4gPiAxICYmIGNsZWFuICYgMikgcmluZ1NlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLnBvcCgpLmNvbmNhdChyaW5nU2VnbWVudHMuc2hpZnQoKSkpO1xuXG4gICAgICBzZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5maWx0ZXIodmFsaWRTZWdtZW50KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHZhbGlkU2VnbWVudChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG59XG5cbi8vIEludGVyc2VjdGlvbnMgYXJlIHNvcnRlZCBhbG9uZyB0aGUgY2xpcCBlZGdlLiBGb3IgYm90aCBhbnRpbWVyaWRpYW4gY3V0dGluZ1xuLy8gYW5kIGNpcmNsZSBjbGlwcGluZywgdGhlIHNhbWUgY29tcGFyaXNvbiBpcyB1c2VkLlxuZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmUGkgLSBlcHNpbG9uIDogaGFsZlBpIC0gYVsxXSlcbiAgICAgICAtICgoYiA9IGIueClbMF0gPCAwID8gYlsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBiWzFdKTtcbn1cbiIsImltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge2FicywgYXRhbiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsaXAoXG4gIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgY2xpcEFudGltZXJpZGlhbkxpbmUsXG4gIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcbiAgWy1waSwgLWhhbGZQaV1cbik7XG5cbi8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXM6IDAgLSB0aGVyZSB3ZXJlXG4vLyBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vIGludGVyc2VjdGlvbnM7IDIgLSB0aGVyZSB3ZXJlXG4vLyBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIHNob3VsZCBiZSByZWpvaW5lZC5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5MaW5lKHN0cmVhbSkge1xuICB2YXIgbGFtYmRhMCA9IE5hTixcbiAgICAgIHBoaTAgPSBOYU4sXG4gICAgICBzaWduMCA9IE5hTixcbiAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG5cbiAgcmV0dXJuIHtcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgY2xlYW4gPSAxO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYTEsIHBoaTEpIHtcbiAgICAgIHZhciBzaWduMSA9IGxhbWJkYTEgPiAwID8gcGkgOiAtcGksXG4gICAgICAgICAgZGVsdGEgPSBhYnMobGFtYmRhMSAtIGxhbWJkYTApO1xuICAgICAgaWYgKGFicyhkZWx0YSAtIHBpKSA8IGVwc2lsb24pIHsgLy8gbGluZSBjcm9zc2VzIGEgcG9sZVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSA6IC1oYWxmUGkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGExLCBwaGkwKTtcbiAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgfSBlbHNlIGlmIChzaWduMCAhPT0gc2lnbjEgJiYgZGVsdGEgPj0gcGkpIHsgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICBpZiAoYWJzKGxhbWJkYTAgLSBzaWduMCkgPCBlcHNpbG9uKSBsYW1iZGEwIC09IHNpZ24wICogZXBzaWxvbjsgLy8gaGFuZGxlIGRlZ2VuZXJhY2llc1xuICAgICAgICBpZiAoYWJzKGxhbWJkYTEgLSBzaWduMSkgPCBlcHNpbG9uKSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbjtcbiAgICAgICAgcGhpMCA9IGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgfVxuICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAgPSBsYW1iZGExLCBwaGkwID0gcGhpMSk7XG4gICAgICBzaWduMCA9IHNpZ24xO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgbGFtYmRhMCA9IHBoaTAgPSBOYU47XG4gICAgfSxcbiAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMiAtIGNsZWFuOyAvLyBpZiBpbnRlcnNlY3Rpb25zLCByZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSkge1xuICB2YXIgY29zUGhpMCxcbiAgICAgIGNvc1BoaTEsXG4gICAgICBzaW5MYW1iZGEwTGFtYmRhMSA9IHNpbihsYW1iZGEwIC0gbGFtYmRhMSk7XG4gIHJldHVybiBhYnMoc2luTGFtYmRhMExhbWJkYTEpID4gZXBzaWxvblxuICAgICAgPyBhdGFuKChzaW4ocGhpMCkgKiAoY29zUGhpMSA9IGNvcyhwaGkxKSkgKiBzaW4obGFtYmRhMSlcbiAgICAgICAgICAtIHNpbihwaGkxKSAqIChjb3NQaGkwID0gY29zKHBoaTApKSAqIHNpbihsYW1iZGEwKSlcbiAgICAgICAgICAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSlcbiAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgdmFyIHBoaTtcbiAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIDApO1xuICAgIHN0cmVhbS5wb2ludChwaSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIDApO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpIDogLXBpO1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGxhbWJkYSAvIDI7XG4gICAgc3RyZWFtLnBvaW50KC1sYW1iZGEsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkFkZEluUGxhY2UsIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Eb3QsIGNhcnRlc2lhblNjYWxlLCBzcGhlcmljYWx9IGZyb20gXCIuLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7Y2lyY2xlU3RyZWFtfSBmcm9tIFwiLi4vY2lyY2xlXCI7XG5pbXBvcnQge2FicywgY29zLCBlcHNpbG9uLCBwaSwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBwb2ludEVxdWFsIGZyb20gXCIuLi9wb2ludEVxdWFsXCI7XG5pbXBvcnQgY2xpcCBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIGNyID0gY29zKHJhZGl1cyksXG4gICAgICBkZWx0YSA9IDYgKiByYWRpYW5zLFxuICAgICAgc21hbGxSYWRpdXMgPSBjciA+IDAsXG4gICAgICBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IGVwc2lsb247IC8vIFRPRE8gb3B0aW1pc2UgZm9yIHRoaXMgY29tbW9uIGNhc2VcblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIGZyb20sIHRvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZpc2libGUobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gY29zKGxhbWJkYSkgKiBjb3MocGhpKSA+IGNyO1xuICB9XG5cbiAgLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlcyB1c2VkIGZvciBwb2x5Z29uXG4gIC8vIGNsaXBwaW5nOiAwIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vXG4gIC8vIGludGVyc2VjdGlvbnMgMiAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAvLyBzaG91bGQgYmUgcmVqb2luZWQuXG4gIGZ1bmN0aW9uIGNsaXBMaW5lKHN0cmVhbSkge1xuICAgIHZhciBwb2ludDAsIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGMwLCAvLyBjb2RlIGZvciBwcmV2aW91cyBwb2ludFxuICAgICAgICB2MCwgLy8gdmlzaWJpbGl0eSBvZiBwcmV2aW91cyBwb2ludFxuICAgICAgICB2MDAsIC8vIHZpc2liaWxpdHkgb2YgZmlyc3QgcG9pbnRcbiAgICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdjAwID0gdjAgPSBmYWxzZTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgcG9pbnQxID0gW2xhbWJkYSwgcGhpXSxcbiAgICAgICAgICAgIHBvaW50MixcbiAgICAgICAgICAgIHYgPSB2aXNpYmxlKGxhbWJkYSwgcGhpKSxcbiAgICAgICAgICAgIGMgPSBzbWFsbFJhZGl1c1xuICAgICAgICAgICAgICA/IHYgPyAwIDogY29kZShsYW1iZGEsIHBoaSlcbiAgICAgICAgICAgICAgOiB2ID8gY29kZShsYW1iZGEgKyAobGFtYmRhIDwgMCA/IHBpIDogLXBpKSwgcGhpKSA6IDA7XG4gICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIC8vIEhhbmRsZSBkZWdlbmVyYWNpZXMuXG4gICAgICAgIC8vIFRPRE8gaWdub3JlIGlmIG5vdCBjbGlwcGluZyBwb2x5Z29ucy5cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICBpZiAoIXBvaW50MiB8fCBwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBwb2ludEVxdWFsKHBvaW50MSwgcG9pbnQyKSkge1xuICAgICAgICAgICAgcG9pbnQxWzBdICs9IGVwc2lsb247XG4gICAgICAgICAgICBwb2ludDFbMV0gKz0gZXBzaWxvbjtcbiAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAvLyBvdXRzaWRlIGdvaW5nIGluXG4gICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDApO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5zaWRlIGdvaW5nIG91dFxuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgLy8gSWYgdGhlIGNvZGVzIGZvciB0d28gcG9pbnRzIGFyZSBkaWZmZXJlbnQsIG9yIGFyZSBib3RoIHplcm8sXG4gICAgICAgICAgLy8gYW5kIHRoZXJlIHRoaXMgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggdGhlIHNtYWxsIGNpcmNsZS5cbiAgICAgICAgICBpZiAoIShjICYgYzApICYmICh0ID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwLCB0cnVlKSkpIHtcbiAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIXBvaW50RXF1YWwocG9pbnQwLCBwb2ludDEpKSkge1xuICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHYwKSBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBwb2ludDAgPSBudWxsO1xuICAgICAgfSxcbiAgICAgIC8vIFJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBpZiB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgYW5kIHRoZSBmaXJzdFxuICAgICAgLy8gYW5kIGxhc3QgcG9pbnRzIHdlcmUgdmlzaWJsZS5cbiAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuIHwgKCh2MDAgJiYgdjApIDw8IDEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBJbnRlcnNlY3RzIHRoZSBncmVhdCBjaXJjbGUgYmV0d2VlbiBhIGFuZCBiIHdpdGggdGhlIGNsaXAgY2lyY2xlLlxuICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XG4gICAgdmFyIHBhID0gY2FydGVzaWFuKGEpLFxuICAgICAgICBwYiA9IGNhcnRlc2lhbihiKTtcblxuICAgIC8vIFdlIGhhdmUgdHdvIHBsYW5lcywgbjEucCA9IGQxIGFuZCBuMi5wID0gZDIuXG4gICAgLy8gRmluZCBpbnRlcnNlY3Rpb24gbGluZSBwKHQpID0gYzEgbjEgKyBjMiBuMiArIHQgKG4xIOKoryBuMikuXG4gICAgdmFyIG4xID0gWzEsIDAsIDBdLCAvLyBub3JtYWxcbiAgICAgICAgbjIgPSBjYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLFxuICAgICAgICBuMm4yID0gY2FydGVzaWFuRG90KG4yLCBuMiksXG4gICAgICAgIG4xbjIgPSBuMlswXSwgLy8gY2FydGVzaWFuRG90KG4xLCBuMiksXG4gICAgICAgIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuXG4gICAgLy8gVHdvIHBvbGFyIHBvaW50cy5cbiAgICBpZiAoIWRldGVybWluYW50KSByZXR1cm4gIXR3byAmJiBhO1xuXG4gICAgdmFyIGMxID0gIGNyICogbjJuMiAvIGRldGVybWluYW50LFxuICAgICAgICBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgbjF4bjIgPSBjYXJ0ZXNpYW5Dcm9zcyhuMSwgbjIpLFxuICAgICAgICBBID0gY2FydGVzaWFuU2NhbGUobjEsIGMxKSxcbiAgICAgICAgQiA9IGNhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShBLCBCKTtcblxuICAgIC8vIFNvbHZlIHxwKHQpfF4yID0gMS5cbiAgICB2YXIgdSA9IG4xeG4yLFxuICAgICAgICB3ID0gY2FydGVzaWFuRG90KEEsIHUpLFxuICAgICAgICB1dSA9IGNhcnRlc2lhbkRvdCh1LCB1KSxcbiAgICAgICAgdDIgPSB3ICogdyAtIHV1ICogKGNhcnRlc2lhbkRvdChBLCBBKSAtIDEpO1xuXG4gICAgaWYgKHQyIDwgMCkgcmV0dXJuO1xuXG4gICAgdmFyIHQgPSBzcXJ0KHQyKSxcbiAgICAgICAgcSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyAtIHQpIC8gdXUpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocSwgQSk7XG4gICAgcSA9IHNwaGVyaWNhbChxKTtcblxuICAgIGlmICghdHdvKSByZXR1cm4gcTtcblxuICAgIC8vIFR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAgIHZhciBsYW1iZGEwID0gYVswXSxcbiAgICAgICAgbGFtYmRhMSA9IGJbMF0sXG4gICAgICAgIHBoaTAgPSBhWzFdLFxuICAgICAgICBwaGkxID0gYlsxXSxcbiAgICAgICAgejtcblxuICAgIGlmIChsYW1iZGExIDwgbGFtYmRhMCkgeiA9IGxhbWJkYTAsIGxhbWJkYTAgPSBsYW1iZGExLCBsYW1iZGExID0gejtcblxuICAgIHZhciBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICBwb2xhciA9IGFicyhkZWx0YSAtIHBpKSA8IGVwc2lsb24sXG4gICAgICAgIG1lcmlkaWFuID0gcG9sYXIgfHwgZGVsdGEgPCBlcHNpbG9uO1xuXG4gICAgaWYgKCFwb2xhciAmJiBwaGkxIDwgcGhpMCkgeiA9IHBoaTAsIHBoaTAgPSBwaGkxLCBwaGkxID0gejtcblxuICAgIC8vIENoZWNrIHRoYXQgdGhlIGZpcnN0IHBvaW50IGlzIGJldHdlZW4gYSBhbmQgYi5cbiAgICBpZiAobWVyaWRpYW5cbiAgICAgICAgPyBwb2xhclxuICAgICAgICAgID8gcGhpMCArIHBoaTEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIGxhbWJkYTApIDwgZXBzaWxvbiA/IHBoaTAgOiBwaGkxKVxuICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxuICAgICAgICA6IGRlbHRhID4gcGkgXiAobGFtYmRhMCA8PSBxWzBdICYmIHFbMF0gPD0gbGFtYmRhMSkpIHtcbiAgICAgIHZhciBxMSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShxMSwgQSk7XG4gICAgICByZXR1cm4gW3EsIHNwaGVyaWNhbChxMSldO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYXRlcyBhIDQtYml0IHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIG9mIGEgcG9pbnQgcmVsYXRpdmUgdG9cbiAgLy8gdGhlIHNtYWxsIGNpcmNsZSdzIGJvdW5kaW5nIGJveC5cbiAgZnVuY3Rpb24gY29kZShsYW1iZGEsIHBoaSkge1xuICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiBwaSAtIHJhZGl1cyxcbiAgICAgICAgY29kZSA9IDA7XG4gICAgaWYgKGxhbWJkYSA8IC1yKSBjb2RlIHw9IDE7IC8vIGxlZnRcbiAgICBlbHNlIGlmIChsYW1iZGEgPiByKSBjb2RlIHw9IDI7IC8vIHJpZ2h0XG4gICAgaWYgKHBoaSA8IC1yKSBjb2RlIHw9IDQ7IC8vIGJlbG93XG4gICAgZWxzZSBpZiAocGhpID4gcikgY29kZSB8PSA4OyAvLyBhYm92ZVxuICAgIHJldHVybiBjb2RlO1xuICB9XG5cbiAgcmV0dXJuIGNsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFswLCAtcmFkaXVzXSA6IFstcGksIHJhZGl1cyAtIHBpXSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKHQwID4gMCkgYVswXSA9IGF4ICsgdDAgKiBkeCwgYVsxXSA9IGF5ICsgdDAgKiBkeTtcbiAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IGNsaXBMaW5lIGZyb20gXCIuL2xpbmVcIjtcbmltcG9ydCBjbGlwUmVqb2luIGZyb20gXCIuL3Jlam9pblwiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbnZhciBjbGlwTWF4ID0gMWU5LCBjbGlwTWluID0gLWNsaXBNYXg7XG5cbi8vIFRPRE8gVXNlIGQzLXBvbHlnb27igJlzIHBvbHlnb25Db250YWlucyBoZXJlIGZvciB0aGUgcmluZyBjaGVjaz9cbi8vIFRPRE8gRWxpbWluYXRlIGR1cGxpY2F0ZSBidWZmZXJpbmcgaW4gY2xpcEJ1ZmZlciBhbmQgcG9seWdvbi5wdXNoP1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGlwUmVjdGFuZ2xlKHgwLCB5MCwgeDEsIHkxKSB7XG5cbiAgZnVuY3Rpb24gdmlzaWJsZSh4LCB5KSB7XG4gICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICBpZiAoZnJvbSA9PSBudWxsXG4gICAgICAgIHx8IChhID0gY29ybmVyKGZyb20sIGRpcmVjdGlvbikpICE9PSAoYTEgPSBjb3JuZXIodG8sIGRpcmVjdGlvbikpXG4gICAgICAgIHx8IGNvbXBhcmVQb2ludChmcm9tLCB0bykgPCAwIF4gZGlyZWN0aW9uID4gMCkge1xuICAgICAgZG8gc3RyZWFtLnBvaW50KGEgPT09IDAgfHwgYSA9PT0gMyA/IHgwIDogeDEsIGEgPiAxID8geTEgOiB5MCk7XG4gICAgICB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29ybmVyKHAsIGRpcmVjdGlvbikge1xuICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMCA6IDNcbiAgICAgICAgOiBhYnMocFswXSAtIHgxKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMiA6IDFcbiAgICAgICAgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMSA6IDBcbiAgICAgICAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7IC8vIGFicyhwWzFdIC0geTEpIDwgZXBzaWxvblxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVQb2ludChhLngsIGIueCk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlUG9pbnQoYSwgYikge1xuICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSxcbiAgICAgICAgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2JcbiAgICAgICAgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdXG4gICAgICAgIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXVxuICAgICAgICA6IGNhID09PSAyID8gYVsxXSAtIGJbMV1cbiAgICAgICAgOiBiWzBdIC0gYVswXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgYWN0aXZlU3RyZWFtID0gc3RyZWFtLFxuICAgICAgICBidWZmZXJTdHJlYW0gPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICBwb2x5Z29uLFxuICAgICAgICByaW5nLFxuICAgICAgICB4X18sIHlfXywgdl9fLCAvLyBmaXJzdCBwb2ludFxuICAgICAgICB4XywgeV8sIHZfLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICBmaXJzdCxcbiAgICAgICAgY2xlYW47XG5cbiAgICB2YXIgY2xpcFN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogcG9seWdvblN0YXJ0LFxuICAgICAgcG9seWdvbkVuZDogcG9seWdvbkVuZFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBpZiAodmlzaWJsZSh4LCB5KSkgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvbHlnb25JbnNpZGUoKSB7XG4gICAgICB2YXIgd2luZGluZyA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZm9yICh2YXIgcmluZyA9IHBvbHlnb25baV0sIGogPSAxLCBtID0gcmluZy5sZW5ndGgsIHBvaW50ID0gcmluZ1swXSwgYTAsIGExLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgYTAgPSBiMCwgYTEgPSBiMSwgcG9pbnQgPSByaW5nW2pdLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdO1xuICAgICAgICAgIGlmIChhMSA8PSB5MSkgeyBpZiAoYjEgPiB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPiAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpICsrd2luZGluZzsgfVxuICAgICAgICAgIGVsc2UgeyBpZiAoYjEgPD0geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpIDwgKGIxIC0gYTEpICogKHgwIC0gYTApKSAtLXdpbmRpbmc7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2luZGluZztcbiAgICB9XG5cbiAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxuICAgIGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIGFjdGl2ZVN0cmVhbSA9IGJ1ZmZlclN0cmVhbSwgc2VnbWVudHMgPSBbXSwgcG9seWdvbiA9IFtdLCBjbGVhbiA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25JbnNpZGUoKSxcbiAgICAgICAgICBjbGVhbkluc2lkZSA9IGNsZWFuICYmIHN0YXJ0SW5zaWRlLFxuICAgICAgICAgIHZpc2libGUgPSAoc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cykpLmxlbmd0aDtcbiAgICAgIGlmIChjbGVhbkluc2lkZSB8fCB2aXNpYmxlKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgaWYgKGNsZWFuSW5zaWRlKSB7XG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgIGNsaXBSZWpvaW4oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgICAgYWN0aXZlU3RyZWFtID0gc3RyZWFtLCBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgaWYgKHBvbHlnb24pIHBvbHlnb24ucHVzaChyaW5nID0gW10pO1xuICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgdl8gPSBmYWxzZTtcbiAgICAgIHhfID0geV8gPSBOYU47XG4gICAgfVxuXG4gICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxuICAgIC8vIElkZWFsbHksIGNvaW5jaWRlbnQgaW50ZXJzZWN0aW9uIHBvaW50cyBzaG91bGQgYmUgaml0dGVyZWQgdG8gYXZvaWRcbiAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGlmIChzZWdtZW50cykge1xuICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyU3RyZWFtLnJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIGlmICh2XykgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQoeCwgeSkge1xuICAgICAgdmFyIHYgPSB2aXNpYmxlKHgsIHkpO1xuICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIHhfXyA9IHgsIHlfXyA9IHksIHZfXyA9IHY7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIGEgPSBbeF8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4XykpLCB5XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHlfKSldLFxuICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgIGlmIChjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkpIHtcbiAgICAgICAgICAgIGlmICghdl8pIHtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICBpZiAoIXYpIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gIH07XG59XG4iLCJpbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi9yZWN0YW5nbGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4MCA9IDAsXG4gICAgICB5MCA9IDAsXG4gICAgICB4MSA9IDk2MCxcbiAgICAgIHkxID0gNTAwLFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbSxcbiAgICAgIGNsaXA7XG5cbiAgcmV0dXJuIGNsaXAgPSB7XG4gICAgc3RyZWFtOiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICAgIHJldHVybiBjYWNoZSAmJiBjYWNoZVN0cmVhbSA9PT0gc3RyZWFtID8gY2FjaGUgOiBjYWNoZSA9IGNsaXBSZWN0YW5nbGUoeDAsIHkwLCB4MSwgeTEpKGNhY2hlU3RyZWFtID0gc3RyZWFtKTtcbiAgICB9LFxuICAgIGV4dGVudDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDAgPSArX1swXVswXSwgeTAgPSArX1swXVsxXSwgeDEgPSArX1sxXVswXSwgeTEgPSArX1sxXVsxXSwgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGwsIGNsaXApIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2FicywgYXRhbjIsIGNvcywgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG52YXIgbGVuZ3RoU3VtID0gYWRkZXIoKSxcbiAgICBsYW1iZGEwLFxuICAgIHNpblBoaTAsXG4gICAgY29zUGhpMDtcblxudmFyIGxlbmd0aFN0cmVhbSA9IHtcbiAgc3BoZXJlOiBub29wLFxuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBsZW5ndGhMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogbm9vcCxcbiAgcG9seWdvbkVuZDogbm9vcFxufTtcblxuZnVuY3Rpb24gbGVuZ3RoTGluZVN0YXJ0KCkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICBsZW5ndGhTdHJlYW0ubGluZUVuZCA9IGxlbmd0aExpbmVFbmQ7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aExpbmVFbmQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbm9vcDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIHNpblBoaTAgPSBzaW4ocGhpKSwgY29zUGhpMCA9IGNvcyhwaGkpO1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIGRlbHRhID0gYWJzKGxhbWJkYSAtIGxhbWJkYTApLFxuICAgICAgY29zRGVsdGEgPSBjb3MoZGVsdGEpLFxuICAgICAgc2luRGVsdGEgPSBzaW4oZGVsdGEpLFxuICAgICAgeCA9IGNvc1BoaSAqIHNpbkRlbHRhLFxuICAgICAgeSA9IGNvc1BoaTAgKiBzaW5QaGkgLSBzaW5QaGkwICogY29zUGhpICogY29zRGVsdGEsXG4gICAgICB6ID0gc2luUGhpMCAqIHNpblBoaSArIGNvc1BoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YTtcbiAgbGVuZ3RoU3VtLmFkZChhdGFuMihzcXJ0KHggKiB4ICsgeSAqIHkpLCB6KSk7XG4gIGxhbWJkYTAgPSBsYW1iZGEsIHNpblBoaTAgPSBzaW5QaGksIGNvc1BoaTAgPSBjb3NQaGk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCkge1xuICBsZW5ndGhTdW0ucmVzZXQoKTtcbiAgc3RyZWFtKG9iamVjdCwgbGVuZ3RoU3RyZWFtKTtcbiAgcmV0dXJuICtsZW5ndGhTdW07XG59XG4iLCJpbXBvcnQgbGVuZ3RoIGZyb20gXCIuL2xlbmd0aFwiO1xuXG52YXIgY29vcmRpbmF0ZXMgPSBbbnVsbCwgbnVsbF0sXG4gICAgb2JqZWN0ID0ge3R5cGU6IFwiTGluZVN0cmluZ1wiLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGNvb3JkaW5hdGVzWzBdID0gYTtcbiAgY29vcmRpbmF0ZXNbMV0gPSBiO1xuICByZXR1cm4gbGVuZ3RoKG9iamVjdCk7XG59XG4iLCJpbXBvcnQge2RlZmF1bHQgYXMgcG9seWdvbkNvbnRhaW5zfSBmcm9tIFwiLi9wb2x5Z29uQ29udGFpbnNcIjtcbmltcG9ydCB7ZGVmYXVsdCBhcyBkaXN0YW5jZX0gZnJvbSBcIi4vZGlzdGFuY2VcIjtcbmltcG9ydCB7ZXBzaWxvbjIsIHJhZGlhbnN9IGZyb20gXCIuL21hdGhcIjtcblxudmFyIGNvbnRhaW5zT2JqZWN0VHlwZSA9IHtcbiAgRmVhdHVyZTogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHJldHVybiBjb250YWluc0dlb21ldHJ5KG9iamVjdC5nZW9tZXRyeSwgcG9pbnQpO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBmZWF0dXJlcyA9IG9iamVjdC5mZWF0dXJlcywgaSA9IC0xLCBuID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNHZW9tZXRyeShmZWF0dXJlc1tpXS5nZW9tZXRyeSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBjb250YWluc0dlb21ldHJ5VHlwZSA9IHtcbiAgU3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNQb2ludChvYmplY3QuY29vcmRpbmF0ZXMsIHBvaW50KTtcbiAgfSxcbiAgTXVsdGlQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNQb2ludChjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNMaW5lKG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICB9LFxuICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zTGluZShjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICByZXR1cm4gY29udGFpbnNQb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgcG9pbnQpO1xuICB9LFxuICBNdWx0aVBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgcG9pbnQpIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlc1tpXSwgcG9pbnQpKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIEdlb21ldHJ5Q29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBwb2ludCkge1xuICAgIHZhciBnZW9tZXRyaWVzID0gb2JqZWN0Lmdlb21ldHJpZXMsIGkgPSAtMSwgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoY29udGFpbnNHZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBwb2ludCkpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gY29udGFpbnNHZW9tZXRyeShnZW9tZXRyeSwgcG9pbnQpIHtcbiAgcmV0dXJuIGdlb21ldHJ5ICYmIGNvbnRhaW5zR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpXG4gICAgICA/IGNvbnRhaW5zR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBwb2ludClcbiAgICAgIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zUG9pbnQoY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHJldHVybiBkaXN0YW5jZShjb29yZGluYXRlcywgcG9pbnQpID09PSAwO1xufVxuXG5mdW5jdGlvbiBjb250YWluc0xpbmUoY29vcmRpbmF0ZXMsIHBvaW50KSB7XG4gIHZhciBhbywgYm8sIGFiO1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgIGJvID0gZGlzdGFuY2UoY29vcmRpbmF0ZXNbaV0sIHBvaW50KTtcbiAgICBpZiAoYm8gPT09IDApIHJldHVybiB0cnVlO1xuICAgIGlmIChpID4gMCkge1xuICAgICAgYWIgPSBkaXN0YW5jZShjb29yZGluYXRlc1tpXSwgY29vcmRpbmF0ZXNbaSAtIDFdKTtcbiAgICAgIGlmIChcbiAgICAgICAgYWIgPiAwICYmXG4gICAgICAgIGFvIDw9IGFiICYmXG4gICAgICAgIGJvIDw9IGFiICYmXG4gICAgICAgIChhbyArIGJvIC0gYWIpICogKDEgLSBNYXRoLnBvdygoYW8gLSBibykgLyBhYiwgMikpIDwgZXBzaWxvbjIgKiBhYlxuICAgICAgKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgYW8gPSBibztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zUG9seWdvbihjb29yZGluYXRlcywgcG9pbnQpIHtcbiAgcmV0dXJuICEhcG9seWdvbkNvbnRhaW5zKGNvb3JkaW5hdGVzLm1hcChyaW5nUmFkaWFucyksIHBvaW50UmFkaWFucyhwb2ludCkpO1xufVxuXG5mdW5jdGlvbiByaW5nUmFkaWFucyhyaW5nKSB7XG4gIHJldHVybiByaW5nID0gcmluZy5tYXAocG9pbnRSYWRpYW5zKSwgcmluZy5wb3AoKSwgcmluZztcbn1cblxuZnVuY3Rpb24gcG9pbnRSYWRpYW5zKHBvaW50KSB7XG4gIHJldHVybiBbcG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnNdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHBvaW50KSB7XG4gIHJldHVybiAob2JqZWN0ICYmIGNvbnRhaW5zT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSlcbiAgICAgID8gY29udGFpbnNPYmplY3RUeXBlW29iamVjdC50eXBlXVxuICAgICAgOiBjb250YWluc0dlb21ldHJ5KShvYmplY3QsIHBvaW50KTtcbn1cbiIsImltcG9ydCB7cmFuZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHthYnMsIGNlaWwsIGVwc2lsb259IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gZ3JhdGljdWxlWCh5MCwgeTEsIGR5KSB7XG4gIHZhciB5ID0gcmFuZ2UoeTAsIHkxIC0gZXBzaWxvbiwgZHkpLmNvbmNhdCh5MSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiB5Lm1hcChmdW5jdGlvbih5KSB7IHJldHVybiBbeCwgeV07IH0pOyB9O1xufVxuXG5mdW5jdGlvbiBncmF0aWN1bGVZKHgwLCB4MSwgZHgpIHtcbiAgdmFyIHggPSByYW5nZSh4MCwgeDEgLSBlcHNpbG9uLCBkeCkuY29uY2F0KHgxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHkpIHsgcmV0dXJuIHgubWFwKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIFt4LCB5XTsgfSk7IH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdyYXRpY3VsZSgpIHtcbiAgdmFyIHgxLCB4MCwgWDEsIFgwLFxuICAgICAgeTEsIHkwLCBZMSwgWTAsXG4gICAgICBkeCA9IDEwLCBkeSA9IGR4LCBEWCA9IDkwLCBEWSA9IDM2MCxcbiAgICAgIHgsIHksIFgsIFksXG4gICAgICBwcmVjaXNpb24gPSAyLjU7XG5cbiAgZnVuY3Rpb24gZ3JhdGljdWxlKCkge1xuICAgIHJldHVybiB7dHlwZTogXCJNdWx0aUxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGxpbmVzKCl9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZXMoKSB7XG4gICAgcmV0dXJuIHJhbmdlKGNlaWwoWDAgLyBEWCkgKiBEWCwgWDEsIERYKS5tYXAoWClcbiAgICAgICAgLmNvbmNhdChyYW5nZShjZWlsKFkwIC8gRFkpICogRFksIFkxLCBEWSkubWFwKFkpKVxuICAgICAgICAuY29uY2F0KHJhbmdlKGNlaWwoeDAgLyBkeCkgKiBkeCwgeDEsIGR4KS5maWx0ZXIoZnVuY3Rpb24oeCkgeyByZXR1cm4gYWJzKHggJSBEWCkgPiBlcHNpbG9uOyB9KS5tYXAoeCkpXG4gICAgICAgIC5jb25jYXQocmFuZ2UoY2VpbCh5MCAvIGR5KSAqIGR5LCB5MSwgZHkpLmZpbHRlcihmdW5jdGlvbih5KSB7IHJldHVybiBhYnMoeSAlIERZKSA+IGVwc2lsb247IH0pLm1hcCh5KSk7XG4gIH1cblxuICBncmF0aWN1bGUubGluZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGluZXMoKS5tYXAoZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHsgcmV0dXJuIHt0eXBlOiBcIkxpbmVTdHJpbmdcIiwgY29vcmRpbmF0ZXM6IGNvb3JkaW5hdGVzfTsgfSk7XG4gIH07XG5cbiAgZ3JhdGljdWxlLm91dGxpbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJQb2x5Z29uXCIsXG4gICAgICBjb29yZGluYXRlczogW1xuICAgICAgICBYKFgwKS5jb25jYXQoXG4gICAgICAgIFkoWTEpLnNsaWNlKDEpLFxuICAgICAgICBYKFgxKS5yZXZlcnNlKCkuc2xpY2UoMSksXG4gICAgICAgIFkoWTApLnJldmVyc2UoKS5zbGljZSgxKSlcbiAgICAgIF1cbiAgICB9O1xuICB9O1xuXG4gIGdyYXRpY3VsZS5leHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZ3JhdGljdWxlLmV4dGVudE1pbm9yKCk7XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5leHRlbnRNYWpvcihfKS5leHRlbnRNaW5vcihfKTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50TWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1tYMCwgWTBdLCBbWDEsIFkxXV07XG4gICAgWDAgPSArX1swXVswXSwgWDEgPSArX1sxXVswXTtcbiAgICBZMCA9ICtfWzBdWzFdLCBZMSA9ICtfWzFdWzFdO1xuICAgIGlmIChYMCA+IFgxKSBfID0gWDAsIFgwID0gWDEsIFgxID0gXztcbiAgICBpZiAoWTAgPiBZMSkgXyA9IFkwLCBZMCA9IFkxLCBZMSA9IF87XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgfTtcblxuICBncmF0aWN1bGUuZXh0ZW50TWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDAgPSArX1swXVswXSwgeDEgPSArX1sxXVswXTtcbiAgICB5MCA9ICtfWzBdWzFdLCB5MSA9ICtfWzFdWzFdO1xuICAgIGlmICh4MCA+IHgxKSBfID0geDAsIHgwID0geDEsIHgxID0gXztcbiAgICBpZiAoeTAgPiB5MSkgXyA9IHkwLCB5MCA9IHkxLCB5MSA9IF87XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5wcmVjaXNpb24ocHJlY2lzaW9uKTtcbiAgfTtcblxuICBncmF0aWN1bGUuc3RlcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBncmF0aWN1bGUuc3RlcE1pbm9yKCk7XG4gICAgcmV0dXJuIGdyYXRpY3VsZS5zdGVwTWFqb3IoXykuc3RlcE1pbm9yKF8pO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwTWFqb3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW0RYLCBEWV07XG4gICAgRFggPSArX1swXSwgRFkgPSArX1sxXTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5zdGVwTWlub3IgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gW2R4LCBkeV07XG4gICAgZHggPSArX1swXSwgZHkgPSArX1sxXTtcbiAgICByZXR1cm4gZ3JhdGljdWxlO1xuICB9O1xuXG4gIGdyYXRpY3VsZS5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcHJlY2lzaW9uO1xuICAgIHByZWNpc2lvbiA9ICtfO1xuICAgIHggPSBncmF0aWN1bGVYKHkwLCB5MSwgOTApO1xuICAgIHkgPSBncmF0aWN1bGVZKHgwLCB4MSwgcHJlY2lzaW9uKTtcbiAgICBYID0gZ3JhdGljdWxlWChZMCwgWTEsIDkwKTtcbiAgICBZID0gZ3JhdGljdWxlWShYMCwgWDEsIHByZWNpc2lvbik7XG4gICAgcmV0dXJuIGdyYXRpY3VsZTtcbiAgfTtcblxuICByZXR1cm4gZ3JhdGljdWxlXG4gICAgICAuZXh0ZW50TWFqb3IoW1stMTgwLCAtOTAgKyBlcHNpbG9uXSwgWzE4MCwgOTAgLSBlcHNpbG9uXV0pXG4gICAgICAuZXh0ZW50TWlub3IoW1stMTgwLCAtODAgLSBlcHNpbG9uXSwgWzE4MCwgODAgKyBlcHNpbG9uXV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JhdGljdWxlMTAoKSB7XG4gIHJldHVybiBncmF0aWN1bGUoKSgpO1xufVxuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBkZWdyZWVzLCBoYXZlcnNpbiwgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHgwID0gYVswXSAqIHJhZGlhbnMsXG4gICAgICB5MCA9IGFbMV0gKiByYWRpYW5zLFxuICAgICAgeDEgPSBiWzBdICogcmFkaWFucyxcbiAgICAgIHkxID0gYlsxXSAqIHJhZGlhbnMsXG4gICAgICBjeTAgPSBjb3MoeTApLFxuICAgICAgc3kwID0gc2luKHkwKSxcbiAgICAgIGN5MSA9IGNvcyh5MSksXG4gICAgICBzeTEgPSBzaW4oeTEpLFxuICAgICAga3gwID0gY3kwICogY29zKHgwKSxcbiAgICAgIGt5MCA9IGN5MCAqIHNpbih4MCksXG4gICAgICBreDEgPSBjeTEgKiBjb3MoeDEpLFxuICAgICAga3kxID0gY3kxICogc2luKHgxKSxcbiAgICAgIGQgPSAyICogYXNpbihzcXJ0KGhhdmVyc2luKHkxIC0geTApICsgY3kwICogY3kxICogaGF2ZXJzaW4oeDEgLSB4MCkpKSxcbiAgICAgIGsgPSBzaW4oZCk7XG5cbiAgdmFyIGludGVycG9sYXRlID0gZCA/IGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgQiA9IHNpbih0ICo9IGQpIC8gayxcbiAgICAgICAgQSA9IHNpbihkIC0gdCkgLyBrLFxuICAgICAgICB4ID0gQSAqIGt4MCArIEIgKiBreDEsXG4gICAgICAgIHkgPSBBICoga3kwICsgQiAqIGt5MSxcbiAgICAgICAgeiA9IEEgKiBzeTAgKyBCICogc3kxO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5LCB4KSAqIGRlZ3JlZXMsXG4gICAgICBhdGFuMih6LCBzcXJ0KHggKiB4ICsgeSAqIHkpKSAqIGRlZ3JlZXNcbiAgICBdO1xuICB9IDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt4MCAqIGRlZ3JlZXMsIHkwICogZGVncmVlc107XG4gIH07XG5cbiAgaW50ZXJwb2xhdGUuZGlzdGFuY2UgPSBkO1xuXG4gIHJldHVybiBpbnRlcnBvbGF0ZTtcbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGFyZWFSaW5nU3VtID0gYWRkZXIoKSxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgYXJlYVN0cmVhbSA9IHtcbiAgcG9pbnQ6IG5vb3AsXG4gIGxpbmVTdGFydDogbm9vcCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdHJlYW0ubGluZVN0YXJ0ID0gYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVN0cmVhbS5wb2ludCA9IG5vb3A7XG4gICAgYXJlYVN1bS5hZGQoYWJzKGFyZWFSaW5nU3VtKSk7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJlYSA9IGFyZWFTdW0gLyAyO1xuICAgIGFyZWFTdW0ucmVzZXQoKTtcbiAgICByZXR1cm4gYXJlYTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYXJlYVJpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5wb2ludCA9IGFyZWFQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnQ7XG4gIHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQoeCwgeSkge1xuICBhcmVhUmluZ1N1bS5hZGQoeTAgKiB4IC0geDAgKiB5KTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGFyZWFSaW5nRW5kKCkge1xuICBhcmVhUG9pbnQoeDAwLCB5MDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcmVhU3RyZWFtO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbnZhciB4MCA9IEluZmluaXR5LFxuICAgIHkwID0geDAsXG4gICAgeDEgPSAteDAsXG4gICAgeTEgPSB4MTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogbm9vcCxcbiAgcG9seWdvbkVuZDogbm9vcCxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm91bmRzID0gW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gICAgeDEgPSB5MSA9IC0oeTAgPSB4MCA9IEluZmluaXR5KTtcbiAgICByZXR1cm4gYm91bmRzO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludCh4LCB5KSB7XG4gIGlmICh4IDwgeDApIHgwID0geDtcbiAgaWYgKHggPiB4MSkgeDEgPSB4O1xuICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gIGlmICh5ID4geTEpIHkxID0geTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYm91bmRzU3RyZWFtO1xuIiwiaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG4vLyBUT0RPIEVuZm9yY2UgcG9zaXRpdmUgYXJlYSBmb3IgZXh0ZXJpb3IsIG5lZ2F0aXZlIGFyZWEgZm9yIGludGVyaW9yP1xuXG52YXIgWDAgPSAwLFxuICAgIFkwID0gMCxcbiAgICBaMCA9IDAsXG4gICAgWDEgPSAwLFxuICAgIFkxID0gMCxcbiAgICBaMSA9IDAsXG4gICAgWDIgPSAwLFxuICAgIFkyID0gMCxcbiAgICBaMiA9IDAsXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGNlbnRyb2lkU3RyZWFtID0ge1xuICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcbiAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZExpbmVTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRMaW5lRW5kO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjZW50cm9pZCA9IFoyID8gW1gyIC8gWjIsIFkyIC8gWjJdXG4gICAgICAgIDogWjEgPyBbWDEgLyBaMSwgWTEgLyBaMV1cbiAgICAgICAgOiBaMCA/IFtYMCAvIFowLCBZMCAvIFowXVxuICAgICAgICA6IFtOYU4sIE5hTl07XG4gICAgWDAgPSBZMCA9IFowID1cbiAgICBYMSA9IFkxID0gWjEgPVxuICAgIFgyID0gWTIgPSBaMiA9IDA7XG4gICAgcmV0dXJuIGNlbnRyb2lkO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50KHgsIHkpIHtcbiAgWDAgKz0geDtcbiAgWTAgKz0geTtcbiAgKytaMDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRMaW5lU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0TGluZTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0TGluZSh4LCB5KSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludExpbmU7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50TGluZSh4LCB5KSB7XG4gIHZhciBkeCA9IHggLSB4MCwgZHkgPSB5IC0geTAsIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgWDEgKz0geiAqICh4MCArIHgpIC8gMjtcbiAgWTEgKz0geiAqICh5MCArIHkpIC8gMjtcbiAgWjEgKz0gejtcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50Rmlyc3RSaW5nO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdFbmQoKSB7XG4gIGNlbnRyb2lkUG9pbnRSaW5nKHgwMCwgeTAwKTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludEZpcnN0UmluZyh4LCB5KSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludFJpbmc7XG4gIGNlbnRyb2lkUG9pbnQoeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFBvaW50UmluZyh4LCB5KSB7XG4gIHZhciBkeCA9IHggLSB4MCxcbiAgICAgIGR5ID0geSAtIHkwLFxuICAgICAgeiA9IHNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG5cbiAgeiA9IHkwICogeCAtIHgwICogeTtcbiAgWDIgKz0geiAqICh4MCArIHgpO1xuICBZMiArPSB6ICogKHkwICsgeSk7XG4gIFoyICs9IHogKiAzO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2VudHJvaWRTdHJlYW07XG4iLCJpbXBvcnQge3RhdX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhdGhDb250ZXh0KGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cblBhdGhDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgX3JhZGl1czogNC41LFxuICBwb2ludFJhZGl1czogZnVuY3Rpb24oXykge1xuICAgIHJldHVybiB0aGlzLl9yYWRpdXMgPSBfLCB0aGlzO1xuICB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgPT09IDApIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCArIHRoaXMuX3JhZGl1cywgeSk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuYXJjKHgsIHksIHRoaXMuX3JhZGl1cywgMCwgdGF1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IG5vb3Bcbn07XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4uL2FkZGVyXCI7XG5pbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgbGVuZ3RoU3VtID0gYWRkZXIoKSxcbiAgICBsZW5ndGhSaW5nLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBsZW5ndGhTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmIChsZW5ndGhSaW5nKSBsZW5ndGhQb2ludCh4MDAsIHkwMCk7XG4gICAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbm9vcDtcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhSaW5nID0gdHJ1ZTtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IG51bGw7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlbmd0aCA9ICtsZW5ndGhTdW07XG4gICAgbGVuZ3RoU3VtLnJlc2V0KCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfVxufTtcblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnRGaXJzdCh4LCB5KSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xuICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoUG9pbnQoeCwgeSkge1xuICB4MCAtPSB4LCB5MCAtPSB5O1xuICBsZW5ndGhTdW0uYWRkKHNxcnQoeDAgKiB4MCArIHkwICogeTApKTtcbiAgeDAgPSB4LCB5MCA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxlbmd0aFN0cmVhbTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhdGhTdHJpbmcoKSB7XG4gIHRoaXMuX3N0cmluZyA9IFtdO1xufVxuXG5QYXRoU3RyaW5nLnByb3RvdHlwZSA9IHtcbiAgX3JhZGl1czogNC41LFxuICBfY2lyY2xlOiBjaXJjbGUoNC41KSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoKF8gPSArXykgIT09IHRoaXMuX3JhZGl1cykgdGhpcy5fcmFkaXVzID0gXywgdGhpcy5fY2lyY2xlID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9zdHJpbmcucHVzaChcIlpcIik7XG4gICAgdGhpcy5fcG9pbnQgPSBOYU47XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIHRoaXMuX3BvaW50ID0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fc3RyaW5nLnB1c2goXCJMXCIsIHgsIFwiLFwiLCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl9jaXJjbGUgPT0gbnVsbCkgdGhpcy5fY2lyY2xlID0gY2lyY2xlKHRoaXMuX3JhZGl1cyk7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTVwiLCB4LCBcIixcIiwgeSwgdGhpcy5fY2lyY2xlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9zdHJpbmcubGVuZ3RoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fc3RyaW5nLmpvaW4oXCJcIik7XG4gICAgICB0aGlzLl9zdHJpbmcgPSBbXTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2lyY2xlKHJhZGl1cykge1xuICByZXR1cm4gXCJtMCxcIiArIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIC0yICogcmFkaXVzXG4gICAgICArIFwiYVwiICsgcmFkaXVzICsgXCIsXCIgKyByYWRpdXMgKyBcIiAwIDEsMSAwLFwiICsgMiAqIHJhZGl1c1xuICAgICAgKyBcInpcIjtcbn1cbiIsImltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHlcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4uL3N0cmVhbVwiO1xuaW1wb3J0IHBhdGhBcmVhIGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCBwYXRoQm91bmRzIGZyb20gXCIuL2JvdW5kc1wiO1xuaW1wb3J0IHBhdGhDZW50cm9pZCBmcm9tIFwiLi9jZW50cm9pZFwiO1xuaW1wb3J0IFBhdGhDb250ZXh0IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCBwYXRoTWVhc3VyZSBmcm9tIFwiLi9tZWFzdXJlXCI7XG5pbXBvcnQgUGF0aFN0cmluZyBmcm9tIFwiLi9zdHJpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdGlvbiwgY29udGV4dCkge1xuICB2YXIgcG9pbnRSYWRpdXMgPSA0LjUsXG4gICAgICBwcm9qZWN0aW9uU3RyZWFtLFxuICAgICAgY29udGV4dFN0cmVhbTtcblxuICBmdW5jdGlvbiBwYXRoKG9iamVjdCkge1xuICAgIGlmIChvYmplY3QpIHtcbiAgICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgPT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrcG9pbnRSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKGNvbnRleHRTdHJlYW0pKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHRTdHJlYW0ucmVzdWx0KCk7XG4gIH1cblxuICBwYXRoLmFyZWEgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhBcmVhKSk7XG4gICAgcmV0dXJuIHBhdGhBcmVhLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGgubWVhc3VyZSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aE1lYXN1cmUpKTtcbiAgICByZXR1cm4gcGF0aE1lYXN1cmUucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5ib3VuZHMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhCb3VuZHMpKTtcbiAgICByZXR1cm4gcGF0aEJvdW5kcy5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLmNlbnRyb2lkID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQ2VudHJvaWQpKTtcbiAgICByZXR1cm4gcGF0aENlbnRyb2lkLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGgucHJvamVjdGlvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0aW9uU3RyZWFtID0gXyA9PSBudWxsID8gKHByb2plY3Rpb24gPSBudWxsLCBpZGVudGl0eSkgOiAocHJvamVjdGlvbiA9IF8pLnN0cmVhbSwgcGF0aCkgOiBwcm9qZWN0aW9uO1xuICB9O1xuXG4gIHBhdGguY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBjb250ZXh0O1xuICAgIGNvbnRleHRTdHJlYW0gPSBfID09IG51bGwgPyAoY29udGV4dCA9IG51bGwsIG5ldyBQYXRoU3RyaW5nKSA6IG5ldyBQYXRoQ29udGV4dChjb250ZXh0ID0gXyk7XG4gICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyAhPT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKHBvaW50UmFkaXVzKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBwYXRoLnBvaW50UmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHBvaW50UmFkaXVzO1xuICAgIHBvaW50UmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiAoY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cygrXyksICtfKTtcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICByZXR1cm4gcGF0aC5wcm9qZWN0aW9uKHByb2plY3Rpb24pLmNvbnRleHQoY29udGV4dCk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtZXRob2RzKSB7XG4gIHJldHVybiB7XG4gICAgc3RyZWFtOiB0cmFuc2Zvcm1lcihtZXRob2RzKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIobWV0aG9kcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHMgPSBuZXcgVHJhbnNmb3JtU3RyZWFtO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSBzW2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgcmV0dXJuIHM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSgpIHt9XG5cblRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm1TdHJlYW0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5zcGhlcmUoKTsgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7IH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpOyB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpOyB9XG59O1xuIiwiaW1wb3J0IHtkZWZhdWx0IGFzIGdlb1N0cmVhbX0gZnJvbSBcIi4uL3N0cmVhbVwiO1xuaW1wb3J0IGJvdW5kc1N0cmVhbSBmcm9tIFwiLi4vcGF0aC9ib3VuZHNcIjtcblxuZnVuY3Rpb24gZml0KHByb2plY3Rpb24sIGZpdEJvdW5kcywgb2JqZWN0KSB7XG4gIHZhciBjbGlwID0gcHJvamVjdGlvbi5jbGlwRXh0ZW50ICYmIHByb2plY3Rpb24uY2xpcEV4dGVudCgpO1xuICBwcm9qZWN0aW9uLnNjYWxlKDE1MCkudHJhbnNsYXRlKFswLCAwXSk7XG4gIGlmIChjbGlwICE9IG51bGwpIHByb2plY3Rpb24uY2xpcEV4dGVudChudWxsKTtcbiAgZ2VvU3RyZWFtKG9iamVjdCwgcHJvamVjdGlvbi5zdHJlYW0oYm91bmRzU3RyZWFtKSk7XG4gIGZpdEJvdW5kcyhib3VuZHNTdHJlYW0ucmVzdWx0KCkpO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoY2xpcCk7XG4gIHJldHVybiBwcm9qZWN0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciB3ID0gZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLFxuICAgICAgICBoID0gZXh0ZW50WzFdWzFdIC0gZXh0ZW50WzBdWzFdLFxuICAgICAgICBrID0gTWF0aC5taW4odyAvIChiWzFdWzBdIC0gYlswXVswXSksIGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pKSxcbiAgICAgICAgeCA9ICtleHRlbnRbMF1bMF0gKyAodyAtIGsgKiAoYlsxXVswXSArIGJbMF1bMF0pKSAvIDIsXG4gICAgICAgIHkgPSArZXh0ZW50WzBdWzFdICsgKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCkge1xuICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIFtbMCwgMF0sIHNpemVdLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0V2lkdGgocHJvamVjdGlvbiwgd2lkdGgsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9ICt3aWR0aCxcbiAgICAgICAgayA9IHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLFxuICAgICAgICB4ID0gKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gLWsgKiBiWzBdWzFdO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIGggPSAraGVpZ2h0LFxuICAgICAgICBrID0gaCAvIChiWzFdWzFdIC0gYlswXVsxXSksXG4gICAgICAgIHggPSAtayAqIGJbMF1bMF0sXG4gICAgICAgIHkgPSAoaCAtIGsgKiAoYlsxXVsxXSArIGJbMF1bMV0pKSAvIDI7XG4gICAgcHJvamVjdGlvbi5zY2FsZSgxNTAgKiBrKS50cmFuc2xhdGUoW3gsIHldKTtcbiAgfSwgb2JqZWN0KTtcbn1cbiIsImltcG9ydCB7Y2FydGVzaWFufSBmcm9tIFwiLi4vY2FydGVzaWFuXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1cIjtcblxudmFyIG1heERlcHRoID0gMTYsIC8vIG1heGltdW0gZGVwdGggb2Ygc3ViZGl2aXNpb25cbiAgICBjb3NNaW5EaXN0YW5jZSA9IGNvcygzMCAqIHJhZGlhbnMpOyAvLyBjb3MobWluaW11bSBhbmd1bGFyIGRpc3RhbmNlKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qZWN0LCBkZWx0YTIpIHtcbiAgcmV0dXJuICtkZWx0YTIgPyByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIDogcmVzYW1wbGVOb25lKHByb2plY3QpO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZU5vbmUocHJvamVjdCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHRoaXMuc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlc2FtcGxlKHByb2plY3QsIGRlbHRhMikge1xuXG4gIGZ1bmN0aW9uIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKSB7XG4gICAgdmFyIGR4ID0geDEgLSB4MCxcbiAgICAgICAgZHkgPSB5MSAtIHkwLFxuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgIGlmIChkMiA+IDQgKiBkZWx0YTIgJiYgZGVwdGgtLSkge1xuICAgICAgdmFyIGEgPSBhMCArIGExLFxuICAgICAgICAgIGIgPSBiMCArIGIxLFxuICAgICAgICAgIGMgPSBjMCArIGMxLFxuICAgICAgICAgIG0gPSBzcXJ0KGEgKiBhICsgYiAqIGIgKyBjICogYyksXG4gICAgICAgICAgcGhpMiA9IGFzaW4oYyAvPSBtKSxcbiAgICAgICAgICBsYW1iZGEyID0gYWJzKGFicyhjKSAtIDEpIDwgZXBzaWxvbiB8fCBhYnMobGFtYmRhMCAtIGxhbWJkYTEpIDwgZXBzaWxvbiA/IChsYW1iZGEwICsgbGFtYmRhMSkgLyAyIDogYXRhbjIoYiwgYSksXG4gICAgICAgICAgcCA9IHByb2plY3QobGFtYmRhMiwgcGhpMiksXG4gICAgICAgICAgeDIgPSBwWzBdLFxuICAgICAgICAgIHkyID0gcFsxXSxcbiAgICAgICAgICBkeDIgPSB4MiAtIHgwLFxuICAgICAgICAgIGR5MiA9IHkyIC0geTAsXG4gICAgICAgICAgZHogPSBkeSAqIGR4MiAtIGR4ICogZHkyO1xuICAgICAgaWYgKGR6ICogZHogLyBkMiA+IGRlbHRhMiAvLyBwZXJwZW5kaWN1bGFyIHByb2plY3RlZCBkaXN0YW5jZVxuICAgICAgICAgIHx8IGFicygoZHggKiBkeDIgKyBkeSAqIGR5MikgLyBkMiAtIDAuNSkgPiAwLjMgLy8gbWlkcG9pbnQgY2xvc2UgdG8gYW4gZW5kXG4gICAgICAgICAgfHwgYTAgKiBhMSArIGIwICogYjEgKyBjMCAqIGMxIDwgY29zTWluRGlzdGFuY2UpIHsgLy8gYW5ndWxhciBkaXN0YW5jZVxuICAgICAgICByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgyLCB5MiwgbGFtYmRhMiwgYSAvPSBtLCBiIC89IG0sIGMsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgICBzdHJlYW0ucG9pbnQoeDIsIHkyKTtcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDIsIHkyLCBsYW1iZGEyLCBhLCBiLCBjLCB4MSwgeTEsIGxhbWJkYTEsIGExLCBiMSwgYzEsIGRlcHRoLCBzdHJlYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIGxhbWJkYTAwLCB4MDAsIHkwMCwgYTAwLCBiMDAsIGMwMCwgLy8gZmlyc3QgcG9pbnRcbiAgICAgICAgbGFtYmRhMCwgeDAsIHkwLCBhMCwgYjAsIGMwOyAvLyBwcmV2aW91cyBwb2ludFxuXG4gICAgdmFyIHJlc2FtcGxlU3RyZWFtID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25TdGFydCgpOyByZXNhbXBsZVN0cmVhbS5saW5lU3RhcnQgPSByaW5nU3RhcnQ7IH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgc3RyZWFtLnBvbHlnb25FbmQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gbGluZVN0YXJ0OyB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KHgsIHkpIHtcbiAgICAgIHggPSBwcm9qZWN0KHgsIHkpO1xuICAgICAgc3RyZWFtLnBvaW50KHhbMF0sIHhbMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIHgwID0gTmFOO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICB2YXIgYyA9IGNhcnRlc2lhbihbbGFtYmRhLCBwaGldKSwgcCA9IHByb2plY3QobGFtYmRhLCBwaGkpO1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MCA9IHBbMF0sIHkwID0gcFsxXSwgbGFtYmRhMCA9IGxhbWJkYSwgYTAgPSBjWzBdLCBiMCA9IGNbMV0sIGMwID0gY1syXSwgbWF4RGVwdGgsIHN0cmVhbSk7XG4gICAgICBzdHJlYW0ucG9pbnQoeDAsIHkwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgbGluZVN0YXJ0KCk7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IHJpbmdQb2ludDtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgbGluZVBvaW50KGxhbWJkYTAwID0gbGFtYmRhLCBwaGkpLCB4MDAgPSB4MCwgeTAwID0geTAsIGEwMCA9IGEwLCBiMDAgPSBiMCwgYzAwID0gYzA7XG4gICAgICByZXNhbXBsZVN0cmVhbS5wb2ludCA9IGxpbmVQb2ludDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MDAsIHkwMCwgbGFtYmRhMDAsIGEwMCwgYjAwLCBjMDAsIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICBsaW5lRW5kKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc2FtcGxlU3RyZWFtO1xuICB9O1xufVxuIiwiaW1wb3J0IGNsaXBBbnRpbWVyaWRpYW4gZnJvbSBcIi4uL2NsaXAvYW50aW1lcmlkaWFuXCI7XG5pbXBvcnQgY2xpcENpcmNsZSBmcm9tIFwiLi4vY2xpcC9jaXJjbGVcIjtcbmltcG9ydCBjbGlwUmVjdGFuZ2xlIGZyb20gXCIuLi9jbGlwL3JlY3RhbmdsZVwiO1xuaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4uL2NvbXBvc2VcIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi4vaWRlbnRpdHlcIjtcbmltcG9ydCB7Y29zLCBkZWdyZWVzLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge3JvdGF0ZVJhZGlhbnN9IGZyb20gXCIuLi9yb3RhdGlvblwiO1xuaW1wb3J0IHt0cmFuc2Zvcm1lcn0gZnJvbSBcIi4uL3RyYW5zZm9ybVwiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdFwiO1xuaW1wb3J0IHJlc2FtcGxlIGZyb20gXCIuL3Jlc2FtcGxlXCI7XG5cbnZhciB0cmFuc2Zvcm1SYWRpYW5zID0gdHJhbnNmb3JtZXIoe1xuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuc3RyZWFtLnBvaW50KHggKiByYWRpYW5zLCB5ICogcmFkaWFucyk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Sb3RhdGUocm90YXRlKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcih7XG4gICAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgIHZhciByID0gcm90YXRlKHgsIHkpO1xuICAgICAgcmV0dXJuIHRoaXMuc3RyZWFtLnBvaW50KHJbMF0sIHJbMV0pO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlKGssIGR4LCBkeSkge1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHJldHVybiBbZHggKyBrICogeCwgZHkgLSBrICogeV07XG4gIH1cbiAgdHJhbnNmb3JtLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gWyh4IC0gZHgpIC8gaywgKGR5IC0geSkgLyBrXTtcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgZHgsIGR5LCBhbHBoYSkge1xuICB2YXIgY29zQWxwaGEgPSBjb3MoYWxwaGEpLFxuICAgICAgc2luQWxwaGEgPSBzaW4oYWxwaGEpLFxuICAgICAgYSA9IGNvc0FscGhhICogayxcbiAgICAgIGIgPSBzaW5BbHBoYSAqIGssXG4gICAgICBhaSA9IGNvc0FscGhhIC8gayxcbiAgICAgIGJpID0gc2luQWxwaGEgLyBrLFxuICAgICAgY2kgPSAoc2luQWxwaGEgKiBkeSAtIGNvc0FscGhhICogZHgpIC8gayxcbiAgICAgIGZpID0gKHNpbkFscGhhICogZHggKyBjb3NBbHBoYSAqIGR5KSAvIGs7XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybSh4LCB5KSB7XG4gICAgcmV0dXJuIFthICogeCAtIGIgKiB5ICsgZHgsIGR5IC0gYiAqIHggLSBhICogeV07XG4gIH1cbiAgdHJhbnNmb3JtLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW2FpICogeCAtIGJpICogeSArIGNpLCBmaSAtIGJpICogeCAtIGFpICogeV07XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2plY3Rpb24ocHJvamVjdCkge1xuICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XG4gIHZhciBwcm9qZWN0LFxuICAgICAgayA9IDE1MCwgLy8gc2NhbGVcbiAgICAgIHggPSA0ODAsIHkgPSAyNTAsIC8vIHRyYW5zbGF0ZVxuICAgICAgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgLy8gcHJlLXJvdGF0ZVxuICAgICAgYWxwaGEgPSAwLCAvLyBwb3N0LXJvdGF0ZVxuICAgICAgdGhldGEgPSBudWxsLCBwcmVjbGlwID0gY2xpcEFudGltZXJpZGlhbiwgLy8gcHJlLWNsaXAgYW5nbGVcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgcG9zdGNsaXAgPSBpZGVudGl0eSwgLy8gcG9zdC1jbGlwIGV4dGVudFxuICAgICAgZGVsdGEyID0gMC41LCAvLyBwcmVjaXNpb25cbiAgICAgIHByb2plY3RSZXNhbXBsZSxcbiAgICAgIHByb2plY3RUcmFuc2Zvcm0sXG4gICAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0ocG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLmludmVydChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgIHJldHVybiBwb2ludCAmJiBbcG9pbnRbMF0gKiBkZWdyZWVzLCBwb2ludFsxXSAqIGRlZ3JlZXNdO1xuICB9XG5cbiAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm1SYWRpYW5zKHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpKHByZWNsaXAocHJvamVjdFJlc2FtcGxlKHBvc3RjbGlwKGNhY2hlU3RyZWFtID0gc3RyZWFtKSkpKSk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSBfLCB0aGV0YSA9IHVuZGVmaW5lZCwgcmVzZXQoKSkgOiBwcmVjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucG9zdGNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfLCB4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIHJlc2V0KCkpIDogcG9zdGNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcztcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSkgOiBjbGlwUmVjdGFuZ2xlKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrID0gK18sIHJlY2VudGVyKCkpIDogaztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK19bMF0sIHkgPSArX1sxXSwgcmVjZW50ZXIoKSkgOiBbeCwgeV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzLCBwaGkgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMsIGRlbHRhUGhpICogZGVncmVlcywgZGVsdGFHYW1tYSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHByb2plY3Rpb24uYW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSBfICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBhbHBoYSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjaXNpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdFJlc2FtcGxlID0gcmVzYW1wbGUocHJvamVjdFRyYW5zZm9ybSwgZGVsdGEyID0gXyAqIF8pLCByZXNldCgpKSA6IHNxcnQoZGVsdGEyKTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEV4dGVudCA9IGZ1bmN0aW9uKGV4dGVudCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRTaXplID0gZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFNpemUocHJvamVjdGlvbiwgc2l6ZSwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdEhlaWdodCA9IGZ1bmN0aW9uKGhlaWdodCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdEhlaWdodChwcm9qZWN0aW9uLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjZW50ZXIoKSB7XG4gICAgdmFyIGNlbnRlciA9IHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIDAsIDAsIGFscGhhKS5hcHBseShudWxsLCBwcm9qZWN0KGxhbWJkYSwgcGhpKSksXG4gICAgICAgIHRyYW5zZm9ybSA9IChhbHBoYSA/IHNjYWxlVHJhbnNsYXRlUm90YXRlIDogc2NhbGVUcmFuc2xhdGUpKGssIHggLSBjZW50ZXJbMF0sIHkgLSBjZW50ZXJbMV0sIGFscGhhKTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSk7XG4gICAgcHJvamVjdFRyYW5zZm9ybSA9IGNvbXBvc2UocHJvamVjdCwgdHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtID0gY29tcG9zZShyb3RhdGUsIHByb2plY3RUcmFuc2Zvcm0pO1xuICAgIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMik7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgcmV0dXJuIHJlY2VudGVyKCk7XG4gIH07XG59XG4iLCJpbXBvcnQge2RlZ3JlZXMsIHBpLCByYWRpYW5zfSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtwcm9qZWN0aW9uTXV0YXRvcn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljUHJvamVjdGlvbihwcm9qZWN0QXQpIHtcbiAgdmFyIHBoaTAgPSAwLFxuICAgICAgcGhpMSA9IHBpIC8gMyxcbiAgICAgIG0gPSBwcm9qZWN0aW9uTXV0YXRvcihwcm9qZWN0QXQpLFxuICAgICAgcCA9IG0ocGhpMCwgcGhpMSk7XG5cbiAgcC5wYXJhbGxlbHMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBtKHBoaTAgPSBfWzBdICogcmFkaWFucywgcGhpMSA9IF9bMV0gKiByYWRpYW5zKSA6IFtwaGkwICogZGVncmVlcywgcGhpMSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHJldHVybiBwO1xufVxuIiwiaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHNpZ24sIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7Y29uaWNQcm9qZWN0aW9ufSBmcm9tIFwiLi9jb25pY1wiO1xuaW1wb3J0IHtjeWxpbmRyaWNhbEVxdWFsQXJlYVJhd30gZnJvbSBcIi4vY3lsaW5kcmljYWxFcXVhbEFyZWFcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1YWxBcmVhUmF3KHkwLCB5MSkge1xuICB2YXIgc3kwID0gc2luKHkwKSwgbiA9IChzeTAgKyBzaW4oeTEpKSAvIDI7XG5cbiAgLy8gQXJlIHRoZSBwYXJhbGxlbHMgc3ltbWV0cmljYWwgYXJvdW5kIHRoZSBFcXVhdG9yP1xuICBpZiAoYWJzKG4pIDwgZXBzaWxvbikgcmV0dXJuIGN5bGluZHJpY2FsRXF1YWxBcmVhUmF3KHkwKTtcblxuICB2YXIgYyA9IDEgKyBzeTAgKiAoMiAqIG4gLSBzeTApLCByMCA9IHNxcnQoYykgLyBuO1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciByID0gc3FydChjIC0gMiAqIG4gKiBzaW4oeSkpIC8gbjtcbiAgICByZXR1cm4gW3IgKiBzaW4oeCAqPSBuKSwgcjAgLSByICogY29zKHgpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciByMHkgPSByMCAtIHk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMocjB5KSkgLyBuICogc2lnbihyMHkpLCBhc2luKChjIC0gKHggKiB4ICsgcjB5ICogcjB5KSAqIG4gKiBuKSAvICgyICogbikpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTU1LjQyNClcbiAgICAgIC5jZW50ZXIoWzAsIDMzLjY0NDJdKTtcbn1cbiIsImltcG9ydCB7YXNpbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjeWxpbmRyaWNhbEVxdWFsQXJlYVJhdyhwaGkwKSB7XG4gIHZhciBjb3NQaGkwID0gY29zKHBoaTApO1xuXG4gIGZ1bmN0aW9uIGZvcndhcmQobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gW2xhbWJkYSAqIGNvc1BoaTAsIHNpbihwaGkpIC8gY29zUGhpMF07XG4gIH1cblxuICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gW3ggLyBjb3NQaGkwLCBhc2luKHkgKiBjb3NQaGkwKV07XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59XG4iLCJpbXBvcnQgY29uaWNFcXVhbEFyZWEgZnJvbSBcIi4vY29uaWNFcXVhbEFyZWFcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY0VxdWFsQXJlYSgpXG4gICAgICAucGFyYWxsZWxzKFsyOS41LCA0NS41XSlcbiAgICAgIC5zY2FsZSgxMDcwKVxuICAgICAgLnRyYW5zbGF0ZShbNDgwLCAyNTBdKVxuICAgICAgLnJvdGF0ZShbOTYsIDBdKVxuICAgICAgLmNlbnRlcihbLTAuNiwgMzguN10pO1xufVxuIiwiaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IGFsYmVycyBmcm9tIFwiLi9hbGJlcnNcIjtcbmltcG9ydCBjb25pY0VxdWFsQXJlYSBmcm9tIFwiLi9jb25pY0VxdWFsQXJlYVwiO1xuaW1wb3J0IHtmaXRFeHRlbnQsIGZpdFNpemUsIGZpdFdpZHRoLCBmaXRIZWlnaHR9IGZyb20gXCIuL2ZpdFwiO1xuXG4vLyBUaGUgcHJvamVjdGlvbnMgbXVzdCBoYXZlIG11dHVhbGx5IGV4Y2x1c2l2ZSBjbGlwIHJlZ2lvbnMgb24gdGhlIHNwaGVyZSxcbi8vIGFzIHRoaXMgd2lsbCBhdm9pZCBlbWl0dGluZyBpbnRlcmxlYXZpbmcgbGluZXMgYW5kIHBvbHlnb25zLlxuZnVuY3Rpb24gbXVsdGlwbGV4KHN0cmVhbXMpIHtcbiAgdmFyIG4gPSBzdHJlYW1zLmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2ludCh4LCB5KTsgfSxcbiAgICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5zcGhlcmUoKTsgfSxcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5saW5lU3RhcnQoKTsgfSxcbiAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdmFyIGkgPSAtMTsgd2hpbGUgKCsraSA8IG4pIHN0cmVhbXNbaV0ubGluZUVuZCgpOyB9LFxuICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHZhciBpID0gLTE7IHdoaWxlICgrK2kgPCBuKSBzdHJlYW1zW2ldLnBvbHlnb25TdGFydCgpOyB9LFxuICAgIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkgeyB2YXIgaSA9IC0xOyB3aGlsZSAoKytpIDwgbikgc3RyZWFtc1tpXS5wb2x5Z29uRW5kKCk7IH1cbiAgfTtcbn1cblxuLy8gQSBjb21wb3NpdGUgcHJvamVjdGlvbiBmb3IgdGhlIFVuaXRlZCBTdGF0ZXMsIGNvbmZpZ3VyZWQgYnkgZGVmYXVsdCBmb3Jcbi8vIDk2MMOXNTAwLiBUaGUgcHJvamVjdGlvbiBhbHNvIHdvcmtzIHF1aXRlIHdlbGwgYXQgOTYww5c2MDAgaWYgeW91IGNoYW5nZSB0aGVcbi8vIHNjYWxlIHRvIDEyODUgYW5kIGFkanVzdCB0aGUgdHJhbnNsYXRlIGFjY29yZGluZ2x5LiBUaGUgc2V0IG9mIHN0YW5kYXJkXG4vLyBwYXJhbGxlbHMgZm9yIGVhY2ggcmVnaW9uIGNvbWVzIGZyb20gVVNHUywgd2hpY2ggaXMgcHVibGlzaGVkIGhlcmU6XG4vLyBodHRwOi8vZWdzYy51c2dzLmdvdi9pc2IvcHVicy9NYXBQcm9qZWN0aW9ucy9wcm9qZWN0aW9ucy5odG1sI2FsYmVyc1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgbG93ZXI0OCA9IGFsYmVycygpLCBsb3dlcjQ4UG9pbnQsXG4gICAgICBhbGFza2EgPSBjb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LCAwXSkuY2VudGVyKFstMiwgNTguNV0pLnBhcmFsbGVscyhbNTUsIDY1XSksIGFsYXNrYVBvaW50LCAvLyBFUFNHOjMzMzhcbiAgICAgIGhhd2FpaSA9IGNvbmljRXF1YWxBcmVhKCkucm90YXRlKFsxNTcsIDBdKS5jZW50ZXIoWy0zLCAxOS45XSkucGFyYWxsZWxzKFs4LCAxOF0pLCBoYXdhaWlQb2ludCwgLy8gRVNSSToxMDIwMDdcbiAgICAgIHBvaW50LCBwb2ludFN0cmVhbSA9IHtwb2ludDogZnVuY3Rpb24oeCwgeSkgeyBwb2ludCA9IFt4LCB5XTsgfX07XG5cbiAgZnVuY3Rpb24gYWxiZXJzVXNhKGNvb3JkaW5hdGVzKSB7XG4gICAgdmFyIHggPSBjb29yZGluYXRlc1swXSwgeSA9IGNvb3JkaW5hdGVzWzFdO1xuICAgIHJldHVybiBwb2ludCA9IG51bGwsXG4gICAgICAgIChsb3dlcjQ4UG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoYWxhc2thUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KVxuICAgICAgICB8fCAoaGF3YWlpUG9pbnQucG9pbnQoeCwgeSksIHBvaW50KTtcbiAgfVxuXG4gIGFsYmVyc1VzYS5pbnZlcnQgPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuICAgIHZhciBrID0gbG93ZXI0OC5zY2FsZSgpLFxuICAgICAgICB0ID0gbG93ZXI0OC50cmFuc2xhdGUoKSxcbiAgICAgICAgeCA9IChjb29yZGluYXRlc1swXSAtIHRbMF0pIC8gayxcbiAgICAgICAgeSA9IChjb29yZGluYXRlc1sxXSAtIHRbMV0pIC8gaztcbiAgICByZXR1cm4gKHkgPj0gMC4xMjAgJiYgeSA8IDAuMjM0ICYmIHggPj0gLTAuNDI1ICYmIHggPCAtMC4yMTQgPyBhbGFza2FcbiAgICAgICAgOiB5ID49IDAuMTY2ICYmIHkgPCAwLjIzNCAmJiB4ID49IC0wLjIxNCAmJiB4IDwgLTAuMTE1ID8gaGF3YWlpXG4gICAgICAgIDogbG93ZXI0OCkuaW52ZXJ0KGNvb3JkaW5hdGVzKTtcbiAgfTtcblxuICBhbGJlcnNVc2Euc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gbXVsdGlwbGV4KFtsb3dlcjQ4LnN0cmVhbShjYWNoZVN0cmVhbSA9IHN0cmVhbSksIGFsYXNrYS5zdHJlYW0oc3RyZWFtKSwgaGF3YWlpLnN0cmVhbShzdHJlYW0pXSk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnByZWNpc2lvbigpO1xuICAgIGxvd2VyNDgucHJlY2lzaW9uKF8pLCBhbGFza2EucHJlY2lzaW9uKF8pLCBoYXdhaWkucHJlY2lzaW9uKF8pO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBsb3dlcjQ4LnNjYWxlKCk7XG4gICAgbG93ZXI0OC5zY2FsZShfKSwgYWxhc2thLnNjYWxlKF8gKiAwLjM1KSwgaGF3YWlpLnNjYWxlKF8pO1xuICAgIHJldHVybiBhbGJlcnNVc2EudHJhbnNsYXRlKGxvd2VyNDgudHJhbnNsYXRlKCkpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gbG93ZXI0OC50cmFuc2xhdGUoKTtcbiAgICB2YXIgayA9IGxvd2VyNDguc2NhbGUoKSwgeCA9ICtfWzBdLCB5ID0gK19bMV07XG5cbiAgICBsb3dlcjQ4UG9pbnQgPSBsb3dlcjQ4XG4gICAgICAgIC50cmFuc2xhdGUoXylcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40NTUgKiBrLCB5IC0gMC4yMzggKiBrXSwgW3ggKyAwLjQ1NSAqIGssIHkgKyAwLjIzOCAqIGtdXSlcbiAgICAgICAgLnN0cmVhbShwb2ludFN0cmVhbSk7XG5cbiAgICBhbGFza2FQb2ludCA9IGFsYXNrYVxuICAgICAgICAudHJhbnNsYXRlKFt4IC0gMC4zMDcgKiBrLCB5ICsgMC4yMDEgKiBrXSlcbiAgICAgICAgLmNsaXBFeHRlbnQoW1t4IC0gMC40MjUgKiBrICsgZXBzaWxvbiwgeSArIDAuMTIwICogayArIGVwc2lsb25dLCBbeCAtIDAuMjE0ICogayAtIGVwc2lsb24sIHkgKyAwLjIzNCAqIGsgLSBlcHNpbG9uXV0pXG4gICAgICAgIC5zdHJlYW0ocG9pbnRTdHJlYW0pO1xuXG4gICAgaGF3YWlpUG9pbnQgPSBoYXdhaWlcbiAgICAgICAgLnRyYW5zbGF0ZShbeCAtIDAuMjA1ICogaywgeSArIDAuMjEyICoga10pXG4gICAgICAgIC5jbGlwRXh0ZW50KFtbeCAtIDAuMjE0ICogayArIGVwc2lsb24sIHkgKyAwLjE2NiAqIGsgKyBlcHNpbG9uXSwgW3ggLSAwLjExNSAqIGsgLSBlcHNpbG9uLCB5ICsgMC4yMzQgKiBrIC0gZXBzaWxvbl1dKVxuICAgICAgICAuc3RyZWFtKHBvaW50U3RyZWFtKTtcblxuICAgIHJldHVybiByZXNldCgpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQoYWxiZXJzVXNhLCBleHRlbnQsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShhbGJlcnNVc2EsIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgYWxiZXJzVXNhLmZpdFdpZHRoID0gZnVuY3Rpb24od2lkdGgsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRXaWR0aChhbGJlcnNVc2EsIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuXG4gIGFsYmVyc1VzYS5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQoYWxiZXJzVXNhLCBoZWlnaHQsIG9iamVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIGFsYmVyc1VzYTtcbiAgfVxuXG4gIHJldHVybiBhbGJlcnNVc2Euc2NhbGUoMTA3MCk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBjeCA9IGNvcyh4KSxcbiAgICAgICAgY3kgPSBjb3MoeSksXG4gICAgICAgIGsgPSBzY2FsZShjeCAqIGN5KTtcbiAgICByZXR1cm4gW1xuICAgICAgayAqIGN5ICogc2luKHgpLFxuICAgICAgayAqIHNpbih5KVxuICAgIF07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbEludmVydChhbmdsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciB6ID0gc3FydCh4ICogeCArIHkgKiB5KSxcbiAgICAgICAgYyA9IGFuZ2xlKHopLFxuICAgICAgICBzYyA9IHNpbihjKSxcbiAgICAgICAgY2MgPSBjb3MoYyk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHggKiBzYywgeiAqIGNjKSxcbiAgICAgIGFzaW4oeiAmJiB5ICogc2MgLyB6KVxuICAgIF07XG4gIH1cbn1cbiIsImltcG9ydCB7YXNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsUmF3LCBhemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IHZhciBhemltdXRoYWxFcXVhbEFyZWFSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oY3hjeSkge1xuICByZXR1cm4gc3FydCgyIC8gKDEgKyBjeGN5KSk7XG59KTtcblxuYXppbXV0aGFsRXF1YWxBcmVhUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXNpbih6IC8gMik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGF6aW11dGhhbEVxdWFsQXJlYVJhdylcbiAgICAgIC5zY2FsZSgxMjQuNzUpXG4gICAgICAuY2xpcEFuZ2xlKDE4MCAtIDFlLTMpO1xufVxuIiwiaW1wb3J0IHthY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbFJhdywgYXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCB2YXIgYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcgPSBhemltdXRoYWxSYXcoZnVuY3Rpb24oYykge1xuICByZXR1cm4gKGMgPSBhY29zKGMpKSAmJiBjIC8gc2luKGMpO1xufSk7XG5cbmF6aW11dGhhbEVxdWlkaXN0YW50UmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiB6O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSg3OS40MTg4KVxuICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgcGksIHRhbiwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHJvdGF0aW9uIGZyb20gXCIuLi9yb3RhdGlvblwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbGFtYmRhLCBsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpXTtcbn1cblxubWVyY2F0b3JSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gW3gsIDIgKiBhdGFuKGV4cCh5KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBtZXJjYXRvclByb2plY3Rpb24obWVyY2F0b3JSYXcpXG4gICAgICAuc2NhbGUoOTYxIC8gdGF1KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmNhdG9yUHJvamVjdGlvbihwcm9qZWN0KSB7XG4gIHZhciBtID0gcHJvamVjdGlvbihwcm9qZWN0KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgc2NhbGUgPSBtLnNjYWxlLFxuICAgICAgdHJhbnNsYXRlID0gbS50cmFuc2xhdGUsXG4gICAgICBjbGlwRXh0ZW50ID0gbS5jbGlwRXh0ZW50LFxuICAgICAgeDAgPSBudWxsLCB5MCwgeDEsIHkxOyAvLyBjbGlwIGV4dGVudFxuXG4gIG0uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2NhbGUoXyksIHJlY2xpcCgpKSA6IHNjYWxlKCk7XG4gIH07XG5cbiAgbS50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlKF8pLCByZWNsaXAoKSkgOiB0cmFuc2xhdGUoKTtcbiAgfTtcblxuICBtLmNlbnRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjZW50ZXIoXyksIHJlY2xpcCgpKSA6IGNlbnRlcigpO1xuICB9O1xuXG4gIG0uY2xpcEV4dGVudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICgoXyA9PSBudWxsID8geDAgPSB5MCA9IHgxID0geTEgPSBudWxsIDogKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pKSwgcmVjbGlwKCkpIDogeDAgPT0gbnVsbCA/IG51bGwgOiBbW3gwLCB5MF0sIFt4MSwgeTFdXTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNsaXAoKSB7XG4gICAgdmFyIGsgPSBwaSAqIHNjYWxlKCksXG4gICAgICAgIHQgPSBtKHJvdGF0aW9uKG0ucm90YXRlKCkpLmludmVydChbMCwgMF0pKTtcbiAgICByZXR1cm4gY2xpcEV4dGVudCh4MCA9PSBudWxsXG4gICAgICAgID8gW1t0WzBdIC0gaywgdFsxXSAtIGtdLCBbdFswXSArIGssIHRbMV0gKyBrXV0gOiBwcm9qZWN0ID09PSBtZXJjYXRvclJhd1xuICAgICAgICA/IFtbTWF0aC5tYXgodFswXSAtIGssIHgwKSwgeTBdLCBbTWF0aC5taW4odFswXSArIGssIHgxKSwgeTFdXVxuICAgICAgICA6IFtbeDAsIE1hdGgubWF4KHRbMV0gLSBrLCB5MCldLCBbeDEsIE1hdGgubWluKHRbMV0gKyBrLCB5MSldXSk7XG4gIH1cblxuICByZXR1cm4gcmVjbGlwKCk7XG59XG4iLCJpbXBvcnQge2FicywgYXRhbiwgYXRhbjIsIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBsb2csIHBvdywgc2lnbiwgc2luLCBzcXJ0LCB0YW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7bWVyY2F0b3JSYXd9IGZyb20gXCIuL21lcmNhdG9yXCI7XG5cbmZ1bmN0aW9uIHRhbnkoeSkge1xuICByZXR1cm4gdGFuKChoYWxmUGkgKyB5KSAvIDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNDb25mb3JtYWxSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiBsb2coY3kwIC8gY29zKHkxKSkgLyBsb2codGFueSh5MSkgLyB0YW55KHkwKSksXG4gICAgICBmID0gY3kwICogcG93KHRhbnkoeTApLCBuKSAvIG47XG5cbiAgaWYgKCFuKSByZXR1cm4gbWVyY2F0b3JSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgaWYgKGYgPiAwKSB7IGlmICh5IDwgLWhhbGZQaSArIGVwc2lsb24pIHkgPSAtaGFsZlBpICsgZXBzaWxvbjsgfVxuICAgIGVsc2UgeyBpZiAoeSA+IGhhbGZQaSAtIGVwc2lsb24pIHkgPSBoYWxmUGkgLSBlcHNpbG9uOyB9XG4gICAgdmFyIHIgPSBmIC8gcG93KHRhbnkoeSksIG4pO1xuICAgIHJldHVybiBbciAqIHNpbihuICogeCksIGYgLSByICogY29zKG4gKiB4KV07XG4gIH1cblxuICBwcm9qZWN0LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgZnkgPSBmIC0geSwgciA9IHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZnkgKiBmeSk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZnkpKSAvIG4gKiBzaWduKGZ5KSwgMiAqIGF0YW4ocG93KGYgLyByLCAxIC8gbikpIC0gaGFsZlBpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNDb25mb3JtYWxSYXcpXG4gICAgICAuc2NhbGUoMTA5LjUpXG4gICAgICAucGFyYWxsZWxzKFszMCwgMzBdKTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVpcmVjdGFuZ3VsYXJSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsYW1iZGEsIHBoaV07XG59XG5cbmVxdWlyZWN0YW5ndWxhclJhdy5pbnZlcnQgPSBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihlcXVpcmVjdGFuZ3VsYXJSYXcpXG4gICAgICAuc2NhbGUoMTUyLjYzKTtcbn1cbiIsImltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBzaWduLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2NvbmljUHJvamVjdGlvbn0gZnJvbSBcIi4vY29uaWNcIjtcbmltcG9ydCB7ZXF1aXJlY3Rhbmd1bGFyUmF3fSBmcm9tIFwiLi9lcXVpcmVjdGFuZ3VsYXJcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmljRXF1aWRpc3RhbnRSYXcoeTAsIHkxKSB7XG4gIHZhciBjeTAgPSBjb3MoeTApLFxuICAgICAgbiA9IHkwID09PSB5MSA/IHNpbih5MCkgOiAoY3kwIC0gY29zKHkxKSkgLyAoeTEgLSB5MCksXG4gICAgICBnID0gY3kwIC8gbiArIHkwO1xuXG4gIGlmIChhYnMobikgPCBlcHNpbG9uKSByZXR1cm4gZXF1aXJlY3Rhbmd1bGFyUmF3O1xuXG4gIGZ1bmN0aW9uIHByb2plY3QoeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5LCBueCA9IG4gKiB4O1xuICAgIHJldHVybiBbZ3kgKiBzaW4obngpLCBnIC0gZ3kgKiBjb3MobngpXTtcbiAgfVxuXG4gIHByb2plY3QuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBneSA9IGcgLSB5O1xuICAgIHJldHVybiBbYXRhbjIoeCwgYWJzKGd5KSkgLyBuICogc2lnbihneSksIGcgLSBzaWduKG4pICogc3FydCh4ICogeCArIGd5ICogZ3kpXTtcbiAgfTtcblxuICByZXR1cm4gcHJvamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBjb25pY1Byb2plY3Rpb24oY29uaWNFcXVpZGlzdGFudFJhdylcbiAgICAgIC5zY2FsZSgxMzEuMTU0KVxuICAgICAgLmNlbnRlcihbMCwgMTMuOTM4OV0pO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBjb3MsIGVwc2lsb24yLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5cbnZhciBBMSA9IDEuMzQwMjY0LFxuICAgIEEyID0gLTAuMDgxMTA2LFxuICAgIEEzID0gMC4wMDA4OTMsXG4gICAgQTQgPSAwLjAwMzc5NixcbiAgICBNID0gc3FydCgzKSAvIDIsXG4gICAgaXRlcmF0aW9ucyA9IDEyO1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxFYXJ0aFJhdyhsYW1iZGEsIHBoaSkge1xuICB2YXIgbCA9IGFzaW4oTSAqIHNpbihwaGkpKSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogY29zKGwpIC8gKE0gKiAoQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKSkpLFxuICAgIGwgKiAoQTEgKyBBMiAqIGwyICsgbDYgKiAoQTMgKyBBNCAqIGwyKSlcbiAgXTtcbn1cblxuZXF1YWxFYXJ0aFJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBsID0geSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gIGZvciAodmFyIGkgPSAwLCBkZWx0YSwgZnksIGZweTsgaSA8IGl0ZXJhdGlvbnM7ICsraSkge1xuICAgIGZ5ID0gbCAqIChBMSArIEEyICogbDIgKyBsNiAqIChBMyArIEE0ICogbDIpKSAtIHk7XG4gICAgZnB5ID0gQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKTtcbiAgICBsIC09IGRlbHRhID0gZnkgLyBmcHksIGwyID0gbCAqIGwsIGw2ID0gbDIgKiBsMiAqIGwyO1xuICAgIGlmIChhYnMoZGVsdGEpIDwgZXBzaWxvbjIpIGJyZWFrO1xuICB9XG4gIHJldHVybiBbXG4gICAgTSAqIHggKiAoQTEgKyAzICogQTIgKiBsMiArIGw2ICogKDcgKiBBMyArIDkgKiBBNCAqIGwyKSkgLyBjb3MobCksXG4gICAgYXNpbihzaW4obCkgLyBNKVxuICBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWFsRWFydGhSYXcpXG4gICAgICAuc2NhbGUoMTc3LjE1OCk7XG59XG4iLCJpbXBvcnQge2F0YW4sIGNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdub21vbmljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gY29zKHgpICogY3k7XG4gIHJldHVybiBbY3kgKiBzaW4oeCkgLyBrLCBzaW4oeSkgLyBrXTtcbn1cblxuZ25vbW9uaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGF0YW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZ25vbW9uaWNSYXcpXG4gICAgICAuc2NhbGUoMTQ0LjA0OSlcbiAgICAgIC5jbGlwQW5nbGUoNjApO1xufVxuIiwiaW1wb3J0IGNsaXBSZWN0YW5nbGUgZnJvbSBcIi4uL2NsaXAvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtXCI7XG5pbXBvcnQge2ZpdEV4dGVudCwgZml0U2l6ZSwgZml0V2lkdGgsIGZpdEhlaWdodH0gZnJvbSBcIi4vZml0XCI7XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlKGt4LCBreSwgdHgsIHR5KSB7XG4gIHJldHVybiBreCA9PT0gMSAmJiBreSA9PT0gMSAmJiB0eCA9PT0gMCAmJiB0eSA9PT0gMCA/IGlkZW50aXR5IDogdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICoga3ggKyB0eCwgeSAqIGt5ICsgdHkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgayA9IDEsIHR4ID0gMCwgdHkgPSAwLCBzeCA9IDEsIHN5ID0gMSwgdHJhbnNmb3JtID0gaWRlbnRpdHksIC8vIHNjYWxlLCB0cmFuc2xhdGUgYW5kIHJlZmxlY3RcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgLy8gY2xpcCBleHRlbnRcbiAgICAgIHBvc3RjbGlwID0gaWRlbnRpdHksXG4gICAgICBjYWNoZSxcbiAgICAgIGNhY2hlU3RyZWFtLFxuICAgICAgcHJvamVjdGlvbjtcblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBwcm9qZWN0aW9uID0ge1xuICAgIHN0cmVhbTogZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm0ocG9zdGNsaXAoY2FjaGVTdHJlYW0gPSBzdHJlYW0pKTtcbiAgICB9LFxuICAgIHBvc3RjbGlwOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwb3N0Y2xpcCA9IF8sIHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgcmVzZXQoKSkgOiBwb3N0Y2xpcDtcbiAgICB9LFxuICAgIGNsaXBFeHRlbnQ6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIH0sXG4gICAgc2NhbGU6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSA9IHNjYWxlVHJhbnNsYXRlKChrID0gK18pICogc3gsIGsgKiBzeSwgdHgsIHR5KSwgcmVzZXQoKSkgOiBrO1xuICAgIH0sXG4gICAgdHJhbnNsYXRlOiBmdW5jdGlvbihfKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0cmFuc2Zvcm0gPSBzY2FsZVRyYW5zbGF0ZShrICogc3gsIGsgKiBzeSwgdHggPSArX1swXSwgdHkgPSArX1sxXSksIHJlc2V0KCkpIDogW3R4LCB0eV07XG4gICAgfSxcbiAgICByZWZsZWN0WDogZnVuY3Rpb24oXykge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNmb3JtID0gc2NhbGVUcmFuc2xhdGUoayAqIChzeCA9IF8gPyAtMSA6IDEpLCBrICogc3ksIHR4LCB0eSksIHJlc2V0KCkpIDogc3ggPCAwO1xuICAgIH0sXG4gICAgcmVmbGVjdFk6IGZ1bmN0aW9uKF8pIHtcbiAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zZm9ybSA9IHNjYWxlVHJhbnNsYXRlKGsgKiBzeCwgayAqIChzeSA9IF8gPyAtMSA6IDEpLCB0eCwgdHkpLCByZXNldCgpKSA6IHN5IDwgMDtcbiAgICB9LFxuICAgIGZpdEV4dGVudDogZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICAgIH0sXG4gICAgZml0U2l6ZTogZnVuY3Rpb24oc2l6ZSwgb2JqZWN0KSB7XG4gICAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICAgIH0sXG4gICAgZml0V2lkdGg6IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRXaWR0aChwcm9qZWN0aW9uLCB3aWR0aCwgb2JqZWN0KTtcbiAgICB9LFxuICAgIGZpdEhlaWdodDogZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5hdHVyYWxFYXJ0aDFSYXcobGFtYmRhLCBwaGkpIHtcbiAgdmFyIHBoaTIgPSBwaGkgKiBwaGksIHBoaTQgPSBwaGkyICogcGhpMjtcbiAgcmV0dXJuIFtcbiAgICBsYW1iZGEgKiAoMC44NzA3IC0gMC4xMzE5NzkgKiBwaGkyICsgcGhpNCAqICgtMC4wMTM3OTEgKyBwaGk0ICogKDAuMDAzOTcxICogcGhpMiAtIDAuMDAxNTI5ICogcGhpNCkpKSxcbiAgICBwaGkgKiAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICsgcGhpNCAqICgtMC4wNDQ0NzUgKyAwLjAyODg3NCAqIHBoaTIgLSAwLjAwNTkxNiAqIHBoaTQpKSlcbiAgXTtcbn1cblxubmF0dXJhbEVhcnRoMVJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHZhciBwaGkgPSB5LCBpID0gMjUsIGRlbHRhO1xuICBkbyB7XG4gICAgdmFyIHBoaTIgPSBwaGkgKiBwaGksIHBoaTQgPSBwaGkyICogcGhpMjtcbiAgICBwaGkgLT0gZGVsdGEgPSAocGhpICogKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSArIHBoaTQgKiAoLTAuMDQ0NDc1ICsgMC4wMjg4NzQgKiBwaGkyIC0gMC4wMDU5MTYgKiBwaGk0KSkpIC0geSkgL1xuICAgICAgICAoMS4wMDcyMjYgKyBwaGkyICogKDAuMDE1MDg1ICogMyArIHBoaTQgKiAoLTAuMDQ0NDc1ICogNyArIDAuMDI4ODc0ICogOSAqIHBoaTIgLSAwLjAwNTkxNiAqIDExICogcGhpNCkpKTtcbiAgfSB3aGlsZSAoYWJzKGRlbHRhKSA+IGVwc2lsb24gJiYgLS1pID4gMCk7XG4gIHJldHVybiBbXG4gICAgeCAvICgwLjg3MDcgKyAocGhpMiA9IHBoaSAqIHBoaSkgKiAoLTAuMTMxOTc5ICsgcGhpMiAqICgtMC4wMTM3OTEgKyBwaGkyICogcGhpMiAqIHBoaTIgKiAoMC4wMDM5NzEgLSAwLjAwMTUyOSAqIHBoaTIpKSkpLFxuICAgIHBoaVxuICBdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG5hdHVyYWxFYXJ0aDFSYXcpXG4gICAgICAuc2NhbGUoMTc1LjI5NSk7XG59XG4iLCJpbXBvcnQge2FzaW4sIGNvcywgZXBzaWxvbiwgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxJbnZlcnR9IGZyb20gXCIuL2F6aW11dGhhbFwiO1xuaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIG9ydGhvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHJldHVybiBbY29zKHkpICogc2luKHgpLCBzaW4oeSldO1xufVxuXG5vcnRob2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGFzaW4pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24ob3J0aG9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI0OS41KVxuICAgICAgLmNsaXBBbmdsZSg5MCArIGVwc2lsb24pO1xufVxuIiwiaW1wb3J0IHthdGFuLCBjb3MsIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVyZW9ncmFwaGljUmF3KHgsIHkpIHtcbiAgdmFyIGN5ID0gY29zKHkpLCBrID0gMSArIGNvcyh4KSAqIGN5O1xuICByZXR1cm4gW2N5ICogc2luKHgpIC8gaywgc2luKHkpIC8ga107XG59XG5cbnN0ZXJlb2dyYXBoaWNSYXcuaW52ZXJ0ID0gYXppbXV0aGFsSW52ZXJ0KGZ1bmN0aW9uKHopIHtcbiAgcmV0dXJuIDIgKiBhdGFuKHopO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihzdGVyZW9ncmFwaGljUmF3KVxuICAgICAgLnNjYWxlKDI1MClcbiAgICAgIC5jbGlwQW5nbGUoMTQyKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgZXhwLCBoYWxmUGksIGxvZywgdGFufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHttZXJjYXRvclByb2plY3Rpb259IGZyb20gXCIuL21lcmNhdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3ZlcnNlTWVyY2F0b3JSYXcobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFtsb2codGFuKChoYWxmUGkgKyBwaGkpIC8gMikpLCAtbGFtYmRhXTtcbn1cblxudHJhbnN2ZXJzZU1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFsteSwgMiAqIGF0YW4oZXhwKHgpKSAtIGhhbGZQaV07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG0gPSBtZXJjYXRvclByb2plY3Rpb24odHJhbnN2ZXJzZU1lcmNhdG9yUmF3KSxcbiAgICAgIGNlbnRlciA9IG0uY2VudGVyLFxuICAgICAgcm90YXRlID0gbS5yb3RhdGU7XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBjZW50ZXIoWy1fWzFdLCBfWzBdXSkgOiAoXyA9IGNlbnRlcigpLCBbX1sxXSwgLV9bMF1dKTtcbiAgfTtcblxuICBtLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJvdGF0ZShbX1swXSwgX1sxXSwgXy5sZW5ndGggPiAyID8gX1syXSArIDkwIDogOTBdKSA6IChfID0gcm90YXRlKCksIFtfWzBdLCBfWzFdLCBfWzJdIC0gOTBdKTtcbiAgfTtcblxuICByZXR1cm4gcm90YXRlKFswLCAwLCA5MF0pXG4gICAgICAuc2NhbGUoMTU5LjE1NSk7XG59XG4iLCJmdW5jdGlvbiBkZWZhdWx0U2VwYXJhdGlvbihhLCBiKSB7XG4gIHJldHVybiBhLnBhcmVudCA9PT0gYi5wYXJlbnQgPyAxIDogMjtcbn1cblxuZnVuY3Rpb24gbWVhblgoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGNoaWxkcmVuLnJlZHVjZShtZWFuWFJlZHVjZSwgMCkgLyBjaGlsZHJlbi5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIG1lYW5YUmVkdWNlKHgsIGMpIHtcbiAgcmV0dXJuIHggKyBjLng7XG59XG5cbmZ1bmN0aW9uIG1heFkoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIDEgKyBjaGlsZHJlbi5yZWR1Y2UobWF4WVJlZHVjZSwgMCk7XG59XG5cbmZ1bmN0aW9uIG1heFlSZWR1Y2UoeSwgYykge1xuICByZXR1cm4gTWF0aC5tYXgoeSwgYy55KTtcbn1cblxuZnVuY3Rpb24gbGVhZkxlZnQobm9kZSkge1xuICB2YXIgY2hpbGRyZW47XG4gIHdoaWxlIChjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4pIG5vZGUgPSBjaGlsZHJlblswXTtcbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIGxlYWZSaWdodChub2RlKSB7XG4gIHZhciBjaGlsZHJlbjtcbiAgd2hpbGUgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikgbm9kZSA9IGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzZXBhcmF0aW9uID0gZGVmYXVsdFNlcGFyYXRpb24sXG4gICAgICBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBub2RlU2l6ZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGNsdXN0ZXIocm9vdCkge1xuICAgIHZhciBwcmV2aW91c05vZGUsXG4gICAgICAgIHggPSAwO1xuXG4gICAgLy8gRmlyc3Qgd2FsaywgY29tcHV0aW5nIHRoZSBpbml0aWFsIHggJiB5IHZhbHVlcy5cbiAgICByb290LmVhY2hBZnRlcihmdW5jdGlvbihub2RlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICAgIG5vZGUueCA9IG1lYW5YKGNoaWxkcmVuKTtcbiAgICAgICAgbm9kZS55ID0gbWF4WShjaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLnggPSBwcmV2aW91c05vZGUgPyB4ICs9IHNlcGFyYXRpb24obm9kZSwgcHJldmlvdXNOb2RlKSA6IDA7XG4gICAgICAgIG5vZGUueSA9IDA7XG4gICAgICAgIHByZXZpb3VzTm9kZSA9IG5vZGU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgbGVmdCA9IGxlYWZMZWZ0KHJvb3QpLFxuICAgICAgICByaWdodCA9IGxlYWZSaWdodChyb290KSxcbiAgICAgICAgeDAgPSBsZWZ0LnggLSBzZXBhcmF0aW9uKGxlZnQsIHJpZ2h0KSAvIDIsXG4gICAgICAgIHgxID0gcmlnaHQueCArIHNlcGFyYXRpb24ocmlnaHQsIGxlZnQpIC8gMjtcblxuICAgIC8vIFNlY29uZCB3YWxrLCBub3JtYWxpemluZyB4ICYgeSB0byB0aGUgZGVzaXJlZCBzaXplLlxuICAgIHJldHVybiByb290LmVhY2hBZnRlcihub2RlU2l6ZSA/IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIG5vZGUueCA9IChub2RlLnggLSByb290LngpICogZHg7XG4gICAgICBub2RlLnkgPSAocm9vdC55IC0gbm9kZS55KSAqIGR5O1xuICAgIH0gOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBub2RlLnggPSAobm9kZS54IC0geDApIC8gKHgxIC0geDApICogZHg7XG4gICAgICBub2RlLnkgPSAoMSAtIChyb290LnkgPyBub2RlLnkgLyByb290LnkgOiAxKSkgKiBkeTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsdXN0ZXIuc2VwYXJhdGlvbiA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzZXBhcmF0aW9uID0geCwgY2x1c3RlcikgOiBzZXBhcmF0aW9uO1xuICB9O1xuXG4gIGNsdXN0ZXIuc2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IGZhbHNlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCBjbHVzdGVyKSA6IChub2RlU2l6ZSA/IG51bGwgOiBbZHgsIGR5XSk7XG4gIH07XG5cbiAgY2x1c3Rlci5ub2RlU2l6ZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChub2RlU2l6ZSA9IHRydWUsIGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIGNsdXN0ZXIpIDogKG5vZGVTaXplID8gW2R4LCBkeV0gOiBudWxsKTtcbiAgfTtcblxuICByZXR1cm4gY2x1c3Rlcjtcbn1cbiIsImZ1bmN0aW9uIGNvdW50KG5vZGUpIHtcbiAgdmFyIHN1bSA9IDAsXG4gICAgICBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4sXG4gICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICBpZiAoIWkpIHN1bSA9IDE7XG4gIGVsc2Ugd2hpbGUgKC0taSA+PSAwKSBzdW0gKz0gY2hpbGRyZW5baV0udmFsdWU7XG4gIG5vZGUudmFsdWUgPSBzdW07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoQWZ0ZXIoY291bnQpO1xufVxuIiwiaW1wb3J0IG5vZGVfY291bnQgZnJvbSBcIi4vY291bnRcIjtcbmltcG9ydCBub2RlX2VhY2ggZnJvbSBcIi4vZWFjaFwiO1xuaW1wb3J0IG5vZGVfZWFjaEJlZm9yZSBmcm9tIFwiLi9lYWNoQmVmb3JlXCI7XG5pbXBvcnQgbm9kZV9lYWNoQWZ0ZXIgZnJvbSBcIi4vZWFjaEFmdGVyXCI7XG5pbXBvcnQgbm9kZV9zdW0gZnJvbSBcIi4vc3VtXCI7XG5pbXBvcnQgbm9kZV9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBub2RlX3BhdGggZnJvbSBcIi4vcGF0aFwiO1xuaW1wb3J0IG5vZGVfYW5jZXN0b3JzIGZyb20gXCIuL2FuY2VzdG9yc1wiO1xuaW1wb3J0IG5vZGVfZGVzY2VuZGFudHMgZnJvbSBcIi4vZGVzY2VuZGFudHNcIjtcbmltcG9ydCBub2RlX2xlYXZlcyBmcm9tIFwiLi9sZWF2ZXNcIjtcbmltcG9ydCBub2RlX2xpbmtzIGZyb20gXCIuL2xpbmtzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpZXJhcmNoeShkYXRhLCBjaGlsZHJlbikge1xuICB2YXIgcm9vdCA9IG5ldyBOb2RlKGRhdGEpLFxuICAgICAgdmFsdWVkID0gK2RhdGEudmFsdWUgJiYgKHJvb3QudmFsdWUgPSBkYXRhLnZhbHVlKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFtyb290XSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRzLFxuICAgICAgaSxcbiAgICAgIG47XG5cbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIGNoaWxkcmVuID0gZGVmYXVsdENoaWxkcmVuO1xuXG4gIHdoaWxlIChub2RlID0gbm9kZXMucG9wKCkpIHtcbiAgICBpZiAodmFsdWVkKSBub2RlLnZhbHVlID0gK25vZGUuZGF0YS52YWx1ZTtcbiAgICBpZiAoKGNoaWxkcyA9IGNoaWxkcmVuKG5vZGUuZGF0YSkpICYmIChuID0gY2hpbGRzLmxlbmd0aCkpIHtcbiAgICAgIG5vZGUuY2hpbGRyZW4gPSBuZXcgQXJyYXkobik7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgbm9kZXMucHVzaChjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV0gPSBuZXcgTm9kZShjaGlsZHNbaV0pKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gbm9kZTtcbiAgICAgICAgY2hpbGQuZGVwdGggPSBub2RlLmRlcHRoICsgMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm9vdC5lYWNoQmVmb3JlKGNvbXB1dGVIZWlnaHQpO1xufVxuXG5mdW5jdGlvbiBub2RlX2NvcHkoKSB7XG4gIHJldHVybiBoaWVyYXJjaHkodGhpcykuZWFjaEJlZm9yZShjb3B5RGF0YSk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDaGlsZHJlbihkKSB7XG4gIHJldHVybiBkLmNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjb3B5RGF0YShub2RlKSB7XG4gIG5vZGUuZGF0YSA9IG5vZGUuZGF0YS5kYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUhlaWdodChub2RlKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICBkbyBub2RlLmhlaWdodCA9IGhlaWdodDtcbiAgd2hpbGUgKChub2RlID0gbm9kZS5wYXJlbnQpICYmIChub2RlLmhlaWdodCA8ICsraGVpZ2h0KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBOb2RlKGRhdGEpIHtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5kZXB0aCA9XG4gIHRoaXMuaGVpZ2h0ID0gMDtcbiAgdGhpcy5wYXJlbnQgPSBudWxsO1xufVxuXG5Ob2RlLnByb3RvdHlwZSA9IGhpZXJhcmNoeS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBOb2RlLFxuICBjb3VudDogbm9kZV9jb3VudCxcbiAgZWFjaDogbm9kZV9lYWNoLFxuICBlYWNoQWZ0ZXI6IG5vZGVfZWFjaEFmdGVyLFxuICBlYWNoQmVmb3JlOiBub2RlX2VhY2hCZWZvcmUsXG4gIHN1bTogbm9kZV9zdW0sXG4gIHNvcnQ6IG5vZGVfc29ydCxcbiAgcGF0aDogbm9kZV9wYXRoLFxuICBhbmNlc3RvcnM6IG5vZGVfYW5jZXN0b3JzLFxuICBkZXNjZW5kYW50czogbm9kZV9kZXNjZW5kYW50cyxcbiAgbGVhdmVzOiBub2RlX2xlYXZlcyxcbiAgbGlua3M6IG5vZGVfbGlua3MsXG4gIGNvcHk6IG5vZGVfY29weVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBub2RlID0gdGhpcywgY3VycmVudCwgbmV4dCA9IFtub2RlXSwgY2hpbGRyZW4sIGksIG47XG4gIGRvIHtcbiAgICBjdXJyZW50ID0gbmV4dC5yZXZlcnNlKCksIG5leHQgPSBbXTtcbiAgICB3aGlsZSAobm9kZSA9IGN1cnJlbnQucG9wKCkpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgICBpZiAoY2hpbGRyZW4pIGZvciAoaSA9IDAsIG4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgbmV4dC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gd2hpbGUgKG5leHQubGVuZ3RoKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBuZXh0ID0gW10sIGNoaWxkcmVuLCBpLCBuO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgbmV4dC5wdXNoKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSAwLCBuID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2Rlcy5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG5vZGUgPSBuZXh0LnBvcCgpKSB7XG4gICAgY2FsbGJhY2sobm9kZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgbm9kZSA9IHRoaXMsIG5vZGVzID0gW25vZGVdLCBjaGlsZHJlbiwgaTtcbiAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xuICAgIGNhbGxiYWNrKG5vZGUpLCBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGNoaWxkcmVuKSBmb3IgKGkgPSBjaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgbm9kZXMucHVzaChjaGlsZHJlbltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaEFmdGVyKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgc3VtID0gK3ZhbHVlKG5vZGUuZGF0YSkgfHwgMCxcbiAgICAgICAgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLFxuICAgICAgICBpID0gY2hpbGRyZW4gJiYgY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlICgtLWkgPj0gMCkgc3VtICs9IGNoaWxkcmVuW2ldLnZhbHVlO1xuICAgIG5vZGUudmFsdWUgPSBzdW07XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICByZXR1cm4gdGhpcy5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5jaGlsZHJlbi5zb3J0KGNvbXBhcmUpO1xuICAgIH1cbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbmQpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcyxcbiAgICAgIGFuY2VzdG9yID0gbGVhc3RDb21tb25BbmNlc3RvcihzdGFydCwgZW5kKSxcbiAgICAgIG5vZGVzID0gW3N0YXJ0XTtcbiAgd2hpbGUgKHN0YXJ0ICE9PSBhbmNlc3Rvcikge1xuICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50O1xuICAgIG5vZGVzLnB1c2goc3RhcnQpO1xuICB9XG4gIHZhciBrID0gbm9kZXMubGVuZ3RoO1xuICB3aGlsZSAoZW5kICE9PSBhbmNlc3Rvcikge1xuICAgIG5vZGVzLnNwbGljZShrLCAwLCBlbmQpO1xuICAgIGVuZCA9IGVuZC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG5mdW5jdGlvbiBsZWFzdENvbW1vbkFuY2VzdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiBhO1xuICB2YXIgYU5vZGVzID0gYS5hbmNlc3RvcnMoKSxcbiAgICAgIGJOb2RlcyA9IGIuYW5jZXN0b3JzKCksXG4gICAgICBjID0gbnVsbDtcbiAgYSA9IGFOb2Rlcy5wb3AoKTtcbiAgYiA9IGJOb2Rlcy5wb3AoKTtcbiAgd2hpbGUgKGEgPT09IGIpIHtcbiAgICBjID0gYTtcbiAgICBhID0gYU5vZGVzLnBvcCgpO1xuICAgIGIgPSBiTm9kZXMucG9wKCk7XG4gIH1cbiAgcmV0dXJuIGM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLCBub2RlcyA9IFtub2RlXTtcbiAgd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudCkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IFtdO1xuICB0aGlzLmVhY2goZnVuY3Rpb24obm9kZSkge1xuICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gIH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxlYXZlcyA9IFtdO1xuICB0aGlzLmVhY2hCZWZvcmUoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbGVhdmVzLnB1c2gobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxlYXZlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgcm9vdCA9IHRoaXMsIGxpbmtzID0gW107XG4gIHJvb3QuZWFjaChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgIT09IHJvb3QpIHsgLy8gRG9u4oCZdCBpbmNsdWRlIHRoZSByb2904oCZcyBwYXJlbnQsIGlmIGFueS5cbiAgICAgIGxpbmtzLnB1c2goe3NvdXJjZTogbm9kZS5wYXJlbnQsIHRhcmdldDogbm9kZX0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBsaW5rcztcbn1cbiIsImV4cG9ydCB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XG4gIHZhciBtID0gYXJyYXkubGVuZ3RoLFxuICAgICAgdCxcbiAgICAgIGk7XG5cbiAgd2hpbGUgKG0pIHtcbiAgICBpID0gTWF0aC5yYW5kb20oKSAqIG0tLSB8IDA7XG4gICAgdCA9IGFycmF5W21dO1xuICAgIGFycmF5W21dID0gYXJyYXlbaV07XG4gICAgYXJyYXlbaV0gPSB0O1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IHtzaHVmZmxlLCBzbGljZX0gZnJvbSBcIi4uL2FycmF5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNpcmNsZXMpIHtcbiAgdmFyIGkgPSAwLCBuID0gKGNpcmNsZXMgPSBzaHVmZmxlKHNsaWNlLmNhbGwoY2lyY2xlcykpKS5sZW5ndGgsIEIgPSBbXSwgcCwgZTtcblxuICB3aGlsZSAoaSA8IG4pIHtcbiAgICBwID0gY2lyY2xlc1tpXTtcbiAgICBpZiAoZSAmJiBlbmNsb3Nlc1dlYWsoZSwgcCkpICsraTtcbiAgICBlbHNlIGUgPSBlbmNsb3NlQmFzaXMoQiA9IGV4dGVuZEJhc2lzKEIsIHApKSwgaSA9IDA7XG4gIH1cblxuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kQmFzaXMoQiwgcCkge1xuICB2YXIgaSwgajtcblxuICBpZiAoZW5jbG9zZXNXZWFrQWxsKHAsIEIpKSByZXR1cm4gW3BdO1xuXG4gIC8vIElmIHdlIGdldCBoZXJlIHRoZW4gQiBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGVsZW1lbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBCLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKGVuY2xvc2VzTm90KHAsIEJbaV0pXG4gICAgICAgICYmIGVuY2xvc2VzV2Vha0FsbChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCKSkge1xuICAgICAgcmV0dXJuIFtCW2ldLCBwXTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB3ZSBnZXQgaGVyZSB0aGVuIEIgbXVzdCBoYXZlIGF0IGxlYXN0IHR3byBlbGVtZW50cy5cbiAgZm9yIChpID0gMDsgaSA8IEIubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgZm9yIChqID0gaSArIDE7IGogPCBCLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoZW5jbG9zZXNOb3QoZW5jbG9zZUJhc2lzMihCW2ldLCBCW2pdKSwgcClcbiAgICAgICAgICAmJiBlbmNsb3Nlc05vdChlbmNsb3NlQmFzaXMyKEJbaV0sIHApLCBCW2pdKVxuICAgICAgICAgICYmIGVuY2xvc2VzTm90KGVuY2xvc2VCYXNpczIoQltqXSwgcCksIEJbaV0pXG4gICAgICAgICAgJiYgZW5jbG9zZXNXZWFrQWxsKGVuY2xvc2VCYXNpczMoQltpXSwgQltqXSwgcCksIEIpKSB7XG4gICAgICAgIHJldHVybiBbQltpXSwgQltqXSwgcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgd2UgZ2V0IGhlcmUgdGhlbiBzb21ldGhpbmcgaXMgdmVyeSB3cm9uZy5cbiAgdGhyb3cgbmV3IEVycm9yO1xufVxuXG5mdW5jdGlvbiBlbmNsb3Nlc05vdChhLCBiKSB7XG4gIHZhciBkciA9IGEuciAtIGIuciwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPCAwIHx8IGRyICogZHIgPCBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNXZWFrKGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yIC0gYi5yICsgMWUtNiwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPiAwICYmIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gZW5jbG9zZXNXZWFrQWxsKGEsIEIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBCLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCFlbmNsb3Nlc1dlYWsoYSwgQltpXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGVuY2xvc2VCYXNpcyhCKSB7XG4gIHN3aXRjaCAoQi5sZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBlbmNsb3NlQmFzaXMxKEJbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIGVuY2xvc2VCYXNpczIoQlswXSwgQlsxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZW5jbG9zZUJhc2lzMyhCWzBdLCBCWzFdLCBCWzJdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMxKGEpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBhLngsXG4gICAgeTogYS55LFxuICAgIHI6IGEuclxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMyKGEsIGIpIHtcbiAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgeDIxID0geDIgLSB4MSwgeTIxID0geTIgLSB5MSwgcjIxID0gcjIgLSByMSxcbiAgICAgIGwgPSBNYXRoLnNxcnQoeDIxICogeDIxICsgeTIxICogeTIxKTtcbiAgcmV0dXJuIHtcbiAgICB4OiAoeDEgKyB4MiArIHgyMSAvIGwgKiByMjEpIC8gMixcbiAgICB5OiAoeTEgKyB5MiArIHkyMSAvIGwgKiByMjEpIC8gMixcbiAgICByOiAobCArIHIxICsgcjIpIC8gMlxuICB9O1xufVxuXG5mdW5jdGlvbiBlbmNsb3NlQmFzaXMzKGEsIGIsIGMpIHtcbiAgdmFyIHgxID0gYS54LCB5MSA9IGEueSwgcjEgPSBhLnIsXG4gICAgICB4MiA9IGIueCwgeTIgPSBiLnksIHIyID0gYi5yLFxuICAgICAgeDMgPSBjLngsIHkzID0gYy55LCByMyA9IGMucixcbiAgICAgIGEyID0geDEgLSB4MixcbiAgICAgIGEzID0geDEgLSB4MyxcbiAgICAgIGIyID0geTEgLSB5MixcbiAgICAgIGIzID0geTEgLSB5MyxcbiAgICAgIGMyID0gcjIgLSByMSxcbiAgICAgIGMzID0gcjMgLSByMSxcbiAgICAgIGQxID0geDEgKiB4MSArIHkxICogeTEgLSByMSAqIHIxLFxuICAgICAgZDIgPSBkMSAtIHgyICogeDIgLSB5MiAqIHkyICsgcjIgKiByMixcbiAgICAgIGQzID0gZDEgLSB4MyAqIHgzIC0geTMgKiB5MyArIHIzICogcjMsXG4gICAgICBhYiA9IGEzICogYjIgLSBhMiAqIGIzLFxuICAgICAgeGEgPSAoYjIgKiBkMyAtIGIzICogZDIpIC8gKGFiICogMikgLSB4MSxcbiAgICAgIHhiID0gKGIzICogYzIgLSBiMiAqIGMzKSAvIGFiLFxuICAgICAgeWEgPSAoYTMgKiBkMiAtIGEyICogZDMpIC8gKGFiICogMikgLSB5MSxcbiAgICAgIHliID0gKGEyICogYzMgLSBhMyAqIGMyKSAvIGFiLFxuICAgICAgQSA9IHhiICogeGIgKyB5YiAqIHliIC0gMSxcbiAgICAgIEIgPSAyICogKHIxICsgeGEgKiB4YiArIHlhICogeWIpLFxuICAgICAgQyA9IHhhICogeGEgKyB5YSAqIHlhIC0gcjEgKiByMSxcbiAgICAgIHIgPSAtKEEgPyAoQiArIE1hdGguc3FydChCICogQiAtIDQgKiBBICogQykpIC8gKDIgKiBBKSA6IEMgLyBCKTtcbiAgcmV0dXJuIHtcbiAgICB4OiB4MSArIHhhICsgeGIgKiByLFxuICAgIHk6IHkxICsgeWEgKyB5YiAqIHIsXG4gICAgcjogclxuICB9O1xufVxuIiwiaW1wb3J0IGVuY2xvc2UgZnJvbSBcIi4vZW5jbG9zZVwiO1xuXG5mdW5jdGlvbiBwbGFjZShiLCBhLCBjKSB7XG4gIHZhciBkeCA9IGIueCAtIGEueCwgeCwgYTIsXG4gICAgICBkeSA9IGIueSAtIGEueSwgeSwgYjIsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICBpZiAoZDIpIHtcbiAgICBhMiA9IGEuciArIGMuciwgYTIgKj0gYTI7XG4gICAgYjIgPSBiLnIgKyBjLnIsIGIyICo9IGIyO1xuICAgIGlmIChhMiA+IGIyKSB7XG4gICAgICB4ID0gKGQyICsgYjIgLSBhMikgLyAoMiAqIGQyKTtcbiAgICAgIHkgPSBNYXRoLnNxcnQoTWF0aC5tYXgoMCwgYjIgLyBkMiAtIHggKiB4KSk7XG4gICAgICBjLnggPSBiLnggLSB4ICogZHggLSB5ICogZHk7XG4gICAgICBjLnkgPSBiLnkgLSB4ICogZHkgKyB5ICogZHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSAoZDIgKyBhMiAtIGIyKSAvICgyICogZDIpO1xuICAgICAgeSA9IE1hdGguc3FydChNYXRoLm1heCgwLCBhMiAvIGQyIC0geCAqIHgpKTtcbiAgICAgIGMueCA9IGEueCArIHggKiBkeCAtIHkgKiBkeTtcbiAgICAgIGMueSA9IGEueSArIHggKiBkeSArIHkgKiBkeDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYy54ID0gYS54ICsgYy5yO1xuICAgIGMueSA9IGEueTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RzKGEsIGIpIHtcbiAgdmFyIGRyID0gYS5yICsgYi5yIC0gMWUtNiwgZHggPSBiLnggLSBhLngsIGR5ID0gYi55IC0gYS55O1xuICByZXR1cm4gZHIgPiAwICYmIGRyICogZHIgPiBkeCAqIGR4ICsgZHkgKiBkeTtcbn1cblxuZnVuY3Rpb24gc2NvcmUobm9kZSkge1xuICB2YXIgYSA9IG5vZGUuXyxcbiAgICAgIGIgPSBub2RlLm5leHQuXyxcbiAgICAgIGFiID0gYS5yICsgYi5yLFxuICAgICAgZHggPSAoYS54ICogYi5yICsgYi54ICogYS5yKSAvIGFiLFxuICAgICAgZHkgPSAoYS55ICogYi5yICsgYi55ICogYS5yKSAvIGFiO1xuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG5cbmZ1bmN0aW9uIE5vZGUoY2lyY2xlKSB7XG4gIHRoaXMuXyA9IGNpcmNsZTtcbiAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgdGhpcy5wcmV2aW91cyA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWNrRW5jbG9zZShjaXJjbGVzKSB7XG4gIGlmICghKG4gPSBjaXJjbGVzLmxlbmd0aCkpIHJldHVybiAwO1xuXG4gIHZhciBhLCBiLCBjLCBuLCBhYSwgY2EsIGksIGosIGssIHNqLCBzaztcblxuICAvLyBQbGFjZSB0aGUgZmlyc3QgY2lyY2xlLlxuICBhID0gY2lyY2xlc1swXSwgYS54ID0gMCwgYS55ID0gMDtcbiAgaWYgKCEobiA+IDEpKSByZXR1cm4gYS5yO1xuXG4gIC8vIFBsYWNlIHRoZSBzZWNvbmQgY2lyY2xlLlxuICBiID0gY2lyY2xlc1sxXSwgYS54ID0gLWIuciwgYi54ID0gYS5yLCBiLnkgPSAwO1xuICBpZiAoIShuID4gMikpIHJldHVybiBhLnIgKyBiLnI7XG5cbiAgLy8gUGxhY2UgdGhlIHRoaXJkIGNpcmNsZS5cbiAgcGxhY2UoYiwgYSwgYyA9IGNpcmNsZXNbMl0pO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIGZyb250LWNoYWluIHVzaW5nIHRoZSBmaXJzdCB0aHJlZSBjaXJjbGVzIGEsIGIgYW5kIGMuXG4gIGEgPSBuZXcgTm9kZShhKSwgYiA9IG5ldyBOb2RlKGIpLCBjID0gbmV3IE5vZGUoYyk7XG4gIGEubmV4dCA9IGMucHJldmlvdXMgPSBiO1xuICBiLm5leHQgPSBhLnByZXZpb3VzID0gYztcbiAgYy5uZXh0ID0gYi5wcmV2aW91cyA9IGE7XG5cbiAgLy8gQXR0ZW1wdCB0byBwbGFjZSBlYWNoIHJlbWFpbmluZyBjaXJjbGXigKZcbiAgcGFjazogZm9yIChpID0gMzsgaSA8IG47ICsraSkge1xuICAgIHBsYWNlKGEuXywgYi5fLCBjID0gY2lyY2xlc1tpXSksIGMgPSBuZXcgTm9kZShjKTtcblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgaW50ZXJzZWN0aW5nIGNpcmNsZSBvbiB0aGUgZnJvbnQtY2hhaW4sIGlmIGFueS5cbiAgICAvLyDigJxDbG9zZW5lc3PigJ0gaXMgZGV0ZXJtaW5lZCBieSBsaW5lYXIgZGlzdGFuY2UgYWxvbmcgdGhlIGZyb250LWNoYWluLlxuICAgIC8vIOKAnEFoZWFk4oCdIG9yIOKAnGJlaGluZOKAnSBpcyBsaWtld2lzZSBkZXRlcm1pbmVkIGJ5IGxpbmVhciBkaXN0YW5jZS5cbiAgICBqID0gYi5uZXh0LCBrID0gYS5wcmV2aW91cywgc2ogPSBiLl8uciwgc2sgPSBhLl8ucjtcbiAgICBkbyB7XG4gICAgICBpZiAoc2ogPD0gc2spIHtcbiAgICAgICAgaWYgKGludGVyc2VjdHMoai5fLCBjLl8pKSB7XG4gICAgICAgICAgYiA9IGosIGEubmV4dCA9IGIsIGIucHJldmlvdXMgPSBhLCAtLWk7XG4gICAgICAgICAgY29udGludWUgcGFjaztcbiAgICAgICAgfVxuICAgICAgICBzaiArPSBqLl8uciwgaiA9IGoubmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpbnRlcnNlY3RzKGsuXywgYy5fKSkge1xuICAgICAgICAgIGEgPSBrLCBhLm5leHQgPSBiLCBiLnByZXZpb3VzID0gYSwgLS1pO1xuICAgICAgICAgIGNvbnRpbnVlIHBhY2s7XG4gICAgICAgIH1cbiAgICAgICAgc2sgKz0gay5fLnIsIGsgPSBrLnByZXZpb3VzO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGogIT09IGsubmV4dCk7XG5cbiAgICAvLyBTdWNjZXNzISBJbnNlcnQgdGhlIG5ldyBjaXJjbGUgYyBiZXR3ZWVuIGEgYW5kIGIuXG4gICAgYy5wcmV2aW91cyA9IGEsIGMubmV4dCA9IGIsIGEubmV4dCA9IGIucHJldmlvdXMgPSBiID0gYztcblxuICAgIC8vIENvbXB1dGUgdGhlIG5ldyBjbG9zZXN0IGNpcmNsZSBwYWlyIHRvIHRoZSBjZW50cm9pZC5cbiAgICBhYSA9IHNjb3JlKGEpO1xuICAgIHdoaWxlICgoYyA9IGMubmV4dCkgIT09IGIpIHtcbiAgICAgIGlmICgoY2EgPSBzY29yZShjKSkgPCBhYSkge1xuICAgICAgICBhID0gYywgYWEgPSBjYTtcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IGEubmV4dDtcbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGVuY2xvc2luZyBjaXJjbGUgb2YgdGhlIGZyb250IGNoYWluLlxuICBhID0gW2IuX10sIGMgPSBiOyB3aGlsZSAoKGMgPSBjLm5leHQpICE9PSBiKSBhLnB1c2goYy5fKTsgYyA9IGVuY2xvc2UoYSk7XG5cbiAgLy8gVHJhbnNsYXRlIHRoZSBjaXJjbGVzIHRvIHB1dCB0aGUgZW5jbG9zaW5nIGNpcmNsZSBhcm91bmQgdGhlIG9yaWdpbi5cbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgYSA9IGNpcmNsZXNbaV0sIGEueCAtPSBjLngsIGEueSAtPSBjLnk7XG5cbiAgcmV0dXJuIGMucjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2lyY2xlcykge1xuICBwYWNrRW5jbG9zZShjaXJjbGVzKTtcbiAgcmV0dXJuIGNpcmNsZXM7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gb3B0aW9uYWwoZikge1xuICByZXR1cm4gZiA9PSBudWxsID8gbnVsbCA6IHJlcXVpcmVkKGYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZWQoZikge1xuICBpZiAodHlwZW9mIGYgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gZjtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjb25zdGFudFplcm8oKSB7XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7cGFja0VuY2xvc2V9IGZyb20gXCIuL3NpYmxpbmdzXCI7XG5pbXBvcnQge29wdGlvbmFsfSBmcm9tIFwiLi4vYWNjZXNzb3JzXCI7XG5pbXBvcnQgY29uc3RhbnQsIHtjb25zdGFudFplcm99IGZyb20gXCIuLi9jb25zdGFudFwiO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmFkaXVzKGQpIHtcbiAgcmV0dXJuIE1hdGguc3FydChkLnZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciByYWRpdXMgPSBudWxsLFxuICAgICAgZHggPSAxLFxuICAgICAgZHkgPSAxLFxuICAgICAgcGFkZGluZyA9IGNvbnN0YW50WmVybztcblxuICBmdW5jdGlvbiBwYWNrKHJvb3QpIHtcbiAgICByb290LnggPSBkeCAvIDIsIHJvb3QueSA9IGR5IC8gMjtcbiAgICBpZiAocmFkaXVzKSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihyYWRpdXMpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIDAuNSkpXG4gICAgICAgICAgLmVhY2hCZWZvcmUodHJhbnNsYXRlQ2hpbGQoMSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb290LmVhY2hCZWZvcmUocmFkaXVzTGVhZihkZWZhdWx0UmFkaXVzKSlcbiAgICAgICAgICAuZWFjaEFmdGVyKHBhY2tDaGlsZHJlbihjb25zdGFudFplcm8sIDEpKVxuICAgICAgICAgIC5lYWNoQWZ0ZXIocGFja0NoaWxkcmVuKHBhZGRpbmcsIHJvb3QuciAvIE1hdGgubWluKGR4LCBkeSkpKVxuICAgICAgICAgIC5lYWNoQmVmb3JlKHRyYW5zbGF0ZUNoaWxkKE1hdGgubWluKGR4LCBkeSkgLyAoMiAqIHJvb3QucikpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICBwYWNrLnJhZGl1cyA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSBvcHRpb25hbCh4KSwgcGFjaykgOiByYWRpdXM7XG4gIH07XG5cbiAgcGFjay5zaXplID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGR4ID0gK3hbMF0sIGR5ID0gK3hbMV0sIHBhY2spIDogW2R4LCBkeV07XG4gIH07XG5cbiAgcGFjay5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgcGFjaykgOiBwYWRkaW5nO1xuICB9O1xuXG4gIHJldHVybiBwYWNrO1xufVxuXG5mdW5jdGlvbiByYWRpdXNMZWFmKHJhZGl1cykge1xuICByZXR1cm4gZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5jaGlsZHJlbikge1xuICAgICAgbm9kZS5yID0gTWF0aC5tYXgoMCwgK3JhZGl1cyhub2RlKSB8fCAwKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhY2tDaGlsZHJlbihwYWRkaW5nLCBrKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5jaGlsZHJlbikge1xuICAgICAgdmFyIGNoaWxkcmVuLFxuICAgICAgICAgIGksXG4gICAgICAgICAgbiA9IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICByID0gcGFkZGluZyhub2RlKSAqIGsgfHwgMCxcbiAgICAgICAgICBlO1xuXG4gICAgICBpZiAocikgZm9yIChpID0gMDsgaSA8IG47ICsraSkgY2hpbGRyZW5baV0uciArPSByO1xuICAgICAgZSA9IHBhY2tFbmNsb3NlKGNoaWxkcmVuKTtcbiAgICAgIGlmIChyKSBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSBjaGlsZHJlbltpXS5yIC09IHI7XG4gICAgICBub2RlLnIgPSBlICsgcjtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZUNoaWxkKGspIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7XG4gICAgbm9kZS5yICo9IGs7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbm9kZS54ID0gcGFyZW50LnggKyBrICogbm9kZS54O1xuICAgICAgbm9kZS55ID0gcGFyZW50LnkgKyBrICogbm9kZS55O1xuICAgIH1cbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS54MCA9IE1hdGgucm91bmQobm9kZS54MCk7XG4gIG5vZGUueTAgPSBNYXRoLnJvdW5kKG5vZGUueTApO1xuICBub2RlLngxID0gTWF0aC5yb3VuZChub2RlLngxKTtcbiAgbm9kZS55MSA9IE1hdGgucm91bmQobm9kZS55MSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeDEgLSB4MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkxO1xuICAgIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgcm91bmROb2RlIGZyb20gXCIuL3RyZWVtYXAvcm91bmRcIjtcbmltcG9ydCB0cmVlbWFwRGljZSBmcm9tIFwiLi90cmVlbWFwL2RpY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkeCA9IDEsXG4gICAgICBkeSA9IDEsXG4gICAgICBwYWRkaW5nID0gMCxcbiAgICAgIHJvdW5kID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gcGFydGl0aW9uKHJvb3QpIHtcbiAgICB2YXIgbiA9IHJvb3QuaGVpZ2h0ICsgMTtcbiAgICByb290LngwID1cbiAgICByb290LnkwID0gcGFkZGluZztcbiAgICByb290LngxID0gZHg7XG4gICAgcm9vdC55MSA9IGR5IC8gbjtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKGR5LCBuKSk7XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShkeSwgbikge1xuICAgIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgICB0cmVlbWFwRGljZShub2RlLCBub2RlLngwLCBkeSAqIChub2RlLmRlcHRoICsgMSkgLyBuLCBub2RlLngxLCBkeSAqIChub2RlLmRlcHRoICsgMikgLyBuKTtcbiAgICAgIH1cbiAgICAgIHZhciB4MCA9IG5vZGUueDAsXG4gICAgICAgICAgeTAgPSBub2RlLnkwLFxuICAgICAgICAgIHgxID0gbm9kZS54MSAtIHBhZGRpbmcsXG4gICAgICAgICAgeTEgPSBub2RlLnkxIC0gcGFkZGluZztcbiAgICAgIGlmICh4MSA8IHgwKSB4MCA9IHgxID0gKHgwICsgeDEpIC8gMjtcbiAgICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIG5vZGUueDAgPSB4MDtcbiAgICAgIG5vZGUueTAgPSB5MDtcbiAgICAgIG5vZGUueDEgPSB4MTtcbiAgICAgIG5vZGUueTEgPSB5MTtcbiAgICB9O1xuICB9XG5cbiAgcGFydGl0aW9uLnJvdW5kID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJvdW5kID0gISF4LCBwYXJ0aXRpb24pIDogcm91bmQ7XG4gIH07XG5cbiAgcGFydGl0aW9uLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgcGFydGl0aW9uKSA6IFtkeCwgZHldO1xuICB9O1xuXG4gIHBhcnRpdGlvbi5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmcgPSAreCwgcGFydGl0aW9uKSA6IHBhZGRpbmc7XG4gIH07XG5cbiAgcmV0dXJuIHBhcnRpdGlvbjtcbn1cbiIsImltcG9ydCB7cmVxdWlyZWR9IGZyb20gXCIuL2FjY2Vzc29yc1wiO1xuaW1wb3J0IHtOb2RlLCBjb21wdXRlSGVpZ2h0fSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXhcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiLCAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cbiAgICBwcmVyb290ID0ge2RlcHRoOiAtMX0sXG4gICAgYW1iaWd1b3VzID0ge307XG5cbmZ1bmN0aW9uIGRlZmF1bHRJZChkKSB7XG4gIHJldHVybiBkLmlkO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0UGFyZW50SWQoZCkge1xuICByZXR1cm4gZC5wYXJlbnRJZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBpZCA9IGRlZmF1bHRJZCxcbiAgICAgIHBhcmVudElkID0gZGVmYXVsdFBhcmVudElkO1xuXG4gIGZ1bmN0aW9uIHN0cmF0aWZ5KGRhdGEpIHtcbiAgICB2YXIgZCxcbiAgICAgICAgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICByb290LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIG5vZGUsXG4gICAgICAgIG5vZGVzID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBub2RlSWQsXG4gICAgICAgIG5vZGVLZXksXG4gICAgICAgIG5vZGVCeUtleSA9IHt9O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZCA9IGRhdGFbaV0sIG5vZGUgPSBub2Rlc1tpXSA9IG5ldyBOb2RlKGQpO1xuICAgICAgaWYgKChub2RlSWQgPSBpZChkLCBpLCBkYXRhKSkgIT0gbnVsbCAmJiAobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgIG5vZGVLZXkgPSBrZXlQcmVmaXggKyAobm9kZS5pZCA9IG5vZGVJZCk7XG4gICAgICAgIG5vZGVCeUtleVtub2RlS2V5XSA9IG5vZGVLZXkgaW4gbm9kZUJ5S2V5ID8gYW1iaWd1b3VzIDogbm9kZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBub2RlID0gbm9kZXNbaV0sIG5vZGVJZCA9IHBhcmVudElkKGRhdGFbaV0sIGksIGRhdGEpO1xuICAgICAgaWYgKG5vZGVJZCA9PSBudWxsIHx8ICEobm9kZUlkICs9IFwiXCIpKSB7XG4gICAgICAgIGlmIChyb290KSB0aHJvdyBuZXcgRXJyb3IoXCJtdWx0aXBsZSByb290c1wiKTtcbiAgICAgICAgcm9vdCA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBub2RlQnlLZXlba2V5UHJlZml4ICsgbm9kZUlkXTtcbiAgICAgICAgaWYgKCFwYXJlbnQpIHRocm93IG5ldyBFcnJvcihcIm1pc3Npbmc6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgaWYgKHBhcmVudCA9PT0gYW1iaWd1b3VzKSB0aHJvdyBuZXcgRXJyb3IoXCJhbWJpZ3VvdXM6IFwiICsgbm9kZUlkKTtcbiAgICAgICAgaWYgKHBhcmVudC5jaGlsZHJlbikgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGVsc2UgcGFyZW50LmNoaWxkcmVuID0gW25vZGVdO1xuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJvb3QpIHRocm93IG5ldyBFcnJvcihcIm5vIHJvb3RcIik7XG4gICAgcm9vdC5wYXJlbnQgPSBwcmVyb290O1xuICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7IG5vZGUuZGVwdGggPSBub2RlLnBhcmVudC5kZXB0aCArIDE7IC0tbjsgfSkuZWFjaEJlZm9yZShjb21wdXRlSGVpZ2h0KTtcbiAgICByb290LnBhcmVudCA9IG51bGw7XG4gICAgaWYgKG4gPiAwKSB0aHJvdyBuZXcgRXJyb3IoXCJjeWNsZVwiKTtcblxuICAgIHJldHVybiByb290O1xuICB9XG5cbiAgc3RyYXRpZnkuaWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogaWQ7XG4gIH07XG5cbiAgc3RyYXRpZnkucGFyZW50SWQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFyZW50SWQgPSByZXF1aXJlZCh4KSwgc3RyYXRpZnkpIDogcGFyZW50SWQ7XG4gIH07XG5cbiAgcmV0dXJuIHN0cmF0aWZ5O1xufVxuIiwiaW1wb3J0IHtOb2RlfSBmcm9tIFwiLi9oaWVyYXJjaHkvaW5kZXhcIjtcblxuZnVuY3Rpb24gZGVmYXVsdFNlcGFyYXRpb24oYSwgYikge1xuICByZXR1cm4gYS5wYXJlbnQgPT09IGIucGFyZW50ID8gMSA6IDI7XG59XG5cbi8vIGZ1bmN0aW9uIHJhZGlhbFNlcGFyYXRpb24oYSwgYikge1xuLy8gICByZXR1cm4gKGEucGFyZW50ID09PSBiLnBhcmVudCA/IDEgOiAyKSAvIGEuZGVwdGg7XG4vLyB9XG5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgbGVmdCBjb250b3VyIG9mIGEgc3VidHJlZSAob3Jcbi8vIHN1YmZvcmVzdCkuIEl0IHJldHVybnMgdGhlIHN1Y2Nlc3NvciBvZiB2IG9uIHRoaXMgY29udG91ci4gVGhpcyBzdWNjZXNzb3IgaXNcbi8vIGVpdGhlciBnaXZlbiBieSB0aGUgbGVmdG1vc3QgY2hpbGQgb2YgdiBvciBieSB0aGUgdGhyZWFkIG9mIHYuIFRoZSBmdW5jdGlvblxuLy8gcmV0dXJucyBudWxsIGlmIGFuZCBvbmx5IGlmIHYgaXMgb24gdGhlIGhpZ2hlc3QgbGV2ZWwgb2YgaXRzIHN1YnRyZWUuXG5mdW5jdGlvbiBuZXh0TGVmdCh2KSB7XG4gIHZhciBjaGlsZHJlbiA9IHYuY2hpbGRyZW47XG4gIHJldHVybiBjaGlsZHJlbiA/IGNoaWxkcmVuWzBdIDogdi50O1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIHdvcmtzIGFuYWxvZ291c2x5IHRvIG5leHRMZWZ0LlxuZnVuY3Rpb24gbmV4dFJpZ2h0KHYpIHtcbiAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbjtcbiAgcmV0dXJuIGNoaWxkcmVuID8gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiB2LnQ7XG59XG5cbi8vIFNoaWZ0cyB0aGUgY3VycmVudCBzdWJ0cmVlIHJvb3RlZCBhdCB3Ky4gVGhpcyBpcyBkb25lIGJ5IGluY3JlYXNpbmdcbi8vIHByZWxpbSh3KykgYW5kIG1vZCh3KykgYnkgc2hpZnQuXG5mdW5jdGlvbiBtb3ZlU3VidHJlZSh3bSwgd3AsIHNoaWZ0KSB7XG4gIHZhciBjaGFuZ2UgPSBzaGlmdCAvICh3cC5pIC0gd20uaSk7XG4gIHdwLmMgLT0gY2hhbmdlO1xuICB3cC5zICs9IHNoaWZ0O1xuICB3bS5jICs9IGNoYW5nZTtcbiAgd3AueiArPSBzaGlmdDtcbiAgd3AubSArPSBzaGlmdDtcbn1cblxuLy8gQWxsIG90aGVyIHNoaWZ0cywgYXBwbGllZCB0byB0aGUgc21hbGxlciBzdWJ0cmVlcyBiZXR3ZWVuIHctIGFuZCB3KywgYXJlXG4vLyBwZXJmb3JtZWQgYnkgdGhpcyBmdW5jdGlvbi4gVG8gcHJlcGFyZSB0aGUgc2hpZnRzLCB3ZSBoYXZlIHRvIGFkanVzdFxuLy8gY2hhbmdlKHcrKSwgc2hpZnQodyspLCBhbmQgY2hhbmdlKHctKS5cbmZ1bmN0aW9uIGV4ZWN1dGVTaGlmdHModikge1xuICB2YXIgc2hpZnQgPSAwLFxuICAgICAgY2hhbmdlID0gMCxcbiAgICAgIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgIGkgPSBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICB3O1xuICB3aGlsZSAoLS1pID49IDApIHtcbiAgICB3ID0gY2hpbGRyZW5baV07XG4gICAgdy56ICs9IHNoaWZ0O1xuICAgIHcubSArPSBzaGlmdDtcbiAgICBzaGlmdCArPSB3LnMgKyAoY2hhbmdlICs9IHcuYyk7XG4gIH1cbn1cblxuLy8gSWYgdmkt4oCZcyBhbmNlc3RvciBpcyBhIHNpYmxpbmcgb2YgdiwgcmV0dXJucyB2aS3igJlzIGFuY2VzdG9yLiBPdGhlcndpc2UsXG4vLyByZXR1cm5zIHRoZSBzcGVjaWZpZWQgKGRlZmF1bHQpIGFuY2VzdG9yLlxuZnVuY3Rpb24gbmV4dEFuY2VzdG9yKHZpbSwgdiwgYW5jZXN0b3IpIHtcbiAgcmV0dXJuIHZpbS5hLnBhcmVudCA9PT0gdi5wYXJlbnQgPyB2aW0uYSA6IGFuY2VzdG9yO1xufVxuXG5mdW5jdGlvbiBUcmVlTm9kZShub2RlLCBpKSB7XG4gIHRoaXMuXyA9IG5vZGU7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgdGhpcy5jaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuQSA9IG51bGw7IC8vIGRlZmF1bHQgYW5jZXN0b3JcbiAgdGhpcy5hID0gdGhpczsgLy8gYW5jZXN0b3JcbiAgdGhpcy56ID0gMDsgLy8gcHJlbGltXG4gIHRoaXMubSA9IDA7IC8vIG1vZFxuICB0aGlzLmMgPSAwOyAvLyBjaGFuZ2VcbiAgdGhpcy5zID0gMDsgLy8gc2hpZnRcbiAgdGhpcy50ID0gbnVsbDsgLy8gdGhyZWFkXG4gIHRoaXMuaSA9IGk7IC8vIG51bWJlclxufVxuXG5UcmVlTm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE5vZGUucHJvdG90eXBlKTtcblxuZnVuY3Rpb24gdHJlZVJvb3Qocm9vdCkge1xuICB2YXIgdHJlZSA9IG5ldyBUcmVlTm9kZShyb290LCAwKSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlcyA9IFt0cmVlXSxcbiAgICAgIGNoaWxkLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBpLFxuICAgICAgbjtcblxuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgaWYgKGNoaWxkcmVuID0gbm9kZS5fLmNoaWxkcmVuKSB7XG4gICAgICBub2RlLmNoaWxkcmVuID0gbmV3IEFycmF5KG4gPSBjaGlsZHJlbi5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIG5vZGVzLnB1c2goY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldID0gbmV3IFRyZWVOb2RlKGNoaWxkcmVuW2ldLCBpKSk7XG4gICAgICAgIGNoaWxkLnBhcmVudCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKHRyZWUucGFyZW50ID0gbmV3IFRyZWVOb2RlKG51bGwsIDApKS5jaGlsZHJlbiA9IFt0cmVlXTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbi8vIE5vZGUtbGluayB0cmVlIGRpYWdyYW0gdXNpbmcgdGhlIFJlaW5nb2xkLVRpbGZvcmQgXCJ0aWR5XCIgYWxnb3JpdGhtXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHNlcGFyYXRpb24gPSBkZWZhdWx0U2VwYXJhdGlvbixcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIG5vZGVTaXplID0gbnVsbDtcblxuICBmdW5jdGlvbiB0cmVlKHJvb3QpIHtcbiAgICB2YXIgdCA9IHRyZWVSb290KHJvb3QpO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgbGF5b3V0IHVzaW5nIEJ1Y2hoZWltIGV0IGFsLuKAmXMgYWxnb3JpdGhtLlxuICAgIHQuZWFjaEFmdGVyKGZpcnN0V2FsayksIHQucGFyZW50Lm0gPSAtdC56O1xuICAgIHQuZWFjaEJlZm9yZShzZWNvbmRXYWxrKTtcblxuICAgIC8vIElmIGEgZml4ZWQgbm9kZSBzaXplIGlzIHNwZWNpZmllZCwgc2NhbGUgeCBhbmQgeS5cbiAgICBpZiAobm9kZVNpemUpIHJvb3QuZWFjaEJlZm9yZShzaXplTm9kZSk7XG5cbiAgICAvLyBJZiBhIGZpeGVkIHRyZWUgc2l6ZSBpcyBzcGVjaWZpZWQsIHNjYWxlIHggYW5kIHkgYmFzZWQgb24gdGhlIGV4dGVudC5cbiAgICAvLyBDb21wdXRlIHRoZSBsZWZ0LW1vc3QsIHJpZ2h0LW1vc3QsIGFuZCBkZXB0aC1tb3N0IG5vZGVzIGZvciBleHRlbnRzLlxuICAgIGVsc2Uge1xuICAgICAgdmFyIGxlZnQgPSByb290LFxuICAgICAgICAgIHJpZ2h0ID0gcm9vdCxcbiAgICAgICAgICBib3R0b20gPSByb290O1xuICAgICAgcm9vdC5lYWNoQmVmb3JlKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUueCA8IGxlZnQueCkgbGVmdCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLnggPiByaWdodC54KSByaWdodCA9IG5vZGU7XG4gICAgICAgIGlmIChub2RlLmRlcHRoID4gYm90dG9tLmRlcHRoKSBib3R0b20gPSBub2RlO1xuICAgICAgfSk7XG4gICAgICB2YXIgcyA9IGxlZnQgPT09IHJpZ2h0ID8gMSA6IHNlcGFyYXRpb24obGVmdCwgcmlnaHQpIC8gMixcbiAgICAgICAgICB0eCA9IHMgLSBsZWZ0LngsXG4gICAgICAgICAga3ggPSBkeCAvIChyaWdodC54ICsgcyArIHR4KSxcbiAgICAgICAgICBreSA9IGR5IC8gKGJvdHRvbS5kZXB0aCB8fCAxKTtcbiAgICAgIHJvb3QuZWFjaEJlZm9yZShmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIG5vZGUueCA9IChub2RlLnggKyB0eCkgKiBreDtcbiAgICAgICAgbm9kZS55ID0gbm9kZS5kZXB0aCAqIGt5O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvb3Q7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhIHByZWxpbWluYXJ5IHgtY29vcmRpbmF0ZSBmb3Igdi4gQmVmb3JlIHRoYXQsIEZJUlNUIFdBTEsgaXNcbiAgLy8gYXBwbGllZCByZWN1cnNpdmVseSB0byB0aGUgY2hpbGRyZW4gb2YgdiwgYXMgd2VsbCBhcyB0aGUgZnVuY3Rpb25cbiAgLy8gQVBQT1JUSU9OLiBBZnRlciBzcGFjaW5nIG91dCB0aGUgY2hpbGRyZW4gYnkgY2FsbGluZyBFWEVDVVRFIFNISUZUUywgdGhlXG4gIC8vIG5vZGUgdiBpcyBwbGFjZWQgdG8gdGhlIG1pZHBvaW50IG9mIGl0cyBvdXRlcm1vc3QgY2hpbGRyZW4uXG4gIGZ1bmN0aW9uIGZpcnN0V2Fsayh2KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdi5jaGlsZHJlbixcbiAgICAgICAgc2libGluZ3MgPSB2LnBhcmVudC5jaGlsZHJlbixcbiAgICAgICAgdyA9IHYuaSA/IHNpYmxpbmdzW3YuaSAtIDFdIDogbnVsbDtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgIGV4ZWN1dGVTaGlmdHModik7XG4gICAgICB2YXIgbWlkcG9pbnQgPSAoY2hpbGRyZW5bMF0ueiArIGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLnopIC8gMjtcbiAgICAgIGlmICh3KSB7XG4gICAgICAgIHYueiA9IHcueiArIHNlcGFyYXRpb24odi5fLCB3Ll8pO1xuICAgICAgICB2Lm0gPSB2LnogLSBtaWRwb2ludDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHYueiA9IG1pZHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodykge1xuICAgICAgdi56ID0gdy56ICsgc2VwYXJhdGlvbih2Ll8sIHcuXyk7XG4gICAgfVxuICAgIHYucGFyZW50LkEgPSBhcHBvcnRpb24odiwgdywgdi5wYXJlbnQuQSB8fCBzaWJsaW5nc1swXSk7XG4gIH1cblxuICAvLyBDb21wdXRlcyBhbGwgcmVhbCB4LWNvb3JkaW5hdGVzIGJ5IHN1bW1pbmcgdXAgdGhlIG1vZGlmaWVycyByZWN1cnNpdmVseS5cbiAgZnVuY3Rpb24gc2Vjb25kV2Fsayh2KSB7XG4gICAgdi5fLnggPSB2LnogKyB2LnBhcmVudC5tO1xuICAgIHYubSArPSB2LnBhcmVudC5tO1xuICB9XG5cbiAgLy8gVGhlIGNvcmUgb2YgdGhlIGFsZ29yaXRobS4gSGVyZSwgYSBuZXcgc3VidHJlZSBpcyBjb21iaW5lZCB3aXRoIHRoZVxuICAvLyBwcmV2aW91cyBzdWJ0cmVlcy4gVGhyZWFkcyBhcmUgdXNlZCB0byB0cmF2ZXJzZSB0aGUgaW5zaWRlIGFuZCBvdXRzaWRlXG4gIC8vIGNvbnRvdXJzIG9mIHRoZSBsZWZ0IGFuZCByaWdodCBzdWJ0cmVlIHVwIHRvIHRoZSBoaWdoZXN0IGNvbW1vbiBsZXZlbC4gVGhlXG4gIC8vIHZlcnRpY2VzIHVzZWQgZm9yIHRoZSB0cmF2ZXJzYWxzIGFyZSB2aSssIHZpLSwgdm8tLCBhbmQgdm8rLCB3aGVyZSB0aGVcbiAgLy8gc3VwZXJzY3JpcHQgbyBtZWFucyBvdXRzaWRlIGFuZCBpIG1lYW5zIGluc2lkZSwgdGhlIHN1YnNjcmlwdCAtIG1lYW5zIGxlZnRcbiAgLy8gc3VidHJlZSBhbmQgKyBtZWFucyByaWdodCBzdWJ0cmVlLiBGb3Igc3VtbWluZyB1cCB0aGUgbW9kaWZpZXJzIGFsb25nIHRoZVxuICAvLyBjb250b3VyLCB3ZSB1c2UgcmVzcGVjdGl2ZSB2YXJpYWJsZXMgc2krLCBzaS0sIHNvLSwgYW5kIHNvKy4gV2hlbmV2ZXIgdHdvXG4gIC8vIG5vZGVzIG9mIHRoZSBpbnNpZGUgY29udG91cnMgY29uZmxpY3QsIHdlIGNvbXB1dGUgdGhlIGxlZnQgb25lIG9mIHRoZVxuICAvLyBncmVhdGVzdCB1bmNvbW1vbiBhbmNlc3RvcnMgdXNpbmcgdGhlIGZ1bmN0aW9uIEFOQ0VTVE9SIGFuZCBjYWxsIE1PVkVcbiAgLy8gU1VCVFJFRSB0byBzaGlmdCB0aGUgc3VidHJlZSBhbmQgcHJlcGFyZSB0aGUgc2hpZnRzIG9mIHNtYWxsZXIgc3VidHJlZXMuXG4gIC8vIEZpbmFsbHksIHdlIGFkZCBhIG5ldyB0aHJlYWQgKGlmIG5lY2Vzc2FyeSkuXG4gIGZ1bmN0aW9uIGFwcG9ydGlvbih2LCB3LCBhbmNlc3Rvcikge1xuICAgIGlmICh3KSB7XG4gICAgICB2YXIgdmlwID0gdixcbiAgICAgICAgICB2b3AgPSB2LFxuICAgICAgICAgIHZpbSA9IHcsXG4gICAgICAgICAgdm9tID0gdmlwLnBhcmVudC5jaGlsZHJlblswXSxcbiAgICAgICAgICBzaXAgPSB2aXAubSxcbiAgICAgICAgICBzb3AgPSB2b3AubSxcbiAgICAgICAgICBzaW0gPSB2aW0ubSxcbiAgICAgICAgICBzb20gPSB2b20ubSxcbiAgICAgICAgICBzaGlmdDtcbiAgICAgIHdoaWxlICh2aW0gPSBuZXh0UmlnaHQodmltKSwgdmlwID0gbmV4dExlZnQodmlwKSwgdmltICYmIHZpcCkge1xuICAgICAgICB2b20gPSBuZXh0TGVmdCh2b20pO1xuICAgICAgICB2b3AgPSBuZXh0UmlnaHQodm9wKTtcbiAgICAgICAgdm9wLmEgPSB2O1xuICAgICAgICBzaGlmdCA9IHZpbS56ICsgc2ltIC0gdmlwLnogLSBzaXAgKyBzZXBhcmF0aW9uKHZpbS5fLCB2aXAuXyk7XG4gICAgICAgIGlmIChzaGlmdCA+IDApIHtcbiAgICAgICAgICBtb3ZlU3VidHJlZShuZXh0QW5jZXN0b3IodmltLCB2LCBhbmNlc3RvciksIHYsIHNoaWZ0KTtcbiAgICAgICAgICBzaXAgKz0gc2hpZnQ7XG4gICAgICAgICAgc29wICs9IHNoaWZ0O1xuICAgICAgICB9XG4gICAgICAgIHNpbSArPSB2aW0ubTtcbiAgICAgICAgc2lwICs9IHZpcC5tO1xuICAgICAgICBzb20gKz0gdm9tLm07XG4gICAgICAgIHNvcCArPSB2b3AubTtcbiAgICAgIH1cbiAgICAgIGlmICh2aW0gJiYgIW5leHRSaWdodCh2b3ApKSB7XG4gICAgICAgIHZvcC50ID0gdmltO1xuICAgICAgICB2b3AubSArPSBzaW0gLSBzb3A7XG4gICAgICB9XG4gICAgICBpZiAodmlwICYmICFuZXh0TGVmdCh2b20pKSB7XG4gICAgICAgIHZvbS50ID0gdmlwO1xuICAgICAgICB2b20ubSArPSBzaXAgLSBzb207XG4gICAgICAgIGFuY2VzdG9yID0gdjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuY2VzdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gc2l6ZU5vZGUobm9kZSkge1xuICAgIG5vZGUueCAqPSBkeDtcbiAgICBub2RlLnkgPSBub2RlLmRlcHRoICogZHk7XG4gIH1cblxuICB0cmVlLnNlcGFyYXRpb24gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc2VwYXJhdGlvbiA9IHgsIHRyZWUpIDogc2VwYXJhdGlvbjtcbiAgfTtcblxuICB0cmVlLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSBmYWxzZSwgZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZSkgOiAobm9kZVNpemUgPyBudWxsIDogW2R4LCBkeV0pO1xuICB9O1xuXG4gIHRyZWUubm9kZVNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobm9kZVNpemUgPSB0cnVlLCBkeCA9ICt4WzBdLCBkeSA9ICt4WzFdLCB0cmVlKSA6IChub2RlU2l6ZSA/IFtkeCwgZHldIDogbnVsbCk7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIG5vZGUsXG4gICAgICBpID0gLTEsXG4gICAgICBuID0gbm9kZXMubGVuZ3RoLFxuICAgICAgayA9IHBhcmVudC52YWx1ZSAmJiAoeTEgLSB5MCkgLyBwYXJlbnQudmFsdWU7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBub2RlID0gbm9kZXNbaV0sIG5vZGUueDAgPSB4MCwgbm9kZS54MSA9IHgxO1xuICAgIG5vZGUueTAgPSB5MCwgbm9kZS55MSA9IHkwICs9IG5vZGUudmFsdWUgKiBrO1xuICB9XG59XG4iLCJpbXBvcnQgdHJlZW1hcERpY2UgZnJvbSBcIi4vZGljZVwiO1xuaW1wb3J0IHRyZWVtYXBTbGljZSBmcm9tIFwiLi9zbGljZVwiO1xuXG5leHBvcnQgdmFyIHBoaSA9ICgxICsgTWF0aC5zcXJ0KDUpKSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciByb3dzID0gW10sXG4gICAgICBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIHJvdyxcbiAgICAgIG5vZGVWYWx1ZSxcbiAgICAgIGkwID0gMCxcbiAgICAgIGkxID0gMCxcbiAgICAgIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBkeCwgZHksXG4gICAgICB2YWx1ZSA9IHBhcmVudC52YWx1ZSxcbiAgICAgIHN1bVZhbHVlLFxuICAgICAgbWluVmFsdWUsXG4gICAgICBtYXhWYWx1ZSxcbiAgICAgIG5ld1JhdGlvLFxuICAgICAgbWluUmF0aW8sXG4gICAgICBhbHBoYSxcbiAgICAgIGJldGE7XG5cbiAgd2hpbGUgKGkwIDwgbikge1xuICAgIGR4ID0geDEgLSB4MCwgZHkgPSB5MSAtIHkwO1xuXG4gICAgLy8gRmluZCB0aGUgbmV4dCBub24tZW1wdHkgbm9kZS5cbiAgICBkbyBzdW1WYWx1ZSA9IG5vZGVzW2kxKytdLnZhbHVlOyB3aGlsZSAoIXN1bVZhbHVlICYmIGkxIDwgbik7XG4gICAgbWluVmFsdWUgPSBtYXhWYWx1ZSA9IHN1bVZhbHVlO1xuICAgIGFscGhhID0gTWF0aC5tYXgoZHkgLyBkeCwgZHggLyBkeSkgLyAodmFsdWUgKiByYXRpbyk7XG4gICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICBtaW5SYXRpbyA9IE1hdGgubWF4KG1heFZhbHVlIC8gYmV0YSwgYmV0YSAvIG1pblZhbHVlKTtcblxuICAgIC8vIEtlZXAgYWRkaW5nIG5vZGVzIHdoaWxlIHRoZSBhc3BlY3QgcmF0aW8gbWFpbnRhaW5zIG9yIGltcHJvdmVzLlxuICAgIGZvciAoOyBpMSA8IG47ICsraTEpIHtcbiAgICAgIHN1bVZhbHVlICs9IG5vZGVWYWx1ZSA9IG5vZGVzW2kxXS52YWx1ZTtcbiAgICAgIGlmIChub2RlVmFsdWUgPCBtaW5WYWx1ZSkgbWluVmFsdWUgPSBub2RlVmFsdWU7XG4gICAgICBpZiAobm9kZVZhbHVlID4gbWF4VmFsdWUpIG1heFZhbHVlID0gbm9kZVZhbHVlO1xuICAgICAgYmV0YSA9IHN1bVZhbHVlICogc3VtVmFsdWUgKiBhbHBoYTtcbiAgICAgIG5ld1JhdGlvID0gTWF0aC5tYXgobWF4VmFsdWUgLyBiZXRhLCBiZXRhIC8gbWluVmFsdWUpO1xuICAgICAgaWYgKG5ld1JhdGlvID4gbWluUmF0aW8pIHsgc3VtVmFsdWUgLT0gbm9kZVZhbHVlOyBicmVhazsgfVxuICAgICAgbWluUmF0aW8gPSBuZXdSYXRpbztcbiAgICB9XG5cbiAgICAvLyBQb3NpdGlvbiBhbmQgcmVjb3JkIHRoZSByb3cgb3JpZW50YXRpb24uXG4gICAgcm93cy5wdXNoKHJvdyA9IHt2YWx1ZTogc3VtVmFsdWUsIGRpY2U6IGR4IDwgZHksIGNoaWxkcmVuOiBub2Rlcy5zbGljZShpMCwgaTEpfSk7XG4gICAgaWYgKHJvdy5kaWNlKSB0cmVlbWFwRGljZShyb3csIHgwLCB5MCwgeDEsIHZhbHVlID8geTAgKz0gZHkgKiBzdW1WYWx1ZSAvIHZhbHVlIDogeTEpO1xuICAgIGVsc2UgdHJlZW1hcFNsaWNlKHJvdywgeDAsIHkwLCB2YWx1ZSA/IHgwICs9IGR4ICogc3VtVmFsdWUgLyB2YWx1ZSA6IHgxLCB5MSk7XG4gICAgdmFsdWUgLT0gc3VtVmFsdWUsIGkwID0gaTE7XG4gIH1cblxuICByZXR1cm4gcm93cztcbn1cblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShyYXRpbykge1xuXG4gIGZ1bmN0aW9uIHNxdWFyaWZ5KHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBzcXVhcmlmeVJhdGlvKHJhdGlvLCBwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKTtcbiAgfVxuXG4gIHNxdWFyaWZ5LnJhdGlvID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBjdXN0b20oKHggPSAreCkgPiAxID8geCA6IDEpO1xuICB9O1xuXG4gIHJldHVybiBzcXVhcmlmeTtcbn0pKHBoaSk7XG4iLCJpbXBvcnQgcm91bmROb2RlIGZyb20gXCIuL3JvdW5kXCI7XG5pbXBvcnQgc3F1YXJpZnkgZnJvbSBcIi4vc3F1YXJpZnlcIjtcbmltcG9ydCB7cmVxdWlyZWR9IGZyb20gXCIuLi9hY2Nlc3NvcnNcIjtcbmltcG9ydCBjb25zdGFudCwge2NvbnN0YW50WmVyb30gZnJvbSBcIi4uL2NvbnN0YW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdGlsZSA9IHNxdWFyaWZ5LFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIGR4ID0gMSxcbiAgICAgIGR5ID0gMSxcbiAgICAgIHBhZGRpbmdTdGFjayA9IFswXSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IGNvbnN0YW50WmVybyxcbiAgICAgIHBhZGRpbmdUb3AgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nUmlnaHQgPSBjb25zdGFudFplcm8sXG4gICAgICBwYWRkaW5nQm90dG9tID0gY29uc3RhbnRaZXJvLFxuICAgICAgcGFkZGluZ0xlZnQgPSBjb25zdGFudFplcm87XG5cbiAgZnVuY3Rpb24gdHJlZW1hcChyb290KSB7XG4gICAgcm9vdC54MCA9XG4gICAgcm9vdC55MCA9IDA7XG4gICAgcm9vdC54MSA9IGR4O1xuICAgIHJvb3QueTEgPSBkeTtcbiAgICByb290LmVhY2hCZWZvcmUocG9zaXRpb25Ob2RlKTtcbiAgICBwYWRkaW5nU3RhY2sgPSBbMF07XG4gICAgaWYgKHJvdW5kKSByb290LmVhY2hCZWZvcmUocm91bmROb2RlKTtcbiAgICByZXR1cm4gcm9vdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uTm9kZShub2RlKSB7XG4gICAgdmFyIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aF0sXG4gICAgICAgIHgwID0gbm9kZS54MCArIHAsXG4gICAgICAgIHkwID0gbm9kZS55MCArIHAsXG4gICAgICAgIHgxID0gbm9kZS54MSAtIHAsXG4gICAgICAgIHkxID0gbm9kZS55MSAtIHA7XG4gICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgIGlmICh5MSA8IHkwKSB5MCA9IHkxID0gKHkwICsgeTEpIC8gMjtcbiAgICBub2RlLngwID0geDA7XG4gICAgbm9kZS55MCA9IHkwO1xuICAgIG5vZGUueDEgPSB4MTtcbiAgICBub2RlLnkxID0geTE7XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIHAgPSBwYWRkaW5nU3RhY2tbbm9kZS5kZXB0aCArIDFdID0gcGFkZGluZ0lubmVyKG5vZGUpIC8gMjtcbiAgICAgIHgwICs9IHBhZGRpbmdMZWZ0KG5vZGUpIC0gcDtcbiAgICAgIHkwICs9IHBhZGRpbmdUb3Aobm9kZSkgLSBwO1xuICAgICAgeDEgLT0gcGFkZGluZ1JpZ2h0KG5vZGUpIC0gcDtcbiAgICAgIHkxIC09IHBhZGRpbmdCb3R0b20obm9kZSkgLSBwO1xuICAgICAgaWYgKHgxIDwgeDApIHgwID0geDEgPSAoeDAgKyB4MSkgLyAyO1xuICAgICAgaWYgKHkxIDwgeTApIHkwID0geTEgPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgdGlsZShub2RlLCB4MCwgeTAsIHgxLCB5MSk7XG4gICAgfVxuICB9XG5cbiAgdHJlZW1hcC5yb3VuZCA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEheCwgdHJlZW1hcCkgOiByb3VuZDtcbiAgfTtcblxuICB0cmVlbWFwLnNpemUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHggPSAreFswXSwgZHkgPSAreFsxXSwgdHJlZW1hcCkgOiBbZHgsIGR5XTtcbiAgfTtcblxuICB0cmVlbWFwLnRpbGUgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGlsZSA9IHJlcXVpcmVkKHgpLCB0cmVlbWFwKSA6IHRpbGU7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gdHJlZW1hcC5wYWRkaW5nSW5uZXIoeCkucGFkZGluZ091dGVyKHgpIDogdHJlZW1hcC5wYWRkaW5nSW5uZXIoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geCA6IGNvbnN0YW50KCt4KSwgdHJlZW1hcCkgOiBwYWRkaW5nSW5uZXI7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyB0cmVlbWFwLnBhZGRpbmdUb3AoeCkucGFkZGluZ1JpZ2h0KHgpLnBhZGRpbmdCb3R0b20oeCkucGFkZGluZ0xlZnQoeCkgOiB0cmVlbWFwLnBhZGRpbmdUb3AoKTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdUb3AgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1RvcCA9IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCIgPyB4IDogY29uc3RhbnQoK3gpLCB0cmVlbWFwKSA6IHBhZGRpbmdUb3A7XG4gIH07XG5cbiAgdHJlZW1hcC5wYWRkaW5nUmlnaHQgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ1JpZ2h0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ1JpZ2h0O1xuICB9O1xuXG4gIHRyZWVtYXAucGFkZGluZ0JvdHRvbSA9IGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nQm90dG9tID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0JvdHRvbTtcbiAgfTtcblxuICB0cmVlbWFwLnBhZGRpbmdMZWZ0ID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBhZGRpbmdMZWZ0ID0gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IHggOiBjb25zdGFudCgreCksIHRyZWVtYXApIDogcGFkZGluZ0xlZnQ7XG4gIH07XG5cbiAgcmV0dXJuIHRyZWVtYXA7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBub2RlcyA9IHBhcmVudC5jaGlsZHJlbixcbiAgICAgIGksIG4gPSBub2Rlcy5sZW5ndGgsXG4gICAgICBzdW0sIHN1bXMgPSBuZXcgQXJyYXkobiArIDEpO1xuXG4gIGZvciAoc3Vtc1swXSA9IHN1bSA9IGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgc3Vtc1tpICsgMV0gPSBzdW0gKz0gbm9kZXNbaV0udmFsdWU7XG4gIH1cblxuICBwYXJ0aXRpb24oMCwgbiwgcGFyZW50LnZhbHVlLCB4MCwgeTAsIHgxLCB5MSk7XG5cbiAgZnVuY3Rpb24gcGFydGl0aW9uKGksIGosIHZhbHVlLCB4MCwgeTAsIHgxLCB5MSkge1xuICAgIGlmIChpID49IGogLSAxKSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgbm9kZS54MCA9IHgwLCBub2RlLnkwID0geTA7XG4gICAgICBub2RlLngxID0geDEsIG5vZGUueTEgPSB5MTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVPZmZzZXQgPSBzdW1zW2ldLFxuICAgICAgICB2YWx1ZVRhcmdldCA9ICh2YWx1ZSAvIDIpICsgdmFsdWVPZmZzZXQsXG4gICAgICAgIGsgPSBpICsgMSxcbiAgICAgICAgaGkgPSBqIC0gMTtcblxuICAgIHdoaWxlIChrIDwgaGkpIHtcbiAgICAgIHZhciBtaWQgPSBrICsgaGkgPj4+IDE7XG4gICAgICBpZiAoc3Vtc1ttaWRdIDwgdmFsdWVUYXJnZXQpIGsgPSBtaWQgKyAxO1xuICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICB9XG5cbiAgICBpZiAoKHZhbHVlVGFyZ2V0IC0gc3Vtc1trIC0gMV0pIDwgKHN1bXNba10gLSB2YWx1ZVRhcmdldCkgJiYgaSArIDEgPCBrKSAtLWs7XG5cbiAgICB2YXIgdmFsdWVMZWZ0ID0gc3Vtc1trXSAtIHZhbHVlT2Zmc2V0LFxuICAgICAgICB2YWx1ZVJpZ2h0ID0gdmFsdWUgLSB2YWx1ZUxlZnQ7XG5cbiAgICBpZiAoKHgxIC0geDApID4gKHkxIC0geTApKSB7XG4gICAgICB2YXIgeGsgPSAoeDAgKiB2YWx1ZVJpZ2h0ICsgeDEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHhrLCB5MSk7XG4gICAgICBwYXJ0aXRpb24oaywgaiwgdmFsdWVSaWdodCwgeGssIHkwLCB4MSwgeTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgeWsgPSAoeTAgKiB2YWx1ZVJpZ2h0ICsgeTEgKiB2YWx1ZUxlZnQpIC8gdmFsdWU7XG4gICAgICBwYXJ0aXRpb24oaSwgaywgdmFsdWVMZWZ0LCB4MCwgeTAsIHgxLCB5ayk7XG4gICAgICBwYXJ0aXRpb24oaywgaiwgdmFsdWVSaWdodCwgeDAsIHlrLCB4MSwgeTEpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGRpY2UgZnJvbSBcIi4vZGljZVwiO1xuaW1wb3J0IHNsaWNlIGZyb20gXCIuL3NsaWNlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgKHBhcmVudC5kZXB0aCAmIDEgPyBzbGljZSA6IGRpY2UpKHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xufVxuIiwiaW1wb3J0IHRyZWVtYXBEaWNlIGZyb20gXCIuL2RpY2VcIjtcbmltcG9ydCB0cmVlbWFwU2xpY2UgZnJvbSBcIi4vc2xpY2VcIjtcbmltcG9ydCB7cGhpLCBzcXVhcmlmeVJhdGlvfSBmcm9tIFwiLi9zcXVhcmlmeVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHJhdGlvKSB7XG5cbiAgZnVuY3Rpb24gcmVzcXVhcmlmeShwYXJlbnQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gICAgaWYgKChyb3dzID0gcGFyZW50Ll9zcXVhcmlmeSkgJiYgKHJvd3MucmF0aW8gPT09IHJhdGlvKSkge1xuICAgICAgdmFyIHJvd3MsXG4gICAgICAgICAgcm93LFxuICAgICAgICAgIG5vZGVzLFxuICAgICAgICAgIGksXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG4sXG4gICAgICAgICAgbSA9IHJvd3MubGVuZ3RoLFxuICAgICAgICAgIHZhbHVlID0gcGFyZW50LnZhbHVlO1xuXG4gICAgICB3aGlsZSAoKytqIDwgbSkge1xuICAgICAgICByb3cgPSByb3dzW2pdLCBub2RlcyA9IHJvdy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChpID0gcm93LnZhbHVlID0gMCwgbiA9IG5vZGVzLmxlbmd0aDsgaSA8IG47ICsraSkgcm93LnZhbHVlICs9IG5vZGVzW2ldLnZhbHVlO1xuICAgICAgICBpZiAocm93LmRpY2UpIHRyZWVtYXBEaWNlKHJvdywgeDAsIHkwLCB4MSwgeTAgKz0gKHkxIC0geTApICogcm93LnZhbHVlIC8gdmFsdWUpO1xuICAgICAgICBlbHNlIHRyZWVtYXBTbGljZShyb3csIHgwLCB5MCwgeDAgKz0gKHgxIC0geDApICogcm93LnZhbHVlIC8gdmFsdWUsIHkxKTtcbiAgICAgICAgdmFsdWUgLT0gcm93LnZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnQuX3NxdWFyaWZ5ID0gcm93cyA9IHNxdWFyaWZ5UmF0aW8ocmF0aW8sIHBhcmVudCwgeDAsIHkwLCB4MSwgeTEpO1xuICAgICAgcm93cy5yYXRpbyA9IHJhdGlvO1xuICAgIH1cbiAgfVxuXG4gIHJlc3F1YXJpZnkucmF0aW8gPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIGN1c3RvbSgoeCA9ICt4KSA+IDEgPyB4IDogMSk7XG4gIH07XG5cbiAgcmV0dXJuIHJlc3F1YXJpZnk7XG59KShwaGkpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgYSxcbiAgICAgIGIgPSBwb2x5Z29uW24gLSAxXSxcbiAgICAgIGFyZWEgPSAwO1xuXG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYSA9IGI7XG4gICAgYiA9IHBvbHlnb25baV07XG4gICAgYXJlYSArPSBhWzFdICogYlswXSAtIGFbMF0gKiBiWzFdO1xuICB9XG5cbiAgcmV0dXJuIGFyZWEgLyAyO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9seWdvbikge1xuICB2YXIgaSA9IC0xLFxuICAgICAgbiA9IHBvbHlnb24ubGVuZ3RoLFxuICAgICAgeCA9IDAsXG4gICAgICB5ID0gMCxcbiAgICAgIGEsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICBjLFxuICAgICAgayA9IDA7XG5cbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhID0gYjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICBrICs9IGMgPSBhWzBdICogYlsxXSAtIGJbMF0gKiBhWzFdO1xuICAgIHggKz0gKGFbMF0gKyBiWzBdKSAqIGM7XG4gICAgeSArPSAoYVsxXSArIGJbMV0pICogYztcbiAgfVxuXG4gIHJldHVybiBrICo9IDMsIFt4IC8gaywgeSAvIGtdO1xufVxuIiwiLy8gUmV0dXJucyB0aGUgMkQgY3Jvc3MgcHJvZHVjdCBvZiBBQiBhbmQgQUMgdmVjdG9ycywgaS5lLiwgdGhlIHotY29tcG9uZW50IG9mXG4vLyB0aGUgM0QgY3Jvc3MgcHJvZHVjdCBpbiBhIHF1YWRyYW50IEkgQ2FydGVzaWFuIGNvb3JkaW5hdGUgc3lzdGVtICgreCBpc1xuLy8gcmlnaHQsICt5IGlzIHVwKS4gUmV0dXJucyBhIHBvc2l0aXZlIHZhbHVlIGlmIEFCQyBpcyBjb3VudGVyLWNsb2Nrd2lzZSxcbi8vIG5lZ2F0aXZlIGlmIGNsb2Nrd2lzZSwgYW5kIHplcm8gaWYgdGhlIHBvaW50cyBhcmUgY29sbGluZWFyLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYykge1xuICByZXR1cm4gKGJbMF0gLSBhWzBdKSAqIChjWzFdIC0gYVsxXSkgLSAoYlsxXSAtIGFbMV0pICogKGNbMF0gLSBhWzBdKTtcbn1cbiIsImltcG9ydCBjcm9zcyBmcm9tIFwiLi9jcm9zc1wiO1xuXG5mdW5jdGlvbiBsZXhpY29ncmFwaGljT3JkZXIoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV07XG59XG5cbi8vIENvbXB1dGVzIHRoZSB1cHBlciBjb252ZXggaHVsbCBwZXIgdGhlIG1vbm90b25lIGNoYWluIGFsZ29yaXRobS5cbi8vIEFzc3VtZXMgcG9pbnRzLmxlbmd0aCA+PSAzLCBpcyBzb3J0ZWQgYnkgeCwgdW5pcXVlIGluIHkuXG4vLyBSZXR1cm5zIGFuIGFycmF5IG9mIGluZGljZXMgaW50byBwb2ludHMgaW4gbGVmdC10by1yaWdodCBvcmRlci5cbmZ1bmN0aW9uIGNvbXB1dGVVcHBlckh1bGxJbmRleGVzKHBvaW50cykge1xuICB2YXIgbiA9IHBvaW50cy5sZW5ndGgsXG4gICAgICBpbmRleGVzID0gWzAsIDFdLFxuICAgICAgc2l6ZSA9IDI7XG5cbiAgZm9yICh2YXIgaSA9IDI7IGkgPCBuOyArK2kpIHtcbiAgICB3aGlsZSAoc2l6ZSA+IDEgJiYgY3Jvc3MocG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDJdXSwgcG9pbnRzW2luZGV4ZXNbc2l6ZSAtIDFdXSwgcG9pbnRzW2ldKSA8PSAwKSAtLXNpemU7XG4gICAgaW5kZXhlc1tzaXplKytdID0gaTtcbiAgfVxuXG4gIHJldHVybiBpbmRleGVzLnNsaWNlKDAsIHNpemUpOyAvLyByZW1vdmUgcG9wcGVkIHBvaW50c1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2ludHMpIHtcbiAgaWYgKChuID0gcG9pbnRzLmxlbmd0aCkgPCAzKSByZXR1cm4gbnVsbDtcblxuICB2YXIgaSxcbiAgICAgIG4sXG4gICAgICBzb3J0ZWRQb2ludHMgPSBuZXcgQXJyYXkobiksXG4gICAgICBmbGlwcGVkUG9pbnRzID0gbmV3IEFycmF5KG4pO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNvcnRlZFBvaW50c1tpXSA9IFsrcG9pbnRzW2ldWzBdLCArcG9pbnRzW2ldWzFdLCBpXTtcbiAgc29ydGVkUG9pbnRzLnNvcnQobGV4aWNvZ3JhcGhpY09yZGVyKTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgZmxpcHBlZFBvaW50c1tpXSA9IFtzb3J0ZWRQb2ludHNbaV1bMF0sIC1zb3J0ZWRQb2ludHNbaV1bMV1dO1xuXG4gIHZhciB1cHBlckluZGV4ZXMgPSBjb21wdXRlVXBwZXJIdWxsSW5kZXhlcyhzb3J0ZWRQb2ludHMpLFxuICAgICAgbG93ZXJJbmRleGVzID0gY29tcHV0ZVVwcGVySHVsbEluZGV4ZXMoZmxpcHBlZFBvaW50cyk7XG5cbiAgLy8gQ29uc3RydWN0IHRoZSBodWxsIHBvbHlnb24sIHJlbW92aW5nIHBvc3NpYmxlIGR1cGxpY2F0ZSBlbmRwb2ludHMuXG4gIHZhciBza2lwTGVmdCA9IGxvd2VySW5kZXhlc1swXSA9PT0gdXBwZXJJbmRleGVzWzBdLFxuICAgICAgc2tpcFJpZ2h0ID0gbG93ZXJJbmRleGVzW2xvd2VySW5kZXhlcy5sZW5ndGggLSAxXSA9PT0gdXBwZXJJbmRleGVzW3VwcGVySW5kZXhlcy5sZW5ndGggLSAxXSxcbiAgICAgIGh1bGwgPSBbXTtcblxuICAvLyBBZGQgdXBwZXIgaHVsbCBpbiByaWdodC10by1sIG9yZGVyLlxuICAvLyBUaGVuIGFkZCBsb3dlciBodWxsIGluIGxlZnQtdG8tcmlnaHQgb3JkZXIuXG4gIGZvciAoaSA9IHVwcGVySW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgaHVsbC5wdXNoKHBvaW50c1tzb3J0ZWRQb2ludHNbdXBwZXJJbmRleGVzW2ldXVsyXV0pO1xuICBmb3IgKGkgPSArc2tpcExlZnQ7IGkgPCBsb3dlckluZGV4ZXMubGVuZ3RoIC0gc2tpcFJpZ2h0OyArK2kpIGh1bGwucHVzaChwb2ludHNbc29ydGVkUG9pbnRzW2xvd2VySW5kZXhlc1tpXV1bMl1dKTtcblxuICByZXR1cm4gaHVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHBvbHlnb24sIHBvaW50KSB7XG4gIHZhciBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBwID0gcG9seWdvbltuIC0gMV0sXG4gICAgICB4ID0gcG9pbnRbMF0sIHkgPSBwb2ludFsxXSxcbiAgICAgIHgwID0gcFswXSwgeTAgPSBwWzFdLFxuICAgICAgeDEsIHkxLFxuICAgICAgaW5zaWRlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBwID0gcG9seWdvbltpXSwgeDEgPSBwWzBdLCB5MSA9IHBbMV07XG4gICAgaWYgKCgoeTEgPiB5KSAhPT0gKHkwID4geSkpICYmICh4IDwgKHgwIC0geDEpICogKHkgLSB5MSkgLyAoeTAgLSB5MSkgKyB4MSkpIGluc2lkZSA9ICFpbnNpZGU7XG4gICAgeDAgPSB4MSwgeTAgPSB5MTtcbiAgfVxuXG4gIHJldHVybiBpbnNpZGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uKSB7XG4gIHZhciBpID0gLTEsXG4gICAgICBuID0gcG9seWdvbi5sZW5ndGgsXG4gICAgICBiID0gcG9seWdvbltuIC0gMV0sXG4gICAgICB4YSxcbiAgICAgIHlhLFxuICAgICAgeGIgPSBiWzBdLFxuICAgICAgeWIgPSBiWzFdLFxuICAgICAgcGVyaW1ldGVyID0gMDtcblxuICB3aGlsZSAoKytpIDwgbikge1xuICAgIHhhID0geGI7XG4gICAgeWEgPSB5YjtcbiAgICBiID0gcG9seWdvbltpXTtcbiAgICB4YiA9IGJbMF07XG4gICAgeWIgPSBiWzFdO1xuICAgIHhhIC09IHhiO1xuICAgIHlhIC09IHliO1xuICAgIHBlcmltZXRlciArPSBNYXRoLnNxcnQoeGEgKiB4YSArIHlhICogeWEpO1xuICB9XG5cbiAgcmV0dXJuIHBlcmltZXRlcjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbn1cbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbVVuaWZvcm0oc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbVVuaWZvcm0obWluLCBtYXgpIHtcbiAgICBtaW4gPSBtaW4gPT0gbnVsbCA/IDAgOiArbWluO1xuICAgIG1heCA9IG1heCA9PSBudWxsID8gMSA6ICttYXg7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIG1heCA9IG1pbiwgbWluID0gMDtcbiAgICBlbHNlIG1heCAtPSBtaW47XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNvdXJjZSgpICogbWF4ICsgbWluO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Vbmlmb3JtLnNvdXJjZSA9IHNvdXJjZVJhbmRvbVVuaWZvcm07XG5cbiAgcmV0dXJuIHJhbmRvbVVuaWZvcm07XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbU5vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTm9ybWFsKG11LCBzaWdtYSkge1xuICAgIHZhciB4LCByO1xuICAgIG11ID0gbXUgPT0gbnVsbCA/IDAgOiArbXU7XG4gICAgc2lnbWEgPSBzaWdtYSA9PSBudWxsID8gMSA6ICtzaWdtYTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgeTtcblxuICAgICAgLy8gSWYgYXZhaWxhYmxlLCB1c2UgdGhlIHNlY29uZCBwcmV2aW91c2x5LWdlbmVyYXRlZCB1bmlmb3JtIHJhbmRvbS5cbiAgICAgIGlmICh4ICE9IG51bGwpIHkgPSB4LCB4ID0gbnVsbDtcblxuICAgICAgLy8gT3RoZXJ3aXNlLCBnZW5lcmF0ZSBhIG5ldyB4IGFuZCB5LlxuICAgICAgZWxzZSBkbyB7XG4gICAgICAgIHggPSBzb3VyY2UoKSAqIDIgLSAxO1xuICAgICAgICB5ID0gc291cmNlKCkgKiAyIC0gMTtcbiAgICAgICAgciA9IHggKiB4ICsgeSAqIHk7XG4gICAgICB9IHdoaWxlICghciB8fCByID4gMSk7XG5cbiAgICAgIHJldHVybiBtdSArIHNpZ21hICogeSAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpIC8gcik7XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbU5vcm1hbC5zb3VyY2UgPSBzb3VyY2VSYW5kb21Ob3JtYWw7XG5cbiAgcmV0dXJuIHJhbmRvbU5vcm1hbDtcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuaW1wb3J0IG5vcm1hbCBmcm9tIFwiLi9ub3JtYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUxvZ05vcm1hbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tTG9nTm9ybWFsKCkge1xuICAgIHZhciByYW5kb21Ob3JtYWwgPSBub3JtYWwuc291cmNlKHNvdXJjZSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gTWF0aC5leHAocmFuZG9tTm9ybWFsKCkpO1xuICAgIH07XG4gIH1cblxuICByYW5kb21Mb2dOb3JtYWwuc291cmNlID0gc291cmNlUmFuZG9tTG9nTm9ybWFsO1xuXG4gIHJldHVybiByYW5kb21Mb2dOb3JtYWw7XG59KShkZWZhdWx0U291cmNlKTtcbiIsImltcG9ydCBkZWZhdWx0U291cmNlIGZyb20gXCIuL2RlZmF1bHRTb3VyY2VcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHNvdXJjZVJhbmRvbUlyd2luSGFsbChzb3VyY2UpIHtcbiAgZnVuY3Rpb24gcmFuZG9tSXJ3aW5IYWxsKG4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBmb3IgKHZhciBzdW0gPSAwLCBpID0gMDsgaSA8IG47ICsraSkgc3VtICs9IHNvdXJjZSgpO1xuICAgICAgcmV0dXJuIHN1bTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tSXJ3aW5IYWxsLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUlyd2luSGFsbDtcblxuICByZXR1cm4gcmFuZG9tSXJ3aW5IYWxsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJpbXBvcnQgZGVmYXVsdFNvdXJjZSBmcm9tIFwiLi9kZWZhdWx0U291cmNlXCI7XG5pbXBvcnQgaXJ3aW5IYWxsIGZyb20gXCIuL2lyd2luSGFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tQmF0ZXMoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUJhdGVzKG4pIHtcbiAgICB2YXIgcmFuZG9tSXJ3aW5IYWxsID0gaXJ3aW5IYWxsLnNvdXJjZShzb3VyY2UpKG4pO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByYW5kb21JcndpbkhhbGwoKSAvIG47XG4gICAgfTtcbiAgfVxuXG4gIHJhbmRvbUJhdGVzLnNvdXJjZSA9IHNvdXJjZVJhbmRvbUJhdGVzO1xuXG4gIHJldHVybiByYW5kb21CYXRlcztcbn0pKGRlZmF1bHRTb3VyY2UpO1xuIiwiaW1wb3J0IGRlZmF1bHRTb3VyY2UgZnJvbSBcIi4vZGVmYXVsdFNvdXJjZVwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gc291cmNlUmFuZG9tRXhwb25lbnRpYWwoc291cmNlKSB7XG4gIGZ1bmN0aW9uIHJhbmRvbUV4cG9uZW50aWFsKGxhbWJkYSkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAtTWF0aC5sb2coMSAtIHNvdXJjZSgpKSAvIGxhbWJkYTtcbiAgICB9O1xuICB9XG5cbiAgcmFuZG9tRXhwb25lbnRpYWwuc291cmNlID0gc291cmNlUmFuZG9tRXhwb25lbnRpYWw7XG5cbiAgcmV0dXJuIHJhbmRvbUV4cG9uZW50aWFsO1xufSkoZGVmYXVsdFNvdXJjZSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJ2YXIgYXJyYXkgPSBBcnJheS5wcm90b3R5cGU7XG5cbmV4cG9ydCB2YXIgbWFwID0gYXJyYXkubWFwO1xuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuIiwiaW1wb3J0IHttYXB9IGZyb20gXCJkMy1jb2xsZWN0aW9uXCI7XG5pbXBvcnQge3NsaWNlfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IHZhciBpbXBsaWNpdCA9IHtuYW1lOiBcImltcGxpY2l0XCJ9O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBtYXAoKSxcbiAgICAgIGRvbWFpbiA9IFtdLFxuICAgICAgcmFuZ2UgPSBbXSxcbiAgICAgIHVua25vd24gPSBpbXBsaWNpdDtcblxuICBmdW5jdGlvbiBzY2FsZShkKSB7XG4gICAgdmFyIGtleSA9IGQgKyBcIlwiLCBpID0gaW5kZXguZ2V0KGtleSk7XG4gICAgaWYgKCFpKSB7XG4gICAgICBpZiAodW5rbm93biAhPT0gaW1wbGljaXQpIHJldHVybiB1bmtub3duO1xuICAgICAgaW5kZXguc2V0KGtleSwgaSA9IGRvbWFpbi5wdXNoKGQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlWyhpIC0gMSkgJSByYW5nZS5sZW5ndGhdO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRvbWFpbi5zbGljZSgpO1xuICAgIGRvbWFpbiA9IFtdLCBpbmRleCA9IG1hcCgpO1xuICAgIHZhciBpID0gLTEsIG4gPSBfLmxlbmd0aCwgZCwga2V5O1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWluZGV4LmhhcyhrZXkgPSAoZCA9IF9baV0pICsgXCJcIikpIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKGQpKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBzY2FsZSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmRpbmFsKGRvbWFpbiwgcmFuZ2UpLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7cmFuZ2UgYXMgc2VxdWVuY2V9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBvcmRpbmFsIGZyb20gXCIuL29yZGluYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmFuZCgpIHtcbiAgdmFyIHNjYWxlID0gb3JkaW5hbCgpLnVua25vd24odW5kZWZpbmVkKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIG9yZGluYWxSYW5nZSA9IHNjYWxlLnJhbmdlLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICBzdGVwLFxuICAgICAgYmFuZHdpZHRoLFxuICAgICAgcm91bmQgPSBmYWxzZSxcbiAgICAgIHBhZGRpbmdJbm5lciA9IDAsXG4gICAgICBwYWRkaW5nT3V0ZXIgPSAwLFxuICAgICAgYWxpZ24gPSAwLjU7XG5cbiAgZGVsZXRlIHNjYWxlLnVua25vd247XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgbiA9IGRvbWFpbigpLmxlbmd0aCxcbiAgICAgICAgcmV2ZXJzZSA9IHJhbmdlWzFdIDwgcmFuZ2VbMF0sXG4gICAgICAgIHN0YXJ0ID0gcmFuZ2VbcmV2ZXJzZSAtIDBdLFxuICAgICAgICBzdG9wID0gcmFuZ2VbMSAtIHJldmVyc2VdO1xuICAgIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDEsIG4gLSBwYWRkaW5nSW5uZXIgKyBwYWRkaW5nT3V0ZXIgKiAyKTtcbiAgICBpZiAocm91bmQpIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgIHN0YXJ0ICs9IChzdG9wIC0gc3RhcnQgLSBzdGVwICogKG4gLSBwYWRkaW5nSW5uZXIpKSAqIGFsaWduO1xuICAgIGJhbmR3aWR0aCA9IHN0ZXAgKiAoMSAtIHBhZGRpbmdJbm5lcik7XG4gICAgaWYgKHJvdW5kKSBzdGFydCA9IE1hdGgucm91bmQoc3RhcnQpLCBiYW5kd2lkdGggPSBNYXRoLnJvdW5kKGJhbmR3aWR0aCk7XG4gICAgdmFyIHZhbHVlcyA9IHNlcXVlbmNlKG4pLm1hcChmdW5jdGlvbihpKSB7IHJldHVybiBzdGFydCArIHN0ZXAgKiBpOyB9KTtcbiAgICByZXR1cm4gb3JkaW5hbFJhbmdlKHJldmVyc2UgPyB2YWx1ZXMucmV2ZXJzZSgpIDogdmFsdWVzKTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IFsrX1swXSwgK19bMV1dLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IFsrX1swXSwgK19bMV1dLCByb3VuZCA9IHRydWUsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5iYW5kd2lkdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYmFuZHdpZHRoO1xuICB9O1xuXG4gIHNjYWxlLnN0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3RlcDtcbiAgfTtcblxuICBzY2FsZS5yb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyb3VuZCA9ICEhXywgcmVzY2FsZSgpKSA6IHJvdW5kO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ0lubmVyID0gTWF0aC5taW4oMSwgcGFkZGluZ091dGVyID0gK18pLCByZXNjYWxlKCkpIDogcGFkZGluZ0lubmVyO1xuICB9O1xuXG4gIHNjYWxlLnBhZGRpbmdJbm5lciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRkaW5nSW5uZXIgPSBNYXRoLm1pbigxLCBfKSwgcmVzY2FsZSgpKSA6IHBhZGRpbmdJbm5lcjtcbiAgfTtcblxuICBzY2FsZS5wYWRkaW5nT3V0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkZGluZ091dGVyID0gK18sIHJlc2NhbGUoKSkgOiBwYWRkaW5nT3V0ZXI7XG4gIH07XG5cbiAgc2NhbGUuYWxpZ24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxpZ24gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBfKSksIHJlc2NhbGUoKSkgOiBhbGlnbjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGJhbmQoZG9tYWluKCksIHJhbmdlKVxuICAgICAgICAucm91bmQocm91bmQpXG4gICAgICAgIC5wYWRkaW5nSW5uZXIocGFkZGluZ0lubmVyKVxuICAgICAgICAucGFkZGluZ091dGVyKHBhZGRpbmdPdXRlcilcbiAgICAgICAgLmFsaWduKGFsaWduKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdFJhbmdlLmFwcGx5KHJlc2NhbGUoKSwgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gcG9pbnRpc2goc2NhbGUpIHtcbiAgdmFyIGNvcHkgPSBzY2FsZS5jb3B5O1xuXG4gIHNjYWxlLnBhZGRpbmcgPSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nSW5uZXI7XG4gIGRlbGV0ZSBzY2FsZS5wYWRkaW5nT3V0ZXI7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwb2ludGlzaChjb3B5KCkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KCkge1xuICByZXR1cm4gcG9pbnRpc2goYmFuZC5hcHBseShudWxsLCBhcmd1bWVudHMpLnBhZGRpbmdJbm5lcigxKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuICt4O1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZSBhcyBpbnRlcnBvbGF0ZVZhbHVlLCBpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSb3VuZH0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge21hcCwgc2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciB1bml0ID0gWzAsIDFdO1xuXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkoeCkge1xuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKGEsIGIpIHtcbiAgcmV0dXJuIChiIC09IChhID0gK2EpKVxuICAgICAgPyBmdW5jdGlvbih4KSB7IHJldHVybiAoeCAtIGEpIC8gYjsgfVxuICAgICAgOiBjb25zdGFudChpc05hTihiKSA/IE5hTiA6IDAuNSk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wZXIoZG9tYWluKSB7XG4gIHZhciBhID0gZG9tYWluWzBdLCBiID0gZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSwgdDtcbiAgaWYgKGEgPiBiKSB0ID0gYSwgYSA9IGIsIGIgPSB0O1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5tYXgoYSwgTWF0aC5taW4oYiwgeCkpOyB9O1xufVxuXG4vLyBub3JtYWxpemUoYSwgYikoeCkgdGFrZXMgYSBkb21haW4gdmFsdWUgeCBpbiBbYSxiXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyBwYXJhbWV0ZXIgdCBpbiBbMCwxXS5cbi8vIGludGVycG9sYXRlKGEsIGIpKHQpIHRha2VzIGEgcGFyYW1ldGVyIHQgaW4gWzAsMV0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmFuZ2UgdmFsdWUgeCBpbiBbYSxiXS5cbmZ1bmN0aW9uIGJpbWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBkMCA9IGRvbWFpblswXSwgZDEgPSBkb21haW5bMV0sIHIwID0gcmFuZ2VbMF0sIHIxID0gcmFuZ2VbMV07XG4gIGlmIChkMSA8IGQwKSBkMCA9IG5vcm1hbGl6ZShkMSwgZDApLCByMCA9IGludGVycG9sYXRlKHIxLCByMCk7XG4gIGVsc2UgZDAgPSBub3JtYWxpemUoZDAsIGQxKSwgcjAgPSBpbnRlcnBvbGF0ZShyMCwgcjEpO1xuICByZXR1cm4gZnVuY3Rpb24oeCkgeyByZXR1cm4gcjAoZDAoeCkpOyB9O1xufVxuXG5mdW5jdGlvbiBwb2x5bWFwKGRvbWFpbiwgcmFuZ2UsIGludGVycG9sYXRlKSB7XG4gIHZhciBqID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSAtIDEsXG4gICAgICBkID0gbmV3IEFycmF5KGopLFxuICAgICAgciA9IG5ldyBBcnJheShqKSxcbiAgICAgIGkgPSAtMTtcblxuICAvLyBSZXZlcnNlIGRlc2NlbmRpbmcgZG9tYWlucy5cbiAgaWYgKGRvbWFpbltqXSA8IGRvbWFpblswXSkge1xuICAgIGRvbWFpbiA9IGRvbWFpbi5zbGljZSgpLnJldmVyc2UoKTtcbiAgICByYW5nZSA9IHJhbmdlLnNsaWNlKCkucmV2ZXJzZSgpO1xuICB9XG5cbiAgd2hpbGUgKCsraSA8IGopIHtcbiAgICBkW2ldID0gbm9ybWFsaXplKGRvbWFpbltpXSwgZG9tYWluW2kgKyAxXSk7XG4gICAgcltpXSA9IGludGVycG9sYXRlKHJhbmdlW2ldLCByYW5nZVtpICsgMV0pO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICB2YXIgaSA9IGJpc2VjdChkb21haW4sIHgsIDEsIGopIC0gMTtcbiAgICByZXR1cm4gcltpXShkW2ldKHgpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkoc291cmNlLCB0YXJnZXQpIHtcbiAgcmV0dXJuIHRhcmdldFxuICAgICAgLmRvbWFpbihzb3VyY2UuZG9tYWluKCkpXG4gICAgICAucmFuZ2Uoc291cmNlLnJhbmdlKCkpXG4gICAgICAuaW50ZXJwb2xhdGUoc291cmNlLmludGVycG9sYXRlKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgZG9tYWluID0gdW5pdCxcbiAgICAgIHJhbmdlID0gdW5pdCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIHVudHJhbnNmb3JtLFxuICAgICAgdW5rbm93bixcbiAgICAgIGNsYW1wID0gaWRlbnRpdHksXG4gICAgICBwaWVjZXdpc2UsXG4gICAgICBvdXRwdXQsXG4gICAgICBpbnB1dDtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHBpZWNld2lzZSA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IG1hcC5jYWxsKF8sIG51bWJlciksIGNsYW1wID09PSBpZGVudGl0eSB8fCAoY2xhbXAgPSBjbGFtcGVyKGRvbWFpbikpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IHNsaWNlLmNhbGwoXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IGNsYW1wZXIoZG9tYWluKSA6IGlkZW50aXR5LCBzY2FsZSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkodHJhbnNmb3JtLCB1bnRyYW5zZm9ybSk7XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpLFxuICAgICAgcHJlY2lzaW9uO1xuICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgY2FzZSBcInNcIjoge1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzcGVjaWZpZXIpO1xufVxuIiwiaW1wb3J0IHt0aWNrcywgdGlja0luY3JlbWVudH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQgY29udGludW91cywge2NvcHksIGlkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgaTAgPSAwLFxuICAgICAgICBpMSA9IGQubGVuZ3RoIC0gMSxcbiAgICAgICAgc3RhcnQgPSBkW2kwXSxcbiAgICAgICAgc3RvcCA9IGRbaTFdLFxuICAgICAgICBzdGVwO1xuXG4gICAgaWYgKHN0b3AgPCBzdGFydCkge1xuICAgICAgc3RlcCA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBzdGVwO1xuICAgICAgc3RlcCA9IGkwLCBpMCA9IGkxLCBpMSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH1cblxuICAgIGlmIChzdGVwID4gMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmZsb29yKHN0YXJ0IC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9IGVsc2UgaWYgKHN0ZXAgPCAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguY2VpbChzdGFydCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7bWFwfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlbnRpdHkoZG9tYWluKSB7XG4gIHZhciB1bmtub3duO1xuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiB4O1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gc2NhbGU7XG5cbiAgc2NhbGUuZG9tYWluID0gc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gbWFwLmNhbGwoXywgbnVtYmVyKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5KGRvbWFpbikudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBkb21haW4gPSBhcmd1bWVudHMubGVuZ3RoID8gbWFwLmNhbGwoZG9tYWluLCBudW1iZXIpIDogWzAsIDFdO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZG9tYWluLCBpbnRlcnZhbCkge1xuICBkb21haW4gPSBkb21haW4uc2xpY2UoKTtcblxuICB2YXIgaTAgPSAwLFxuICAgICAgaTEgPSBkb21haW4ubGVuZ3RoIC0gMSxcbiAgICAgIHgwID0gZG9tYWluW2kwXSxcbiAgICAgIHgxID0gZG9tYWluW2kxXSxcbiAgICAgIHQ7XG5cbiAgaWYgKHgxIDwgeDApIHtcbiAgICB0ID0gaTAsIGkwID0gaTEsIGkxID0gdDtcbiAgICB0ID0geDAsIHgwID0geDEsIHgxID0gdDtcbiAgfVxuXG4gIGRvbWFpbltpMF0gPSBpbnRlcnZhbC5mbG9vcih4MCk7XG4gIGRvbWFpbltpMV0gPSBpbnRlcnZhbC5jZWlsKHgxKTtcbiAgcmV0dXJuIGRvbWFpbjtcbn1cbiIsImltcG9ydCB7dGlja3N9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXR9IGZyb20gXCJkMy1mb3JtYXRcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcbmltcG9ydCB7Y29weSwgdHJhbnNmb3JtZXJ9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUxvZyh4KSB7XG4gIHJldHVybiBNYXRoLmxvZyh4KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRXhwKHgpIHtcbiAgcmV0dXJuIE1hdGguZXhwKHgpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Mb2duKHgpIHtcbiAgcmV0dXJuIC1NYXRoLmxvZygteCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUV4cG4oeCkge1xuICByZXR1cm4gLU1hdGguZXhwKC14KTtcbn1cblxuZnVuY3Rpb24gcG93MTAoeCkge1xuICByZXR1cm4gaXNGaW5pdGUoeCkgPyArKFwiMWVcIiArIHgpIDogeCA8IDAgPyAwIDogeDtcbn1cblxuZnVuY3Rpb24gcG93cChiYXNlKSB7XG4gIHJldHVybiBiYXNlID09PSAxMCA/IHBvdzEwXG4gICAgICA6IGJhc2UgPT09IE1hdGguRSA/IE1hdGguZXhwXG4gICAgICA6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucG93KGJhc2UsIHgpOyB9O1xufVxuXG5mdW5jdGlvbiBsb2dwKGJhc2UpIHtcbiAgcmV0dXJuIGJhc2UgPT09IE1hdGguRSA/IE1hdGgubG9nXG4gICAgICA6IGJhc2UgPT09IDEwICYmIE1hdGgubG9nMTBcbiAgICAgIHx8IGJhc2UgPT09IDIgJiYgTWF0aC5sb2cyXG4gICAgICB8fCAoYmFzZSA9IE1hdGgubG9nKGJhc2UpLCBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLmxvZyh4KSAvIGJhc2U7IH0pO1xufVxuXG5mdW5jdGlvbiByZWZsZWN0KGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gLWYoLXgpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nZ2lzaCh0cmFuc2Zvcm0pIHtcbiAgdmFyIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKSxcbiAgICAgIGRvbWFpbiA9IHNjYWxlLmRvbWFpbixcbiAgICAgIGJhc2UgPSAxMCxcbiAgICAgIGxvZ3MsXG4gICAgICBwb3dzO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgbG9ncyA9IGxvZ3AoYmFzZSksIHBvd3MgPSBwb3dwKGJhc2UpO1xuICAgIGlmIChkb21haW4oKVswXSA8IDApIHtcbiAgICAgIGxvZ3MgPSByZWZsZWN0KGxvZ3MpLCBwb3dzID0gcmVmbGVjdChwb3dzKTtcbiAgICAgIHRyYW5zZm9ybSh0cmFuc2Zvcm1Mb2duLCB0cmFuc2Zvcm1FeHBuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNmb3JtKHRyYW5zZm9ybUxvZywgdHJhbnNmb3JtRXhwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgc2NhbGUuYmFzZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChiYXNlID0gK18sIHJlc2NhbGUoKSkgOiBiYXNlO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4oXyksIHJlc2NhbGUoKSkgOiBkb21haW4oKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdSA9IGRbMF0sXG4gICAgICAgIHYgPSBkW2QubGVuZ3RoIC0gMV0sXG4gICAgICAgIHI7XG5cbiAgICBpZiAociA9IHYgPCB1KSBpID0gdSwgdSA9IHYsIHYgPSBpO1xuXG4gICAgdmFyIGkgPSBsb2dzKHUpLFxuICAgICAgICBqID0gbG9ncyh2KSxcbiAgICAgICAgcCxcbiAgICAgICAgayxcbiAgICAgICAgdCxcbiAgICAgICAgbiA9IGNvdW50ID09IG51bGwgPyAxMCA6ICtjb3VudCxcbiAgICAgICAgeiA9IFtdO1xuXG4gICAgaWYgKCEoYmFzZSAlIDEpICYmIGogLSBpIDwgbikge1xuICAgICAgaSA9IE1hdGgucm91bmQoaSkgLSAxLCBqID0gTWF0aC5yb3VuZChqKSArIDE7XG4gICAgICBpZiAodSA+IDApIGZvciAoOyBpIDwgajsgKytpKSB7XG4gICAgICAgIGZvciAoayA9IDEsIHAgPSBwb3dzKGkpOyBrIDwgYmFzZTsgKytrKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBmb3IgKDsgaSA8IGo7ICsraSkge1xuICAgICAgICBmb3IgKGsgPSBiYXNlIC0gMSwgcCA9IHBvd3MoaSk7IGsgPj0gMTsgLS1rKSB7XG4gICAgICAgICAgdCA9IHAgKiBrO1xuICAgICAgICAgIGlmICh0IDwgdSkgY29udGludWU7XG4gICAgICAgICAgaWYgKHQgPiB2KSBicmVhaztcbiAgICAgICAgICB6LnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgeiA9IHRpY2tzKGksIGosIE1hdGgubWluKGogLSBpLCBuKSkubWFwKHBvd3MpO1xuICAgIH1cblxuICAgIHJldHVybiByID8gei5yZXZlcnNlKCkgOiB6O1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgaWYgKHNwZWNpZmllciA9PSBudWxsKSBzcGVjaWZpZXIgPSBiYXNlID09PSAxMCA/IFwiLjBlXCIgOiBcIixcIjtcbiAgICBpZiAodHlwZW9mIHNwZWNpZmllciAhPT0gXCJmdW5jdGlvblwiKSBzcGVjaWZpZXIgPSBmb3JtYXQoc3BlY2lmaWVyKTtcbiAgICBpZiAoY291bnQgPT09IEluZmluaXR5KSByZXR1cm4gc3BlY2lmaWVyO1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuICAgIHZhciBrID0gTWF0aC5tYXgoMSwgYmFzZSAqIGNvdW50IC8gc2NhbGUudGlja3MoKS5sZW5ndGgpOyAvLyBUT0RPIGZhc3QgZXN0aW1hdGU/XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgIHZhciBpID0gZCAvIHBvd3MoTWF0aC5yb3VuZChsb2dzKGQpKSk7XG4gICAgICBpZiAoaSAqIGJhc2UgPCBiYXNlIC0gMC41KSBpICo9IGJhc2U7XG4gICAgICByZXR1cm4gaSA8PSBrID8gc3BlY2lmaWVyKGQpIDogXCJcIjtcbiAgICB9O1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9tYWluKG5pY2UoZG9tYWluKCksIHtcbiAgICAgIGZsb29yOiBmdW5jdGlvbih4KSB7IHJldHVybiBwb3dzKE1hdGguZmxvb3IobG9ncyh4KSkpOyB9LFxuICAgICAgY2VpbDogZnVuY3Rpb24oeCkgeyByZXR1cm4gcG93cyhNYXRoLmNlaWwobG9ncyh4KSkpOyB9XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyKCkpLmRvbWFpbihbMSwgMTBdKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxvZygpKS5iYXNlKHNjYWxlLmJhc2UoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBzY2FsZTtcbn1cbiIsImltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7Y29weSwgdHJhbnNmb3JtZXJ9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVN5bWxvZyhjKSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIE1hdGguc2lnbih4KSAqIE1hdGgubG9nMXAoTWF0aC5hYnMoeCAvIGMpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3ltZXhwKGMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHtcbiAgICByZXR1cm4gTWF0aC5zaWduKHgpICogTWF0aC5leHBtMShNYXRoLmFicyh4KSkgKiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3ltbG9naXNoKHRyYW5zZm9ybSkge1xuICB2YXIgYyA9IDEsIHNjYWxlID0gdHJhbnNmb3JtKHRyYW5zZm9ybVN5bWxvZyhjKSwgdHJhbnNmb3JtU3ltZXhwKGMpKTtcblxuICBzY2FsZS5jb25zdGFudCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHRyYW5zZm9ybSh0cmFuc2Zvcm1TeW1sb2coYyA9ICtfKSwgdHJhbnNmb3JtU3ltZXhwKGMpKSA6IGM7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQge2NvcHksIGlkZW50aXR5LCB0cmFuc2Zvcm1lcn0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUG93KGV4cG9uZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggPCAwID8gLU1hdGgucG93KC14LCBleHBvbmVudCkgOiBNYXRoLnBvdyh4LCBleHBvbmVudCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVNxcnQoeCkge1xuICByZXR1cm4geCA8IDAgPyAtTWF0aC5zcXJ0KC14KSA6IE1hdGguc3FydCh4KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtU3F1YXJlKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLXggKiB4IDogeCAqIHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3dpc2godHJhbnNmb3JtKSB7XG4gIHZhciBzY2FsZSA9IHRyYW5zZm9ybShpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgZXhwb25lbnQgPSAxO1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcmV0dXJuIGV4cG9uZW50ID09PSAxID8gdHJhbnNmb3JtKGlkZW50aXR5LCBpZGVudGl0eSlcbiAgICAgICAgOiBleHBvbmVudCA9PT0gMC41ID8gdHJhbnNmb3JtKHRyYW5zZm9ybVNxcnQsIHRyYW5zZm9ybVNxdWFyZSlcbiAgICAgICAgOiB0cmFuc2Zvcm0odHJhbnNmb3JtUG93KGV4cG9uZW50KSwgdHJhbnNmb3JtUG93KDEgLyBleHBvbmVudCkpO1xuICB9XG5cbiAgc2NhbGUuZXhwb25lbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZXhwb25lbnQgPSArXywgcmVzY2FsZSgpKSA6IGV4cG9uZW50O1xuICB9O1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHBvdygpKS5leHBvbmVudChzY2FsZS5leHBvbmVudCgpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3FydCgpIHtcbiAgcmV0dXJuIHBvdy5hcHBseShudWxsLCBhcmd1bWVudHMpLmV4cG9uZW50KDAuNSk7XG59XG4iLCJpbXBvcnQge2FzY2VuZGluZywgYmlzZWN0LCBxdWFudGlsZSBhcyB0aHJlc2hvbGR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHF1YW50aWxlKCkge1xuICB2YXIgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdGhyZXNob2xkcyA9IFtdLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiByZXNjYWxlKCkge1xuICAgIHZhciBpID0gMCwgbiA9IE1hdGgubWF4KDEsIHJhbmdlLmxlbmd0aCk7XG4gICAgdGhyZXNob2xkcyA9IG5ldyBBcnJheShuIC0gMSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRocmVzaG9sZHNbaSAtIDFdID0gdGhyZXNob2xkKGRvbWFpbiwgaSAvIG4pO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiByYW5nZVtiaXNlY3QodGhyZXNob2xkcywgeCldO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gaSA8IDAgPyBbTmFOLCBOYU5dIDogW1xuICAgICAgaSA+IDAgPyB0aHJlc2hvbGRzW2kgLSAxXSA6IGRvbWFpblswXSxcbiAgICAgIGkgPCB0aHJlc2hvbGRzLmxlbmd0aCA/IHRocmVzaG9sZHNbaV0gOiBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdXG4gICAgXTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBfLmxlbmd0aCwgZDsgaSA8IG47ICsraSkgaWYgKGQgPSBfW2ldLCBkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IHNsaWNlLmNhbGwoXyksIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgc2NhbGUucXVhbnRpbGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRocmVzaG9sZHMuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHF1YW50aWxlKClcbiAgICAgICAgLmRvbWFpbihkb21haW4pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQge2xpbmVhcmlzaH0gZnJvbSBcIi4vbGluZWFyXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBxdWFudGl6ZSgpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMSxcbiAgICAgIG4gPSAxLFxuICAgICAgZG9tYWluID0gWzAuNV0sXG4gICAgICByYW5nZSA9IFswLCAxXSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiB4IDw9IHggPyByYW5nZVtiaXNlY3QoZG9tYWluLCB4LCAwLCBuKV0gOiB1bmtub3duO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICB2YXIgaSA9IC0xO1xuICAgIGRvbWFpbiA9IG5ldyBBcnJheShuKTtcbiAgICB3aGlsZSAoKytpIDwgbikgZG9tYWluW2ldID0gKChpICsgMSkgKiB4MSAtIChpIC0gbikgKiB4MCkgLyAobiArIDEpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9ICtfWzBdLCB4MSA9ICtfWzFdLCByZXNjYWxlKCkpIDogW3gwLCB4MV07XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobiA9IChyYW5nZSA9IHNsaWNlLmNhbGwoXykpLmxlbmd0aCAtIDEsIHJlc2NhbGUoKSkgOiByYW5nZS5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLmludmVydEV4dGVudCA9IGZ1bmN0aW9uKHkpIHtcbiAgICB2YXIgaSA9IHJhbmdlLmluZGV4T2YoeSk7XG4gICAgcmV0dXJuIGkgPCAwID8gW05hTiwgTmFOXVxuICAgICAgICA6IGkgPCAxID8gW3gwLCBkb21haW5bMF1dXG4gICAgICAgIDogaSA+PSBuID8gW2RvbWFpbltuIC0gMV0sIHgxXVxuICAgICAgICA6IFtkb21haW5baSAtIDFdLCBkb21haW5baV1dO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnRocmVzaG9sZHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBxdWFudGl6ZSgpXG4gICAgICAgIC5kb21haW4oW3gwLCB4MV0pXG4gICAgICAgIC5yYW5nZShyYW5nZSlcbiAgICAgICAgLnVua25vd24odW5rbm93bik7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShsaW5lYXJpc2goc2NhbGUpLCBhcmd1bWVudHMpO1xufVxuIiwiaW1wb3J0IHtiaXNlY3R9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRocmVzaG9sZCgpIHtcbiAgdmFyIGRvbWFpbiA9IFswLjVdLFxuICAgICAgcmFuZ2UgPSBbMCwgMV0sXG4gICAgICB1bmtub3duLFxuICAgICAgbiA9IDE7XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiB4IDw9IHggPyByYW5nZVtiaXNlY3QoZG9tYWluLCB4LCAwLCBuKV0gOiB1bmtub3duO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IHNsaWNlLmNhbGwoXyksIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGggLSAxKSwgc2NhbGUpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBzbGljZS5jYWxsKF8pLCBuID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoIC0gMSksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUuaW52ZXJ0RXh0ZW50ID0gZnVuY3Rpb24oeSkge1xuICAgIHZhciBpID0gcmFuZ2UuaW5kZXhPZih5KTtcbiAgICByZXR1cm4gW2RvbWFpbltpIC0gMV0sIGRvbWFpbltpXV07XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRocmVzaG9sZCgpXG4gICAgICAgIC5kb21haW4oZG9tYWluKVxuICAgICAgICAucmFuZ2UocmFuZ2UpXG4gICAgICAgIC51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbWlsbGlzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pbGxpc2Vjb25kO1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgbWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1pbnV0ZTtcbmV4cG9ydCB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQgLSBkYXRlLmdldE1pbnV0ZXMoKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjTWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ1NlY29uZHMoMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNaW51dGU7XG5leHBvcnQgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjSG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjSG91cjtcbmV4cG9ydCB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICByZXR1cm4ge3k6IHksIG06IDAsIGQ6IDEsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIG5ld0RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbmV3RGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgbG9jYWxEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gKCtuWzBdKSAqIDEwMDAsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5leHBvcnQgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiB1dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SXNvO1xuIiwiaW1wb3J0IHtpc29TcGVjaWZpZXJ9IGZyb20gXCIuL2lzb0Zvcm1hdFwiO1xuaW1wb3J0IHt1dGNQYXJzZX0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogdXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VJc287XG4iLCJpbXBvcnQge2Jpc2VjdG9yLCB0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3RpbWVZZWFyLCB0aW1lTW9udGgsIHRpbWVXZWVrLCB0aW1lRGF5LCB0aW1lSG91ciwgdGltZU1pbnV0ZSwgdGltZVNlY29uZCwgdGltZU1pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHt0aW1lRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7bWFwfSBmcm9tIFwiLi9hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5LCBpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCBuaWNlIGZyb20gXCIuL25pY2VcIjtcblxudmFyIGR1cmF0aW9uU2Vjb25kID0gMTAwMCxcbiAgICBkdXJhdGlvbk1pbnV0ZSA9IGR1cmF0aW9uU2Vjb25kICogNjAsXG4gICAgZHVyYXRpb25Ib3VyID0gZHVyYXRpb25NaW51dGUgKiA2MCxcbiAgICBkdXJhdGlvbkRheSA9IGR1cmF0aW9uSG91ciAqIDI0LFxuICAgIGR1cmF0aW9uV2VlayA9IGR1cmF0aW9uRGF5ICogNyxcbiAgICBkdXJhdGlvbk1vbnRoID0gZHVyYXRpb25EYXkgKiAzMCxcbiAgICBkdXJhdGlvblllYXIgPSBkdXJhdGlvbkRheSAqIDM2NTtcblxuZnVuY3Rpb24gZGF0ZSh0KSB7XG4gIHJldHVybiBuZXcgRGF0ZSh0KTtcbn1cblxuZnVuY3Rpb24gbnVtYmVyKHQpIHtcbiAgcmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlID8gK3QgOiArbmV3IERhdGUoK3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsZW5kYXIoeWVhciwgbW9udGgsIHdlZWssIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kLCBmb3JtYXQpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cyhpZGVudGl0eSwgaWRlbnRpdHkpLFxuICAgICAgaW52ZXJ0ID0gc2NhbGUuaW52ZXJ0LFxuICAgICAgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHZhciBmb3JtYXRNaWxsaXNlY29uZCA9IGZvcm1hdChcIi4lTFwiKSxcbiAgICAgIGZvcm1hdFNlY29uZCA9IGZvcm1hdChcIjolU1wiKSxcbiAgICAgIGZvcm1hdE1pbnV0ZSA9IGZvcm1hdChcIiVJOiVNXCIpLFxuICAgICAgZm9ybWF0SG91ciA9IGZvcm1hdChcIiVJICVwXCIpLFxuICAgICAgZm9ybWF0RGF5ID0gZm9ybWF0KFwiJWEgJWRcIiksXG4gICAgICBmb3JtYXRXZWVrID0gZm9ybWF0KFwiJWIgJWRcIiksXG4gICAgICBmb3JtYXRNb250aCA9IGZvcm1hdChcIiVCXCIpLFxuICAgICAgZm9ybWF0WWVhciA9IGZvcm1hdChcIiVZXCIpO1xuXG4gIHZhciB0aWNrSW50ZXJ2YWxzID0gW1xuICAgIFtzZWNvbmQsICAxLCAgICAgIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbc2Vjb25kLCAgNSwgIDUgKiBkdXJhdGlvblNlY29uZF0sXG4gICAgW3NlY29uZCwgMTUsIDE1ICogZHVyYXRpb25TZWNvbmRdLFxuICAgIFtzZWNvbmQsIDMwLCAzMCAqIGR1cmF0aW9uU2Vjb25kXSxcbiAgICBbbWludXRlLCAgMSwgICAgICBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgW21pbnV0ZSwgIDUsICA1ICogZHVyYXRpb25NaW51dGVdLFxuICAgIFttaW51dGUsIDE1LCAxNSAqIGR1cmF0aW9uTWludXRlXSxcbiAgICBbbWludXRlLCAzMCwgMzAgKiBkdXJhdGlvbk1pbnV0ZV0sXG4gICAgWyAgaG91ciwgIDEsICAgICAgZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgIGhvdXIsICAzLCAgMyAqIGR1cmF0aW9uSG91ciAgXSxcbiAgICBbICBob3VyLCAgNiwgIDYgKiBkdXJhdGlvbkhvdXIgIF0sXG4gICAgWyAgaG91ciwgMTIsIDEyICogZHVyYXRpb25Ib3VyICBdLFxuICAgIFsgICBkYXksICAxLCAgICAgIGR1cmF0aW9uRGF5ICAgXSxcbiAgICBbICAgZGF5LCAgMiwgIDIgKiBkdXJhdGlvbkRheSAgIF0sXG4gICAgWyAgd2VlaywgIDEsICAgICAgZHVyYXRpb25XZWVrICBdLFxuICAgIFsgbW9udGgsICAxLCAgICAgIGR1cmF0aW9uTW9udGggXSxcbiAgICBbIG1vbnRoLCAgMywgIDMgKiBkdXJhdGlvbk1vbnRoIF0sXG4gICAgWyAgeWVhciwgIDEsICAgICAgZHVyYXRpb25ZZWFyICBdXG4gIF07XG5cbiAgZnVuY3Rpb24gdGlja0Zvcm1hdChkYXRlKSB7XG4gICAgcmV0dXJuIChzZWNvbmQoZGF0ZSkgPCBkYXRlID8gZm9ybWF0TWlsbGlzZWNvbmRcbiAgICAgICAgOiBtaW51dGUoZGF0ZSkgPCBkYXRlID8gZm9ybWF0U2Vjb25kXG4gICAgICAgIDogaG91cihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNaW51dGVcbiAgICAgICAgOiBkYXkoZGF0ZSkgPCBkYXRlID8gZm9ybWF0SG91clxuICAgICAgICA6IG1vbnRoKGRhdGUpIDwgZGF0ZSA/ICh3ZWVrKGRhdGUpIDwgZGF0ZSA/IGZvcm1hdERheSA6IGZvcm1hdFdlZWspXG4gICAgICAgIDogeWVhcihkYXRlKSA8IGRhdGUgPyBmb3JtYXRNb250aFxuICAgICAgICA6IGZvcm1hdFllYXIpKGRhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGlja0ludGVydmFsKGludGVydmFsLCBzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChpbnRlcnZhbCA9PSBudWxsKSBpbnRlcnZhbCA9IDEwO1xuXG4gICAgLy8gSWYgYSBkZXNpcmVkIHRpY2sgY291bnQgaXMgc3BlY2lmaWVkLCBwaWNrIGEgcmVhc29uYWJsZSB0aWNrIGludGVydmFsXG4gICAgLy8gYmFzZWQgb24gdGhlIGV4dGVudCBvZiB0aGUgZG9tYWluIGFuZCBhIHJvdWdoIGVzdGltYXRlIG9mIHRpY2sgc2l6ZS5cbiAgICAvLyBPdGhlcndpc2UsIGFzc3VtZSBpbnRlcnZhbCBpcyBhbHJlYWR5IGEgdGltZSBpbnRlcnZhbCBhbmQgdXNlIGl0LlxuICAgIGlmICh0eXBlb2YgaW50ZXJ2YWwgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gaW50ZXJ2YWwsXG4gICAgICAgICAgaSA9IGJpc2VjdG9yKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGlbMl07IH0pLnJpZ2h0KHRpY2tJbnRlcnZhbHMsIHRhcmdldCk7XG4gICAgICBpZiAoaSA9PT0gdGlja0ludGVydmFscy5sZW5ndGgpIHtcbiAgICAgICAgc3RlcCA9IHRpY2tTdGVwKHN0YXJ0IC8gZHVyYXRpb25ZZWFyLCBzdG9wIC8gZHVyYXRpb25ZZWFyLCBpbnRlcnZhbCk7XG4gICAgICAgIGludGVydmFsID0geWVhcjtcbiAgICAgIH0gZWxzZSBpZiAoaSkge1xuICAgICAgICBpID0gdGlja0ludGVydmFsc1t0YXJnZXQgLyB0aWNrSW50ZXJ2YWxzW2kgLSAxXVsyXSA8IHRpY2tJbnRlcnZhbHNbaV1bMl0gLyB0YXJnZXQgPyBpIC0gMSA6IGldO1xuICAgICAgICBzdGVwID0gaVsxXTtcbiAgICAgICAgaW50ZXJ2YWwgPSBpWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcCA9IE1hdGgubWF4KHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBpbnRlcnZhbCksIDEpO1xuICAgICAgICBpbnRlcnZhbCA9IG1pbGxpc2Vjb25kO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdGVwID09IG51bGwgPyBpbnRlcnZhbCA6IGludGVydmFsLmV2ZXJ5KHN0ZXApO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShpbnZlcnQoeSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGRvbWFpbihtYXAuY2FsbChfLCBudW1iZXIpKSA6IGRvbWFpbigpLm1hcChkYXRlKTtcbiAgfTtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKSxcbiAgICAgICAgdDAgPSBkWzBdLFxuICAgICAgICB0MSA9IGRbZC5sZW5ndGggLSAxXSxcbiAgICAgICAgciA9IHQxIDwgdDAsXG4gICAgICAgIHQ7XG4gICAgaWYgKHIpIHQgPSB0MCwgdDAgPSB0MSwgdDEgPSB0O1xuICAgIHQgPSB0aWNrSW50ZXJ2YWwoaW50ZXJ2YWwsIHQwLCB0MSwgc3RlcCk7XG4gICAgdCA9IHQgPyB0LnJhbmdlKHQwLCB0MSArIDEpIDogW107IC8vIGluY2x1c2l2ZSBzdG9wXG4gICAgcmV0dXJuIHIgPyB0LnJldmVyc2UoKSA6IHQ7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICByZXR1cm4gc3BlY2lmaWVyID09IG51bGwgPyB0aWNrRm9ybWF0IDogZm9ybWF0KHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGludGVydmFsLCBzdGVwKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gKGludGVydmFsID0gdGlja0ludGVydmFsKGludGVydmFsLCBkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIHN0ZXApKVxuICAgICAgICA/IGRvbWFpbihuaWNlKGQsIGludGVydmFsKSlcbiAgICAgICAgOiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGNhbGVuZGFyKHllYXIsIG1vbnRoLCB3ZWVrLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCwgZm9ybWF0KSk7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGluaXRSYW5nZS5hcHBseShjYWxlbmRhcih0aW1lWWVhciwgdGltZU1vbnRoLCB0aW1lV2VlaywgdGltZURheSwgdGltZUhvdXIsIHRpbWVNaW51dGUsIHRpbWVTZWNvbmQsIHRpbWVNaWxsaXNlY29uZCwgdGltZUZvcm1hdCkuZG9tYWluKFtuZXcgRGF0ZSgyMDAwLCAwLCAxKSwgbmV3IERhdGUoMjAwMCwgMCwgMildKSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7Y2FsZW5kYXJ9IGZyb20gXCIuL3RpbWVcIjtcbmltcG9ydCB7dXRjRm9ybWF0fSBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmltcG9ydCB7dXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCB1dGNTZWNvbmQsIHV0Y01pbGxpc2Vjb25kfSBmcm9tIFwiZDMtdGltZVwiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBpbml0UmFuZ2UuYXBwbHkoY2FsZW5kYXIodXRjWWVhciwgdXRjTW9udGgsIHV0Y1dlZWssIHV0Y0RheSwgdXRjSG91ciwgdXRjTWludXRlLCB1dGNTZWNvbmQsIHV0Y01pbGxpc2Vjb25kLCB1dGNGb3JtYXQpLmRvbWFpbihbRGF0ZS5VVEMoMjAwMCwgMCwgMSksIERhdGUuVVRDKDIwMDAsIDAsIDIpXSksIGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCB7bGluZWFyaXNofSBmcm9tIFwiLi9saW5lYXJcIjtcbmltcG9ydCB7bG9nZ2lzaH0gZnJvbSBcIi4vbG9nXCI7XG5pbXBvcnQge3N5bWxvZ2lzaH0gZnJvbSBcIi4vc3ltbG9nXCI7XG5pbXBvcnQge3Bvd2lzaH0gZnJvbSBcIi4vcG93XCI7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybWVyKCkge1xuICB2YXIgeDAgPSAwLFxuICAgICAgeDEgPSAxLFxuICAgICAgdDAsXG4gICAgICB0MSxcbiAgICAgIGsxMCxcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgIGludGVycG9sYXRvciA9IGlkZW50aXR5LFxuICAgICAgY2xhbXAgPSBmYWxzZSxcbiAgICAgIHVua25vd247XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IGludGVycG9sYXRvcihrMTAgPT09IDAgPyAwLjUgOiAoeCA9ICh0cmFuc2Zvcm0oeCkgLSB0MCkgKiBrMTAsIGNsYW1wID8gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgeCkpIDogeCkpO1xuICB9XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHQwID0gdHJhbnNmb3JtKHgwID0gK19bMF0pLCB0MSA9IHRyYW5zZm9ybSh4MSA9ICtfWzFdKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDEgLyAodDEgLSB0MCksIHNjYWxlKSA6IFt4MCwgeDFdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB0MCA9IHQoeDApLCB0MSA9IHQoeDEpLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMSAvICh0MSAtIHQwKTtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLmludGVycG9sYXRvcihzb3VyY2UuaW50ZXJwb2xhdG9yKCkpXG4gICAgICAuY2xhbXAoc291cmNlLmNsYW1wKCkpXG4gICAgICAudW5rbm93bihzb3VyY2UudW5rbm93bigpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbCgpIHtcbiAgdmFyIHNjYWxlID0gbGluZWFyaXNoKHRyYW5zZm9ybWVyKCkoaWRlbnRpdHkpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWwoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsTG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyKCkpLmRvbWFpbihbMSwgMTBdKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWxMb2coKSkuYmFzZShzY2FsZS5iYXNlKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVudGlhbFN5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgc2VxdWVudGlhbFN5bWxvZygpKS5jb25zdGFudChzY2FsZS5jb25zdGFudCgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcXVlbnRpYWxQb3coKSB7XG4gIHZhciBzY2FsZSA9IHBvd2lzaCh0cmFuc2Zvcm1lcigpKTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIHNlcXVlbnRpYWxQb3coKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW50aWFsU3FydCgpIHtcbiAgcmV0dXJuIHNlcXVlbnRpYWxQb3cuYXBwbHkobnVsbCwgYXJndW1lbnRzKS5leHBvbmVudCgwLjUpO1xufVxuIiwiaW1wb3J0IHthc2NlbmRpbmcsIGJpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2lkZW50aXR5fSBmcm9tIFwiLi9jb250aW51b3VzXCI7XG5pbXBvcnQge2luaXRJbnRlcnBvbGF0b3J9IGZyb20gXCIuL2luaXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VxdWVudGlhbFF1YW50aWxlKCkge1xuICB2YXIgZG9tYWluID0gW10sXG4gICAgICBpbnRlcnBvbGF0b3IgPSBpZGVudGl0eTtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgaWYgKCFpc05hTih4ID0gK3gpKSByZXR1cm4gaW50ZXJwb2xhdG9yKChiaXNlY3QoZG9tYWluLCB4KSAtIDEpIC8gKGRvbWFpbi5sZW5ndGggLSAxKSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBfLmxlbmd0aCwgZDsgaSA8IG47ICsraSkgaWYgKGQgPSBfW2ldLCBkICE9IG51bGwgJiYgIWlzTmFOKGQgPSArZCkpIGRvbWFpbi5wdXNoKGQpO1xuICAgIGRvbWFpbi5zb3J0KGFzY2VuZGluZyk7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRvciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbnRlcnBvbGF0b3IgPSBfLCBzY2FsZSkgOiBpbnRlcnBvbGF0b3I7XG4gIH07XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZXF1ZW50aWFsUXVhbnRpbGUoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cbiIsImltcG9ydCB7aWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdEludGVycG9sYXRvcn0gZnJvbSBcIi4vaW5pdFwiO1xuaW1wb3J0IHtsaW5lYXJpc2h9IGZyb20gXCIuL2xpbmVhclwiO1xuaW1wb3J0IHtsb2dnaXNofSBmcm9tIFwiLi9sb2dcIjtcbmltcG9ydCB7Y29weX0gZnJvbSBcIi4vc2VxdWVudGlhbFwiO1xuaW1wb3J0IHtzeW1sb2dpc2h9IGZyb20gXCIuL3N5bWxvZ1wiO1xuaW1wb3J0IHtwb3dpc2h9IGZyb20gXCIuL3Bvd1wiO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIHgwID0gMCxcbiAgICAgIHgxID0gMC41LFxuICAgICAgeDIgPSAxLFxuICAgICAgdDAsXG4gICAgICB0MSxcbiAgICAgIHQyLFxuICAgICAgazEwLFxuICAgICAgazIxLFxuICAgICAgaW50ZXJwb2xhdG9yID0gaWRlbnRpdHksXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBjbGFtcCA9IGZhbHNlLFxuICAgICAgdW5rbm93bjtcblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKHggPSAwLjUgKyAoKHggPSArdHJhbnNmb3JtKHgpKSAtIHQxKSAqICh4IDwgdDEgPyBrMTAgOiBrMjEpLCBpbnRlcnBvbGF0b3IoY2xhbXAgPyBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCB4KSkgOiB4KSk7XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodDAgPSB0cmFuc2Zvcm0oeDAgPSArX1swXSksIHQxID0gdHJhbnNmb3JtKHgxID0gK19bMV0pLCB0MiA9IHRyYW5zZm9ybSh4MiA9ICtfWzJdKSwgazEwID0gdDAgPT09IHQxID8gMCA6IDAuNSAvICh0MSAtIHQwKSwgazIxID0gdDEgPT09IHQyID8gMCA6IDAuNSAvICh0MiAtIHQxKSwgc2NhbGUpIDogW3gwLCB4MSwgeDJdO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gISFfLCBzY2FsZSkgOiBjbGFtcDtcbiAgfTtcblxuICBzY2FsZS5pbnRlcnBvbGF0b3IgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdG9yID0gXywgc2NhbGUpIDogaW50ZXJwb2xhdG9yO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB0MCA9IHQoeDApLCB0MSA9IHQoeDEpLCB0MiA9IHQoeDIpLCBrMTAgPSB0MCA9PT0gdDEgPyAwIDogMC41IC8gKHQxIC0gdDApLCBrMjEgPSB0MSA9PT0gdDIgPyAwIDogMC41IC8gKHQyIC0gdDEpO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGl2ZXJnaW5nKCkge1xuICB2YXIgc2NhbGUgPSBsaW5lYXJpc2godHJhbnNmb3JtZXIoKShpZGVudGl0eSkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgZGl2ZXJnaW5nKCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nTG9nKCkge1xuICB2YXIgc2NhbGUgPSBsb2dnaXNoKHRyYW5zZm9ybWVyKCkpLmRvbWFpbihbMC4xLCAxLCAxMF0pO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgZGl2ZXJnaW5nTG9nKCkpLmJhc2Uoc2NhbGUuYmFzZSgpKTtcbiAgfTtcblxuICByZXR1cm4gaW5pdEludGVycG9sYXRvci5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdmVyZ2luZ1N5bWxvZygpIHtcbiAgdmFyIHNjYWxlID0gc3ltbG9naXNoKHRyYW5zZm9ybWVyKCkpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgZGl2ZXJnaW5nU3ltbG9nKCkpLmNvbnN0YW50KHNjYWxlLmNvbnN0YW50KCkpO1xuICB9O1xuXG4gIHJldHVybiBpbml0SW50ZXJwb2xhdG9yLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2ZXJnaW5nUG93KCkge1xuICB2YXIgc2NhbGUgPSBwb3dpc2godHJhbnNmb3JtZXIoKSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBkaXZlcmdpbmdQb3coKSkuZXhwb25lbnQoc2NhbGUuZXhwb25lbnQoKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluaXRJbnRlcnBvbGF0b3IuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXZlcmdpbmdTcXJ0KCkge1xuICByZXR1cm4gZGl2ZXJnaW5nUG93LmFwcGx5KG51bGwsIGFyZ3VtZW50cykuZXhwb25lbnQoMC41KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICB2YXIgbiA9IHNwZWNpZmllci5sZW5ndGggLyA2IHwgMCwgY29sb3JzID0gbmV3IEFycmF5KG4pLCBpID0gMDtcbiAgd2hpbGUgKGkgPCBuKSBjb2xvcnNbaV0gPSBcIiNcIiArIHNwZWNpZmllci5zbGljZShpICogNiwgKytpICogNik7XG4gIHJldHVybiBjb2xvcnM7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiMWY3N2I0ZmY3ZjBlMmNhMDJjZDYyNzI4OTQ2N2JkOGM1NjRiZTM3N2MyN2Y3ZjdmYmNiZDIyMTdiZWNmXCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjdmYzk3ZmJlYWVkNGZkYzA4NmZmZmY5OTM4NmNiMGYwMDI3ZmJmNWIxNzY2NjY2NlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCIxYjllNzdkOTVmMDI3NTcwYjNlNzI5OGE2NmE2MWVlNmFiMDJhNjc2MWQ2NjY2NjZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiYTZjZWUzMWY3OGI0YjJkZjhhMzNhMDJjZmI5YTk5ZTMxYTFjZmRiZjZmZmY3ZjAwY2FiMmQ2NmEzZDlhZmZmZjk5YjE1OTI4XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcImZiYjRhZWIzY2RlM2NjZWJjNWRlY2JlNGZlZDlhNmZmZmZjY2U1ZDhiZGZkZGFlY2YyZjJmMlwiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCJiM2UyY2RmZGNkYWNjYmQ1ZThmNGNhZTRlNmY1YzlmZmYyYWVmMWUyY2NjY2NjY2NcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiZTQxYTFjMzc3ZWI4NGRhZjRhOTg0ZWEzZmY3ZjAwZmZmZjMzYTY1NjI4Zjc4MWJmOTk5OTk5XCIpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbG9ycyhcIjY2YzJhNWZjOGQ2MjhkYTBjYmU3OGFjM2E2ZDg1NGZmZDkyZmU1YzQ5NGIzYjNiM1wiKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjb2xvcnMoXCI4ZGQzYzdmZmZmYjNiZWJhZGFmYjgwNzI4MGIxZDNmZGI0NjJiM2RlNjlmY2NkZTVkOWQ5ZDliYzgwYmRjY2ViYzVmZmVkNmZcIik7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzKFwiNGU3OWE3ZjI4ZTJjZTE1NzU5NzZiN2IyNTlhMTRmZWRjOTQ5YWY3YWExZmY5ZGE3OWM3NTVmYmFiMGFiXCIpO1xuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVJnYkJhc2lzfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2NoZW1lKSB7XG4gIHJldHVybiBpbnRlcnBvbGF0ZVJnYkJhc2lzKHNjaGVtZVtzY2hlbWUubGVuZ3RoIC0gMV0pO1xufVxuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZDhiMzY1ZjVmNWY1NWFiNGFjXCIsXG4gIFwiYTY2MTFhZGZjMjdkODBjZGMxMDE4NTcxXCIsXG4gIFwiYTY2MTFhZGZjMjdkZjVmNWY1ODBjZGMxMDE4NTcxXCIsXG4gIFwiOGM1MTBhZDhiMzY1ZjZlOGMzYzdlYWU1NWFiNGFjMDE2NjVlXCIsXG4gIFwiOGM1MTBhZDhiMzY1ZjZlOGMzZjVmNWY1YzdlYWU1NWFiNGFjMDE2NjVlXCIsXG4gIFwiOGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzYzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlXCIsXG4gIFwiOGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzZjVmNWY1YzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlXCIsXG4gIFwiNTQzMDA1OGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzYzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlMDAzYzMwXCIsXG4gIFwiNTQzMDA1OGM1MTBhYmY4MTJkZGZjMjdkZjZlOGMzZjVmNWY1YzdlYWU1ODBjZGMxMzU5NzhmMDE2NjVlMDAzYzMwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImFmOGRjM2Y3ZjdmNzdmYmY3YlwiLFxuICBcIjdiMzI5NGMyYTVjZmE2ZGJhMDAwODgzN1wiLFxuICBcIjdiMzI5NGMyYTVjZmY3ZjdmN2E2ZGJhMDAwODgzN1wiLFxuICBcIjc2MmE4M2FmOGRjM2U3ZDRlOGQ5ZjBkMzdmYmY3YjFiNzgzN1wiLFxuICBcIjc2MmE4M2FmOGRjM2U3ZDRlOGY3ZjdmN2Q5ZjBkMzdmYmY3YjFiNzgzN1wiLFxuICBcIjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGQ5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzN1wiLFxuICBcIjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGY3ZjdmN2Q5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzN1wiLFxuICBcIjQwMDA0Yjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGQ5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzNzAwNDQxYlwiLFxuICBcIjQwMDA0Yjc2MmE4Mzk5NzBhYmMyYTVjZmU3ZDRlOGY3ZjdmN2Q5ZjBkM2E2ZGJhMDVhYWU2MTFiNzgzNzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlOWEzYzlmN2Y3ZjdhMWQ3NmFcIixcbiAgXCJkMDFjOGJmMWI2ZGFiOGUxODY0ZGFjMjZcIixcbiAgXCJkMDFjOGJmMWI2ZGFmN2Y3ZjdiOGUxODY0ZGFjMjZcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RlOWEzYzlmZGUwZWZmN2Y3ZjdlNmY1ZDBhMWQ3NmE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjFcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIixcbiAgXCI4ZTAxNTJjNTFiN2RkZTc3YWVmMWI2ZGFmZGUwZWZmN2Y3ZjdlNmY1ZDBiOGUxODY3ZmJjNDE0ZDkyMjEyNzY0MTlcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiOTk4ZWMzZjdmN2Y3ZjFhMzQwXCIsXG4gIFwiNWUzYzk5YjJhYmQyZmRiODYzZTY2MTAxXCIsXG4gIFwiNWUzYzk5YjJhYmQyZjdmN2Y3ZmRiODYzZTY2MTAxXCIsXG4gIFwiNTQyNzg4OTk4ZWMzZDhkYWViZmVlMGI2ZjFhMzQwYjM1ODA2XCIsXG4gIFwiNTQyNzg4OTk4ZWMzZDhkYWViZjdmN2Y3ZmVlMGI2ZjFhMzQwYjM1ODA2XCIsXG4gIFwiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2XCIsXG4gIFwiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZjdmN2Y3ZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2XCIsXG4gIFwiMmQwMDRiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2N2YzYjA4XCIsXG4gIFwiMmQwMDRiNTQyNzg4ODA3M2FjYjJhYmQyZDhkYWViZjdmN2Y3ZmVlMGI2ZmRiODYzZTA4MjE0YjM1ODA2N2YzYjA4XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVmOGE2MmY3ZjdmNzY3YTljZlwiLFxuICBcImNhMDAyMGY0YTU4MjkyYzVkZTA1NzFiMFwiLFxuICBcImNhMDAyMGY0YTU4MmY3ZjdmNzkyYzVkZTA1NzFiMFwiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmVmOGE2MmZkZGJjN2Y3ZjdmN2QxZTVmMDY3YTljZjIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcImIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhY1wiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiLFxuICBcIjY3MDAxZmIyMTgyYmQ2NjA0ZGY0YTU4MmZkZGJjN2Y3ZjdmN2QxZTVmMDkyYzVkZTQzOTNjMzIxNjZhYzA1MzA2MVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZjhhNjJmZmZmZmY5OTk5OTlcIixcbiAgXCJjYTAwMjBmNGE1ODJiYWJhYmE0MDQwNDBcIixcbiAgXCJjYTAwMjBmNGE1ODJmZmZmZmZiYWJhYmE0MDQwNDBcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJlZjhhNjJmZGRiYzdmZmZmZmZlMGUwZTA5OTk5OTk0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCJiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGRcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIixcbiAgXCI2NzAwMWZiMjE4MmJkNjYwNGRmNGE1ODJmZGRiYzdmZmZmZmZlMGUwZTBiYWJhYmE4Nzg3ODc0ZDRkNGQxYTFhMWFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmM4ZDU5ZmZmZmJmOTFiZmRiXCIsXG4gIFwiZDcxOTFjZmRhZTYxYWJkOWU5MmM3YmI2XCIsXG4gIFwiZDcxOTFjZmRhZTYxZmZmZmJmYWJkOWU5MmM3YmI2XCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDkwZTBmM2Y4OTFiZmRiNDU3NWI0XCIsXG4gIFwiZDczMDI3ZmM4ZDU5ZmVlMDkwZmZmZmJmZTBmM2Y4OTFiZmRiNDU3NWI0XCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0XCIsXG4gIFwiZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZmZmZmJmZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0MzEzNjk1XCIsXG4gIFwiYTUwMDI2ZDczMDI3ZjQ2ZDQzZmRhZTYxZmVlMDkwZmZmZmJmZTBmM2Y4YWJkOWU5NzRhZGQxNDU3NWI0MzEzNjk1XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZjOGQ1OWZmZmZiZjkxY2Y2MFwiLFxuICBcImQ3MTkxY2ZkYWU2MWE2ZDk2YTFhOTY0MVwiLFxuICBcImQ3MTkxY2ZkYWU2MWZmZmZiZmE2ZDk2YTFhOTY0MVwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA4YmQ5ZWY4YjkxY2Y2MDFhOTg1MFwiLFxuICBcImQ3MzAyN2ZjOGQ1OWZlZTA4YmZmZmZiZmQ5ZWY4YjkxY2Y2MDFhOTg1MFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MFwiLFxuICBcImQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MFwiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MDAwNjgzN1wiLFxuICBcImE1MDAyNmQ3MzAyN2Y0NmQ0M2ZkYWU2MWZlZTA4YmZmZmZiZmQ5ZWY4YmE2ZDk2YTY2YmQ2MzFhOTg1MDAwNjgzN1wiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmYzhkNTlmZmZmYmY5OWQ1OTRcIixcbiAgXCJkNzE5MWNmZGFlNjFhYmRkYTQyYjgzYmFcIixcbiAgXCJkNzE5MWNmZGFlNjFmZmZmYmZhYmRkYTQyYjgzYmFcIixcbiAgXCJkNTNlNGZmYzhkNTlmZWUwOGJlNmY1OTg5OWQ1OTQzMjg4YmRcIixcbiAgXCJkNTNlNGZmYzhkNTlmZWUwOGJmZmZmYmZlNmY1OTg5OWQ1OTQzMjg4YmRcIixcbiAgXCJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmRcIixcbiAgXCJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmRcIixcbiAgXCI5ZTAxNDJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmQ1ZTRmYTJcIixcbiAgXCI5ZTAxNDJkNTNlNGZmNDZkNDNmZGFlNjFmZWUwOGJmZmZmYmZlNmY1OThhYmRkYTQ2NmMyYTUzMjg4YmQ1ZTRmYTJcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTVmNWY5OTlkOGM5MmNhMjVmXCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MjM4YjQ1XCIsXG4gIFwiZWRmOGZiYjJlMmUyNjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0MmNhMjVmMDA2ZDJjXCIsXG4gIFwiZWRmOGZiY2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA1ODI0XCIsXG4gIFwiZjdmY2ZkZTVmNWY5Y2NlY2U2OTlkOGM5NjZjMmE0NDFhZTc2MjM4YjQ1MDA2ZDJjMDA0NDFiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImUwZWNmNDllYmNkYTg4NTZhN1wiLFxuICBcImVkZjhmYmIzY2RlMzhjOTZjNjg4NDE5ZFwiLFxuICBcImVkZjhmYmIzY2RlMzhjOTZjNjg4NTZhNzgxMGY3Y1wiLFxuICBcImVkZjhmYmJmZDNlNjllYmNkYThjOTZjNjg4NTZhNzgxMGY3Y1wiLFxuICBcImVkZjhmYmJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDZlMDE2YlwiLFxuICBcImY3ZmNmZGUwZWNmNGJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDZlMDE2YlwiLFxuICBcImY3ZmNmZGUwZWNmNGJmZDNlNjllYmNkYThjOTZjNjhjNmJiMTg4NDE5ZDgxMGY3YzRkMDA0YlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlMGYzZGJhOGRkYjU0M2EyY2FcIixcbiAgXCJmMGY5ZThiYWU0YmM3YmNjYzQyYjhjYmVcIixcbiAgXCJmMGY5ZThiYWU0YmM3YmNjYzQ0M2EyY2EwODY4YWNcIixcbiAgXCJmMGY5ZThjY2ViYzVhOGRkYjU3YmNjYzQ0M2EyY2EwODY4YWNcIixcbiAgXCJmMGY5ZThjY2ViYzVhOGRkYjU3YmNjYzQ0ZWIzZDMyYjhjYmUwODU4OWVcIixcbiAgXCJmN2ZjZjBlMGYzZGJjY2ViYzVhOGRkYjU3YmNjYzQ0ZWIzZDMyYjhjYmUwODU4OWVcIixcbiAgXCJmN2ZjZjBlMGYzZGJjY2ViYzVhOGRkYjU3YmNjYzQ0ZWIzZDMyYjhjYmUwODY4YWMwODQwODFcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZmVlOGM4ZmRiYjg0ZTM0YTMzXCIsXG4gIFwiZmVmMGQ5ZmRjYzhhZmM4ZDU5ZDczMDFmXCIsXG4gIFwiZmVmMGQ5ZmRjYzhhZmM4ZDU5ZTM0YTMzYjMwMDAwXCIsXG4gIFwiZmVmMGQ5ZmRkNDllZmRiYjg0ZmM4ZDU5ZTM0YTMzYjMwMDAwXCIsXG4gIFwiZmVmMGQ5ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmOTkwMDAwXCIsXG4gIFwiZmZmN2VjZmVlOGM4ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmOTkwMDAwXCIsXG4gIFwiZmZmN2VjZmVlOGM4ZmRkNDllZmRiYjg0ZmM4ZDU5ZWY2NTQ4ZDczMDFmYjMwMDAwN2YwMDAwXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImVjZTJmMGE2YmRkYjFjOTA5OVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjAyODE4YVwiLFxuICBcImY2ZWZmN2JkYzllMTY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjFjOTA5OTAxNmM1OVwiLFxuICBcImY2ZWZmN2QwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNjQ1MFwiLFxuICBcImZmZjdmYmVjZTJmMGQwZDFlNmE2YmRkYjY3YTljZjM2OTBjMDAyODE4YTAxNmM1OTAxNDYzNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlY2U3ZjJhNmJkZGIyYjhjYmVcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YwNTcwYjBcIixcbiAgXCJmMWVlZjZiZGM5ZTE3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YyYjhjYmUwNDVhOGRcIixcbiAgXCJmMWVlZjZkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwMzRlN2JcIixcbiAgXCJmZmY3ZmJlY2U3ZjJkMGQxZTZhNmJkZGI3NGE5Y2YzNjkwYzAwNTcwYjAwNDVhOGQwMjM4NThcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZTdlMWVmYzk5NGM3ZGQxYzc3XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwY2UxMjU2XCIsXG4gIFwiZjFlZWY2ZDdiNWQ4ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZGQxYzc3OTgwMDQzXCIsXG4gIFwiZjFlZWY2ZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTEwMDNmXCIsXG4gIFwiZjdmNGY5ZTdlMWVmZDRiOWRhYzk5NGM3ZGY2NWIwZTcyOThhY2UxMjU2OTgwMDQzNjcwMDFmXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZkZTBkZGZhOWZiNWM1MWI4YVwiLFxuICBcImZlZWJlMmZiYjRiOWY3NjhhMWFlMDE3ZVwiLFxuICBcImZlZWJlMmZiYjRiOWY3NjhhMWM1MWI4YTdhMDE3N1wiLFxuICBcImZlZWJlMmZjYzVjMGZhOWZiNWY3NjhhMWM1MWI4YTdhMDE3N1wiLFxuICBcImZlZWJlMmZjYzVjMGZhOWZiNWY3NjhhMWRkMzQ5N2FlMDE3ZTdhMDE3N1wiLFxuICBcImZmZjdmM2ZkZTBkZGZjYzVjMGZhOWZiNWY3NjhhMWRkMzQ5N2FlMDE3ZTdhMDE3N1wiLFxuICBcImZmZjdmM2ZkZTBkZGZjYzVjMGZhOWZiNWY3NjhhMWRkMzQ5N2FlMDE3ZTdhMDE3NzQ5MDA2YVwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJlZGY4YjE3ZmNkYmIyYzdmYjhcIixcbiAgXCJmZmZmY2NhMWRhYjQ0MWI2YzQyMjVlYThcIixcbiAgXCJmZmZmY2NhMWRhYjQ0MWI2YzQyYzdmYjgyNTM0OTRcIixcbiAgXCJmZmZmY2NjN2U5YjQ3ZmNkYmI0MWI2YzQyYzdmYjgyNTM0OTRcIixcbiAgXCJmZmZmY2NjN2U5YjQ3ZmNkYmI0MWI2YzQxZDkxYzAyMjVlYTgwYzJjODRcIixcbiAgXCJmZmZmZDllZGY4YjFjN2U5YjQ3ZmNkYmI0MWI2YzQxZDkxYzAyMjVlYTgwYzJjODRcIixcbiAgXCJmZmZmZDllZGY4YjFjN2U5YjQ3ZmNkYmI0MWI2YzQxZDkxYzAyMjVlYTgyNTM0OTQwODFkNThcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZjdmY2I5YWRkZDhlMzFhMzU0XCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MjM4NDQzXCIsXG4gIFwiZmZmZmNjYzJlNjk5NzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5MzFhMzU0MDA2ODM3XCIsXG4gIFwiZmZmZmNjZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA1YTMyXCIsXG4gIFwiZmZmZmU1ZjdmY2I5ZDlmMGEzYWRkZDhlNzhjNjc5NDFhYjVkMjM4NDQzMDA2ODM3MDA0NTI5XCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZmZjdiY2ZlYzQ0ZmQ5NWYwZVwiLFxuICBcImZmZmZkNGZlZDk4ZWZlOTkyOWNjNGMwMlwiLFxuICBcImZmZmZkNGZlZDk4ZWZlOTkyOWQ5NWYwZTk5MzQwNFwiLFxuICBcImZmZmZkNGZlZTM5MWZlYzQ0ZmZlOTkyOWQ5NWYwZTk5MzQwNFwiLFxuICBcImZmZmZkNGZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjhjMmQwNFwiLFxuICBcImZmZmZlNWZmZjdiY2ZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjhjMmQwNFwiLFxuICBcImZmZmZlNWZmZjdiY2ZlZTM5MWZlYzQ0ZmZlOTkyOWVjNzAxNGNjNGMwMjk5MzQwNDY2MjUwNlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZmVkYTBmZWIyNGNmMDNiMjBcIixcbiAgXCJmZmZmYjJmZWNjNWNmZDhkM2NlMzFhMWNcIixcbiAgXCJmZmZmYjJmZWNjNWNmZDhkM2NmMDNiMjBiZDAwMjZcIixcbiAgXCJmZmZmYjJmZWQ5NzZmZWIyNGNmZDhkM2NmMDNiMjBiZDAwMjZcIixcbiAgXCJmZmZmYjJmZWQ5NzZmZWIyNGNmZDhkM2NmYzRlMmFlMzFhMWNiMTAwMjZcIixcbiAgXCJmZmZmY2NmZmVkYTBmZWQ5NzZmZWIyNGNmZDhkM2NmYzRlMmFlMzFhMWNiMTAwMjZcIixcbiAgXCJmZmZmY2NmZmVkYTBmZWQ5NzZmZWIyNGNmZDhkM2NmYzRlMmFlMzFhMWNiZDAwMjY4MDAwMjZcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZGVlYmY3OWVjYWUxMzE4MmJkXCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MjE3MWI1XCIsXG4gIFwiZWZmM2ZmYmRkN2U3NmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2MzE4MmJkMDg1MTljXCIsXG4gIFwiZWZmM2ZmYzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg0NTk0XCIsXG4gIFwiZjdmYmZmZGVlYmY3YzZkYmVmOWVjYWUxNmJhZWQ2NDI5MmM2MjE3MWI1MDg1MTljMDgzMDZiXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImU1ZjVlMGExZDk5YjMxYTM1NFwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjIzOGI0NVwiLFxuICBcImVkZjhlOWJhZTRiMzc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjMxYTM1NDAwNmQyY1wiLFxuICBcImVkZjhlOWM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNWEzMlwiLFxuICBcImY3ZmNmNWU1ZjVlMGM3ZTljMGExZDk5Yjc0YzQ3NjQxYWI1ZDIzOGI0NTAwNmQyYzAwNDQxYlwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmMGYwZjBiZGJkYmQ2MzYzNjNcIixcbiAgXCJmN2Y3ZjdjY2NjY2M5Njk2OTY1MjUyNTJcIixcbiAgXCJmN2Y3ZjdjY2NjY2M5Njk2OTY2MzYzNjMyNTI1MjVcIixcbiAgXCJmN2Y3ZjdkOWQ5ZDliZGJkYmQ5Njk2OTY2MzYzNjMyNTI1MjVcIixcbiAgXCJmN2Y3ZjdkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjVcIixcbiAgXCJmZmZmZmZmMGYwZjBkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjVcIixcbiAgXCJmZmZmZmZmMGYwZjBkOWQ5ZDliZGJkYmQ5Njk2OTY3MzczNzM1MjUyNTIyNTI1MjUwMDAwMDBcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiaW1wb3J0IGNvbG9ycyBmcm9tIFwiLi4vY29sb3JzLmpzXCI7XG5pbXBvcnQgcmFtcCBmcm9tIFwiLi4vcmFtcC5qc1wiO1xuXG5leHBvcnQgdmFyIHNjaGVtZSA9IG5ldyBBcnJheSgzKS5jb25jYXQoXG4gIFwiZWZlZGY1YmNiZGRjNzU2YmIxXCIsXG4gIFwiZjJmMGY3Y2JjOWUyOWU5YWM4NmE1MWEzXCIsXG4gIFwiZjJmMGY3Y2JjOWUyOWU5YWM4NzU2YmIxNTQyNzhmXCIsXG4gIFwiZjJmMGY3ZGFkYWViYmNiZGRjOWU5YWM4NzU2YmIxNTQyNzhmXCIsXG4gIFwiZjJmMGY3ZGFkYWViYmNiZGRjOWU5YWM4ODA3ZGJhNmE1MWEzNGExNDg2XCIsXG4gIFwiZmNmYmZkZWZlZGY1ZGFkYWViYmNiZGRjOWU5YWM4ODA3ZGJhNmE1MWEzNGExNDg2XCIsXG4gIFwiZmNmYmZkZWZlZGY1ZGFkYWViYmNiZGRjOWU5YWM4ODA3ZGJhNmE1MWEzNTQyNzhmM2YwMDdkXCJcbikubWFwKGNvbG9ycyk7XG5cbmV4cG9ydCBkZWZhdWx0IHJhbXAoc2NoZW1lKTtcbiIsImltcG9ydCBjb2xvcnMgZnJvbSBcIi4uL2NvbG9ycy5qc1wiO1xuaW1wb3J0IHJhbXAgZnJvbSBcIi4uL3JhbXAuanNcIjtcblxuZXhwb3J0IHZhciBzY2hlbWUgPSBuZXcgQXJyYXkoMykuY29uY2F0KFxuICBcImZlZTBkMmZjOTI3MmRlMmQyNlwiLFxuICBcImZlZTVkOWZjYWU5MWZiNmE0YWNiMTgxZFwiLFxuICBcImZlZTVkOWZjYWU5MWZiNmE0YWRlMmQyNmE1MGYxNVwiLFxuICBcImZlZTVkOWZjYmJhMWZjOTI3MmZiNmE0YWRlMmQyNmE1MGYxNVwiLFxuICBcImZlZTVkOWZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZDk5MDAwZFwiLFxuICBcImZmZjVmMGZlZTBkMmZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZDk5MDAwZFwiLFxuICBcImZmZjVmMGZlZTBkMmZjYmJhMWZjOTI3MmZiNmE0YWVmM2IyY2NiMTgxZGE1MGYxNTY3MDAwZFwiXG4pLm1hcChjb2xvcnMpO1xuXG5leHBvcnQgZGVmYXVsdCByYW1wKHNjaGVtZSk7XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcbmltcG9ydCByYW1wIGZyb20gXCIuLi9yYW1wLmpzXCI7XG5cbmV4cG9ydCB2YXIgc2NoZW1lID0gbmV3IEFycmF5KDMpLmNvbmNhdChcbiAgXCJmZWU2Y2VmZGFlNmJlNjU1MGRcIixcbiAgXCJmZWVkZGVmZGJlODVmZDhkM2NkOTQ3MDFcIixcbiAgXCJmZWVkZGVmZGJlODVmZDhkM2NlNjU1MGRhNjM2MDNcIixcbiAgXCJmZWVkZGVmZGQwYTJmZGFlNmJmZDhkM2NlNjU1MGRhNjM2MDNcIixcbiAgXCJmZWVkZGVmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDE4YzJkMDRcIixcbiAgXCJmZmY1ZWJmZWU2Y2VmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDE4YzJkMDRcIixcbiAgXCJmZmY1ZWJmZWU2Y2VmZGQwYTJmZGFlNmJmZDhkM2NmMTY5MTNkOTQ4MDFhNjM2MDM3ZjI3MDRcIlxuKS5tYXAoY29sb3JzKTtcblxuZXhwb3J0IGRlZmF1bHQgcmFtcChzY2hlbWUpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpO1xuICByZXR1cm4gXCJyZ2IoXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKC00LjU0IC0gdCAqICgzNS4zNCAtIHQgKiAoMjM4MS43MyAtIHQgKiAoNjQwMi43IC0gdCAqICg3MDI0LjcyIC0gdCAqIDI3MTAuNTcpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgzMi40OSArIHQgKiAoMTcwLjczICsgdCAqICg1Mi44MiAtIHQgKiAoMTMxLjQ2IC0gdCAqICgxNzYuNTggLSB0ICogNjcuMzcpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCg4MS4yNCArIHQgKiAoNDQyLjM2IC0gdCAqICgyNDgyLjQzIC0gdCAqICg2MTY3LjI0IC0gdCAqICg2NjE0Ljk0IC0gdCAqIDI0NzUuNjcpKSkpKSkpXG4gICAgICArIFwiKVwiO1xufVxuIiwiaW1wb3J0IHtjdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmd9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBpbnRlcnBvbGF0ZUN1YmVoZWxpeExvbmcoY3ViZWhlbGl4KDMwMCwgMC41LCAwLjApLCBjdWJlaGVsaXgoLTI0MCwgMC41LCAxLjApKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IHZhciB3YXJtID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgtMTAwLCAwLjc1LCAwLjM1KSwgY3ViZWhlbGl4KDgwLCAxLjUwLCAwLjgpKTtcblxuZXhwb3J0IHZhciBjb29sID0gaW50ZXJwb2xhdGVDdWJlaGVsaXhMb25nKGN1YmVoZWxpeCgyNjAsIDAuNzUsIDAuMzUpLCBjdWJlaGVsaXgoODAsIDEuNTAsIDAuOCkpO1xuXG52YXIgYyA9IGN1YmVoZWxpeCgpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIGlmICh0IDwgMCB8fCB0ID4gMSkgdCAtPSBNYXRoLmZsb29yKHQpO1xuICB2YXIgdHMgPSBNYXRoLmFicyh0IC0gMC41KTtcbiAgYy5oID0gMzYwICogdCAtIDEwMDtcbiAgYy5zID0gMS41IC0gMS41ICogdHM7XG4gIGMubCA9IDAuOCAtIDAuOSAqIHRzO1xuICByZXR1cm4gYyArIFwiXCI7XG59XG4iLCJpbXBvcnQge3JnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5cbnZhciBjID0gcmdiKCksXG4gICAgcGlfMV8zID0gTWF0aC5QSSAvIDMsXG4gICAgcGlfMl8zID0gTWF0aC5QSSAqIDIgLyAzO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0KSB7XG4gIHZhciB4O1xuICB0ID0gKDAuNSAtIHQpICogTWF0aC5QSTtcbiAgYy5yID0gMjU1ICogKHggPSBNYXRoLnNpbih0KSkgKiB4O1xuICBjLmcgPSAyNTUgKiAoeCA9IE1hdGguc2luKHQgKyBwaV8xXzMpKSAqIHg7XG4gIGMuYiA9IDI1NSAqICh4ID0gTWF0aC5zaW4odCArIHBpXzJfMykpICogeDtcbiAgcmV0dXJuIGMgKyBcIlwiO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odCkge1xuICB0ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdCkpO1xuICByZXR1cm4gXCJyZ2IoXCJcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKDM0LjYxICsgdCAqICgxMTcyLjMzIC0gdCAqICgxMDc5My41NiAtIHQgKiAoMzMzMDAuMTIgLSB0ICogKDM4Mzk0LjQ5IC0gdCAqIDE0ODI1LjA1KSkpKSkpKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMjMuMzEgKyB0ICogKDU1Ny4zMyArIHQgKiAoMTIyNS4zMyAtIHQgKiAoMzU3NC45NiAtIHQgKiAoMTA3My43NyArIHQgKiA3MDcuNTYpKSkpKSkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCgyNy4yICsgdCAqICgzMjExLjEgLSB0ICogKDE1MzI3Ljk3IC0gdCAqICgyNzgxNCAtIHQgKiAoMjI1NjkuMTggLSB0ICogNjgzOC42NikpKSkpKSlcbiAgICAgICsgXCIpXCI7XG59XG4iLCJpbXBvcnQgY29sb3JzIGZyb20gXCIuLi9jb2xvcnMuanNcIjtcblxuZnVuY3Rpb24gcmFtcChyYW5nZSkge1xuICB2YXIgbiA9IHJhbmdlLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gcmFuZ2VbTWF0aC5tYXgoMCwgTWF0aC5taW4obiAtIDEsIE1hdGguZmxvb3IodCAqIG4pKSldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCByYW1wKGNvbG9ycyhcIjQ0MDE1NDQ0MDI1NjQ1MDQ1NzQ1MDU1OTQ2MDc1YTQ2MDg1YzQ2MGE1ZDQ2MGI1ZTQ3MGQ2MDQ3MGU2MTQ3MTA2MzQ3MTE2NDQ3MTM2NTQ4MTQ2NzQ4MTY2ODQ4MTc2OTQ4MTg2YTQ4MWE2YzQ4MWI2ZDQ4MWM2ZTQ4MWQ2ZjQ4MWY3MDQ4MjA3MTQ4MjE3MzQ4MjM3NDQ4MjQ3NTQ4MjU3NjQ4MjY3NzQ4Mjg3ODQ4Mjk3OTQ3MmE3YTQ3MmM3YTQ3MmQ3YjQ3MmU3YzQ3MmY3ZDQ2MzA3ZTQ2MzI3ZTQ2MzM3ZjQ2MzQ4MDQ1MzU4MTQ1Mzc4MTQ1Mzg4MjQ0Mzk4MzQ0M2E4MzQ0M2I4NDQzM2Q4NDQzM2U4NTQyM2Y4NTQyNDA4NjQyNDE4NjQxNDI4NzQxNDQ4NzQwNDU4ODQwNDY4ODNmNDc4ODNmNDg4OTNlNDk4OTNlNGE4OTNlNGM4YTNkNGQ4YTNkNGU4YTNjNGY4YTNjNTA4YjNiNTE4YjNiNTI4YjNhNTM4YjNhNTQ4YzM5NTU4YzM5NTY4YzM4NTg4YzM4NTk4YzM3NWE4YzM3NWI4ZDM2NWM4ZDM2NWQ4ZDM1NWU4ZDM1NWY4ZDM0NjA4ZDM0NjE4ZDMzNjI4ZDMzNjM4ZDMyNjQ4ZTMyNjU4ZTMxNjY4ZTMxNjc4ZTMxNjg4ZTMwNjk4ZTMwNmE4ZTJmNmI4ZTJmNmM4ZTJlNmQ4ZTJlNmU4ZTJlNmY4ZTJkNzA4ZTJkNzE4ZTJjNzE4ZTJjNzI4ZTJjNzM4ZTJiNzQ4ZTJiNzU4ZTJhNzY4ZTJhNzc4ZTJhNzg4ZTI5Nzk4ZTI5N2E4ZTI5N2I4ZTI4N2M4ZTI4N2Q4ZTI3N2U4ZTI3N2Y4ZTI3ODA4ZTI2ODE4ZTI2ODI4ZTI2ODI4ZTI1ODM4ZTI1ODQ4ZTI1ODU4ZTI0ODY4ZTI0ODc4ZTIzODg4ZTIzODk4ZTIzOGE4ZDIyOGI4ZDIyOGM4ZDIyOGQ4ZDIxOGU4ZDIxOGY4ZDIxOTA4ZDIxOTE4YzIwOTI4YzIwOTI4YzIwOTM4YzFmOTQ4YzFmOTU4YjFmOTY4YjFmOTc4YjFmOTg4YjFmOTk4YTFmOWE4YTFlOWI4YTFlOWM4OTFlOWQ4OTFmOWU4OTFmOWY4ODFmYTA4ODFmYTE4ODFmYTE4NzFmYTI4NzIwYTM4NjIwYTQ4NjIxYTU4NTIxYTY4NTIyYTc4NTIyYTg4NDIzYTk4MzI0YWE4MzI1YWI4MjI1YWM4MjI2YWQ4MTI3YWQ4MTI4YWU4MDI5YWY3ZjJhYjA3ZjJjYjE3ZTJkYjI3ZDJlYjM3YzJmYjQ3YzMxYjU3YjMyYjY3YTM0YjY3OTM1Yjc3OTM3Yjg3ODM4Yjk3NzNhYmE3NjNiYmI3NTNkYmM3NDNmYmM3MzQwYmQ3MjQyYmU3MTQ0YmY3MDQ2YzA2ZjQ4YzE2ZTRhYzE2ZDRjYzI2YzRlYzM2YjUwYzQ2YTUyYzU2OTU0YzU2ODU2YzY2NzU4Yzc2NTVhYzg2NDVjYzg2MzVlYzk2MjYwY2E2MDYzY2I1ZjY1Y2I1ZTY3Y2M1YzY5Y2Q1YjZjY2Q1YTZlY2U1ODcwY2Y1NzczZDA1Njc1ZDA1NDc3ZDE1MzdhZDE1MTdjZDI1MDdmZDM0ZTgxZDM0ZDg0ZDQ0Yjg2ZDU0OTg5ZDU0ODhiZDY0NjhlZDY0NTkwZDc0MzkzZDc0MTk1ZDg0MDk4ZDgzZTliZDkzYzlkZDkzYmEwZGEzOWEyZGEzN2E1ZGIzNmE4ZGIzNGFhZGMzMmFkZGMzMGIwZGQyZmIyZGQyZGI1ZGUyYmI4ZGUyOWJhZGUyOGJkZGYyNmMwZGYyNWMyZGYyM2M1ZTAyMWM4ZTAyMGNhZTExZmNkZTExZGQwZTExY2QyZTIxYmQ1ZTIxYWQ4ZTIxOWRhZTMxOWRkZTMxOGRmZTMxOGUyZTQxOGU1ZTQxOWU3ZTQxOWVhZTUxYWVjZTUxYmVmZTUxY2YxZTUxZGY0ZTYxZWY2ZTYyMGY4ZTYyMWZiZTcyM2ZkZTcyNVwiKSk7XG5cbmV4cG9ydCB2YXIgbWFnbWEgPSByYW1wKGNvbG9ycyhcIjAwMDAwNDAxMDAwNTAxMDEwNjAxMDEwODAyMDEwOTAyMDIwYjAyMDIwZDAzMDMwZjAzMDMxMjA0MDQxNDA1MDQxNjA2MDUxODA2MDUxYTA3MDYxYzA4MDcxZTA5MDcyMDBhMDgyMjBiMDkyNDBjMDkyNjBkMGEyOTBlMGIyYjEwMGIyZDExMGMyZjEyMGQzMTEzMGQzNDE0MGUzNjE1MGUzODE2MGYzYjE4MGYzZDE5MTAzZjFhMTA0MjFjMTA0NDFkMTE0NzFlMTE0OTIwMTE0YjIxMTE0ZTIyMTE1MDI0MTI1MzI1MTI1NTI3MTI1ODI5MTE1YTJhMTE1YzJjMTE1ZjJkMTE2MTJmMTE2MzMxMTE2NTMzMTA2NzM0MTA2OTM2MTA2YjM4MTA2YzM5MGY2ZTNiMGY3MDNkMGY3MTNmMGY3MjQwMGY3NDQyMGY3NTQ0MGY3NjQ1MTA3NzQ3MTA3ODQ5MTA3ODRhMTA3OTRjMTE3YTRlMTE3YjRmMTI3YjUxMTI3YzUyMTM3YzU0MTM3ZDU2MTQ3ZDU3MTU3ZTU5MTU3ZTVhMTY3ZTVjMTY3ZjVkMTc3ZjVmMTg3ZjYwMTg4MDYyMTk4MDY0MWE4MDY1MWE4MDY3MWI4MDY4MWM4MTZhMWM4MTZiMWQ4MTZkMWQ4MTZlMWU4MTcwMWY4MTcyMWY4MTczMjA4MTc1MjE4MTc2MjE4MTc4MjI4MTc5MjI4MjdiMjM4MjdjMjM4MjdlMjQ4MjgwMjU4MjgxMjU4MTgzMjY4MTg0MjY4MTg2Mjc4MTg4Mjc4MTg5Mjg4MThiMjk4MThjMjk4MThlMmE4MTkwMmE4MTkxMmI4MTkzMmI4MDk0MmM4MDk2MmM4MDk4MmQ4MDk5MmQ4MDliMmU3ZjljMmU3ZjllMmY3ZmEwMmY3ZmExMzA3ZWEzMzA3ZWE1MzE3ZWE2MzE3ZGE4MzI3ZGFhMzM3ZGFiMzM3Y2FkMzQ3Y2FlMzQ3YmIwMzU3YmIyMzU3YmIzMzY3YWI1MzY3YWI3Mzc3OWI4Mzc3OWJhMzg3OGJjMzk3OGJkMzk3N2JmM2E3N2MwM2E3NmMyM2I3NWM0M2M3NWM1M2M3NGM3M2Q3M2M4M2U3M2NhM2U3MmNjM2Y3MWNkNDA3MWNmNDA3MGQwNDE2ZmQyNDI2ZmQzNDM2ZWQ1NDQ2ZGQ2NDU2Y2Q4NDU2Y2Q5NDY2YmRiNDc2YWRjNDg2OWRlNDk2OGRmNGE2OGUwNGM2N2UyNGQ2NmUzNGU2NWU0NGY2NGU1NTA2NGU3NTI2M2U4NTM2MmU5NTQ2MmVhNTY2MWViNTc2MGVjNTg2MGVkNWE1ZmVlNWI1ZWVmNWQ1ZWYwNWY1ZWYxNjA1ZGYyNjI1ZGYyNjQ1Y2YzNjU1Y2Y0Njc1Y2Y0Njk1Y2Y1NmI1Y2Y2NmM1Y2Y2NmU1Y2Y3NzA1Y2Y3NzI1Y2Y4NzQ1Y2Y4NzY1Y2Y5Nzg1ZGY5Nzk1ZGY5N2I1ZGZhN2Q1ZWZhN2Y1ZWZhODE1ZmZiODM1ZmZiODU2MGZiODc2MWZjODk2MWZjOGE2MmZjOGM2M2ZjOGU2NGZjOTA2NWZkOTI2NmZkOTQ2N2ZkOTY2OGZkOTg2OWZkOWE2YWZkOWI2YmZlOWQ2Y2ZlOWY2ZGZlYTE2ZWZlYTM2ZmZlYTU3MWZlYTc3MmZlYTk3M2ZlYWE3NGZlYWM3NmZlYWU3N2ZlYjA3OGZlYjI3YWZlYjQ3YmZlYjY3Y2ZlYjc3ZWZlYjk3ZmZlYmI4MWZlYmQ4MmZlYmY4NGZlYzE4NWZlYzI4N2ZlYzQ4OGZlYzY4YWZlYzg4Y2ZlY2E4ZGZlY2M4ZmZlY2Q5MGZlY2Y5MmZlZDE5NGZlZDM5NWZlZDU5N2ZlZDc5OWZlZDg5YWZkZGE5Y2ZkZGM5ZWZkZGVhMGZkZTBhMWZkZTJhM2ZkZTNhNWZkZTVhN2ZkZTdhOWZkZTlhYWZkZWJhY2ZjZWNhZWZjZWViMGZjZjBiMmZjZjJiNGZjZjRiNmZjZjZiOGZjZjdiOWZjZjliYmZjZmJiZGZjZmRiZlwiKSk7XG5cbmV4cG9ydCB2YXIgaW5mZXJubyA9IHJhbXAoY29sb3JzKFwiMDAwMDA0MDEwMDA1MDEwMTA2MDEwMTA4MDIwMTBhMDIwMjBjMDIwMjBlMDMwMjEwMDQwMzEyMDQwMzE0MDUwNDE3MDYwNDE5MDcwNTFiMDgwNTFkMDkwNjFmMGEwNzIyMGIwNzI0MGMwODI2MGQwODI5MGUwOTJiMTAwOTJkMTEwYTMwMTIwYTMyMTQwYjM0MTUwYjM3MTYwYjM5MTgwYzNjMTkwYzNlMWIwYzQxMWMwYzQzMWUwYzQ1MWYwYzQ4MjEwYzRhMjMwYzRjMjQwYzRmMjYwYzUxMjgwYjUzMjkwYjU1MmIwYjU3MmQwYjU5MmYwYTViMzEwYTVjMzIwYTVlMzQwYTVmMzYwOTYxMzgwOTYyMzkwOTYzM2IwOTY0M2QwOTY1M2UwOTY2NDAwYTY3NDIwYTY4NDQwYTY4NDUwYTY5NDcwYjZhNDkwYjZhNGEwYzZiNGMwYzZiNGQwZDZjNGYwZDZjNTEwZTZjNTIwZTZkNTQwZjZkNTUwZjZkNTcxMDZlNTkxMDZlNWExMTZlNWMxMjZlNWQxMjZlNWYxMzZlNjExMzZlNjIxNDZlNjQxNTZlNjUxNTZlNjcxNjZlNjkxNjZlNmExNzZlNmMxODZlNmQxODZlNmYxOTZlNzExOTZlNzIxYTZlNzQxYTZlNzUxYjZlNzcxYzZkNzgxYzZkN2ExZDZkN2MxZDZkN2QxZTZkN2YxZTZjODAxZjZjODIyMDZjODQyMDZiODUyMTZiODcyMTZiODgyMjZhOGEyMjZhOGMyMzY5OGQyMzY5OGYyNDY5OTAyNTY4OTIyNTY4OTMyNjY3OTUyNjY3OTcyNzY2OTgyNzY2OWEyODY1OWIyOTY0OWQyOTY0OWYyYTYzYTAyYTYzYTIyYjYyYTMyYzYxYTUyYzYwYTYyZDYwYTgyZTVmYTkyZTVlYWIyZjVlYWQzMDVkYWUzMDVjYjAzMTViYjEzMjVhYjMzMjVhYjQzMzU5YjYzNDU4YjczNTU3YjkzNTU2YmEzNjU1YmMzNzU0YmQzODUzYmYzOTUyYzAzYTUxYzEzYTUwYzMzYjRmYzQzYzRlYzYzZDRkYzczZTRjYzgzZjRiY2E0MDRhY2I0MTQ5Y2M0MjQ4Y2U0MzQ3Y2Y0NDQ2ZDA0NTQ1ZDI0NjQ0ZDM0NzQzZDQ0ODQyZDU0YTQxZDc0YjNmZDg0YzNlZDk0ZDNkZGE0ZTNjZGI1MDNiZGQ1MTNhZGU1MjM4ZGY1MzM3ZTA1NTM2ZTE1NjM1ZTI1NzM0ZTM1OTMzZTQ1YTMxZTU1YzMwZTY1ZDJmZTc1ZTJlZTg2MDJkZTk2MTJiZWE2MzJhZWI2NDI5ZWI2NjI4ZWM2NzI2ZWQ2OTI1ZWU2YTI0ZWY2YzIzZWY2ZTIxZjA2ZjIwZjE3MTFmZjE3MzFkZjI3NDFjZjM3NjFiZjM3ODE5ZjQ3OTE4ZjU3YjE3ZjU3ZDE1ZjY3ZTE0ZjY4MDEzZjc4MjEyZjc4NDEwZjg4NTBmZjg4NzBlZjg4OTBjZjk4YjBiZjk4YzBhZjk4ZTA5ZmE5MDA4ZmE5MjA3ZmE5NDA3ZmI5NjA2ZmI5NzA2ZmI5OTA2ZmI5YjA2ZmI5ZDA3ZmM5ZjA3ZmNhMTA4ZmNhMzA5ZmNhNTBhZmNhNjBjZmNhODBkZmNhYTBmZmNhYzExZmNhZTEyZmNiMDE0ZmNiMjE2ZmNiNDE4ZmJiNjFhZmJiODFkZmJiYTFmZmJiYzIxZmJiZTIzZmFjMDI2ZmFjMjI4ZmFjNDJhZmFjNjJkZjljNzJmZjljOTMyZjljYjM1ZjhjZDM3ZjhjZjNhZjdkMTNkZjdkMzQwZjZkNTQzZjZkNzQ2ZjVkOTQ5ZjVkYjRjZjRkZDRmZjRkZjUzZjRlMTU2ZjNlMzVhZjNlNTVkZjJlNjYxZjJlODY1ZjJlYTY5ZjFlYzZkZjFlZDcxZjFlZjc1ZjFmMTc5ZjJmMjdkZjJmNDgyZjNmNTg2ZjNmNjhhZjRmODhlZjVmOTkyZjZmYTk2ZjhmYjlhZjlmYzlkZmFmZGExZmNmZmE0XCIpKTtcblxuZXhwb3J0IHZhciBwbGFzbWEgPSByYW1wKGNvbG9ycyhcIjBkMDg4NzEwMDc4ODEzMDc4OTE2MDc4YTE5MDY4YzFiMDY4ZDFkMDY4ZTIwMDY4ZjIyMDY5MDI0MDY5MTI2MDU5MTI4MDU5MjJhMDU5MzJjMDU5NDJlMDU5NTJmMDU5NjMxMDU5NzMzMDU5NzM1MDQ5ODM3MDQ5OTM4MDQ5YTNhMDQ5YTNjMDQ5YjNlMDQ5YzNmMDQ5YzQxMDQ5ZDQzMDM5ZTQ0MDM5ZTQ2MDM5ZjQ4MDM5ZjQ5MDNhMDRiMDNhMTRjMDJhMTRlMDJhMjUwMDJhMjUxMDJhMzUzMDJhMzU1MDJhNDU2MDFhNDU4MDFhNDU5MDFhNTViMDFhNTVjMDFhNjVlMDFhNjYwMDFhNjYxMDBhNzYzMDBhNzY0MDBhNzY2MDBhNzY3MDBhODY5MDBhODZhMDBhODZjMDBhODZlMDBhODZmMDBhODcxMDBhODcyMDFhODc0MDFhODc1MDFhODc3MDFhODc4MDFhODdhMDJhODdiMDJhODdkMDNhODdlMDNhODgwMDRhODgxMDRhNzgzMDVhNzg0MDVhNzg2MDZhNjg3MDdhNjg4MDhhNjhhMDlhNThiMGFhNThkMGJhNThlMGNhNDhmMGRhNDkxMGVhMzkyMGZhMzk0MTBhMjk1MTFhMTk2MTNhMTk4MTRhMDk5MTU5ZjlhMTY5ZjljMTc5ZTlkMTg5ZDllMTk5ZGEwMWE5Y2ExMWI5YmEyMWQ5YWEzMWU5YWE1MWY5OWE2MjA5OGE3MjE5N2E4MjI5NmFhMjM5NWFiMjQ5NGFjMjY5NGFkMjc5M2FlMjg5MmIwMjk5MWIxMmE5MGIyMmI4ZmIzMmM4ZWI0MmU4ZGI1MmY4Y2I2MzA4YmI3MzE4YWI4MzI4OWJhMzM4OGJiMzQ4OGJjMzU4N2JkMzc4NmJlMzg4NWJmMzk4NGMwM2E4M2MxM2I4MmMyM2M4MWMzM2Q4MGM0M2U3ZmM1NDA3ZWM2NDE3ZGM3NDI3Y2M4NDM3YmM5NDQ3YWNhNDU3YWNiNDY3OWNjNDc3OGNjNDk3N2NkNGE3NmNlNGI3NWNmNGM3NGQwNGQ3M2QxNGU3MmQyNGY3MWQzNTE3MWQ0NTI3MGQ1NTM2ZmQ1NTQ2ZWQ2NTU2ZGQ3NTY2Y2Q4NTc2YmQ5NTg2YWRhNWE2YWRhNWI2OWRiNWM2OGRjNWQ2N2RkNWU2NmRlNWY2NWRlNjE2NGRmNjI2M2UwNjM2M2UxNjQ2MmUyNjU2MWUyNjY2MGUzNjg1ZmU0Njk1ZWU1NmE1ZGU1NmI1ZGU2NmM1Y2U3NmU1YmU3NmY1YWU4NzA1OWU5NzE1OGU5NzI1N2VhNzQ1N2ViNzU1NmViNzY1NWVjNzc1NGVkNzk1M2VkN2E1MmVlN2I1MWVmN2M1MWVmN2U1MGYwN2Y0ZmYwODA0ZWYxODE0ZGYxODM0Y2YyODQ0YmYzODU0YmYzODc0YWY0ODg0OWY0ODk0OGY1OGI0N2Y1OGM0NmY2OGQ0NWY2OGY0NGY3OTA0NGY3OTE0M2Y3OTM0MmY4OTQ0MWY4OTU0MGY5OTczZmY5OTgzZWY5OWEzZWZhOWIzZGZhOWMzY2ZhOWUzYmZiOWYzYWZiYTEzOWZiYTIzOGZjYTMzOGZjYTUzN2ZjYTYzNmZjYTgzNWZjYTkzNGZkYWIzM2ZkYWMzM2ZkYWUzMmZkYWYzMWZkYjEzMGZkYjIyZmZkYjQyZmZkYjUyZWZlYjcyZGZlYjgyY2ZlYmEyY2ZlYmIyYmZlYmQyYWZlYmUyYWZlYzAyOWZkYzIyOWZkYzMyOGZkYzUyN2ZkYzYyN2ZkYzgyN2ZkY2EyNmZkY2IyNmZjY2QyNWZjY2UyNWZjZDAyNWZjZDIyNWZiZDMyNGZiZDUyNGZiZDcyNGZhZDgyNGZhZGEyNGY5ZGMyNGY5ZGQyNWY4ZGYyNWY4ZTEyNWY3ZTIyNWY3ZTQyNWY2ZTYyNmY2ZTgyNmY1ZTkyNmY1ZWIyN2Y0ZWQyN2YzZWUyN2YzZjAyN2YyZjIyN2YxZjQyNmYxZjUyNWYwZjcyNGYwZjkyMVwiKSk7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb25zdGFudCgpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImV4cG9ydCB2YXIgYWJzID0gTWF0aC5hYnM7XG5leHBvcnQgdmFyIGF0YW4yID0gTWF0aC5hdGFuMjtcbmV4cG9ydCB2YXIgY29zID0gTWF0aC5jb3M7XG5leHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgc2luID0gTWF0aC5zaW47XG5leHBvcnQgdmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTEyO1xuZXhwb3J0IHZhciBwaSA9IE1hdGguUEk7XG5leHBvcnQgdmFyIGhhbGZQaSA9IHBpIC8gMjtcbmV4cG9ydCB2YXIgdGF1ID0gMiAqIHBpO1xuXG5leHBvcnQgZnVuY3Rpb24gYWNvcyh4KSB7XG4gIHJldHVybiB4ID4gMSA/IDAgOiB4IDwgLTEgPyBwaSA6IE1hdGguYWNvcyh4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzaW4oeCkge1xuICByZXR1cm4geCA+PSAxID8gaGFsZlBpIDogeCA8PSAtMSA/IC1oYWxmUGkgOiBNYXRoLmFzaW4oeCk7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCB7YWJzLCBhY29zLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIG1heCwgbWluLCBwaSwgc2luLCBzcXJ0LCB0YXV9IGZyb20gXCIuL21hdGhcIjtcblxuZnVuY3Rpb24gYXJjSW5uZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5pbm5lclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjT3V0ZXJSYWRpdXMoZCkge1xuICByZXR1cm4gZC5vdXRlclJhZGl1cztcbn1cblxuZnVuY3Rpb24gYXJjU3RhcnRBbmdsZShkKSB7XG4gIHJldHVybiBkLnN0YXJ0QW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY0VuZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQuZW5kQW5nbGU7XG59XG5cbmZ1bmN0aW9uIGFyY1BhZEFuZ2xlKGQpIHtcbiAgcmV0dXJuIGQgJiYgZC5wYWRBbmdsZTsgLy8gTm90ZTogb3B0aW9uYWwhXG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgdmFyIHgxMCA9IHgxIC0geDAsIHkxMCA9IHkxIC0geTAsXG4gICAgICB4MzIgPSB4MyAtIHgyLCB5MzIgPSB5MyAtIHkyLFxuICAgICAgdCA9IHkzMiAqIHgxMCAtIHgzMiAqIHkxMDtcbiAgaWYgKHQgKiB0IDwgZXBzaWxvbikgcmV0dXJuO1xuICB0ID0gKHgzMiAqICh5MCAtIHkyKSAtIHkzMiAqICh4MCAtIHgyKSkgLyB0O1xuICByZXR1cm4gW3gwICsgdCAqIHgxMCwgeTAgKyB0ICogeTEwXTtcbn1cblxuLy8gQ29tcHV0ZSBwZXJwZW5kaWN1bGFyIG9mZnNldCBsaW5lIG9mIGxlbmd0aCByYy5cbi8vIGh0dHA6Ly9tYXRod29ybGQud29sZnJhbS5jb20vQ2lyY2xlLUxpbmVJbnRlcnNlY3Rpb24uaHRtbFxuZnVuY3Rpb24gY29ybmVyVGFuZ2VudHMoeDAsIHkwLCB4MSwgeTEsIHIxLCByYywgY3cpIHtcbiAgdmFyIHgwMSA9IHgwIC0geDEsXG4gICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgbG8gPSAoY3cgPyByYyA6IC1yYykgLyBzcXJ0KHgwMSAqIHgwMSArIHkwMSAqIHkwMSksXG4gICAgICBveCA9IGxvICogeTAxLFxuICAgICAgb3kgPSAtbG8gKiB4MDEsXG4gICAgICB4MTEgPSB4MCArIG94LFxuICAgICAgeTExID0geTAgKyBveSxcbiAgICAgIHgxMCA9IHgxICsgb3gsXG4gICAgICB5MTAgPSB5MSArIG95LFxuICAgICAgeDAwID0gKHgxMSArIHgxMCkgLyAyLFxuICAgICAgeTAwID0gKHkxMSArIHkxMCkgLyAyLFxuICAgICAgZHggPSB4MTAgLSB4MTEsXG4gICAgICBkeSA9IHkxMCAtIHkxMSxcbiAgICAgIGQyID0gZHggKiBkeCArIGR5ICogZHksXG4gICAgICByID0gcjEgLSByYyxcbiAgICAgIEQgPSB4MTEgKiB5MTAgLSB4MTAgKiB5MTEsXG4gICAgICBkID0gKGR5IDwgMCA/IC0xIDogMSkgKiBzcXJ0KG1heCgwLCByICogciAqIGQyIC0gRCAqIEQpKSxcbiAgICAgIGN4MCA9IChEICogZHkgLSBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTAgPSAoLUQgKiBkeCAtIGR5ICogZCkgLyBkMixcbiAgICAgIGN4MSA9IChEICogZHkgKyBkeCAqIGQpIC8gZDIsXG4gICAgICBjeTEgPSAoLUQgKiBkeCArIGR5ICogZCkgLyBkMixcbiAgICAgIGR4MCA9IGN4MCAtIHgwMCxcbiAgICAgIGR5MCA9IGN5MCAtIHkwMCxcbiAgICAgIGR4MSA9IGN4MSAtIHgwMCxcbiAgICAgIGR5MSA9IGN5MSAtIHkwMDtcblxuICAvLyBQaWNrIHRoZSBjbG9zZXIgb2YgdGhlIHR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAvLyBUT0RPIElzIHRoZXJlIGEgZmFzdGVyIHdheSB0byBkZXRlcm1pbmUgd2hpY2ggaW50ZXJzZWN0aW9uIHRvIHVzZT9cbiAgaWYgKGR4MCAqIGR4MCArIGR5MCAqIGR5MCA+IGR4MSAqIGR4MSArIGR5MSAqIGR5MSkgY3gwID0gY3gxLCBjeTAgPSBjeTE7XG5cbiAgcmV0dXJuIHtcbiAgICBjeDogY3gwLFxuICAgIGN5OiBjeTAsXG4gICAgeDAxOiAtb3gsXG4gICAgeTAxOiAtb3ksXG4gICAgeDExOiBjeDAgKiAocjEgLyByIC0gMSksXG4gICAgeTExOiBjeTAgKiAocjEgLyByIC0gMSlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBpbm5lclJhZGl1cyA9IGFyY0lubmVyUmFkaXVzLFxuICAgICAgb3V0ZXJSYWRpdXMgPSBhcmNPdXRlclJhZGl1cyxcbiAgICAgIGNvcm5lclJhZGl1cyA9IGNvbnN0YW50KDApLFxuICAgICAgcGFkUmFkaXVzID0gbnVsbCxcbiAgICAgIHN0YXJ0QW5nbGUgPSBhcmNTdGFydEFuZ2xlLFxuICAgICAgZW5kQW5nbGUgPSBhcmNFbmRBbmdsZSxcbiAgICAgIHBhZEFuZ2xlID0gYXJjUGFkQW5nbGUsXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmMoKSB7XG4gICAgdmFyIGJ1ZmZlcixcbiAgICAgICAgcixcbiAgICAgICAgcjAgPSAraW5uZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgcjEgPSArb3V0ZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgYTAgPSBzdGFydEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBoYWxmUGksXG4gICAgICAgIGExID0gZW5kQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAtIGhhbGZQaSxcbiAgICAgICAgZGEgPSBhYnMoYTEgLSBhMCksXG4gICAgICAgIGN3ID0gYTEgPiBhMDtcblxuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcblxuICAgIC8vIEVuc3VyZSB0aGF0IHRoZSBvdXRlciByYWRpdXMgaXMgYWx3YXlzIGxhcmdlciB0aGFuIHRoZSBpbm5lciByYWRpdXMuXG4gICAgaWYgKHIxIDwgcjApIHIgPSByMSwgcjEgPSByMCwgcjAgPSByO1xuXG4gICAgLy8gSXMgaXQgYSBwb2ludD9cbiAgICBpZiAoIShyMSA+IGVwc2lsb24pKSBjb250ZXh0Lm1vdmVUbygwLCAwKTtcblxuICAgIC8vIE9yIGlzIGl0IGEgY2lyY2xlIG9yIGFubnVsdXM/XG4gICAgZWxzZSBpZiAoZGEgPiB0YXUgLSBlcHNpbG9uKSB7XG4gICAgICBjb250ZXh0Lm1vdmVUbyhyMSAqIGNvcyhhMCksIHIxICogc2luKGEwKSk7XG4gICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAsIGExLCAhY3cpO1xuICAgICAgaWYgKHIwID4gZXBzaWxvbikge1xuICAgICAgICBjb250ZXh0Lm1vdmVUbyhyMCAqIGNvcyhhMSksIHIwICogc2luKGExKSk7XG4gICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMSwgYTAsIGN3KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBPciBpcyBpdCBhIGNpcmN1bGFyIG9yIGFubnVsYXIgc2VjdG9yP1xuICAgIGVsc2Uge1xuICAgICAgdmFyIGEwMSA9IGEwLFxuICAgICAgICAgIGExMSA9IGExLFxuICAgICAgICAgIGEwMCA9IGEwLFxuICAgICAgICAgIGExMCA9IGExLFxuICAgICAgICAgIGRhMCA9IGRhLFxuICAgICAgICAgIGRhMSA9IGRhLFxuICAgICAgICAgIGFwID0gcGFkQW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSAvIDIsXG4gICAgICAgICAgcnAgPSAoYXAgPiBlcHNpbG9uKSAmJiAocGFkUmFkaXVzID8gK3BhZFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogc3FydChyMCAqIHIwICsgcjEgKiByMSkpLFxuICAgICAgICAgIHJjID0gbWluKGFicyhyMSAtIHIwKSAvIDIsICtjb3JuZXJSYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSksXG4gICAgICAgICAgcmMwID0gcmMsXG4gICAgICAgICAgcmMxID0gcmMsXG4gICAgICAgICAgdDAsXG4gICAgICAgICAgdDE7XG5cbiAgICAgIC8vIEFwcGx5IHBhZGRpbmc/IE5vdGUgdGhhdCBzaW5jZSByMSDiiaUgcjAsIGRhMSDiiaUgZGEwLlxuICAgICAgaWYgKHJwID4gZXBzaWxvbikge1xuICAgICAgICB2YXIgcDAgPSBhc2luKHJwIC8gcjAgKiBzaW4oYXApKSxcbiAgICAgICAgICAgIHAxID0gYXNpbihycCAvIHIxICogc2luKGFwKSk7XG4gICAgICAgIGlmICgoZGEwIC09IHAwICogMikgPiBlcHNpbG9uKSBwMCAqPSAoY3cgPyAxIDogLTEpLCBhMDAgKz0gcDAsIGExMCAtPSBwMDtcbiAgICAgICAgZWxzZSBkYTAgPSAwLCBhMDAgPSBhMTAgPSAoYTAgKyBhMSkgLyAyO1xuICAgICAgICBpZiAoKGRhMSAtPSBwMSAqIDIpID4gZXBzaWxvbikgcDEgKj0gKGN3ID8gMSA6IC0xKSwgYTAxICs9IHAxLCBhMTEgLT0gcDE7XG4gICAgICAgIGVsc2UgZGExID0gMCwgYTAxID0gYTExID0gKGEwICsgYTEpIC8gMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHgwMSA9IHIxICogY29zKGEwMSksXG4gICAgICAgICAgeTAxID0gcjEgKiBzaW4oYTAxKSxcbiAgICAgICAgICB4MTAgPSByMCAqIGNvcyhhMTApLFxuICAgICAgICAgIHkxMCA9IHIwICogc2luKGExMCk7XG5cbiAgICAgIC8vIEFwcGx5IHJvdW5kZWQgY29ybmVycz9cbiAgICAgIGlmIChyYyA+IGVwc2lsb24pIHtcbiAgICAgICAgdmFyIHgxMSA9IHIxICogY29zKGExMSksXG4gICAgICAgICAgICB5MTEgPSByMSAqIHNpbihhMTEpLFxuICAgICAgICAgICAgeDAwID0gcjAgKiBjb3MoYTAwKSxcbiAgICAgICAgICAgIHkwMCA9IHIwICogc2luKGEwMCksXG4gICAgICAgICAgICBvYztcblxuICAgICAgICAvLyBSZXN0cmljdCB0aGUgY29ybmVyIHJhZGl1cyBhY2NvcmRpbmcgdG8gdGhlIHNlY3RvciBhbmdsZS5cbiAgICAgICAgaWYgKGRhIDwgcGkgJiYgKG9jID0gaW50ZXJzZWN0KHgwMSwgeTAxLCB4MDAsIHkwMCwgeDExLCB5MTEsIHgxMCwgeTEwKSkpIHtcbiAgICAgICAgICB2YXIgYXggPSB4MDEgLSBvY1swXSxcbiAgICAgICAgICAgICAgYXkgPSB5MDEgLSBvY1sxXSxcbiAgICAgICAgICAgICAgYnggPSB4MTEgLSBvY1swXSxcbiAgICAgICAgICAgICAgYnkgPSB5MTEgLSBvY1sxXSxcbiAgICAgICAgICAgICAga2MgPSAxIC8gc2luKGFjb3MoKGF4ICogYnggKyBheSAqIGJ5KSAvIChzcXJ0KGF4ICogYXggKyBheSAqIGF5KSAqIHNxcnQoYnggKiBieCArIGJ5ICogYnkpKSkgLyAyKSxcbiAgICAgICAgICAgICAgbGMgPSBzcXJ0KG9jWzBdICogb2NbMF0gKyBvY1sxXSAqIG9jWzFdKTtcbiAgICAgICAgICByYzAgPSBtaW4ocmMsIChyMCAtIGxjKSAvIChrYyAtIDEpKTtcbiAgICAgICAgICByYzEgPSBtaW4ocmMsIChyMSAtIGxjKSAvIChrYyArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJcyB0aGUgc2VjdG9yIGNvbGxhcHNlZCB0byBhIGxpbmU/XG4gICAgICBpZiAoIShkYTEgPiBlcHNpbG9uKSkgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpO1xuXG4gICAgICAvLyBEb2VzIHRoZSBzZWN0b3LigJlzIG91dGVyIHJpbmcgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzEgPiBlcHNpbG9uKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDAwLCB5MDAsIHgwMSwgeTAxLCByMSwgcmMxLCBjdyk7XG4gICAgICAgIHQxID0gY29ybmVyVGFuZ2VudHMoeDExLCB5MTEsIHgxMCwgeTEwLCByMSwgcmMxLCBjdyk7XG5cbiAgICAgICAgY29udGV4dC5tb3ZlVG8odDAuY3ggKyB0MC54MDEsIHQwLmN5ICsgdDAueTAxKTtcblxuICAgICAgICAvLyBIYXZlIHRoZSBjb3JuZXJzIG1lcmdlZD9cbiAgICAgICAgaWYgKHJjMSA8IHJjKSBjb250ZXh0LmFyYyh0MC5jeCwgdDAuY3ksIHJjMSwgYXRhbjIodDAueTAxLCB0MC54MDEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBkcmF3IHRoZSB0d28gY29ybmVycyBhbmQgdGhlIHJpbmcuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMxLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQwLnkxMSwgdDAueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYygwLCAwLCByMSwgYXRhbjIodDAuY3kgKyB0MC55MTEsIHQwLmN4ICsgdDAueDExKSwgYXRhbjIodDEuY3kgKyB0MS55MTEsIHQxLmN4ICsgdDEueDExKSwgIWN3KTtcbiAgICAgICAgICBjb250ZXh0LmFyYyh0MS5jeCwgdDEuY3ksIHJjMSwgYXRhbjIodDEueTExLCB0MS54MTEpLCBhdGFuMih0MS55MDEsIHQxLngwMSksICFjdyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gT3IgaXMgdGhlIG91dGVyIHJpbmcganVzdCBhIGNpcmN1bGFyIGFyYz9cbiAgICAgIGVsc2UgY29udGV4dC5tb3ZlVG8oeDAxLCB5MDEpLCBjb250ZXh0LmFyYygwLCAwLCByMSwgYTAxLCBhMTEsICFjdyk7XG5cbiAgICAgIC8vIElzIHRoZXJlIG5vIGlubmVyIHJpbmcsIGFuZCBpdOKAmXMgYSBjaXJjdWxhciBzZWN0b3I/XG4gICAgICAvLyBPciBwZXJoYXBzIGl04oCZcyBhbiBhbm51bGFyIHNlY3RvciBjb2xsYXBzZWQgZHVlIHRvIHBhZGRpbmc/XG4gICAgICBpZiAoIShyMCA+IGVwc2lsb24pIHx8ICEoZGEwID4gZXBzaWxvbikpIGNvbnRleHQubGluZVRvKHgxMCwgeTEwKTtcblxuICAgICAgLy8gRG9lcyB0aGUgc2VjdG9y4oCZcyBpbm5lciByaW5nIChvciBwb2ludCkgaGF2ZSByb3VuZGVkIGNvcm5lcnM/XG4gICAgICBlbHNlIGlmIChyYzAgPiBlcHNpbG9uKSB7XG4gICAgICAgIHQwID0gY29ybmVyVGFuZ2VudHMoeDEwLCB5MTAsIHgxMSwgeTExLCByMCwgLXJjMCwgY3cpO1xuICAgICAgICB0MSA9IGNvcm5lclRhbmdlbnRzKHgwMSwgeTAxLCB4MDAsIHkwMCwgcjAsIC1yYzAsIGN3KTtcblxuICAgICAgICBjb250ZXh0LmxpbmVUbyh0MC5jeCArIHQwLngwMSwgdDAuY3kgKyB0MC55MDEpO1xuXG4gICAgICAgIC8vIEhhdmUgdGhlIGNvcm5lcnMgbWVyZ2VkP1xuICAgICAgICBpZiAocmMwIDwgcmMpIGNvbnRleHQuYXJjKHQwLmN4LCB0MC5jeSwgcmMwLCBhdGFuMih0MC55MDEsIHQwLngwMSksIGF0YW4yKHQxLnkwMSwgdDEueDAxKSwgIWN3KTtcblxuICAgICAgICAvLyBPdGhlcndpc2UsIGRyYXcgdGhlIHR3byBjb3JuZXJzIGFuZCB0aGUgcmluZy5cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29udGV4dC5hcmModDAuY3gsIHQwLmN5LCByYzAsIGF0YW4yKHQwLnkwMSwgdDAueDAxKSwgYXRhbjIodDAueTExLCB0MC54MTEpLCAhY3cpO1xuICAgICAgICAgIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhdGFuMih0MC5jeSArIHQwLnkxMSwgdDAuY3ggKyB0MC54MTEpLCBhdGFuMih0MS5jeSArIHQxLnkxMSwgdDEuY3ggKyB0MS54MTEpLCBjdyk7XG4gICAgICAgICAgY29udGV4dC5hcmModDEuY3gsIHQxLmN5LCByYzAsIGF0YW4yKHQxLnkxMSwgdDEueDExKSwgYXRhbjIodDEueTAxLCB0MS54MDEpLCAhY3cpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIE9yIGlzIHRoZSBpbm5lciByaW5nIGp1c3QgYSBjaXJjdWxhciBhcmM/XG4gICAgICBlbHNlIGNvbnRleHQuYXJjKDAsIDAsIHIwLCBhMTAsIGEwMCwgY3cpO1xuICAgIH1cblxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG5cbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGFyYy5jZW50cm9pZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByID0gKCtpbm5lclJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK291dGVyUmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMixcbiAgICAgICAgYSA9ICgrc3RhcnRBbmdsZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpICsgK2VuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIC8gMiAtIHBpIC8gMjtcbiAgICByZXR1cm4gW2NvcyhhKSAqIHIsIHNpbihhKSAqIHJdO1xuICB9O1xuXG4gIGFyYy5pbm5lclJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChpbm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogaW5uZXJSYWRpdXM7XG4gIH07XG5cbiAgYXJjLm91dGVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKG91dGVyUmFkaXVzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBvdXRlclJhZGl1cztcbiAgfTtcblxuICBhcmMuY29ybmVyUmFkaXVzID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvcm5lclJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogY29ybmVyUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5wYWRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkUmFkaXVzID0gXyA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmMpIDogcGFkUmFkaXVzO1xuICB9O1xuXG4gIGFyYy5zdGFydEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHN0YXJ0QW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHN0YXJ0QW5nbGU7XG4gIH07XG5cbiAgYXJjLmVuZEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGVuZEFuZ2xlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyYykgOiBlbmRBbmdsZTtcbiAgfTtcblxuICBhcmMucGFkQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocGFkQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJjKSA6IHBhZEFuZ2xlO1xuICB9O1xuXG4gIGFyYy5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBhcmMpIDogY29udGV4dDtcbiAgfTtcblxuICByZXR1cm4gYXJjO1xufVxuIiwiZnVuY3Rpb24gTGluZWFyKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkxpbmVhci5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IExpbmVhcihjb250ZXh0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB4KHApIHtcbiAgcmV0dXJuIHBbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB5KHApIHtcbiAgcmV0dXJuIHBbMV07XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHggPSBwb2ludFgsXG4gICAgICB5ID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5lKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXI7XG5cbiAgICBpZiAoY29udGV4dCA9PSBudWxsKSBvdXRwdXQgPSBjdXJ2ZShidWZmZXIgPSBwYXRoKCkpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8PSBuOyArK2kpIHtcbiAgICAgIGlmICghKGkgPCBuICYmIGRlZmluZWQoZCA9IGRhdGFbaV0sIGksIGRhdGEpKSA9PT0gZGVmaW5lZDApIHtcbiAgICAgICAgaWYgKGRlZmluZWQwID0gIWRlZmluZWQwKSBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIGVsc2Ugb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkgb3V0cHV0LnBvaW50KCt4KGQsIGksIGRhdGEpLCAreShkLCBpLCBkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmUueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmUpIDogeDtcbiAgfTtcblxuICBsaW5lLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5lKSA6IHk7XG4gIH07XG5cbiAgbGluZS5kZWZpbmVkID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRlZmluZWQgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIGxpbmUpIDogZGVmaW5lZDtcbiAgfTtcblxuICBsaW5lLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGN1cnZlID0gXywgY29udGV4dCAhPSBudWxsICYmIChvdXRwdXQgPSBjdXJ2ZShjb250ZXh0KSksIGxpbmUpIDogY3VydmU7XG4gIH07XG5cbiAgbGluZS5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKF8gPT0gbnVsbCA/IGNvbnRleHQgPSBvdXRwdXQgPSBudWxsIDogb3V0cHV0ID0gY3VydmUoY29udGV4dCA9IF8pLCBsaW5lKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbmU7XG59XG4iLCJpbXBvcnQge3BhdGh9IGZyb20gXCJkMy1wYXRoXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9jdXJ2ZS9saW5lYXJcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmVcIjtcbmltcG9ydCB7eCBhcyBwb2ludFgsIHkgYXMgcG9pbnRZfSBmcm9tIFwiLi9wb2ludFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHgwID0gcG9pbnRYLFxuICAgICAgeDEgPSBudWxsLFxuICAgICAgeTAgPSBjb25zdGFudCgwKSxcbiAgICAgIHkxID0gcG9pbnRZLFxuICAgICAgZGVmaW5lZCA9IGNvbnN0YW50KHRydWUpLFxuICAgICAgY29udGV4dCA9IG51bGwsXG4gICAgICBjdXJ2ZSA9IGN1cnZlTGluZWFyLFxuICAgICAgb3V0cHV0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBhcmVhKGRhdGEpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgbiA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBkLFxuICAgICAgICBkZWZpbmVkMCA9IGZhbHNlLFxuICAgICAgICBidWZmZXIsXG4gICAgICAgIHgweiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgeTB6ID0gbmV3IEFycmF5KG4pO1xuXG4gICAgaWYgKGNvbnRleHQgPT0gbnVsbCkgb3V0cHV0ID0gY3VydmUoYnVmZmVyID0gcGF0aCgpKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPD0gbjsgKytpKSB7XG4gICAgICBpZiAoIShpIDwgbiAmJiBkZWZpbmVkKGQgPSBkYXRhW2ldLCBpLCBkYXRhKSkgPT09IGRlZmluZWQwKSB7XG4gICAgICAgIGlmIChkZWZpbmVkMCA9ICFkZWZpbmVkMCkge1xuICAgICAgICAgIGogPSBpO1xuICAgICAgICAgIG91dHB1dC5hcmVhU3RhcnQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LmxpbmVFbmQoKTtcbiAgICAgICAgICBvdXRwdXQubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChrID0gaSAtIDE7IGsgPj0gajsgLS1rKSB7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnQoeDB6W2tdLCB5MHpba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQubGluZUVuZCgpO1xuICAgICAgICAgIG91dHB1dC5hcmVhRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkZWZpbmVkMCkge1xuICAgICAgICB4MHpbaV0gPSAreDAoZCwgaSwgZGF0YSksIHkweltpXSA9ICt5MChkLCBpLCBkYXRhKTtcbiAgICAgICAgb3V0cHV0LnBvaW50KHgxID8gK3gxKGQsIGksIGRhdGEpIDogeDB6W2ldLCB5MSA/ICt5MShkLCBpLCBkYXRhKSA6IHkweltpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJ1ZmZlcikgcmV0dXJuIG91dHB1dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFyZWFsaW5lKCkge1xuICAgIHJldHVybiBsaW5lKCkuZGVmaW5lZChkZWZpbmVkKS5jdXJ2ZShjdXJ2ZSkuY29udGV4dChjb250ZXh0KTtcbiAgfVxuXG4gIGFyZWEueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB4MSA9IG51bGwsIGFyZWEpIDogeDA7XG4gIH07XG5cbiAgYXJlYS54MCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4MCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBhcmVhKSA6IHgwO1xuICB9O1xuXG4gIGFyZWEueDEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeDEgPSBfID09IG51bGwgPyBudWxsIDogdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeDE7XG4gIH07XG5cbiAgYXJlYS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHkxID0gbnVsbCwgYXJlYSkgOiB5MDtcbiAgfTtcblxuICBhcmVhLnkwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkwID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGFyZWEpIDogeTA7XG4gIH07XG5cbiAgYXJlYS55MSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh5MSA9IF8gPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgYXJlYSkgOiB5MTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMCA9XG4gIGFyZWEubGluZVkwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGFyZWFsaW5lKCkueCh4MCkueSh5MCk7XG4gIH07XG5cbiAgYXJlYS5saW5lWTEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYXJlYWxpbmUoKS54KHgwKS55KHkxKTtcbiAgfTtcblxuICBhcmVhLmxpbmVYMSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBhcmVhbGluZSgpLngoeDEpLnkoeTApO1xuICB9O1xuXG4gIGFyZWEuZGVmaW5lZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWZpbmVkID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCBhcmVhKSA6IGRlZmluZWQ7XG4gIH07XG5cbiAgYXJlYS5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjdXJ2ZSA9IF8sIGNvbnRleHQgIT0gbnVsbCAmJiAob3V0cHV0ID0gY3VydmUoY29udGV4dCkpLCBhcmVhKSA6IGN1cnZlO1xuICB9O1xuXG4gIGFyZWEuY29udGV4dCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfID09IG51bGwgPyBjb250ZXh0ID0gb3V0cHV0ID0gbnVsbCA6IG91dHB1dCA9IGN1cnZlKGNvbnRleHQgPSBfKSwgYXJlYSkgOiBjb250ZXh0O1xuICB9O1xuXG4gIHJldHVybiBhcmVhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYiA8IGEgPyAtMSA6IGIgPiBhID8gMSA6IGIgPj0gYSA/IDAgOiBOYU47XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIHJldHVybiBkO1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgZGVzY2VuZGluZyBmcm9tIFwiLi9kZXNjZW5kaW5nXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcbmltcG9ydCB7dGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgdmFsdWUgPSBpZGVudGl0eSxcbiAgICAgIHNvcnRWYWx1ZXMgPSBkZXNjZW5kaW5nLFxuICAgICAgc29ydCA9IG51bGwsXG4gICAgICBzdGFydEFuZ2xlID0gY29uc3RhbnQoMCksXG4gICAgICBlbmRBbmdsZSA9IGNvbnN0YW50KHRhdSksXG4gICAgICBwYWRBbmdsZSA9IGNvbnN0YW50KDApO1xuXG4gIGZ1bmN0aW9uIHBpZShkYXRhKSB7XG4gICAgdmFyIGksXG4gICAgICAgIG4gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgaixcbiAgICAgICAgayxcbiAgICAgICAgc3VtID0gMCxcbiAgICAgICAgaW5kZXggPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGFyY3MgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGEwID0gK3N0YXJ0QW5nbGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgZGEgPSBNYXRoLm1pbih0YXUsIE1hdGgubWF4KC10YXUsIGVuZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgLSBhMCkpLFxuICAgICAgICBhMSxcbiAgICAgICAgcCA9IE1hdGgubWluKE1hdGguYWJzKGRhKSAvIG4sIHBhZEFuZ2xlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLFxuICAgICAgICBwYSA9IHAgKiAoZGEgPCAwID8gLTEgOiAxKSxcbiAgICAgICAgdjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodiA9IGFyY3NbaW5kZXhbaV0gPSBpXSA9ICt2YWx1ZShkYXRhW2ldLCBpLCBkYXRhKSkgPiAwKSB7XG4gICAgICAgIHN1bSArPSB2O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGlvbmFsbHkgc29ydCB0aGUgYXJjcyBieSBwcmV2aW91c2x5LWNvbXB1dGVkIHZhbHVlcyBvciBieSBkYXRhLlxuICAgIGlmIChzb3J0VmFsdWVzICE9IG51bGwpIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gc29ydFZhbHVlcyhhcmNzW2ldLCBhcmNzW2pdKTsgfSk7XG4gICAgZWxzZSBpZiAoc29ydCAhPSBudWxsKSBpbmRleC5zb3J0KGZ1bmN0aW9uKGksIGopIHsgcmV0dXJuIHNvcnQoZGF0YVtpXSwgZGF0YVtqXSk7IH0pO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgYXJjcyEgVGhleSBhcmUgc3RvcmVkIGluIHRoZSBvcmlnaW5hbCBkYXRhJ3Mgb3JkZXIuXG4gICAgZm9yIChpID0gMCwgayA9IHN1bSA/IChkYSAtIG4gKiBwYSkgLyBzdW0gOiAwOyBpIDwgbjsgKytpLCBhMCA9IGExKSB7XG4gICAgICBqID0gaW5kZXhbaV0sIHYgPSBhcmNzW2pdLCBhMSA9IGEwICsgKHYgPiAwID8gdiAqIGsgOiAwKSArIHBhLCBhcmNzW2pdID0ge1xuICAgICAgICBkYXRhOiBkYXRhW2pdLFxuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgdmFsdWU6IHYsXG4gICAgICAgIHN0YXJ0QW5nbGU6IGEwLFxuICAgICAgICBlbmRBbmdsZTogYTEsXG4gICAgICAgIHBhZEFuZ2xlOiBwXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmNzO1xuICB9XG5cbiAgcGllLnZhbHVlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHBpZSkgOiB2YWx1ZTtcbiAgfTtcblxuICBwaWUuc29ydFZhbHVlcyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzb3J0VmFsdWVzID0gXywgc29ydCA9IG51bGwsIHBpZSkgOiBzb3J0VmFsdWVzO1xuICB9O1xuXG4gIHBpZS5zb3J0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvcnQgPSBfLCBzb3J0VmFsdWVzID0gbnVsbCwgcGllKSA6IHNvcnQ7XG4gIH07XG5cbiAgcGllLnN0YXJ0QW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3RhcnRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogc3RhcnRBbmdsZTtcbiAgfTtcblxuICBwaWUuZW5kQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZW5kQW5nbGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgcGllKSA6IGVuZEFuZ2xlO1xuICB9O1xuXG4gIHBpZS5wYWRBbmdsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwYWRBbmdsZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBwaWUpIDogcGFkQW5nbGU7XG4gIH07XG5cbiAgcmV0dXJuIHBpZTtcbn1cbiIsImltcG9ydCBjdXJ2ZUxpbmVhciBmcm9tIFwiLi9saW5lYXJcIjtcblxuZXhwb3J0IHZhciBjdXJ2ZVJhZGlhbExpbmVhciA9IGN1cnZlUmFkaWFsKGN1cnZlTGluZWFyKTtcblxuZnVuY3Rpb24gUmFkaWFsKGN1cnZlKSB7XG4gIHRoaXMuX2N1cnZlID0gY3VydmU7XG59XG5cblJhZGlhbC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUuYXJlYVN0YXJ0KCk7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2N1cnZlLmFyZWFFbmQoKTtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9jdXJ2ZS5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fY3VydmUubGluZUVuZCgpO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oYSwgcikge1xuICAgIHRoaXMuX2N1cnZlLnBvaW50KHIgKiBNYXRoLnNpbihhKSwgciAqIC1NYXRoLmNvcyhhKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGN1cnZlUmFkaWFsKGN1cnZlKSB7XG5cbiAgZnVuY3Rpb24gcmFkaWFsKGNvbnRleHQpIHtcbiAgICByZXR1cm4gbmV3IFJhZGlhbChjdXJ2ZShjb250ZXh0KSk7XG4gIH1cblxuICByYWRpYWwuX2N1cnZlID0gY3VydmU7XG5cbiAgcmV0dXJuIHJhZGlhbDtcbn1cbiIsImltcG9ydCBjdXJ2ZVJhZGlhbCwge2N1cnZlUmFkaWFsTGluZWFyfSBmcm9tIFwiLi9jdXJ2ZS9yYWRpYWxcIjtcbmltcG9ydCBsaW5lIGZyb20gXCIuL2xpbmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVSYWRpYWwobCkge1xuICB2YXIgYyA9IGwuY3VydmU7XG5cbiAgbC5hbmdsZSA9IGwueCwgZGVsZXRlIGwueDtcbiAgbC5yYWRpdXMgPSBsLnksIGRlbGV0ZSBsLnk7XG5cbiAgbC5jdXJ2ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IGMoY3VydmVSYWRpYWwoXykpIDogYygpLl9jdXJ2ZTtcbiAgfTtcblxuICByZXR1cm4gbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBsaW5lUmFkaWFsKGxpbmUoKS5jdXJ2ZShjdXJ2ZVJhZGlhbExpbmVhcikpO1xufVxuIiwiaW1wb3J0IGN1cnZlUmFkaWFsLCB7Y3VydmVSYWRpYWxMaW5lYXJ9IGZyb20gXCIuL2N1cnZlL3JhZGlhbFwiO1xuaW1wb3J0IGFyZWEgZnJvbSBcIi4vYXJlYVwiO1xuaW1wb3J0IHtsaW5lUmFkaWFsfSBmcm9tIFwiLi9saW5lUmFkaWFsXCJcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBhID0gYXJlYSgpLmN1cnZlKGN1cnZlUmFkaWFsTGluZWFyKSxcbiAgICAgIGMgPSBhLmN1cnZlLFxuICAgICAgeDAgPSBhLmxpbmVYMCxcbiAgICAgIHgxID0gYS5saW5lWDEsXG4gICAgICB5MCA9IGEubGluZVkwLFxuICAgICAgeTEgPSBhLmxpbmVZMTtcblxuICBhLmFuZ2xlID0gYS54LCBkZWxldGUgYS54O1xuICBhLnN0YXJ0QW5nbGUgPSBhLngwLCBkZWxldGUgYS54MDtcbiAgYS5lbmRBbmdsZSA9IGEueDEsIGRlbGV0ZSBhLngxO1xuICBhLnJhZGl1cyA9IGEueSwgZGVsZXRlIGEueTtcbiAgYS5pbm5lclJhZGl1cyA9IGEueTAsIGRlbGV0ZSBhLnkwO1xuICBhLm91dGVyUmFkaXVzID0gYS55MSwgZGVsZXRlIGEueTE7XG4gIGEubGluZVN0YXJ0QW5nbGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGxpbmVSYWRpYWwoeDAoKSk7IH0sIGRlbGV0ZSBhLmxpbmVYMDtcbiAgYS5saW5lRW5kQW5nbGUgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGxpbmVSYWRpYWwoeDEoKSk7IH0sIGRlbGV0ZSBhLmxpbmVYMTtcbiAgYS5saW5lSW5uZXJSYWRpdXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGxpbmVSYWRpYWwoeTAoKSk7IH0sIGRlbGV0ZSBhLmxpbmVZMDtcbiAgYS5saW5lT3V0ZXJSYWRpdXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGxpbmVSYWRpYWwoeTEoKSk7IH0sIGRlbGV0ZSBhLmxpbmVZMTtcblxuICBhLmN1cnZlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gYyhjdXJ2ZVJhZGlhbChfKSkgOiBjKCkuX2N1cnZlO1xuICB9O1xuXG4gIHJldHVybiBhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSkge1xuICByZXR1cm4gWyh5ID0gK3kpICogTWF0aC5jb3MoeCAtPSBNYXRoLlBJIC8gMiksIHkgKiBNYXRoLnNpbih4KV07XG59XG4iLCJleHBvcnQgdmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xuIiwiaW1wb3J0IHtwYXRofSBmcm9tIFwiZDMtcGF0aFwiO1xuaW1wb3J0IHtzbGljZX0gZnJvbSBcIi4uL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4uL2NvbnN0YW50XCI7XG5pbXBvcnQge3ggYXMgcG9pbnRYLCB5IGFzIHBvaW50WX0gZnJvbSBcIi4uL3BvaW50XCI7XG5pbXBvcnQgcG9pbnRSYWRpYWwgZnJvbSBcIi4uL3BvaW50UmFkaWFsXCI7XG5cbmZ1bmN0aW9uIGxpbmtTb3VyY2UoZCkge1xuICByZXR1cm4gZC5zb3VyY2U7XG59XG5cbmZ1bmN0aW9uIGxpbmtUYXJnZXQoZCkge1xuICByZXR1cm4gZC50YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGxpbmsoY3VydmUpIHtcbiAgdmFyIHNvdXJjZSA9IGxpbmtTb3VyY2UsXG4gICAgICB0YXJnZXQgPSBsaW5rVGFyZ2V0LFxuICAgICAgeCA9IHBvaW50WCxcbiAgICAgIHkgPSBwb2ludFksXG4gICAgICBjb250ZXh0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBsaW5rKCkge1xuICAgIHZhciBidWZmZXIsIGFyZ3YgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyksIHMgPSBzb3VyY2UuYXBwbHkodGhpcywgYXJndiksIHQgPSB0YXJnZXQuYXBwbHkodGhpcywgYXJndik7XG4gICAgaWYgKCFjb250ZXh0KSBjb250ZXh0ID0gYnVmZmVyID0gcGF0aCgpO1xuICAgIGN1cnZlKGNvbnRleHQsICt4LmFwcGx5KHRoaXMsIChhcmd2WzBdID0gcywgYXJndikpLCAreS5hcHBseSh0aGlzLCBhcmd2KSwgK3guYXBwbHkodGhpcywgKGFyZ3ZbMF0gPSB0LCBhcmd2KSksICt5LmFwcGx5KHRoaXMsIGFyZ3YpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIGxpbmsuc291cmNlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNvdXJjZSA9IF8sIGxpbmspIDogc291cmNlO1xuICB9O1xuXG4gIGxpbmsudGFyZ2V0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRhcmdldCA9IF8sIGxpbmspIDogdGFyZ2V0O1xuICB9O1xuXG4gIGxpbmsueCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIGxpbmspIDogeDtcbiAgfTtcblxuICBsaW5rLnkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBsaW5rKSA6IHk7XG4gIH07XG5cbiAgbGluay5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKChjb250ZXh0ID0gXyA9PSBudWxsID8gbnVsbCA6IF8pLCBsaW5rKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGN1cnZlSG9yaXpvbnRhbChjb250ZXh0LCB4MCwgeTAsIHgxLCB5MSkge1xuICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8oeDAgPSAoeDAgKyB4MSkgLyAyLCB5MCwgeDAsIHkxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBjdXJ2ZVZlcnRpY2FsKGNvbnRleHQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIGNvbnRleHQubW92ZVRvKHgwLCB5MCk7XG4gIGNvbnRleHQuYmV6aWVyQ3VydmVUbyh4MCwgeTAgPSAoeTAgKyB5MSkgLyAyLCB4MSwgeTAsIHgxLCB5MSk7XG59XG5cbmZ1bmN0aW9uIGN1cnZlUmFkaWFsKGNvbnRleHQsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBwMCA9IHBvaW50UmFkaWFsKHgwLCB5MCksXG4gICAgICBwMSA9IHBvaW50UmFkaWFsKHgwLCB5MCA9ICh5MCArIHkxKSAvIDIpLFxuICAgICAgcDIgPSBwb2ludFJhZGlhbCh4MSwgeTApLFxuICAgICAgcDMgPSBwb2ludFJhZGlhbCh4MSwgeTEpO1xuICBjb250ZXh0Lm1vdmVUbyhwMFswXSwgcDBbMV0pO1xuICBjb250ZXh0LmJlemllckN1cnZlVG8ocDFbMF0sIHAxWzFdLCBwMlswXSwgcDJbMV0sIHAzWzBdLCBwM1sxXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rSG9yaXpvbnRhbCgpIHtcbiAgcmV0dXJuIGxpbmsoY3VydmVIb3Jpem9udGFsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmtWZXJ0aWNhbCgpIHtcbiAgcmV0dXJuIGxpbmsoY3VydmVWZXJ0aWNhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5rUmFkaWFsKCkge1xuICB2YXIgbCA9IGxpbmsoY3VydmVSYWRpYWwpO1xuICBsLmFuZ2xlID0gbC54LCBkZWxldGUgbC54O1xuICBsLnJhZGl1cyA9IGwueSwgZGVsZXRlIGwueTtcbiAgcmV0dXJuIGw7XG59XG4iLCJpbXBvcnQge3BpLCB0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyBwaSk7XG4gICAgY29udGV4dC5tb3ZlVG8ociwgMCk7XG4gICAgY29udGV4dC5hcmMoMCwgMCwgciwgMCwgdGF1KTtcbiAgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciByID0gTWF0aC5zcXJ0KHNpemUgLyA1KSAvIDI7XG4gICAgY29udGV4dC5tb3ZlVG8oLTMgKiByLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygtciwgLTMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAtMyAqIHIpO1xuICAgIGNvbnRleHQubGluZVRvKHIsIC1yKTtcbiAgICBjb250ZXh0LmxpbmVUbygzICogciwgLXIpO1xuICAgIGNvbnRleHQubGluZVRvKDMgKiByLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCByKTtcbiAgICBjb250ZXh0LmxpbmVUbyhyLCAzICogcik7XG4gICAgY29udGV4dC5saW5lVG8oLXIsIDMgKiByKTtcbiAgICBjb250ZXh0LmxpbmVUbygtciwgcik7XG4gICAgY29udGV4dC5saW5lVG8oLTMgKiByLCByKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwidmFyIHRhbjMwID0gTWF0aC5zcXJ0KDEgLyAzKSxcbiAgICB0YW4zMF8yID0gdGFuMzAgKiAyO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgeSA9IE1hdGguc3FydChzaXplIC8gdGFuMzBfMiksXG4gICAgICAgIHggPSB5ICogdGFuMzA7XG4gICAgY29udGV4dC5tb3ZlVG8oMCwgLXkpO1xuICAgIGNvbnRleHQubGluZVRvKHgsIDApO1xuICAgIGNvbnRleHQubGluZVRvKDAsIHkpO1xuICAgIGNvbnRleHQubGluZVRvKC14LCAwKTtcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICB9XG59O1xuIiwiaW1wb3J0IHtwaSwgdGF1fSBmcm9tIFwiLi4vbWF0aFwiO1xuXG52YXIga2EgPSAwLjg5MDgxMzA5MTUyOTI4NTIyODEwLFxuICAgIGtyID0gTWF0aC5zaW4ocGkgLyAxMCkgLyBNYXRoLnNpbig3ICogcGkgLyAxMCksXG4gICAga3ggPSBNYXRoLnNpbih0YXUgLyAxMCkgKiBrcixcbiAgICBreSA9IC1NYXRoLmNvcyh0YXUgLyAxMCkgKiBrcjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAqIGthKSxcbiAgICAgICAgeCA9IGt4ICogcixcbiAgICAgICAgeSA9IGt5ICogcjtcbiAgICBjb250ZXh0Lm1vdmVUbygwLCAtcik7XG4gICAgY29udGV4dC5saW5lVG8oeCwgeSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCA1OyArK2kpIHtcbiAgICAgIHZhciBhID0gdGF1ICogaSAvIDUsXG4gICAgICAgICAgYyA9IE1hdGguY29zKGEpLFxuICAgICAgICAgIHMgPSBNYXRoLnNpbihhKTtcbiAgICAgIGNvbnRleHQubGluZVRvKHMgKiByLCAtYyAqIHIpO1xuICAgICAgY29udGV4dC5saW5lVG8oYyAqIHggLSBzICogeSwgcyAqIHggKyBjICogeSk7XG4gICAgfVxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQsIHNpemUpIHtcbiAgICB2YXIgdyA9IE1hdGguc3FydChzaXplKSxcbiAgICAgICAgeCA9IC13IC8gMjtcbiAgICBjb250ZXh0LnJlY3QoeCwgeCwgdywgdyk7XG4gIH1cbn07XG4iLCJ2YXIgc3FydDMgPSBNYXRoLnNxcnQoMyk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZHJhdzogZnVuY3Rpb24oY29udGV4dCwgc2l6ZSkge1xuICAgIHZhciB5ID0gLU1hdGguc3FydChzaXplIC8gKHNxcnQzICogMykpO1xuICAgIGNvbnRleHQubW92ZVRvKDAsIHkgKiAyKTtcbiAgICBjb250ZXh0LmxpbmVUbygtc3FydDMgKiB5LCAteSk7XG4gICAgY29udGV4dC5saW5lVG8oc3FydDMgKiB5LCAteSk7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsInZhciBjID0gLTAuNSxcbiAgICBzID0gTWF0aC5zcXJ0KDMpIC8gMixcbiAgICBrID0gMSAvIE1hdGguc3FydCgxMiksXG4gICAgYSA9IChrIC8gMiArIDEpICogMztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkcmF3OiBmdW5jdGlvbihjb250ZXh0LCBzaXplKSB7XG4gICAgdmFyIHIgPSBNYXRoLnNxcnQoc2l6ZSAvIGEpLFxuICAgICAgICB4MCA9IHIgLyAyLFxuICAgICAgICB5MCA9IHIgKiBrLFxuICAgICAgICB4MSA9IHgwLFxuICAgICAgICB5MSA9IHIgKiBrICsgcixcbiAgICAgICAgeDIgPSAteDEsXG4gICAgICAgIHkyID0geTE7XG4gICAgY29udGV4dC5tb3ZlVG8oeDAsIHkwKTtcbiAgICBjb250ZXh0LmxpbmVUbyh4MSwgeTEpO1xuICAgIGNvbnRleHQubGluZVRvKHgyLCB5Mik7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgwIC0gcyAqIHkwLCBzICogeDAgKyBjICogeTApO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MSAtIHMgKiB5MSwgcyAqIHgxICsgYyAqIHkxKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgLSBzICogeTIsIHMgKiB4MiArIGMgKiB5Mik7XG4gICAgY29udGV4dC5saW5lVG8oYyAqIHgwICsgcyAqIHkwLCBjICogeTAgLSBzICogeDApO1xuICAgIGNvbnRleHQubGluZVRvKGMgKiB4MSArIHMgKiB5MSwgYyAqIHkxIC0gcyAqIHgxKTtcbiAgICBjb250ZXh0LmxpbmVUbyhjICogeDIgKyBzICogeTIsIGMgKiB5MiAtIHMgKiB4Mik7XG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgfVxufTtcbiIsImltcG9ydCB7cGF0aH0gZnJvbSBcImQzLXBhdGhcIjtcbmltcG9ydCBjaXJjbGUgZnJvbSBcIi4vc3ltYm9sL2NpcmNsZVwiO1xuaW1wb3J0IGNyb3NzIGZyb20gXCIuL3N5bWJvbC9jcm9zc1wiO1xuaW1wb3J0IGRpYW1vbmQgZnJvbSBcIi4vc3ltYm9sL2RpYW1vbmRcIjtcbmltcG9ydCBzdGFyIGZyb20gXCIuL3N5bWJvbC9zdGFyXCI7XG5pbXBvcnQgc3F1YXJlIGZyb20gXCIuL3N5bWJvbC9zcXVhcmVcIjtcbmltcG9ydCB0cmlhbmdsZSBmcm9tIFwiLi9zeW1ib2wvdHJpYW5nbGVcIjtcbmltcG9ydCB3eWUgZnJvbSBcIi4vc3ltYm9sL3d5ZVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmV4cG9ydCB2YXIgc3ltYm9scyA9IFtcbiAgY2lyY2xlLFxuICBjcm9zcyxcbiAgZGlhbW9uZCxcbiAgc3F1YXJlLFxuICBzdGFyLFxuICB0cmlhbmdsZSxcbiAgd3llXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIHR5cGUgPSBjb25zdGFudChjaXJjbGUpLFxuICAgICAgc2l6ZSA9IGNvbnN0YW50KDY0KSxcbiAgICAgIGNvbnRleHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHN5bWJvbCgpIHtcbiAgICB2YXIgYnVmZmVyO1xuICAgIGlmICghY29udGV4dCkgY29udGV4dCA9IGJ1ZmZlciA9IHBhdGgoKTtcbiAgICB0eXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykuZHJhdyhjb250ZXh0LCArc2l6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICBpZiAoYnVmZmVyKSByZXR1cm4gY29udGV4dCA9IG51bGwsIGJ1ZmZlciArIFwiXCIgfHwgbnVsbDtcbiAgfVxuXG4gIHN5bWJvbC50eXBlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHR5cGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KF8pLCBzeW1ib2wpIDogdHlwZTtcbiAgfTtcblxuICBzeW1ib2wuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzaXplID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCgrXyksIHN5bWJvbCkgOiBzaXplO1xuICB9O1xuXG4gIHN5bWJvbC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnRleHQgPSBfID09IG51bGwgPyBudWxsIDogXywgc3ltYm9sKSA6IGNvbnRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIHN5bWJvbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge31cbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICAoMiAqIHRoYXQuX3gwICsgdGhhdC5feDEpIC8gMyxcbiAgICAoMiAqIHRoYXQuX3kwICsgdGhhdC5feTEpIC8gMyxcbiAgICAodGhhdC5feDAgKyAyICogdGhhdC5feDEpIC8gMyxcbiAgICAodGhhdC5feTAgKyAyICogdGhhdC5feTEpIC8gMyxcbiAgICAodGhhdC5feDAgKyA0ICogdGhhdC5feDEgKyB4KSAvIDYsXG4gICAgKHRoYXQuX3kwICsgNCAqIHRoYXQuX3kxICsgeSkgLyA2XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCYXNpcyhjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5CYXNpcy5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMzogcG9pbnQodGhpcywgdGhpcy5feDEsIHRoaXMuX3kxKTsgLy8gcHJvY2VlZFxuICAgICAgY2FzZSAyOiB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MSwgdGhpcy5feTEpOyBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDEpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2NvbnRleHQubGluZVRvKCg1ICogdGhpcy5feDAgKyB0aGlzLl94MSkgLyA2LCAoNSAqIHRoaXMuX3kwICsgdGhpcy5feTEpIC8gNik7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IEJhc2lzKGNvbnRleHQpO1xufVxuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmZ1bmN0aW9uIEJhc2lzQ2xvc2VkKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbkJhc2lzQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSBOYU47XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8oKHRoaXMuX3gyICsgMiAqIHRoaXMuX3gzKSAvIDMsICh0aGlzLl95MiArIDIgKiB0aGlzLl95MykgLyAzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8oKHRoaXMuX3gzICsgMiAqIHRoaXMuX3gyKSAvIDMsICh0aGlzLl95MyArIDIgKiB0aGlzLl95MikgLyAzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MiwgdGhpcy5feTIpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDQsIHRoaXMuX3k0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl94MiA9IHgsIHRoaXMuX3kyID0geTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5OyB0aGlzLl9jb250ZXh0Lm1vdmVUbygodGhpcy5feDAgKyA0ICogdGhpcy5feDEgKyB4KSAvIDYsICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNik7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgQmFzaXNDbG9zZWQoY29udGV4dCk7XG59XG4iLCJpbXBvcnQge3BvaW50fSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCYXNpc09wZW4oY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuQmFzaXNPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdmFyIHgwID0gKHRoaXMuX3gwICsgNCAqIHRoaXMuX3gxICsgeCkgLyA2LCB5MCA9ICh0aGlzLl95MCArIDQgKiB0aGlzLl95MSArIHkpIC8gNjsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgwLCB5MCkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4MCwgeTApOyBicmVhaztcbiAgICAgIGNhc2UgMzogdGhpcy5fcG9pbnQgPSA0OyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB4LCB5KTsgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuX3gwID0gdGhpcy5feDEsIHRoaXMuX3gxID0geDtcbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxLCB0aGlzLl95MSA9IHk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBCYXNpc09wZW4oY29udGV4dCk7XG59XG4iLCJpbXBvcnQge0Jhc2lzfSBmcm9tIFwiLi9iYXNpc1wiO1xuXG5mdW5jdGlvbiBCdW5kbGUoY29udGV4dCwgYmV0YSkge1xuICB0aGlzLl9iYXNpcyA9IG5ldyBCYXNpcyhjb250ZXh0KTtcbiAgdGhpcy5fYmV0YSA9IGJldGE7XG59XG5cbkJ1bmRsZS5wcm90b3R5cGUgPSB7XG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feCA9IFtdO1xuICAgIHRoaXMuX3kgPSBbXTtcbiAgICB0aGlzLl9iYXNpcy5saW5lU3RhcnQoKTtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHggPSB0aGlzLl94LFxuICAgICAgICB5ID0gdGhpcy5feSxcbiAgICAgICAgaiA9IHgubGVuZ3RoIC0gMTtcblxuICAgIGlmIChqID4gMCkge1xuICAgICAgdmFyIHgwID0geFswXSxcbiAgICAgICAgICB5MCA9IHlbMF0sXG4gICAgICAgICAgZHggPSB4W2pdIC0geDAsXG4gICAgICAgICAgZHkgPSB5W2pdIC0geTAsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIHQ7XG5cbiAgICAgIHdoaWxlICgrK2kgPD0gaikge1xuICAgICAgICB0ID0gaSAvIGo7XG4gICAgICAgIHRoaXMuX2Jhc2lzLnBvaW50KFxuICAgICAgICAgIHRoaXMuX2JldGEgKiB4W2ldICsgKDEgLSB0aGlzLl9iZXRhKSAqICh4MCArIHQgKiBkeCksXG4gICAgICAgICAgdGhpcy5fYmV0YSAqIHlbaV0gKyAoMSAtIHRoaXMuX2JldGEpICogKHkwICsgdCAqIGR5KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gbnVsbDtcbiAgICB0aGlzLl9iYXNpcy5saW5lRW5kKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5feC5wdXNoKCt4KTtcbiAgICB0aGlzLl95LnB1c2goK3kpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKGJldGEpIHtcblxuICBmdW5jdGlvbiBidW5kbGUoY29udGV4dCkge1xuICAgIHJldHVybiBiZXRhID09PSAxID8gbmV3IEJhc2lzKGNvbnRleHQpIDogbmV3IEJ1bmRsZShjb250ZXh0LCBiZXRhKTtcbiAgfVxuXG4gIGJ1bmRsZS5iZXRhID0gZnVuY3Rpb24oYmV0YSkge1xuICAgIHJldHVybiBjdXN0b20oK2JldGEpO1xuICB9O1xuXG4gIHJldHVybiBidW5kbGU7XG59KSgwLjg1KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBwb2ludCh0aGF0LCB4LCB5KSB7XG4gIHRoYXQuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhcbiAgICB0aGF0Ll94MSArIHRoYXQuX2sgKiAodGhhdC5feDIgLSB0aGF0Ll94MCksXG4gICAgdGhhdC5feTEgKyB0aGF0Ll9rICogKHRoYXQuX3kyIC0gdGhhdC5feTApLFxuICAgIHRoYXQuX3gyICsgdGhhdC5fayAqICh0aGF0Ll94MSAtIHgpLFxuICAgIHRoYXQuX3kyICsgdGhhdC5fayAqICh0aGF0Ll95MSAtIHkpLFxuICAgIHRoYXQuX3gyLFxuICAgIHRoYXQuX3kyXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3gxLCB0aGlzLl95MSk7IGJyZWFrO1xuICAgIH1cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5fbGluZSA9IDEgLSB0aGlzLl9saW5lO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgdGhpcy5feDEgPSB4LCB0aGlzLl95MSA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IC8vIHByb2NlZWRcbiAgICAgIGRlZmF1bHQ6IHBvaW50KHRoaXMsIHgsIHkpOyBicmVhaztcbiAgICB9XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbSh0ZW5zaW9uKSB7XG5cbiAgZnVuY3Rpb24gY2FyZGluYWwoY29udGV4dCkge1xuICAgIHJldHVybiBuZXcgQ2FyZGluYWwoY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhcmRpbmFsXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9rID0gKDEgLSB0ZW5zaW9uKSAvIDY7XG59XG5cbkNhcmRpbmFsQ2xvc2VkLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBub29wLFxuICBhcmVhRW5kOiBub29wLFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9IHRoaXMuX3gzID0gdGhpcy5feDQgPSB0aGlzLl94NSA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gdGhpcy5feTMgPSB0aGlzLl95NCA9IHRoaXMuX3k1ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHRoaXMuX3gzLCB0aGlzLl95Myk7XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAzOiB7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94NCwgdGhpcy5feTQpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g1LCB0aGlzLl95NSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCB0ZW5zaW9uKTtcbiAgfVxuXG4gIGNhcmRpbmFsLnRlbnNpb24gPSBmdW5jdGlvbih0ZW5zaW9uKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrdGVuc2lvbik7XG4gIH07XG5cbiAgcmV0dXJuIGNhcmRpbmFsO1xufSkoMCk7XG4iLCJpbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXJkaW5hbFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2FyZGluYWxPcGVuKGNvbnRleHQsIHRlbnNpb24pIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2sgPSAoMSAtIHRlbnNpb24pIC8gNjtcbn1cblxuQ2FyZGluYWxPcGVuLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAzKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHRoaXMuX3gyLCB0aGlzLl94MiA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB0aGlzLl95MiwgdGhpcy5feTIgPSB5O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gY3VzdG9tKHRlbnNpb24pIHtcblxuICBmdW5jdGlvbiBjYXJkaW5hbChjb250ZXh0KSB7XG4gICAgcmV0dXJuIG5ldyBDYXJkaW5hbE9wZW4oY29udGV4dCwgdGVuc2lvbik7XG4gIH1cblxuICBjYXJkaW5hbC50ZW5zaW9uID0gZnVuY3Rpb24odGVuc2lvbikge1xuICAgIHJldHVybiBjdXN0b20oK3RlbnNpb24pO1xuICB9O1xuXG4gIHJldHVybiBjYXJkaW5hbDtcbn0pKDApO1xuIiwiaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtDYXJkaW5hbH0gZnJvbSBcIi4vY2FyZGluYWxcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBvaW50KHRoYXQsIHgsIHkpIHtcbiAgdmFyIHgxID0gdGhhdC5feDEsXG4gICAgICB5MSA9IHRoYXQuX3kxLFxuICAgICAgeDIgPSB0aGF0Ll94MixcbiAgICAgIHkyID0gdGhhdC5feTI7XG5cbiAgaWYgKHRoYXQuX2wwMV9hID4gZXBzaWxvbikge1xuICAgIHZhciBhID0gMiAqIHRoYXQuX2wwMV8yYSArIDMgKiB0aGF0Ll9sMDFfYSAqIHRoYXQuX2wxMl9hICsgdGhhdC5fbDEyXzJhLFxuICAgICAgICBuID0gMyAqIHRoYXQuX2wwMV9hICogKHRoYXQuX2wwMV9hICsgdGhhdC5fbDEyX2EpO1xuICAgIHgxID0gKHgxICogYSAtIHRoYXQuX3gwICogdGhhdC5fbDEyXzJhICsgdGhhdC5feDIgKiB0aGF0Ll9sMDFfMmEpIC8gbjtcbiAgICB5MSA9ICh5MSAqIGEgLSB0aGF0Ll95MCAqIHRoYXQuX2wxMl8yYSArIHRoYXQuX3kyICogdGhhdC5fbDAxXzJhKSAvIG47XG4gIH1cblxuICBpZiAodGhhdC5fbDIzX2EgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGIgPSAyICogdGhhdC5fbDIzXzJhICsgMyAqIHRoYXQuX2wyM19hICogdGhhdC5fbDEyX2EgKyB0aGF0Ll9sMTJfMmEsXG4gICAgICAgIG0gPSAzICogdGhhdC5fbDIzX2EgKiAodGhhdC5fbDIzX2EgKyB0aGF0Ll9sMTJfYSk7XG4gICAgeDIgPSAoeDIgKiBiICsgdGhhdC5feDEgKiB0aGF0Ll9sMjNfMmEgLSB4ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gICAgeTIgPSAoeTIgKiBiICsgdGhhdC5feTEgKiB0aGF0Ll9sMjNfMmEgLSB5ICogdGhhdC5fbDEyXzJhKSAvIG07XG4gIH1cblxuICB0aGF0Ll9jb250ZXh0LmJlemllckN1cnZlVG8oeDEsIHkxLCB4MiwgeTIsIHRoYXQuX3gyLCB0aGF0Ll95Mik7XG59XG5cbmZ1bmN0aW9uIENhdG11bGxSb20oY29udGV4dCwgYWxwaGEpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuX2FscGhhID0gYWxwaGE7XG59XG5cbkNhdG11bGxSb20ucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3gwID0gdGhpcy5feDEgPSB0aGlzLl94MiA9XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSA9IHRoaXMuX3kyID0gTmFOO1xuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EgPSB0aGlzLl9sMjNfYSA9XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhID0gdGhpcy5fbDIzXzJhID1cbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMucG9pbnQodGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG5cbiAgICBpZiAodGhpcy5fcG9pbnQpIHtcbiAgICAgIHZhciB4MjMgPSB0aGlzLl94MiAtIHgsXG4gICAgICAgICAgeTIzID0gdGhpcy5feTIgLSB5O1xuICAgICAgdGhpcy5fbDIzX2EgPSBNYXRoLnNxcnQodGhpcy5fbDIzXzJhID0gTWF0aC5wb3coeDIzICogeDIzICsgeTIzICogeTIzLCB0aGlzLl9hbHBoYSkpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDogdGhpcy5fcG9pbnQgPSAxOyB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeCwgeSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDE6IHRoaXMuX3BvaW50ID0gMjsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQge0NhcmRpbmFsQ2xvc2VkfSBmcm9tIFwiLi9jYXJkaW5hbENsb3NlZFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcbmltcG9ydCB7cG9pbnR9IGZyb20gXCIuL2NhdG11bGxSb21cIjtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUNsb3NlZChjb250ZXh0LCBhbHBoYSkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fYWxwaGEgPSBhbHBoYTtcbn1cblxuQ2F0bXVsbFJvbUNsb3NlZC5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogbm9vcCxcbiAgYXJlYUVuZDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID0gdGhpcy5feDIgPSB0aGlzLl94MyA9IHRoaXMuX3g0ID0gdGhpcy5feDUgPVxuICAgIHRoaXMuX3kwID0gdGhpcy5feTEgPSB0aGlzLl95MiA9IHRoaXMuX3kzID0gdGhpcy5feTQgPSB0aGlzLl95NSA9IE5hTjtcbiAgICB0aGlzLl9sMDFfYSA9IHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2EgPVxuICAgIHRoaXMuX2wwMV8yYSA9IHRoaXMuX2wxMl8yYSA9IHRoaXMuX2wyM18yYSA9XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDE6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDI6IHtcbiAgICAgICAgdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDMsIHRoaXMuX3kzKTtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIDM6IHtcbiAgICAgICAgdGhpcy5wb2ludCh0aGlzLl94MywgdGhpcy5feTMpO1xuICAgICAgICB0aGlzLnBvaW50KHRoaXMuX3g0LCB0aGlzLl95NCk7XG4gICAgICAgIHRoaXMucG9pbnQodGhpcy5feDUsIHRoaXMuX3k1KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHggPSAreCwgeSA9ICt5O1xuXG4gICAgaWYgKHRoaXMuX3BvaW50KSB7XG4gICAgICB2YXIgeDIzID0gdGhpcy5feDIgLSB4LFxuICAgICAgICAgIHkyMyA9IHRoaXMuX3kyIC0geTtcbiAgICAgIHRoaXMuX2wyM19hID0gTWF0aC5zcXJ0KHRoaXMuX2wyM18yYSA9IE1hdGgucG93KHgyMyAqIHgyMyArIHkyMyAqIHkyMywgdGhpcy5fYWxwaGEpKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5feDMgPSB4LCB0aGlzLl95MyA9IHk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IHRoaXMuX2NvbnRleHQubW92ZVRvKHRoaXMuX3g0ID0geCwgdGhpcy5feTQgPSB5KTsgYnJlYWs7XG4gICAgICBjYXNlIDI6IHRoaXMuX3BvaW50ID0gMzsgdGhpcy5feDUgPSB4LCB0aGlzLl95NSA9IHk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tQ2xvc2VkKGNvbnRleHQsIGFscGhhKSA6IG5ldyBDYXJkaW5hbENsb3NlZChjb250ZXh0LCAwKTtcbiAgfVxuXG4gIGNhdG11bGxSb20uYWxwaGEgPSBmdW5jdGlvbihhbHBoYSkge1xuICAgIHJldHVybiBjdXN0b20oK2FscGhhKTtcbiAgfTtcblxuICByZXR1cm4gY2F0bXVsbFJvbTtcbn0pKDAuNSk7XG4iLCJpbXBvcnQge0NhcmRpbmFsT3Blbn0gZnJvbSBcIi4vY2FyZGluYWxPcGVuXCI7XG5pbXBvcnQge3BvaW50fSBmcm9tIFwiLi9jYXRtdWxsUm9tXCI7XG5cbmZ1bmN0aW9uIENhdG11bGxSb21PcGVuKGNvbnRleHQsIGFscGhhKSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLl9hbHBoYSA9IGFscGhhO1xufVxuXG5DYXRtdWxsUm9tT3Blbi5wcm90b3R5cGUgPSB7XG4gIGFyZWFTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIGFyZWFFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSA9IHRoaXMuX3gyID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID0gdGhpcy5feTIgPSBOYU47XG4gICAgdGhpcy5fbDAxX2EgPSB0aGlzLl9sMTJfYSA9IHRoaXMuX2wyM19hID1cbiAgICB0aGlzLl9sMDFfMmEgPSB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmEgPVxuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2xpbmUgfHwgKHRoaXMuX2xpbmUgIT09IDAgJiYgdGhpcy5fcG9pbnQgPT09IDMpKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX2xpbmUgPSAxIC0gdGhpcy5fbGluZTtcbiAgfSxcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB4ID0gK3gsIHkgPSAreTtcblxuICAgIGlmICh0aGlzLl9wb2ludCkge1xuICAgICAgdmFyIHgyMyA9IHRoaXMuX3gyIC0geCxcbiAgICAgICAgICB5MjMgPSB0aGlzLl95MiAtIHk7XG4gICAgICB0aGlzLl9sMjNfYSA9IE1hdGguc3FydCh0aGlzLl9sMjNfMmEgPSBNYXRoLnBvdyh4MjMgKiB4MjMgKyB5MjMgKiB5MjMsIHRoaXMuX2FscGhhKSk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94MiwgdGhpcy5feTIpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8odGhpcy5feDIsIHRoaXMuX3kyKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHRoaXMuX3BvaW50ID0gNDsgLy8gcHJvY2VlZFxuICAgICAgZGVmYXVsdDogcG9pbnQodGhpcywgeCwgeSk7IGJyZWFrO1xuICAgIH1cblxuICAgIHRoaXMuX2wwMV9hID0gdGhpcy5fbDEyX2EsIHRoaXMuX2wxMl9hID0gdGhpcy5fbDIzX2E7XG4gICAgdGhpcy5fbDAxXzJhID0gdGhpcy5fbDEyXzJhLCB0aGlzLl9sMTJfMmEgPSB0aGlzLl9sMjNfMmE7XG4gICAgdGhpcy5feDAgPSB0aGlzLl94MSwgdGhpcy5feDEgPSB0aGlzLl94MiwgdGhpcy5feDIgPSB4O1xuICAgIHRoaXMuX3kwID0gdGhpcy5feTEsIHRoaXMuX3kxID0gdGhpcy5feTIsIHRoaXMuX3kyID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIGN1c3RvbShhbHBoYSkge1xuXG4gIGZ1bmN0aW9uIGNhdG11bGxSb20oY29udGV4dCkge1xuICAgIHJldHVybiBhbHBoYSA/IG5ldyBDYXRtdWxsUm9tT3Blbihjb250ZXh0LCBhbHBoYSkgOiBuZXcgQ2FyZGluYWxPcGVuKGNvbnRleHQsIDApO1xuICB9XG5cbiAgY2F0bXVsbFJvbS5hbHBoYSA9IGZ1bmN0aW9uKGFscGhhKSB7XG4gICAgcmV0dXJuIGN1c3RvbSgrYWxwaGEpO1xuICB9O1xuXG4gIHJldHVybiBjYXRtdWxsUm9tO1xufSkoMC41KTtcbiIsImltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbmZ1bmN0aW9uIExpbmVhckNsb3NlZChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5MaW5lYXJDbG9zZWQucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IG5vb3AsXG4gIGFyZWFFbmQ6IG5vb3AsXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fcG9pbnQpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHRoaXMuX3BvaW50KSB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICBlbHNlIHRoaXMuX3BvaW50ID0gMSwgdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBMaW5lYXJDbG9zZWQoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBzaWduKHgpIHtcbiAgcmV0dXJuIHggPCAwID8gLTEgOiAxO1xufVxuXG4vLyBDYWxjdWxhdGUgdGhlIHNsb3BlcyBvZiB0aGUgdGFuZ2VudHMgKEhlcm1pdGUtdHlwZSBpbnRlcnBvbGF0aW9uKSBiYXNlZCBvblxuLy8gdGhlIGZvbGxvd2luZyBwYXBlcjogU3RlZmZlbiwgTS4gMTk5MC4gQSBTaW1wbGUgTWV0aG9kIGZvciBNb25vdG9uaWNcbi8vIEludGVycG9sYXRpb24gaW4gT25lIERpbWVuc2lvbi4gQXN0cm9ub215IGFuZCBBc3Ryb3BoeXNpY3MsIFZvbC4gMjM5LCBOTy5cbi8vIE5PVihJSSksIFAuIDQ0MywgMTk5MC5cbmZ1bmN0aW9uIHNsb3BlMyh0aGF0LCB4MiwgeTIpIHtcbiAgdmFyIGgwID0gdGhhdC5feDEgLSB0aGF0Ll94MCxcbiAgICAgIGgxID0geDIgLSB0aGF0Ll94MSxcbiAgICAgIHMwID0gKHRoYXQuX3kxIC0gdGhhdC5feTApIC8gKGgwIHx8IGgxIDwgMCAmJiAtMCksXG4gICAgICBzMSA9ICh5MiAtIHRoYXQuX3kxKSAvIChoMSB8fCBoMCA8IDAgJiYgLTApLFxuICAgICAgcCA9IChzMCAqIGgxICsgczEgKiBoMCkgLyAoaDAgKyBoMSk7XG4gIHJldHVybiAoc2lnbihzMCkgKyBzaWduKHMxKSkgKiBNYXRoLm1pbihNYXRoLmFicyhzMCksIE1hdGguYWJzKHMxKSwgMC41ICogTWF0aC5hYnMocCkpIHx8IDA7XG59XG5cbi8vIENhbGN1bGF0ZSBhIG9uZS1zaWRlZCBzbG9wZS5cbmZ1bmN0aW9uIHNsb3BlMih0aGF0LCB0KSB7XG4gIHZhciBoID0gdGhhdC5feDEgLSB0aGF0Ll94MDtcbiAgcmV0dXJuIGggPyAoMyAqICh0aGF0Ll95MSAtIHRoYXQuX3kwKSAvIGggLSB0KSAvIDIgOiB0O1xufVxuXG4vLyBBY2NvcmRpbmcgdG8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3ViaWNfSGVybWl0ZV9zcGxpbmUjUmVwcmVzZW50YXRpb25zXG4vLyBcInlvdSBjYW4gZXhwcmVzcyBjdWJpYyBIZXJtaXRlIGludGVycG9sYXRpb24gaW4gdGVybXMgb2YgY3ViaWMgQsOpemllciBjdXJ2ZXNcbi8vIHdpdGggcmVzcGVjdCB0byB0aGUgZm91ciB2YWx1ZXMgcDAsIHAwICsgbTAgLyAzLCBwMSAtIG0xIC8gMywgcDFcIi5cbmZ1bmN0aW9uIHBvaW50KHRoYXQsIHQwLCB0MSkge1xuICB2YXIgeDAgPSB0aGF0Ll94MCxcbiAgICAgIHkwID0gdGhhdC5feTAsXG4gICAgICB4MSA9IHRoYXQuX3gxLFxuICAgICAgeTEgPSB0aGF0Ll95MSxcbiAgICAgIGR4ID0gKHgxIC0geDApIC8gMztcbiAgdGhhdC5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHgwICsgZHgsIHkwICsgZHggKiB0MCwgeDEgLSBkeCwgeTEgLSBkeCAqIHQxLCB4MSwgeTEpO1xufVxuXG5mdW5jdGlvbiBNb25vdG9uZVgoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuTW9ub3RvbmVYLnByb3RvdHlwZSA9IHtcbiAgYXJlYVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgYXJlYUVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxID1cbiAgICB0aGlzLl95MCA9IHRoaXMuX3kxID1cbiAgICB0aGlzLl90MCA9IE5hTjtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMjogdGhpcy5fY29udGV4dC5saW5lVG8odGhpcy5feDEsIHRoaXMuX3kxKTsgYnJlYWs7XG4gICAgICBjYXNlIDM6IHBvaW50KHRoaXMsIHRoaXMuX3QwLCBzbG9wZTIodGhpcywgdGhpcy5fdDApKTsgYnJlYWs7XG4gICAgfVxuICAgIGlmICh0aGlzLl9saW5lIHx8ICh0aGlzLl9saW5lICE9PSAwICYmIHRoaXMuX3BvaW50ID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHQxID0gTmFOO1xuXG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgaWYgKHggPT09IHRoaXMuX3gxICYmIHkgPT09IHRoaXMuX3kxKSByZXR1cm47IC8vIElnbm9yZSBjb2luY2lkZW50IHBvaW50cy5cbiAgICBzd2l0Y2ggKHRoaXMuX3BvaW50KSB7XG4gICAgICBjYXNlIDA6IHRoaXMuX3BvaW50ID0gMTsgdGhpcy5fbGluZSA/IHRoaXMuX2NvbnRleHQubGluZVRvKHgsIHkpIDogdGhpcy5fY29udGV4dC5tb3ZlVG8oeCwgeSk7IGJyZWFrO1xuICAgICAgY2FzZSAxOiB0aGlzLl9wb2ludCA9IDI7IGJyZWFrO1xuICAgICAgY2FzZSAyOiB0aGlzLl9wb2ludCA9IDM7IHBvaW50KHRoaXMsIHNsb3BlMih0aGlzLCB0MSA9IHNsb3BlMyh0aGlzLCB4LCB5KSksIHQxKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBwb2ludCh0aGlzLCB0aGlzLl90MCwgdDEgPSBzbG9wZTModGhpcywgeCwgeSkpOyBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLl94MCA9IHRoaXMuX3gxLCB0aGlzLl94MSA9IHg7XG4gICAgdGhpcy5feTAgPSB0aGlzLl95MSwgdGhpcy5feTEgPSB5O1xuICAgIHRoaXMuX3QwID0gdDE7XG4gIH1cbn1cblxuZnVuY3Rpb24gTW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IG5ldyBSZWZsZWN0Q29udGV4dChjb250ZXh0KTtcbn1cblxuKE1vbm90b25lWS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vbm90b25lWC5wcm90b3R5cGUpKS5wb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgTW9ub3RvbmVYLnByb3RvdHlwZS5wb2ludC5jYWxsKHRoaXMsIHksIHgpO1xufTtcblxuZnVuY3Rpb24gUmVmbGVjdENvbnRleHQoY29udGV4dCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbn1cblxuUmVmbGVjdENvbnRleHQucHJvdG90eXBlID0ge1xuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHsgdGhpcy5fY29udGV4dC5tb3ZlVG8oeSwgeCk7IH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7IHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7IH0sXG4gIGxpbmVUbzogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLl9jb250ZXh0LmxpbmVUbyh5LCB4KTsgfSxcbiAgYmV6aWVyQ3VydmVUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHgsIHkpIHsgdGhpcy5fY29udGV4dC5iZXppZXJDdXJ2ZVRvKHkxLCB4MSwgeTIsIHgyLCB5LCB4KTsgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1vbm90b25lWChjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTW9ub3RvbmVYKGNvbnRleHQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ub3RvbmVZKGNvbnRleHQpIHtcbiAgcmV0dXJuIG5ldyBNb25vdG9uZVkoY29udGV4dCk7XG59XG4iLCJmdW5jdGlvbiBOYXR1cmFsKGNvbnRleHQpIHtcbiAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG59XG5cbk5hdHVyYWwucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSBbXTtcbiAgICB0aGlzLl95ID0gW107XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB4ID0gdGhpcy5feCxcbiAgICAgICAgeSA9IHRoaXMuX3ksXG4gICAgICAgIG4gPSB4Lmxlbmd0aDtcblxuICAgIGlmIChuKSB7XG4gICAgICB0aGlzLl9saW5lID8gdGhpcy5fY29udGV4dC5saW5lVG8oeFswXSwgeVswXSkgOiB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4WzBdLCB5WzBdKTtcbiAgICAgIGlmIChuID09PSAyKSB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHhbMV0sIHlbMV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHB4ID0gY29udHJvbFBvaW50cyh4KSxcbiAgICAgICAgICAgIHB5ID0gY29udHJvbFBvaW50cyh5KTtcbiAgICAgICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDE7IGkxIDwgbjsgKytpMCwgKytpMSkge1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQuYmV6aWVyQ3VydmVUbyhweFswXVtpMF0sIHB5WzBdW2kwXSwgcHhbMV1baTBdLCBweVsxXVtpMF0sIHhbaTFdLCB5W2kxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiBuID09PSAxKSkgdGhpcy5fY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gICAgdGhpcy5feCA9IHRoaXMuX3kgPSBudWxsO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHRoaXMuX3gucHVzaCgreCk7XG4gICAgdGhpcy5feS5wdXNoKCt5KTtcbiAgfVxufTtcblxuLy8gU2VlIGh0dHBzOi8vd3d3LnBhcnRpY2xlaW5jZWxsLmNvbS8yMDEyL2Jlemllci1zcGxpbmVzLyBmb3IgZGVyaXZhdGlvbi5cbmZ1bmN0aW9uIGNvbnRyb2xQb2ludHMoeCkge1xuICB2YXIgaSxcbiAgICAgIG4gPSB4Lmxlbmd0aCAtIDEsXG4gICAgICBtLFxuICAgICAgYSA9IG5ldyBBcnJheShuKSxcbiAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICByID0gbmV3IEFycmF5KG4pO1xuICBhWzBdID0gMCwgYlswXSA9IDIsIHJbMF0gPSB4WzBdICsgMiAqIHhbMV07XG4gIGZvciAoaSA9IDE7IGkgPCBuIC0gMTsgKytpKSBhW2ldID0gMSwgYltpXSA9IDQsIHJbaV0gPSA0ICogeFtpXSArIDIgKiB4W2kgKyAxXTtcbiAgYVtuIC0gMV0gPSAyLCBiW24gLSAxXSA9IDcsIHJbbiAtIDFdID0gOCAqIHhbbiAtIDFdICsgeFtuXTtcbiAgZm9yIChpID0gMTsgaSA8IG47ICsraSkgbSA9IGFbaV0gLyBiW2kgLSAxXSwgYltpXSAtPSBtLCByW2ldIC09IG0gKiByW2kgLSAxXTtcbiAgYVtuIC0gMV0gPSByW24gLSAxXSAvIGJbbiAtIDFdO1xuICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyAtLWkpIGFbaV0gPSAocltpXSAtIGFbaSArIDFdKSAvIGJbaV07XG4gIGJbbiAtIDFdID0gKHhbbl0gKyBhW24gLSAxXSkgLyAyO1xuICBmb3IgKGkgPSAwOyBpIDwgbiAtIDE7ICsraSkgYltpXSA9IDIgKiB4W2kgKyAxXSAtIGFbaSArIDFdO1xuICByZXR1cm4gW2EsIGJdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb250ZXh0KSB7XG4gIHJldHVybiBuZXcgTmF0dXJhbChjb250ZXh0KTtcbn1cbiIsImZ1bmN0aW9uIFN0ZXAoY29udGV4dCwgdCkge1xuICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5fdCA9IHQ7XG59XG5cblN0ZXAucHJvdG90eXBlID0ge1xuICBhcmVhU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSAwO1xuICB9LFxuICBhcmVhRW5kOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gTmFOO1xuICB9LFxuICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3ggPSB0aGlzLl95ID0gTmFOO1xuICAgIHRoaXMuX3BvaW50ID0gMDtcbiAgfSxcbiAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKDAgPCB0aGlzLl90ICYmIHRoaXMuX3QgPCAxICYmIHRoaXMuX3BvaW50ID09PSAyKSB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB0aGlzLl95KTtcbiAgICBpZiAodGhpcy5fbGluZSB8fCAodGhpcy5fbGluZSAhPT0gMCAmJiB0aGlzLl9wb2ludCA9PT0gMSkpIHRoaXMuX2NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgaWYgKHRoaXMuX2xpbmUgPj0gMCkgdGhpcy5fdCA9IDEgLSB0aGlzLl90LCB0aGlzLl9saW5lID0gMSAtIHRoaXMuX2xpbmU7XG4gIH0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgeCA9ICt4LCB5ID0gK3k7XG4gICAgc3dpdGNoICh0aGlzLl9wb2ludCkge1xuICAgICAgY2FzZSAwOiB0aGlzLl9wb2ludCA9IDE7IHRoaXMuX2xpbmUgPyB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KSA6IHRoaXMuX2NvbnRleHQubW92ZVRvKHgsIHkpOyBicmVhaztcbiAgICAgIGNhc2UgMTogdGhpcy5fcG9pbnQgPSAyOyAvLyBwcm9jZWVkXG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIGlmICh0aGlzLl90IDw9IDApIHtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh0aGlzLl94LCB5KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgeDEgPSB0aGlzLl94ICogKDEgLSB0aGlzLl90KSArIHggKiB0aGlzLl90O1xuICAgICAgICAgIHRoaXMuX2NvbnRleHQubGluZVRvKHgxLCB0aGlzLl95KTtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4MSwgeSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3ggPSB4LCB0aGlzLl95ID0geTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMC41KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0ZXBCZWZvcmUoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGVwQWZ0ZXIoY29udGV4dCkge1xuICByZXR1cm4gbmV3IFN0ZXAoY29udGV4dCwgMSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAxKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpID0gMSwgaiwgczAsIHMxID0gc2VyaWVzW29yZGVyWzBdXSwgbiwgbSA9IHMxLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIHMwID0gczEsIHMxID0gc2VyaWVzW29yZGVyW2ldXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgICBzMVtqXVsxXSArPSBzMVtqXVswXSA9IGlzTmFOKHMwW2pdWzFdKSA/IHMwW2pdWzBdIDogczBbal1bMV07XG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIG4gPSBzZXJpZXMubGVuZ3RoLCBvID0gbmV3IEFycmF5KG4pO1xuICB3aGlsZSAoLS1uID49IDApIG9bbl0gPSBuO1xuICByZXR1cm4gbztcbn1cbiIsImltcG9ydCB7c2xpY2V9IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcbmltcG9ydCBvZmZzZXROb25lIGZyb20gXCIuL29mZnNldC9ub25lXCI7XG5pbXBvcnQgb3JkZXJOb25lIGZyb20gXCIuL29yZGVyL25vbmVcIjtcblxuZnVuY3Rpb24gc3RhY2tWYWx1ZShkLCBrZXkpIHtcbiAgcmV0dXJuIGRba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBrZXlzID0gY29uc3RhbnQoW10pLFxuICAgICAgb3JkZXIgPSBvcmRlck5vbmUsXG4gICAgICBvZmZzZXQgPSBvZmZzZXROb25lLFxuICAgICAgdmFsdWUgPSBzdGFja1ZhbHVlO1xuXG4gIGZ1bmN0aW9uIHN0YWNrKGRhdGEpIHtcbiAgICB2YXIga3ogPSBrZXlzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIGksXG4gICAgICAgIG0gPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgbiA9IGt6Lmxlbmd0aCxcbiAgICAgICAgc3ogPSBuZXcgQXJyYXkobiksXG4gICAgICAgIG96O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZm9yICh2YXIga2kgPSBreltpXSwgc2kgPSBzeltpXSA9IG5ldyBBcnJheShtKSwgaiA9IDAsIHNpajsgaiA8IG07ICsraikge1xuICAgICAgICBzaVtqXSA9IHNpaiA9IFswLCArdmFsdWUoZGF0YVtqXSwga2ksIGosIGRhdGEpXTtcbiAgICAgICAgc2lqLmRhdGEgPSBkYXRhW2pdO1xuICAgICAgfVxuICAgICAgc2kua2V5ID0ga2k7XG4gICAgfVxuXG4gICAgZm9yIChpID0gMCwgb3ogPSBvcmRlcihzeik7IGkgPCBuOyArK2kpIHtcbiAgICAgIHN6W296W2ldXS5pbmRleCA9IGk7XG4gICAgfVxuXG4gICAgb2Zmc2V0KHN6LCBveik7XG4gICAgcmV0dXJuIHN6O1xuICB9XG5cbiAgc3RhY2sua2V5cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrZXlzID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChzbGljZS5jYWxsKF8pKSwgc3RhY2spIDoga2V5cztcbiAgfTtcblxuICBzdGFjay52YWx1ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh2YWx1ZSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBzdGFjaykgOiB2YWx1ZTtcbiAgfTtcblxuICBzdGFjay5vcmRlciA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvcmRlciA9IF8gPT0gbnVsbCA/IG9yZGVyTm9uZSA6IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoc2xpY2UuY2FsbChfKSksIHN0YWNrKSA6IG9yZGVyO1xuICB9O1xuXG4gIHN0YWNrLm9mZnNldCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChvZmZzZXQgPSBfID09IG51bGwgPyBvZmZzZXROb25lIDogXywgc3RhY2spIDogb2Zmc2V0O1xuICB9O1xuXG4gIHJldHVybiBzdGFjaztcbn1cbiIsImltcG9ydCBub25lIGZyb20gXCIuL25vbmVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzLCBvcmRlcikge1xuICBpZiAoISgobiA9IHNlcmllcy5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgaSwgbiwgaiA9IDAsIG0gPSBzZXJpZXNbMF0ubGVuZ3RoLCB5OyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh5ID0gaSA9IDA7IGkgPCBuOyArK2kpIHkgKz0gc2VyaWVzW2ldW2pdWzFdIHx8IDA7XG4gICAgaWYgKHkpIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHNlcmllc1tpXVtqXVsxXSAvPSB5O1xuICB9XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBpLCBqID0gMCwgZCwgZHksIHlwLCB5biwgbiwgbSA9IHNlcmllc1tvcmRlclswXV0ubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh5cCA9IHluID0gMCwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgoZHkgPSAoZCA9IHNlcmllc1tvcmRlcltpXV1bal0pWzFdIC0gZFswXSkgPj0gMCkge1xuICAgICAgICBkWzBdID0geXAsIGRbMV0gPSB5cCArPSBkeTtcbiAgICAgIH0gZWxzZSBpZiAoZHkgPCAwKSB7XG4gICAgICAgIGRbMV0gPSB5biwgZFswXSA9IHluICs9IGR5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZFswXSA9IHlwO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMsIG9yZGVyKSB7XG4gIGlmICghKChuID0gc2VyaWVzLmxlbmd0aCkgPiAwKSkgcmV0dXJuO1xuICBmb3IgKHZhciBqID0gMCwgczAgPSBzZXJpZXNbb3JkZXJbMF1dLCBuLCBtID0gczAubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIHkgPSAwOyBpIDwgbjsgKytpKSB5ICs9IHNlcmllc1tpXVtqXVsxXSB8fCAwO1xuICAgIHMwW2pdWzFdICs9IHMwW2pdWzBdID0gLXkgLyAyO1xuICB9XG4gIG5vbmUoc2VyaWVzLCBvcmRlcik7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcywgb3JkZXIpIHtcbiAgaWYgKCEoKG4gPSBzZXJpZXMubGVuZ3RoKSA+IDApIHx8ICEoKG0gPSAoczAgPSBzZXJpZXNbb3JkZXJbMF1dKS5sZW5ndGgpID4gMCkpIHJldHVybjtcbiAgZm9yICh2YXIgeSA9IDAsIGogPSAxLCBzMCwgbSwgbjsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGkgPSAwLCBzMSA9IDAsIHMyID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIHNpID0gc2VyaWVzW29yZGVyW2ldXSxcbiAgICAgICAgICBzaWowID0gc2lbal1bMV0gfHwgMCxcbiAgICAgICAgICBzaWoxID0gc2lbaiAtIDFdWzFdIHx8IDAsXG4gICAgICAgICAgczMgPSAoc2lqMCAtIHNpajEpIC8gMjtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaTsgKytrKSB7XG4gICAgICAgIHZhciBzayA9IHNlcmllc1tvcmRlcltrXV0sXG4gICAgICAgICAgICBza2owID0gc2tbal1bMV0gfHwgMCxcbiAgICAgICAgICAgIHNrajEgPSBza1tqIC0gMV1bMV0gfHwgMDtcbiAgICAgICAgczMgKz0gc2tqMCAtIHNrajE7XG4gICAgICB9XG4gICAgICBzMSArPSBzaWowLCBzMiArPSBzMyAqIHNpajA7XG4gICAgfVxuICAgIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xuICAgIGlmIChzMSkgeSAtPSBzMiAvIHMxO1xuICB9XG4gIHMwW2ogLSAxXVsxXSArPSBzMFtqIC0gMV1bMF0gPSB5O1xuICBub25lKHNlcmllcywgb3JkZXIpO1xufVxuIiwiaW1wb3J0IG5vbmUgZnJvbSBcIi4vbm9uZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZXJpZXMpIHtcbiAgdmFyIHBlYWtzID0gc2VyaWVzLm1hcChwZWFrKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHBlYWtzW2FdIC0gcGVha3NbYl07IH0pO1xufVxuXG5mdW5jdGlvbiBwZWFrKHNlcmllcykge1xuICB2YXIgaSA9IC0xLCBqID0gMCwgbiA9IHNlcmllcy5sZW5ndGgsIHZpLCB2aiA9IC1JbmZpbml0eTtcbiAgd2hpbGUgKCsraSA8IG4pIGlmICgodmkgPSArc2VyaWVzW2ldWzFdKSA+IHZqKSB2aiA9IHZpLCBqID0gaTtcbiAgcmV0dXJuIGo7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgc3VtcyA9IHNlcmllcy5tYXAoc3VtKTtcbiAgcmV0dXJuIG5vbmUoc2VyaWVzKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsgcmV0dXJuIHN1bXNbYV0gLSBzdW1zW2JdOyB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1bShzZXJpZXMpIHtcbiAgdmFyIHMgPSAwLCBpID0gLTEsIG4gPSBzZXJpZXMubGVuZ3RoLCB2O1xuICB3aGlsZSAoKytpIDwgbikgaWYgKHYgPSArc2VyaWVzW2ldWzFdKSBzICs9IHY7XG4gIHJldHVybiBzO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VyaWVzKSB7XG4gIHJldHVybiBhc2NlbmRpbmcoc2VyaWVzKS5yZXZlcnNlKCk7XG59XG4iLCJpbXBvcnQgYXBwZWFyYW5jZSBmcm9tIFwiLi9hcHBlYXJhbmNlXCI7XG5pbXBvcnQge3N1bX0gZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICB2YXIgbiA9IHNlcmllcy5sZW5ndGgsXG4gICAgICBpLFxuICAgICAgaixcbiAgICAgIHN1bXMgPSBzZXJpZXMubWFwKHN1bSksXG4gICAgICBvcmRlciA9IGFwcGVhcmFuY2Uoc2VyaWVzKSxcbiAgICAgIHRvcCA9IDAsXG4gICAgICBib3R0b20gPSAwLFxuICAgICAgdG9wcyA9IFtdLFxuICAgICAgYm90dG9tcyA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBqID0gb3JkZXJbaV07XG4gICAgaWYgKHRvcCA8IGJvdHRvbSkge1xuICAgICAgdG9wICs9IHN1bXNbal07XG4gICAgICB0b3BzLnB1c2goaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdHRvbSArPSBzdW1zW2pdO1xuICAgICAgYm90dG9tcy5wdXNoKGopO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3R0b21zLnJldmVyc2UoKS5jb25jYXQodG9wcyk7XG59XG4iLCJpbXBvcnQgbm9uZSBmcm9tIFwiLi9ub25lXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlcmllcykge1xuICByZXR1cm4gbm9uZShzZXJpZXMpLnJldmVyc2UoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHkoZCkge1xuICByZXR1cm4gZFsxXTtcbn1cbiIsImZ1bmN0aW9uIFJlZEJsYWNrVHJlZSgpIHtcbiAgdGhpcy5fID0gbnVsbDsgLy8gcm9vdCBub2RlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWRCbGFja05vZGUobm9kZSkge1xuICBub2RlLlUgPSAvLyBwYXJlbnQgbm9kZVxuICBub2RlLkMgPSAvLyBjb2xvciAtIHRydWUgZm9yIHJlZCwgZmFsc2UgZm9yIGJsYWNrXG4gIG5vZGUuTCA9IC8vIGxlZnQgbm9kZVxuICBub2RlLlIgPSAvLyByaWdodCBub2RlXG4gIG5vZGUuUCA9IC8vIHByZXZpb3VzIG5vZGVcbiAgbm9kZS5OID0gbnVsbDsgLy8gbmV4dCBub2RlXG59XG5cblJlZEJsYWNrVHJlZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBSZWRCbGFja1RyZWUsXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbihhZnRlciwgbm9kZSkge1xuICAgIHZhciBwYXJlbnQsIGdyYW5kcGEsIHVuY2xlO1xuXG4gICAgaWYgKGFmdGVyKSB7XG4gICAgICBub2RlLlAgPSBhZnRlcjtcbiAgICAgIG5vZGUuTiA9IGFmdGVyLk47XG4gICAgICBpZiAoYWZ0ZXIuTikgYWZ0ZXIuTi5QID0gbm9kZTtcbiAgICAgIGFmdGVyLk4gPSBub2RlO1xuICAgICAgaWYgKGFmdGVyLlIpIHtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlci5SO1xuICAgICAgICB3aGlsZSAoYWZ0ZXIuTCkgYWZ0ZXIgPSBhZnRlci5MO1xuICAgICAgICBhZnRlci5MID0gbm9kZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyLlIgPSBub2RlO1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIGlmICh0aGlzLl8pIHtcbiAgICAgIGFmdGVyID0gUmVkQmxhY2tGaXJzdCh0aGlzLl8pO1xuICAgICAgbm9kZS5QID0gbnVsbDtcbiAgICAgIG5vZGUuTiA9IGFmdGVyO1xuICAgICAgYWZ0ZXIuUCA9IGFmdGVyLkwgPSBub2RlO1xuICAgICAgcGFyZW50ID0gYWZ0ZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuUCA9IG5vZGUuTiA9IG51bGw7XG4gICAgICB0aGlzLl8gPSBub2RlO1xuICAgICAgcGFyZW50ID0gbnVsbDtcbiAgICB9XG4gICAgbm9kZS5MID0gbm9kZS5SID0gbnVsbDtcbiAgICBub2RlLlUgPSBwYXJlbnQ7XG4gICAgbm9kZS5DID0gdHJ1ZTtcblxuICAgIGFmdGVyID0gbm9kZTtcbiAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5DKSB7XG4gICAgICBncmFuZHBhID0gcGFyZW50LlU7XG4gICAgICBpZiAocGFyZW50ID09PSBncmFuZHBhLkwpIHtcbiAgICAgICAgdW5jbGUgPSBncmFuZHBhLlI7XG4gICAgICAgIGlmICh1bmNsZSAmJiB1bmNsZS5DKSB7XG4gICAgICAgICAgcGFyZW50LkMgPSB1bmNsZS5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBhZnRlciA9IGdyYW5kcGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFmdGVyID09PSBwYXJlbnQuUikge1xuICAgICAgICAgICAgUmVkQmxhY2tSb3RhdGVMZWZ0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIGdyYW5kcGEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1bmNsZSA9IGdyYW5kcGEuTDtcbiAgICAgICAgaWYgKHVuY2xlICYmIHVuY2xlLkMpIHtcbiAgICAgICAgICBwYXJlbnQuQyA9IHVuY2xlLkMgPSBmYWxzZTtcbiAgICAgICAgICBncmFuZHBhLkMgPSB0cnVlO1xuICAgICAgICAgIGFmdGVyID0gZ3JhbmRwYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPT09IHBhcmVudC5MKSB7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgICBhZnRlciA9IHBhcmVudDtcbiAgICAgICAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5DID0gZmFsc2U7XG4gICAgICAgICAgZ3JhbmRwYS5DID0gdHJ1ZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgZ3JhbmRwYSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IGFmdGVyLlU7XG4gICAgfVxuICAgIHRoaXMuXy5DID0gZmFsc2U7XG4gIH0sXG5cbiAgcmVtb3ZlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUuTikgbm9kZS5OLlAgPSBub2RlLlA7XG4gICAgaWYgKG5vZGUuUCkgbm9kZS5QLk4gPSBub2RlLk47XG4gICAgbm9kZS5OID0gbm9kZS5QID0gbnVsbDtcblxuICAgIHZhciBwYXJlbnQgPSBub2RlLlUsXG4gICAgICAgIHNpYmxpbmcsXG4gICAgICAgIGxlZnQgPSBub2RlLkwsXG4gICAgICAgIHJpZ2h0ID0gbm9kZS5SLFxuICAgICAgICBuZXh0LFxuICAgICAgICByZWQ7XG5cbiAgICBpZiAoIWxlZnQpIG5leHQgPSByaWdodDtcbiAgICBlbHNlIGlmICghcmlnaHQpIG5leHQgPSBsZWZ0O1xuICAgIGVsc2UgbmV4dCA9IFJlZEJsYWNrRmlyc3QocmlnaHQpO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5MID09PSBub2RlKSBwYXJlbnQuTCA9IG5leHQ7XG4gICAgICBlbHNlIHBhcmVudC5SID0gbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobGVmdCAmJiByaWdodCkge1xuICAgICAgcmVkID0gbmV4dC5DO1xuICAgICAgbmV4dC5DID0gbm9kZS5DO1xuICAgICAgbmV4dC5MID0gbGVmdDtcbiAgICAgIGxlZnQuVSA9IG5leHQ7XG4gICAgICBpZiAobmV4dCAhPT0gcmlnaHQpIHtcbiAgICAgICAgcGFyZW50ID0gbmV4dC5VO1xuICAgICAgICBuZXh0LlUgPSBub2RlLlU7XG4gICAgICAgIG5vZGUgPSBuZXh0LlI7XG4gICAgICAgIHBhcmVudC5MID0gbm9kZTtcbiAgICAgICAgbmV4dC5SID0gcmlnaHQ7XG4gICAgICAgIHJpZ2h0LlUgPSBuZXh0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dC5VID0gcGFyZW50O1xuICAgICAgICBwYXJlbnQgPSBuZXh0O1xuICAgICAgICBub2RlID0gbmV4dC5SO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWQgPSBub2RlLkM7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICBpZiAobm9kZSkgbm9kZS5VID0gcGFyZW50O1xuICAgIGlmIChyZWQpIHJldHVybjtcbiAgICBpZiAobm9kZSAmJiBub2RlLkMpIHsgbm9kZS5DID0gZmFsc2U7IHJldHVybjsgfVxuXG4gICAgZG8ge1xuICAgICAgaWYgKG5vZGUgPT09IHRoaXMuXykgYnJlYWs7XG4gICAgICBpZiAobm9kZSA9PT0gcGFyZW50LkwpIHtcbiAgICAgICAgc2libGluZyA9IHBhcmVudC5SO1xuICAgICAgICBpZiAoc2libGluZy5DKSB7XG4gICAgICAgICAgc2libGluZy5DID0gZmFsc2U7XG4gICAgICAgICAgcGFyZW50LkMgPSB0cnVlO1xuICAgICAgICAgIFJlZEJsYWNrUm90YXRlTGVmdCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuUjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICAgIHx8IChzaWJsaW5nLlIgJiYgc2libGluZy5SLkMpKSB7XG4gICAgICAgICAgaWYgKCFzaWJsaW5nLlIgfHwgIXNpYmxpbmcuUi5DKSB7XG4gICAgICAgICAgICBzaWJsaW5nLkwuQyA9IGZhbHNlO1xuICAgICAgICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgICAgICAgIFJlZEJsYWNrUm90YXRlUmlnaHQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50LlI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgcGFyZW50KTtcbiAgICAgICAgICBub2RlID0gdGhpcy5fO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgIGlmIChzaWJsaW5nLkMpIHtcbiAgICAgICAgICBzaWJsaW5nLkMgPSBmYWxzZTtcbiAgICAgICAgICBwYXJlbnQuQyA9IHRydWU7XG4gICAgICAgICAgUmVkQmxhY2tSb3RhdGVSaWdodCh0aGlzLCBwYXJlbnQpO1xuICAgICAgICAgIHNpYmxpbmcgPSBwYXJlbnQuTDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHNpYmxpbmcuTCAmJiBzaWJsaW5nLkwuQylcbiAgICAgICAgICB8fCAoc2libGluZy5SICYmIHNpYmxpbmcuUi5DKSkge1xuICAgICAgICAgIGlmICghc2libGluZy5MIHx8ICFzaWJsaW5nLkwuQykge1xuICAgICAgICAgICAgc2libGluZy5SLkMgPSBmYWxzZTtcbiAgICAgICAgICAgIHNpYmxpbmcuQyA9IHRydWU7XG4gICAgICAgICAgICBSZWRCbGFja1JvdGF0ZUxlZnQodGhpcywgc2libGluZyk7XG4gICAgICAgICAgICBzaWJsaW5nID0gcGFyZW50Lkw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNpYmxpbmcuQyA9IHBhcmVudC5DO1xuICAgICAgICAgIHBhcmVudC5DID0gc2libGluZy5MLkMgPSBmYWxzZTtcbiAgICAgICAgICBSZWRCbGFja1JvdGF0ZVJpZ2h0KHRoaXMsIHBhcmVudCk7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuXztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2libGluZy5DID0gdHJ1ZTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuVTtcbiAgICB9IHdoaWxlICghbm9kZS5DKTtcblxuICAgIGlmIChub2RlKSBub2RlLkMgPSBmYWxzZTtcbiAgfVxufTtcblxuZnVuY3Rpb24gUmVkQmxhY2tSb3RhdGVMZWZ0KHRyZWUsIG5vZGUpIHtcbiAgdmFyIHAgPSBub2RlLFxuICAgICAgcSA9IG5vZGUuUixcbiAgICAgIHBhcmVudCA9IHAuVTtcblxuICBpZiAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5MID09PSBwKSBwYXJlbnQuTCA9IHE7XG4gICAgZWxzZSBwYXJlbnQuUiA9IHE7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5fID0gcTtcbiAgfVxuXG4gIHEuVSA9IHBhcmVudDtcbiAgcC5VID0gcTtcbiAgcC5SID0gcS5MO1xuICBpZiAocC5SKSBwLlIuVSA9IHA7XG4gIHEuTCA9IHA7XG59XG5cbmZ1bmN0aW9uIFJlZEJsYWNrUm90YXRlUmlnaHQodHJlZSwgbm9kZSkge1xuICB2YXIgcCA9IG5vZGUsXG4gICAgICBxID0gbm9kZS5MLFxuICAgICAgcGFyZW50ID0gcC5VO1xuXG4gIGlmIChwYXJlbnQpIHtcbiAgICBpZiAocGFyZW50LkwgPT09IHApIHBhcmVudC5MID0gcTtcbiAgICBlbHNlIHBhcmVudC5SID0gcTtcbiAgfSBlbHNlIHtcbiAgICB0cmVlLl8gPSBxO1xuICB9XG5cbiAgcS5VID0gcGFyZW50O1xuICBwLlUgPSBxO1xuICBwLkwgPSBxLlI7XG4gIGlmIChwLkwpIHAuTC5VID0gcDtcbiAgcS5SID0gcDtcbn1cblxuZnVuY3Rpb24gUmVkQmxhY2tGaXJzdChub2RlKSB7XG4gIHdoaWxlIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRCbGFja1RyZWU7XG4iLCJpbXBvcnQge2NlbGxzLCBlZGdlcywgZXBzaWxvbn0gZnJvbSBcIi4vRGlhZ3JhbVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWRnZShsZWZ0LCByaWdodCwgdjAsIHYxKSB7XG4gIHZhciBlZGdlID0gW251bGwsIG51bGxdLFxuICAgICAgaW5kZXggPSBlZGdlcy5wdXNoKGVkZ2UpIC0gMTtcbiAgZWRnZS5sZWZ0ID0gbGVmdDtcbiAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICBpZiAodjApIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHYwKTtcbiAgaWYgKHYxKSBzZXRFZGdlRW5kKGVkZ2UsIHJpZ2h0LCBsZWZ0LCB2MSk7XG4gIGNlbGxzW2xlZnQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgY2VsbHNbcmlnaHQuaW5kZXhdLmhhbGZlZGdlcy5wdXNoKGluZGV4KTtcbiAgcmV0dXJuIGVkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCb3JkZXJFZGdlKGxlZnQsIHYwLCB2MSkge1xuICB2YXIgZWRnZSA9IFt2MCwgdjFdO1xuICBlZGdlLmxlZnQgPSBsZWZ0O1xuICByZXR1cm4gZWRnZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEVkZ2VFbmQoZWRnZSwgbGVmdCwgcmlnaHQsIHZlcnRleCkge1xuICBpZiAoIWVkZ2VbMF0gJiYgIWVkZ2VbMV0pIHtcbiAgICBlZGdlWzBdID0gdmVydGV4O1xuICAgIGVkZ2UubGVmdCA9IGxlZnQ7XG4gICAgZWRnZS5yaWdodCA9IHJpZ2h0O1xuICB9IGVsc2UgaWYgKGVkZ2UubGVmdCA9PT0gcmlnaHQpIHtcbiAgICBlZGdlWzFdID0gdmVydGV4O1xuICB9IGVsc2Uge1xuICAgIGVkZ2VbMF0gPSB2ZXJ0ZXg7XG4gIH1cbn1cblxuLy8gTGlhbmfigJNCYXJza3kgbGluZSBjbGlwcGluZy5cbmZ1bmN0aW9uIGNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKSB7XG4gIHZhciBhID0gZWRnZVswXSxcbiAgICAgIGIgPSBlZGdlWzFdLFxuICAgICAgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKCEodDAgPiAwKSAmJiAhKHQxIDwgMSkpIHJldHVybiB0cnVlOyAvLyBUT0RPIEJldHRlciBjaGVjaz9cblxuICBpZiAodDAgPiAwKSBlZGdlWzBdID0gW2F4ICsgdDAgKiBkeCwgYXkgKyB0MCAqIGR5XTtcbiAgaWYgKHQxIDwgMSkgZWRnZVsxXSA9IFtheCArIHQxICogZHgsIGF5ICsgdDEgKiBkeV07XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25uZWN0RWRnZShlZGdlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgdjEgPSBlZGdlWzFdO1xuICBpZiAodjEpIHJldHVybiB0cnVlO1xuXG4gIHZhciB2MCA9IGVkZ2VbMF0sXG4gICAgICBsZWZ0ID0gZWRnZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBlZGdlLnJpZ2h0LFxuICAgICAgbHggPSBsZWZ0WzBdLFxuICAgICAgbHkgPSBsZWZ0WzFdLFxuICAgICAgcnggPSByaWdodFswXSxcbiAgICAgIHJ5ID0gcmlnaHRbMV0sXG4gICAgICBmeCA9IChseCArIHJ4KSAvIDIsXG4gICAgICBmeSA9IChseSArIHJ5KSAvIDIsXG4gICAgICBmbSxcbiAgICAgIGZiO1xuXG4gIGlmIChyeSA9PT0gbHkpIHtcbiAgICBpZiAoZnggPCB4MCB8fCBmeCA+PSB4MSkgcmV0dXJuO1xuICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICBpZiAoIXYwKSB2MCA9IFtmeCwgeTBdO1xuICAgICAgZWxzZSBpZiAodjBbMV0gPj0geTEpIHJldHVybjtcbiAgICAgIHYxID0gW2Z4LCB5MV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdjApIHYwID0gW2Z4LCB5MV07XG4gICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICB2MSA9IFtmeCwgeTBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbSA9IChseCAtIHJ4KSAvIChyeSAtIGx5KTtcbiAgICBmYiA9IGZ5IC0gZm0gKiBmeDtcbiAgICBpZiAoZm0gPCAtMSB8fCBmbSA+IDEpIHtcbiAgICAgIGlmIChseCA+IHJ4KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICAgIGVsc2UgaWYgKHYwWzFdID49IHkxKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MSAtIGZiKSAvIGZtLCB5MV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXYwKSB2MCA9IFsoeTEgLSBmYikgLyBmbSwgeTFdO1xuICAgICAgICBlbHNlIGlmICh2MFsxXSA8IHkwKSByZXR1cm47XG4gICAgICAgIHYxID0gWyh5MCAtIGZiKSAvIGZtLCB5MF07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChseSA8IHJ5KSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA+PSB4MSkgcmV0dXJuO1xuICAgICAgICB2MSA9IFt4MSwgZm0gKiB4MSArIGZiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdjApIHYwID0gW3gxLCBmbSAqIHgxICsgZmJdO1xuICAgICAgICBlbHNlIGlmICh2MFswXSA8IHgwKSByZXR1cm47XG4gICAgICAgIHYxID0gW3gwLCBmbSAqIHgwICsgZmJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGVkZ2VbMF0gPSB2MDtcbiAgZWRnZVsxXSA9IHYxO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBFZGdlcyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgaSA9IGVkZ2VzLmxlbmd0aCxcbiAgICAgIGVkZ2U7XG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICghY29ubmVjdEVkZ2UoZWRnZSA9IGVkZ2VzW2ldLCB4MCwgeTAsIHgxLCB5MSlcbiAgICAgICAgfHwgIWNsaXBFZGdlKGVkZ2UsIHgwLCB5MCwgeDEsIHkxKVxuICAgICAgICB8fCAhKE1hdGguYWJzKGVkZ2VbMF1bMF0gLSBlZGdlWzFdWzBdKSA+IGVwc2lsb25cbiAgICAgICAgICAgIHx8IE1hdGguYWJzKGVkZ2VbMF1bMV0gLSBlZGdlWzFdWzFdKSA+IGVwc2lsb24pKSB7XG4gICAgICBkZWxldGUgZWRnZXNbaV07XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQge2NyZWF0ZUJvcmRlckVkZ2V9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCB7Y2VsbHMsIGVkZ2VzLCBlcHNpbG9ufSBmcm9tIFwiLi9EaWFncmFtXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDZWxsKHNpdGUpIHtcbiAgcmV0dXJuIGNlbGxzW3NpdGUuaW5kZXhdID0ge1xuICAgIHNpdGU6IHNpdGUsXG4gICAgaGFsZmVkZ2VzOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlKSB7XG4gIHZhciBzaXRlID0gY2VsbC5zaXRlLFxuICAgICAgdmEgPSBlZGdlLmxlZnQsXG4gICAgICB2YiA9IGVkZ2UucmlnaHQ7XG4gIGlmIChzaXRlID09PSB2YikgdmIgPSB2YSwgdmEgPSBzaXRlO1xuICBpZiAodmIpIHJldHVybiBNYXRoLmF0YW4yKHZiWzFdIC0gdmFbMV0sIHZiWzBdIC0gdmFbMF0pO1xuICBpZiAoc2l0ZSA9PT0gdmEpIHZhID0gZWRnZVsxXSwgdmIgPSBlZGdlWzBdO1xuICBlbHNlIHZhID0gZWRnZVswXSwgdmIgPSBlZGdlWzFdO1xuICByZXR1cm4gTWF0aC5hdGFuMih2YVswXSAtIHZiWzBdLCB2YlsxXSAtIHZhWzFdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbGxIYWxmZWRnZVN0YXJ0KGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgIT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VsbEhhbGZlZGdlRW5kKGNlbGwsIGVkZ2UpIHtcbiAgcmV0dXJuIGVkZ2VbKyhlZGdlLmxlZnQgPT09IGNlbGwuc2l0ZSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydENlbGxIYWxmZWRnZXMoKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gY2VsbHMubGVuZ3RoLCBjZWxsLCBoYWxmZWRnZXMsIGosIG07IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGNlbGwgPSBjZWxsc1tpXSkgJiYgKG0gPSAoaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXMpLmxlbmd0aCkpIHtcbiAgICAgIHZhciBpbmRleCA9IG5ldyBBcnJheShtKSxcbiAgICAgICAgICBhcnJheSA9IG5ldyBBcnJheShtKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBtOyArK2opIGluZGV4W2pdID0gaiwgYXJyYXlbal0gPSBjZWxsSGFsZmVkZ2VBbmdsZShjZWxsLCBlZGdlc1toYWxmZWRnZXNbal1dKTtcbiAgICAgIGluZGV4LnNvcnQoZnVuY3Rpb24oaSwgaikgeyByZXR1cm4gYXJyYXlbal0gLSBhcnJheVtpXTsgfSk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBhcnJheVtqXSA9IGhhbGZlZGdlc1tpbmRleFtqXV07XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbTsgKytqKSBoYWxmZWRnZXNbal0gPSBhcnJheVtqXTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgbkNlbGxzID0gY2VsbHMubGVuZ3RoLFxuICAgICAgaUNlbGwsXG4gICAgICBjZWxsLFxuICAgICAgc2l0ZSxcbiAgICAgIGlIYWxmZWRnZSxcbiAgICAgIGhhbGZlZGdlcyxcbiAgICAgIG5IYWxmZWRnZXMsXG4gICAgICBzdGFydCxcbiAgICAgIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIGVuZCxcbiAgICAgIGVuZFgsXG4gICAgICBlbmRZLFxuICAgICAgY292ZXIgPSB0cnVlO1xuXG4gIGZvciAoaUNlbGwgPSAwOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgIGlmIChjZWxsID0gY2VsbHNbaUNlbGxdKSB7XG4gICAgICBzaXRlID0gY2VsbC5zaXRlO1xuICAgICAgaGFsZmVkZ2VzID0gY2VsbC5oYWxmZWRnZXM7XG4gICAgICBpSGFsZmVkZ2UgPSBoYWxmZWRnZXMubGVuZ3RoO1xuXG4gICAgICAvLyBSZW1vdmUgYW55IGRhbmdsaW5nIGNsaXBwZWQgZWRnZXMuXG4gICAgICB3aGlsZSAoaUhhbGZlZGdlLS0pIHtcbiAgICAgICAgaWYgKCFlZGdlc1toYWxmZWRnZXNbaUhhbGZlZGdlXV0pIHtcbiAgICAgICAgICBoYWxmZWRnZXMuc3BsaWNlKGlIYWxmZWRnZSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSW5zZXJ0IGFueSBib3JkZXIgZWRnZXMgYXMgbmVjZXNzYXJ5LlxuICAgICAgaUhhbGZlZGdlID0gMCwgbkhhbGZlZGdlcyA9IGhhbGZlZGdlcy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaUhhbGZlZGdlIDwgbkhhbGZlZGdlcykge1xuICAgICAgICBlbmQgPSBjZWxsSGFsZmVkZ2VFbmQoY2VsbCwgZWRnZXNbaGFsZmVkZ2VzW2lIYWxmZWRnZV1dKSwgZW5kWCA9IGVuZFswXSwgZW5kWSA9IGVuZFsxXTtcbiAgICAgICAgc3RhcnQgPSBjZWxsSGFsZmVkZ2VTdGFydChjZWxsLCBlZGdlc1toYWxmZWRnZXNbKytpSGFsZmVkZ2UgJSBuSGFsZmVkZ2VzXV0pLCBzdGFydFggPSBzdGFydFswXSwgc3RhcnRZID0gc3RhcnRbMV07XG4gICAgICAgIGlmIChNYXRoLmFicyhlbmRYIC0gc3RhcnRYKSA+IGVwc2lsb24gfHwgTWF0aC5hYnMoZW5kWSAtIHN0YXJ0WSkgPiBlcHNpbG9uKSB7XG4gICAgICAgICAgaGFsZmVkZ2VzLnNwbGljZShpSGFsZmVkZ2UsIDAsIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCBlbmQsXG4gICAgICAgICAgICAgIE1hdGguYWJzKGVuZFggLSB4MCkgPCBlcHNpbG9uICYmIHkxIC0gZW5kWSA+IGVwc2lsb24gPyBbeDAsIE1hdGguYWJzKHN0YXJ0WCAtIHgwKSA8IGVwc2lsb24gPyBzdGFydFkgOiB5MV1cbiAgICAgICAgICAgICAgOiBNYXRoLmFicyhlbmRZIC0geTEpIDwgZXBzaWxvbiAmJiB4MSAtIGVuZFggPiBlcHNpbG9uID8gW01hdGguYWJzKHN0YXJ0WSAtIHkxKSA8IGVwc2lsb24gPyBzdGFydFggOiB4MSwgeTFdXG4gICAgICAgICAgICAgIDogTWF0aC5hYnMoZW5kWCAtIHgxKSA8IGVwc2lsb24gJiYgZW5kWSAtIHkwID4gZXBzaWxvbiA/IFt4MSwgTWF0aC5hYnMoc3RhcnRYIC0geDEpIDwgZXBzaWxvbiA/IHN0YXJ0WSA6IHkwXVxuICAgICAgICAgICAgICA6IE1hdGguYWJzKGVuZFkgLSB5MCkgPCBlcHNpbG9uICYmIGVuZFggLSB4MCA+IGVwc2lsb24gPyBbTWF0aC5hYnMoc3RhcnRZIC0geTApIDwgZXBzaWxvbiA/IHN0YXJ0WCA6IHgwLCB5MF1cbiAgICAgICAgICAgICAgOiBudWxsKSkgLSAxKTtcbiAgICAgICAgICArK25IYWxmZWRnZXM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5IYWxmZWRnZXMpIGNvdmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZW7igJl0IGFueSBlZGdlcywgaGF2ZSB0aGUgY2xvc2VzdCBzaXRlIGNvdmVyIHRoZSBleHRlbnQuXG4gIC8vIEl0IGRvZXNu4oCZdCBtYXR0ZXIgd2hpY2ggY29ybmVyIG9mIHRoZSBleHRlbnQgd2UgbWVhc3VyZSFcbiAgaWYgKGNvdmVyKSB7XG4gICAgdmFyIGR4LCBkeSwgZDIsIGRjID0gSW5maW5pdHk7XG5cbiAgICBmb3IgKGlDZWxsID0gMCwgY292ZXIgPSBudWxsOyBpQ2VsbCA8IG5DZWxsczsgKytpQ2VsbCkge1xuICAgICAgaWYgKGNlbGwgPSBjZWxsc1tpQ2VsbF0pIHtcbiAgICAgICAgc2l0ZSA9IGNlbGwuc2l0ZTtcbiAgICAgICAgZHggPSBzaXRlWzBdIC0geDA7XG4gICAgICAgIGR5ID0gc2l0ZVsxXSAtIHkwO1xuICAgICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICBpZiAoZDIgPCBkYykgZGMgPSBkMiwgY292ZXIgPSBjZWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb3Zlcikge1xuICAgICAgdmFyIHYwMCA9IFt4MCwgeTBdLCB2MDEgPSBbeDAsIHkxXSwgdjExID0gW3gxLCB5MV0sIHYxMCA9IFt4MSwgeTBdO1xuICAgICAgY292ZXIuaGFsZmVkZ2VzLnB1c2goXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlID0gY292ZXIuc2l0ZSwgdjAwLCB2MDEpKSAtIDEsXG4gICAgICAgIGVkZ2VzLnB1c2goY3JlYXRlQm9yZGVyRWRnZShzaXRlLCB2MDEsIHYxMSkpIC0gMSxcbiAgICAgICAgZWRnZXMucHVzaChjcmVhdGVCb3JkZXJFZGdlKHNpdGUsIHYxMSwgdjEwKSkgLSAxLFxuICAgICAgICBlZGdlcy5wdXNoKGNyZWF0ZUJvcmRlckVkZ2Uoc2l0ZSwgdjEwLCB2MDApKSAtIDFcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gTGFzdGx5IGRlbGV0ZSBhbnkgY2VsbHMgd2l0aCBubyBlZGdlczsgdGhlc2Ugd2VyZSBlbnRpcmVseSBjbGlwcGVkLlxuICBmb3IgKGlDZWxsID0gMDsgaUNlbGwgPCBuQ2VsbHM7ICsraUNlbGwpIHtcbiAgICBpZiAoY2VsbCA9IGNlbGxzW2lDZWxsXSkge1xuICAgICAgaWYgKCFjZWxsLmhhbGZlZGdlcy5sZW5ndGgpIHtcbiAgICAgICAgZGVsZXRlIGNlbGxzW2lDZWxsXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7UmVkQmxhY2tOb2RlfSBmcm9tIFwiLi9SZWRCbGFja1RyZWVcIjtcbmltcG9ydCB7Y2lyY2xlcywgZXBzaWxvbjJ9IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGNpcmNsZVBvb2wgPSBbXTtcblxuZXhwb3J0IHZhciBmaXJzdENpcmNsZTtcblxuZnVuY3Rpb24gQ2lyY2xlKCkge1xuICBSZWRCbGFja05vZGUodGhpcyk7XG4gIHRoaXMueCA9XG4gIHRoaXMueSA9XG4gIHRoaXMuYXJjID1cbiAgdGhpcy5zaXRlID1cbiAgdGhpcy5jeSA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBsQXJjID0gYXJjLlAsXG4gICAgICByQXJjID0gYXJjLk47XG5cbiAgaWYgKCFsQXJjIHx8ICFyQXJjKSByZXR1cm47XG5cbiAgdmFyIGxTaXRlID0gbEFyYy5zaXRlLFxuICAgICAgY1NpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlO1xuXG4gIGlmIChsU2l0ZSA9PT0gclNpdGUpIHJldHVybjtcblxuICB2YXIgYnggPSBjU2l0ZVswXSxcbiAgICAgIGJ5ID0gY1NpdGVbMV0sXG4gICAgICBheCA9IGxTaXRlWzBdIC0gYngsXG4gICAgICBheSA9IGxTaXRlWzFdIC0gYnksXG4gICAgICBjeCA9IHJTaXRlWzBdIC0gYngsXG4gICAgICBjeSA9IHJTaXRlWzFdIC0gYnk7XG5cbiAgdmFyIGQgPSAyICogKGF4ICogY3kgLSBheSAqIGN4KTtcbiAgaWYgKGQgPj0gLWVwc2lsb24yKSByZXR1cm47XG5cbiAgdmFyIGhhID0gYXggKiBheCArIGF5ICogYXksXG4gICAgICBoYyA9IGN4ICogY3ggKyBjeSAqIGN5LFxuICAgICAgeCA9IChjeSAqIGhhIC0gYXkgKiBoYykgLyBkLFxuICAgICAgeSA9IChheCAqIGhjIC0gY3ggKiBoYSkgLyBkO1xuXG4gIHZhciBjaXJjbGUgPSBjaXJjbGVQb29sLnBvcCgpIHx8IG5ldyBDaXJjbGU7XG4gIGNpcmNsZS5hcmMgPSBhcmM7XG4gIGNpcmNsZS5zaXRlID0gY1NpdGU7XG4gIGNpcmNsZS54ID0geCArIGJ4O1xuICBjaXJjbGUueSA9IChjaXJjbGUuY3kgPSB5ICsgYnkpICsgTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpOyAvLyB5IGJvdHRvbVxuXG4gIGFyYy5jaXJjbGUgPSBjaXJjbGU7XG5cbiAgdmFyIGJlZm9yZSA9IG51bGwsXG4gICAgICBub2RlID0gY2lyY2xlcy5fO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKGNpcmNsZS55IDwgbm9kZS55IHx8IChjaXJjbGUueSA9PT0gbm9kZS55ICYmIGNpcmNsZS54IDw9IG5vZGUueCkpIHtcbiAgICAgIGlmIChub2RlLkwpIG5vZGUgPSBub2RlLkw7XG4gICAgICBlbHNlIHsgYmVmb3JlID0gbm9kZS5QOyBicmVhazsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobm9kZS5SKSBub2RlID0gbm9kZS5SO1xuICAgICAgZWxzZSB7IGJlZm9yZSA9IG5vZGU7IGJyZWFrOyB9XG4gICAgfVxuICB9XG5cbiAgY2lyY2xlcy5pbnNlcnQoYmVmb3JlLCBjaXJjbGUpO1xuICBpZiAoIWJlZm9yZSkgZmlyc3RDaXJjbGUgPSBjaXJjbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRhY2hDaXJjbGUoYXJjKSB7XG4gIHZhciBjaXJjbGUgPSBhcmMuY2lyY2xlO1xuICBpZiAoY2lyY2xlKSB7XG4gICAgaWYgKCFjaXJjbGUuUCkgZmlyc3RDaXJjbGUgPSBjaXJjbGUuTjtcbiAgICBjaXJjbGVzLnJlbW92ZShjaXJjbGUpO1xuICAgIGNpcmNsZVBvb2wucHVzaChjaXJjbGUpO1xuICAgIFJlZEJsYWNrTm9kZShjaXJjbGUpO1xuICAgIGFyYy5jaXJjbGUgPSBudWxsO1xuICB9XG59XG4iLCJpbXBvcnQge1JlZEJsYWNrTm9kZX0gZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5pbXBvcnQge2NyZWF0ZUNlbGx9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7YXR0YWNoQ2lyY2xlLCBkZXRhY2hDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjcmVhdGVFZGdlLCBzZXRFZGdlRW5kfSBmcm9tIFwiLi9FZGdlXCI7XG5pbXBvcnQge2JlYWNoZXMsIGVwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxudmFyIGJlYWNoUG9vbCA9IFtdO1xuXG5mdW5jdGlvbiBCZWFjaCgpIHtcbiAgUmVkQmxhY2tOb2RlKHRoaXMpO1xuICB0aGlzLmVkZ2UgPVxuICB0aGlzLnNpdGUgPVxuICB0aGlzLmNpcmNsZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJlYWNoKHNpdGUpIHtcbiAgdmFyIGJlYWNoID0gYmVhY2hQb29sLnBvcCgpIHx8IG5ldyBCZWFjaDtcbiAgYmVhY2guc2l0ZSA9IHNpdGU7XG4gIHJldHVybiBiZWFjaDtcbn1cblxuZnVuY3Rpb24gZGV0YWNoQmVhY2goYmVhY2gpIHtcbiAgZGV0YWNoQ2lyY2xlKGJlYWNoKTtcbiAgYmVhY2hlcy5yZW1vdmUoYmVhY2gpO1xuICBiZWFjaFBvb2wucHVzaChiZWFjaCk7XG4gIFJlZEJsYWNrTm9kZShiZWFjaCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVCZWFjaChiZWFjaCkge1xuICB2YXIgY2lyY2xlID0gYmVhY2guY2lyY2xlLFxuICAgICAgeCA9IGNpcmNsZS54LFxuICAgICAgeSA9IGNpcmNsZS5jeSxcbiAgICAgIHZlcnRleCA9IFt4LCB5XSxcbiAgICAgIHByZXZpb3VzID0gYmVhY2guUCxcbiAgICAgIG5leHQgPSBiZWFjaC5OLFxuICAgICAgZGlzYXBwZWFyaW5nID0gW2JlYWNoXTtcblxuICBkZXRhY2hCZWFjaChiZWFjaCk7XG5cbiAgdmFyIGxBcmMgPSBwcmV2aW91cztcbiAgd2hpbGUgKGxBcmMuY2lyY2xlXG4gICAgICAmJiBNYXRoLmFicyh4IC0gbEFyYy5jaXJjbGUueCkgPCBlcHNpbG9uXG4gICAgICAmJiBNYXRoLmFicyh5IC0gbEFyYy5jaXJjbGUuY3kpIDwgZXBzaWxvbikge1xuICAgIHByZXZpb3VzID0gbEFyYy5QO1xuICAgIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICAgIGRldGFjaEJlYWNoKGxBcmMpO1xuICAgIGxBcmMgPSBwcmV2aW91cztcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy51bnNoaWZ0KGxBcmMpO1xuICBkZXRhY2hDaXJjbGUobEFyYyk7XG5cbiAgdmFyIHJBcmMgPSBuZXh0O1xuICB3aGlsZSAockFyYy5jaXJjbGVcbiAgICAgICYmIE1hdGguYWJzKHggLSByQXJjLmNpcmNsZS54KSA8IGVwc2lsb25cbiAgICAgICYmIE1hdGguYWJzKHkgLSByQXJjLmNpcmNsZS5jeSkgPCBlcHNpbG9uKSB7XG4gICAgbmV4dCA9IHJBcmMuTjtcbiAgICBkaXNhcHBlYXJpbmcucHVzaChyQXJjKTtcbiAgICBkZXRhY2hCZWFjaChyQXJjKTtcbiAgICByQXJjID0gbmV4dDtcbiAgfVxuXG4gIGRpc2FwcGVhcmluZy5wdXNoKHJBcmMpO1xuICBkZXRhY2hDaXJjbGUockFyYyk7XG5cbiAgdmFyIG5BcmNzID0gZGlzYXBwZWFyaW5nLmxlbmd0aCxcbiAgICAgIGlBcmM7XG4gIGZvciAoaUFyYyA9IDE7IGlBcmMgPCBuQXJjczsgKytpQXJjKSB7XG4gICAgckFyYyA9IGRpc2FwcGVhcmluZ1tpQXJjXTtcbiAgICBsQXJjID0gZGlzYXBwZWFyaW5nW2lBcmMgLSAxXTtcbiAgICBzZXRFZGdlRW5kKHJBcmMuZWRnZSwgbEFyYy5zaXRlLCByQXJjLnNpdGUsIHZlcnRleCk7XG4gIH1cblxuICBsQXJjID0gZGlzYXBwZWFyaW5nWzBdO1xuICByQXJjID0gZGlzYXBwZWFyaW5nW25BcmNzIC0gMV07XG4gIHJBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCByQXJjLnNpdGUsIG51bGwsIHZlcnRleCk7XG5cbiAgYXR0YWNoQ2lyY2xlKGxBcmMpO1xuICBhdHRhY2hDaXJjbGUockFyYyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRCZWFjaChzaXRlKSB7XG4gIHZhciB4ID0gc2l0ZVswXSxcbiAgICAgIGRpcmVjdHJpeCA9IHNpdGVbMV0sXG4gICAgICBsQXJjLFxuICAgICAgckFyYyxcbiAgICAgIGR4bCxcbiAgICAgIGR4cixcbiAgICAgIG5vZGUgPSBiZWFjaGVzLl87XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBkeGwgPSBsZWZ0QnJlYWtQb2ludChub2RlLCBkaXJlY3RyaXgpIC0geDtcbiAgICBpZiAoZHhsID4gZXBzaWxvbikgbm9kZSA9IG5vZGUuTDsgZWxzZSB7XG4gICAgICBkeHIgPSB4IC0gcmlnaHRCcmVha1BvaW50KG5vZGUsIGRpcmVjdHJpeCk7XG4gICAgICBpZiAoZHhyID4gZXBzaWxvbikge1xuICAgICAgICBpZiAoIW5vZGUuUikge1xuICAgICAgICAgIGxBcmMgPSBub2RlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLlI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZHhsID4gLWVwc2lsb24pIHtcbiAgICAgICAgICBsQXJjID0gbm9kZS5QO1xuICAgICAgICAgIHJBcmMgPSBub2RlO1xuICAgICAgICB9IGVsc2UgaWYgKGR4ciA+IC1lcHNpbG9uKSB7XG4gICAgICAgICAgbEFyYyA9IG5vZGU7XG4gICAgICAgICAgckFyYyA9IG5vZGUuTjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsQXJjID0gckFyYyA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlQ2VsbChzaXRlKTtcbiAgdmFyIG5ld0FyYyA9IGNyZWF0ZUJlYWNoKHNpdGUpO1xuICBiZWFjaGVzLmluc2VydChsQXJjLCBuZXdBcmMpO1xuXG4gIGlmICghbEFyYyAmJiAhckFyYykgcmV0dXJuO1xuXG4gIGlmIChsQXJjID09PSByQXJjKSB7XG4gICAgZGV0YWNoQ2lyY2xlKGxBcmMpO1xuICAgIHJBcmMgPSBjcmVhdGVCZWFjaChsQXJjLnNpdGUpO1xuICAgIGJlYWNoZXMuaW5zZXJ0KG5ld0FyYywgckFyYyk7XG4gICAgbmV3QXJjLmVkZ2UgPSByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxBcmMuc2l0ZSwgbmV3QXJjLnNpdGUpO1xuICAgIGF0dGFjaENpcmNsZShsQXJjKTtcbiAgICBhdHRhY2hDaXJjbGUockFyYyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFyQXJjKSB7IC8vICYmIGxBcmNcbiAgICBuZXdBcmMuZWRnZSA9IGNyZWF0ZUVkZ2UobEFyYy5zaXRlLCBuZXdBcmMuc2l0ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZWxzZSBsQXJjICE9PSByQXJjXG4gIGRldGFjaENpcmNsZShsQXJjKTtcbiAgZGV0YWNoQ2lyY2xlKHJBcmMpO1xuXG4gIHZhciBsU2l0ZSA9IGxBcmMuc2l0ZSxcbiAgICAgIGF4ID0gbFNpdGVbMF0sXG4gICAgICBheSA9IGxTaXRlWzFdLFxuICAgICAgYnggPSBzaXRlWzBdIC0gYXgsXG4gICAgICBieSA9IHNpdGVbMV0gLSBheSxcbiAgICAgIHJTaXRlID0gckFyYy5zaXRlLFxuICAgICAgY3ggPSByU2l0ZVswXSAtIGF4LFxuICAgICAgY3kgPSByU2l0ZVsxXSAtIGF5LFxuICAgICAgZCA9IDIgKiAoYnggKiBjeSAtIGJ5ICogY3gpLFxuICAgICAgaGIgPSBieCAqIGJ4ICsgYnkgKiBieSxcbiAgICAgIGhjID0gY3ggKiBjeCArIGN5ICogY3ksXG4gICAgICB2ZXJ0ZXggPSBbKGN5ICogaGIgLSBieSAqIGhjKSAvIGQgKyBheCwgKGJ4ICogaGMgLSBjeCAqIGhiKSAvIGQgKyBheV07XG5cbiAgc2V0RWRnZUVuZChyQXJjLmVkZ2UsIGxTaXRlLCByU2l0ZSwgdmVydGV4KTtcbiAgbmV3QXJjLmVkZ2UgPSBjcmVhdGVFZGdlKGxTaXRlLCBzaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICByQXJjLmVkZ2UgPSBjcmVhdGVFZGdlKHNpdGUsIHJTaXRlLCBudWxsLCB2ZXJ0ZXgpO1xuICBhdHRhY2hDaXJjbGUobEFyYyk7XG4gIGF0dGFjaENpcmNsZShyQXJjKTtcbn1cblxuZnVuY3Rpb24gbGVmdEJyZWFrUG9pbnQoYXJjLCBkaXJlY3RyaXgpIHtcbiAgdmFyIHNpdGUgPSBhcmMuc2l0ZSxcbiAgICAgIHJmb2N4ID0gc2l0ZVswXSxcbiAgICAgIHJmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBieTIgPSByZm9jeSAtIGRpcmVjdHJpeDtcblxuICBpZiAoIXBieTIpIHJldHVybiByZm9jeDtcblxuICB2YXIgbEFyYyA9IGFyYy5QO1xuICBpZiAoIWxBcmMpIHJldHVybiAtSW5maW5pdHk7XG5cbiAgc2l0ZSA9IGxBcmMuc2l0ZTtcbiAgdmFyIGxmb2N4ID0gc2l0ZVswXSxcbiAgICAgIGxmb2N5ID0gc2l0ZVsxXSxcbiAgICAgIHBsYnkyID0gbGZvY3kgLSBkaXJlY3RyaXg7XG5cbiAgaWYgKCFwbGJ5MikgcmV0dXJuIGxmb2N4O1xuXG4gIHZhciBobCA9IGxmb2N4IC0gcmZvY3gsXG4gICAgICBhYnkyID0gMSAvIHBieTIgLSAxIC8gcGxieTIsXG4gICAgICBiID0gaGwgLyBwbGJ5MjtcblxuICBpZiAoYWJ5MikgcmV0dXJuICgtYiArIE1hdGguc3FydChiICogYiAtIDIgKiBhYnkyICogKGhsICogaGwgLyAoLTIgKiBwbGJ5MikgLSBsZm9jeSArIHBsYnkyIC8gMiArIHJmb2N5IC0gcGJ5MiAvIDIpKSkgLyBhYnkyICsgcmZvY3g7XG5cbiAgcmV0dXJuIChyZm9jeCArIGxmb2N4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0QnJlYWtQb2ludChhcmMsIGRpcmVjdHJpeCkge1xuICB2YXIgckFyYyA9IGFyYy5OO1xuICBpZiAockFyYykgcmV0dXJuIGxlZnRCcmVha1BvaW50KHJBcmMsIGRpcmVjdHJpeCk7XG4gIHZhciBzaXRlID0gYXJjLnNpdGU7XG4gIHJldHVybiBzaXRlWzFdID09PSBkaXJlY3RyaXggPyBzaXRlWzBdIDogSW5maW5pdHk7XG59XG4iLCJpbXBvcnQge2FkZEJlYWNoLCByZW1vdmVCZWFjaH0gZnJvbSBcIi4vQmVhY2hcIjtcbmltcG9ydCB7c29ydENlbGxIYWxmZWRnZXMsIGNlbGxIYWxmZWRnZVN0YXJ0LCBjbGlwQ2VsbHN9IGZyb20gXCIuL0NlbGxcIjtcbmltcG9ydCB7Zmlyc3RDaXJjbGV9IGZyb20gXCIuL0NpcmNsZVwiO1xuaW1wb3J0IHtjbGlwRWRnZXN9IGZyb20gXCIuL0VkZ2VcIjtcbmltcG9ydCBSZWRCbGFja1RyZWUgZnJvbSBcIi4vUmVkQmxhY2tUcmVlXCI7XG5cbmV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIGJlYWNoZXM7XG5leHBvcnQgdmFyIGNlbGxzO1xuZXhwb3J0IHZhciBjaXJjbGVzO1xuZXhwb3J0IHZhciBlZGdlcztcblxuZnVuY3Rpb24gdHJpYW5nbGVBcmVhKGEsIGIsIGMpIHtcbiAgcmV0dXJuIChhWzBdIC0gY1swXSkgKiAoYlsxXSAtIGFbMV0pIC0gKGFbMF0gLSBiWzBdKSAqIChjWzFdIC0gYVsxXSk7XG59XG5cbmZ1bmN0aW9uIGxleGljb2dyYXBoaWMoYSwgYikge1xuICByZXR1cm4gYlsxXSAtIGFbMV1cbiAgICAgIHx8IGJbMF0gLSBhWzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEaWFncmFtKHNpdGVzLCBleHRlbnQpIHtcbiAgdmFyIHNpdGUgPSBzaXRlcy5zb3J0KGxleGljb2dyYXBoaWMpLnBvcCgpLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBjaXJjbGU7XG5cbiAgZWRnZXMgPSBbXTtcbiAgY2VsbHMgPSBuZXcgQXJyYXkoc2l0ZXMubGVuZ3RoKTtcbiAgYmVhY2hlcyA9IG5ldyBSZWRCbGFja1RyZWU7XG4gIGNpcmNsZXMgPSBuZXcgUmVkQmxhY2tUcmVlO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgY2lyY2xlID0gZmlyc3RDaXJjbGU7XG4gICAgaWYgKHNpdGUgJiYgKCFjaXJjbGUgfHwgc2l0ZVsxXSA8IGNpcmNsZS55IHx8IChzaXRlWzFdID09PSBjaXJjbGUueSAmJiBzaXRlWzBdIDwgY2lyY2xlLngpKSkge1xuICAgICAgaWYgKHNpdGVbMF0gIT09IHggfHwgc2l0ZVsxXSAhPT0geSkge1xuICAgICAgICBhZGRCZWFjaChzaXRlKTtcbiAgICAgICAgeCA9IHNpdGVbMF0sIHkgPSBzaXRlWzFdO1xuICAgICAgfVxuICAgICAgc2l0ZSA9IHNpdGVzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoY2lyY2xlKSB7XG4gICAgICByZW1vdmVCZWFjaChjaXJjbGUuYXJjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgc29ydENlbGxIYWxmZWRnZXMoKTtcblxuICBpZiAoZXh0ZW50KSB7XG4gICAgdmFyIHgwID0gK2V4dGVudFswXVswXSxcbiAgICAgICAgeTAgPSArZXh0ZW50WzBdWzFdLFxuICAgICAgICB4MSA9ICtleHRlbnRbMV1bMF0sXG4gICAgICAgIHkxID0gK2V4dGVudFsxXVsxXTtcbiAgICBjbGlwRWRnZXMoeDAsIHkwLCB4MSwgeTEpO1xuICAgIGNsaXBDZWxscyh4MCwgeTAsIHgxLCB5MSk7XG4gIH1cblxuICB0aGlzLmVkZ2VzID0gZWRnZXM7XG4gIHRoaXMuY2VsbHMgPSBjZWxscztcblxuICBiZWFjaGVzID1cbiAgY2lyY2xlcyA9XG4gIGVkZ2VzID1cbiAgY2VsbHMgPSBudWxsO1xufVxuXG5EaWFncmFtLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpYWdyYW0sXG5cbiAgcG9seWdvbnM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlZGdlcyA9IHRoaXMuZWRnZXM7XG5cbiAgICByZXR1cm4gdGhpcy5jZWxscy5tYXAoZnVuY3Rpb24oY2VsbCkge1xuICAgICAgdmFyIHBvbHlnb24gPSBjZWxsLmhhbGZlZGdlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gY2VsbEhhbGZlZGdlU3RhcnQoY2VsbCwgZWRnZXNbaV0pOyB9KTtcbiAgICAgIHBvbHlnb24uZGF0YSA9IGNlbGwuc2l0ZS5kYXRhO1xuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfSk7XG4gIH0sXG5cbiAgdHJpYW5nbGVzOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdHJpYW5nbGVzID0gW10sXG4gICAgICAgIGVkZ2VzID0gdGhpcy5lZGdlcztcblxuICAgIHRoaXMuY2VsbHMuZm9yRWFjaChmdW5jdGlvbihjZWxsLCBpKSB7XG4gICAgICBpZiAoIShtID0gKGhhbGZlZGdlcyA9IGNlbGwuaGFsZmVkZ2VzKS5sZW5ndGgpKSByZXR1cm47XG4gICAgICB2YXIgc2l0ZSA9IGNlbGwuc2l0ZSxcbiAgICAgICAgICBoYWxmZWRnZXMsXG4gICAgICAgICAgaiA9IC0xLFxuICAgICAgICAgIG0sXG4gICAgICAgICAgczAsXG4gICAgICAgICAgZTEgPSBlZGdlc1toYWxmZWRnZXNbbSAtIDFdXSxcbiAgICAgICAgICBzMSA9IGUxLmxlZnQgPT09IHNpdGUgPyBlMS5yaWdodCA6IGUxLmxlZnQ7XG5cbiAgICAgIHdoaWxlICgrK2ogPCBtKSB7XG4gICAgICAgIHMwID0gczE7XG4gICAgICAgIGUxID0gZWRnZXNbaGFsZmVkZ2VzW2pdXTtcbiAgICAgICAgczEgPSBlMS5sZWZ0ID09PSBzaXRlID8gZTEucmlnaHQgOiBlMS5sZWZ0O1xuICAgICAgICBpZiAoczAgJiYgczEgJiYgaSA8IHMwLmluZGV4ICYmIGkgPCBzMS5pbmRleCAmJiB0cmlhbmdsZUFyZWEoc2l0ZSwgczAsIHMxKSA8IDApIHtcbiAgICAgICAgICB0cmlhbmdsZXMucHVzaChbc2l0ZS5kYXRhLCBzMC5kYXRhLCBzMS5kYXRhXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0cmlhbmdsZXM7XG4gIH0sXG5cbiAgbGlua3M6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7XG4gICAgICByZXR1cm4gZWRnZS5yaWdodDtcbiAgICB9KS5tYXAoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBlZGdlLmxlZnQuZGF0YSxcbiAgICAgICAgdGFyZ2V0OiBlZGdlLnJpZ2h0LmRhdGFcbiAgICAgIH07XG4gICAgfSk7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzLCBpMCwgaTEgPSB0aGF0Ll9mb3VuZCB8fCAwLCBuID0gdGhhdC5jZWxscy5sZW5ndGgsIGNlbGw7XG5cbiAgICAvLyBVc2UgdGhlIHByZXZpb3VzbHktZm91bmQgY2VsbCwgb3Igc3RhcnQgd2l0aCBhbiBhcmJpdHJhcnkgb25lLlxuICAgIHdoaWxlICghKGNlbGwgPSB0aGF0LmNlbGxzW2kxXSkpIGlmICgrK2kxID49IG4pIHJldHVybiBudWxsO1xuICAgIHZhciBkeCA9IHggLSBjZWxsLnNpdGVbMF0sIGR5ID0geSAtIGNlbGwuc2l0ZVsxXSwgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcblxuICAgIC8vIFRyYXZlcnNlIHRoZSBoYWxmLWVkZ2VzIHRvIGZpbmQgYSBjbG9zZXIgY2VsbCwgaWYgYW55LlxuICAgIGRvIHtcbiAgICAgIGNlbGwgPSB0aGF0LmNlbGxzW2kwID0gaTFdLCBpMSA9IG51bGw7XG4gICAgICBjZWxsLmhhbGZlZGdlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIGVkZ2UgPSB0aGF0LmVkZ2VzW2VdLCB2ID0gZWRnZS5sZWZ0O1xuICAgICAgICBpZiAoKHYgPT09IGNlbGwuc2l0ZSB8fCAhdikgJiYgISh2ID0gZWRnZS5yaWdodCkpIHJldHVybjtcbiAgICAgICAgdmFyIHZ4ID0geCAtIHZbMF0sIHZ5ID0geSAtIHZbMV0sIHYyID0gdnggKiB2eCArIHZ5ICogdnk7XG4gICAgICAgIGlmICh2MiA8IGQyKSBkMiA9IHYyLCBpMSA9IHYuaW5kZXg7XG4gICAgICB9KTtcbiAgICB9IHdoaWxlIChpMSAhPT0gbnVsbCk7XG5cbiAgICB0aGF0Ll9mb3VuZCA9IGkwO1xuXG4gICAgcmV0dXJuIHJhZGl1cyA9PSBudWxsIHx8IGQyIDw9IHJhZGl1cyAqIHJhZGl1cyA/IGNlbGwuc2l0ZSA6IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IHt4IGFzIHBvaW50WCwgeSBhcyBwb2ludFl9IGZyb20gXCIuL3BvaW50XCI7XG5pbXBvcnQgRGlhZ3JhbSwge2Vwc2lsb259IGZyb20gXCIuL0RpYWdyYW1cIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciB4ID0gcG9pbnRYLFxuICAgICAgeSA9IHBvaW50WSxcbiAgICAgIGV4dGVudCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gdm9yb25vaShkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBEaWFncmFtKGRhdGEubWFwKGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIHZhciBzID0gW01hdGgucm91bmQoeChkLCBpLCBkYXRhKSAvIGVwc2lsb24pICogZXBzaWxvbiwgTWF0aC5yb3VuZCh5KGQsIGksIGRhdGEpIC8gZXBzaWxvbikgKiBlcHNpbG9uXTtcbiAgICAgIHMuaW5kZXggPSBpO1xuICAgICAgcy5kYXRhID0gZDtcbiAgICAgIHJldHVybiBzO1xuICAgIH0pLCBleHRlbnQpO1xuICB9XG5cbiAgdm9yb25vaS5wb2x5Z29ucyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gdm9yb25vaShkYXRhKS5wb2x5Z29ucygpO1xuICB9O1xuXG4gIHZvcm9ub2kubGlua3MgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIHZvcm9ub2koZGF0YSkubGlua3MoKTtcbiAgfTtcblxuICB2b3Jvbm9pLnRyaWFuZ2xlcyA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICByZXR1cm4gdm9yb25vaShkYXRhKS50cmlhbmdsZXMoKTtcbiAgfTtcblxuICB2b3Jvbm9pLnggPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB2b3Jvbm9pKSA6IHg7XG4gIH07XG5cbiAgdm9yb25vaS55ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHkgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgdm9yb25vaSkgOiB5O1xuICB9O1xuXG4gIHZvcm9ub2kuZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IF8gPT0gbnVsbCA/IG51bGwgOiBbWytfWzBdWzBdLCArX1swXVsxXV0sIFsrX1sxXVswXSwgK19bMV1bMV1dXSwgdm9yb25vaSkgOiBleHRlbnQgJiYgW1tleHRlbnRbMF1bMF0sIGV4dGVudFswXVsxXV0sIFtleHRlbnRbMV1bMF0sIGV4dGVudFsxXVsxXV1dO1xuICB9O1xuXG4gIHZvcm9ub2kuc2l6ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChleHRlbnQgPSBfID09IG51bGwgPyBudWxsIDogW1swLCAwXSwgWytfWzBdLCArX1sxXV1dLCB2b3Jvbm9pKSA6IGV4dGVudCAmJiBbZXh0ZW50WzFdWzBdIC0gZXh0ZW50WzBdWzBdLCBleHRlbnRbMV1bMV0gLSBleHRlbnRbMF1bMV1dO1xuICB9O1xuXG4gIHJldHVybiB2b3Jvbm9pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBab29tRXZlbnQodGFyZ2V0LCB0eXBlLCB0cmFuc2Zvcm0pIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShrLCB4LCB5KSB7XG4gIHRoaXMuayA9IGs7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG5cblRyYW5zZm9ybS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm0sXG4gIHNjYWxlOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIGsgPT09IDEgPyB0aGlzIDogbmV3IFRyYW5zZm9ybSh0aGlzLmsgKiBrLCB0aGlzLngsIHRoaXMueSk7XG4gIH0sXG4gIHRyYW5zbGF0ZTogZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID09PSAwICYgeSA9PT0gMCA/IHRoaXMgOiBuZXcgVHJhbnNmb3JtKHRoaXMuaywgdGhpcy54ICsgdGhpcy5rICogeCwgdGhpcy55ICsgdGhpcy5rICogeSk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbihwb2ludCkge1xuICAgIHJldHVybiBbcG9pbnRbMF0gKiB0aGlzLmsgKyB0aGlzLngsIHBvaW50WzFdICogdGhpcy5rICsgdGhpcy55XTtcbiAgfSxcbiAgYXBwbHlYOiBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHggKiB0aGlzLmsgKyB0aGlzLng7XG4gIH0sXG4gIGFwcGx5WTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5ICogdGhpcy5rICsgdGhpcy55O1xuICB9LFxuICBpbnZlcnQ6IGZ1bmN0aW9uKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIFsobG9jYXRpb25bMF0gLSB0aGlzLngpIC8gdGhpcy5rLCAobG9jYXRpb25bMV0gLSB0aGlzLnkpIC8gdGhpcy5rXTtcbiAgfSxcbiAgaW52ZXJ0WDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiAoeCAtIHRoaXMueCkgLyB0aGlzLms7XG4gIH0sXG4gIGludmVydFk6IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gKHkgLSB0aGlzLnkpIC8gdGhpcy5rO1xuICB9LFxuICByZXNjYWxlWDogZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4LmNvcHkoKS5kb21haW4oeC5yYW5nZSgpLm1hcCh0aGlzLmludmVydFgsIHRoaXMpLm1hcCh4LmludmVydCwgeCkpO1xuICB9LFxuICByZXNjYWxlWTogZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiB5LmNvcHkoKS5kb21haW4oeS5yYW5nZSgpLm1hcCh0aGlzLmludmVydFksIHRoaXMpLm1hcCh5LmludmVydCwgeSkpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgdGhpcy54ICsgXCIsXCIgKyB0aGlzLnkgKyBcIikgc2NhbGUoXCIgKyB0aGlzLmsgKyBcIilcIjtcbiAgfVxufTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IG5ldyBUcmFuc2Zvcm0oMSwgMCwgMCk7XG5cbnRyYW5zZm9ybS5wcm90b3R5cGUgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm0obm9kZSkge1xuICB3aGlsZSAoIW5vZGUuX196b29tKSBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkgcmV0dXJuIGlkZW50aXR5O1xuICByZXR1cm4gbm9kZS5fX3pvb207XG59XG4iLCJpbXBvcnQge2V2ZW50fSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3Byb3BhZ2F0aW9uKCkge1xuICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufVxuIiwiaW1wb3J0IHtkaXNwYXRjaH0gZnJvbSBcImQzLWRpc3BhdGNoXCI7XG5pbXBvcnQge2RyYWdEaXNhYmxlLCBkcmFnRW5hYmxlfSBmcm9tIFwiZDMtZHJhZ1wiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZVpvb219IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtldmVudCwgY3VzdG9tRXZlbnQsIHNlbGVjdCwgbW91c2UsIHRvdWNofSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge2ludGVycnVwdH0gZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IFpvb21FdmVudCBmcm9tIFwiLi9ldmVudC5qc1wiO1xuaW1wb3J0IHtUcmFuc2Zvcm0sIGlkZW50aXR5fSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCBub2V2ZW50LCB7bm9wcm9wYWdhdGlvbn0gZnJvbSBcIi4vbm9ldmVudC5qc1wiO1xuXG4vLyBJZ25vcmUgcmlnaHQtY2xpY2ssIHNpbmNlIHRoYXQgc2hvdWxkIG9wZW4gdGhlIGNvbnRleHQgbWVudS5cbmZ1bmN0aW9uIGRlZmF1bHRGaWx0ZXIoKSB7XG4gIHJldHVybiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYnV0dG9uO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RXh0ZW50KCkge1xuICB2YXIgZSA9IHRoaXM7XG4gIGlmIChlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCkge1xuICAgIGUgPSBlLm93bmVyU1ZHRWxlbWVudCB8fCBlO1xuICAgIGlmIChlLmhhc0F0dHJpYnV0ZShcInZpZXdCb3hcIikpIHtcbiAgICAgIGUgPSBlLnZpZXdCb3guYmFzZVZhbDtcbiAgICAgIHJldHVybiBbW2UueCwgZS55XSwgW2UueCArIGUud2lkdGgsIGUueSArIGUuaGVpZ2h0XV07XG4gICAgfVxuICAgIHJldHVybiBbWzAsIDBdLCBbZS53aWR0aC5iYXNlVmFsLnZhbHVlLCBlLmhlaWdodC5iYXNlVmFsLnZhbHVlXV07XG4gIH1cbiAgcmV0dXJuIFtbMCwgMF0sIFtlLmNsaWVudFdpZHRoLCBlLmNsaWVudEhlaWdodF1dO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VHJhbnNmb3JtKCkge1xuICByZXR1cm4gdGhpcy5fX3pvb20gfHwgaWRlbnRpdHk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRXaGVlbERlbHRhKCkge1xuICByZXR1cm4gLWV2ZW50LmRlbHRhWSAqIChldmVudC5kZWx0YU1vZGUgPT09IDEgPyAwLjA1IDogZXZlbnQuZGVsdGFNb2RlID8gMSA6IDAuMDAyKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvdWNoYWJsZSgpIHtcbiAgcmV0dXJuIG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyB8fCAoXCJvbnRvdWNoc3RhcnRcIiBpbiB0aGlzKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdENvbnN0cmFpbih0cmFuc2Zvcm0sIGV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSB7XG4gIHZhciBkeDAgPSB0cmFuc2Zvcm0uaW52ZXJ0WChleHRlbnRbMF1bMF0pIC0gdHJhbnNsYXRlRXh0ZW50WzBdWzBdLFxuICAgICAgZHgxID0gdHJhbnNmb3JtLmludmVydFgoZXh0ZW50WzFdWzBdKSAtIHRyYW5zbGF0ZUV4dGVudFsxXVswXSxcbiAgICAgIGR5MCA9IHRyYW5zZm9ybS5pbnZlcnRZKGV4dGVudFswXVsxXSkgLSB0cmFuc2xhdGVFeHRlbnRbMF1bMV0sXG4gICAgICBkeTEgPSB0cmFuc2Zvcm0uaW52ZXJ0WShleHRlbnRbMV1bMV0pIC0gdHJhbnNsYXRlRXh0ZW50WzFdWzFdO1xuICByZXR1cm4gdHJhbnNmb3JtLnRyYW5zbGF0ZShcbiAgICBkeDEgPiBkeDAgPyAoZHgwICsgZHgxKSAvIDIgOiBNYXRoLm1pbigwLCBkeDApIHx8IE1hdGgubWF4KDAsIGR4MSksXG4gICAgZHkxID4gZHkwID8gKGR5MCArIGR5MSkgLyAyIDogTWF0aC5taW4oMCwgZHkwKSB8fCBNYXRoLm1heCgwLCBkeTEpXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgZmlsdGVyID0gZGVmYXVsdEZpbHRlcixcbiAgICAgIGV4dGVudCA9IGRlZmF1bHRFeHRlbnQsXG4gICAgICBjb25zdHJhaW4gPSBkZWZhdWx0Q29uc3RyYWluLFxuICAgICAgd2hlZWxEZWx0YSA9IGRlZmF1bHRXaGVlbERlbHRhLFxuICAgICAgdG91Y2hhYmxlID0gZGVmYXVsdFRvdWNoYWJsZSxcbiAgICAgIHNjYWxlRXh0ZW50ID0gWzAsIEluZmluaXR5XSxcbiAgICAgIHRyYW5zbGF0ZUV4dGVudCA9IFtbLUluZmluaXR5LCAtSW5maW5pdHldLCBbSW5maW5pdHksIEluZmluaXR5XV0sXG4gICAgICBkdXJhdGlvbiA9IDI1MCxcbiAgICAgIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVab29tLFxuICAgICAgbGlzdGVuZXJzID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcInpvb21cIiwgXCJlbmRcIiksXG4gICAgICB0b3VjaHN0YXJ0aW5nLFxuICAgICAgdG91Y2hlbmRpbmcsXG4gICAgICB0b3VjaERlbGF5ID0gNTAwLFxuICAgICAgd2hlZWxEZWxheSA9IDE1MCxcbiAgICAgIGNsaWNrRGlzdGFuY2UyID0gMDtcblxuICBmdW5jdGlvbiB6b29tKHNlbGVjdGlvbikge1xuICAgIHNlbGVjdGlvblxuICAgICAgICAucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSlcbiAgICAgICAgLm9uKFwid2hlZWwuem9vbVwiLCB3aGVlbGVkKVxuICAgICAgICAub24oXCJtb3VzZWRvd24uem9vbVwiLCBtb3VzZWRvd25lZClcbiAgICAgICAgLm9uKFwiZGJsY2xpY2suem9vbVwiLCBkYmxjbGlja2VkKVxuICAgICAgLmZpbHRlcih0b3VjaGFibGUpXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuem9vbVwiLCB0b3VjaHN0YXJ0ZWQpXG4gICAgICAgIC5vbihcInRvdWNobW92ZS56b29tXCIsIHRvdWNobW92ZWQpXG4gICAgICAgIC5vbihcInRvdWNoZW5kLnpvb20gdG91Y2hjYW5jZWwuem9vbVwiLCB0b3VjaGVuZGVkKVxuICAgICAgICAuc3R5bGUoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcIi13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvclwiLCBcInJnYmEoMCwwLDAsMClcIik7XG4gIH1cblxuICB6b29tLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHRyYW5zZm9ybSwgcG9pbnQpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gY29sbGVjdGlvbi5zZWxlY3Rpb24gPyBjb2xsZWN0aW9uLnNlbGVjdGlvbigpIDogY29sbGVjdGlvbjtcbiAgICBzZWxlY3Rpb24ucHJvcGVydHkoXCJfX3pvb21cIiwgZGVmYXVsdFRyYW5zZm9ybSk7XG4gICAgaWYgKGNvbGxlY3Rpb24gIT09IHNlbGVjdGlvbikge1xuICAgICAgc2NoZWR1bGUoY29sbGVjdGlvbiwgdHJhbnNmb3JtLCBwb2ludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbi5pbnRlcnJ1cHQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cylcbiAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAuem9vbShudWxsLCB0eXBlb2YgdHJhbnNmb3JtID09PSBcImZ1bmN0aW9uXCIgPyB0cmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHRyYW5zZm9ybSlcbiAgICAgICAgICAgIC5lbmQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB6b29tLnNjYWxlQnkgPSBmdW5jdGlvbihzZWxlY3Rpb24sIGssIHApIHtcbiAgICB6b29tLnNjYWxlVG8oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrMCA9IHRoaXMuX196b29tLmssXG4gICAgICAgICAgazEgPSB0eXBlb2YgayA9PT0gXCJmdW5jdGlvblwiID8gay5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogaztcbiAgICAgIHJldHVybiBrMCAqIGsxO1xuICAgIH0sIHApO1xuICB9O1xuXG4gIHpvb20uc2NhbGVUbyA9IGZ1bmN0aW9uKHNlbGVjdGlvbiwgaywgcCkge1xuICAgIHpvb20udHJhbnNmb3JtKHNlbGVjdGlvbiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZSA9IGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICAgIHQwID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwLFxuICAgICAgICAgIHAxID0gdDAuaW52ZXJ0KHAwKSxcbiAgICAgICAgICBrMSA9IHR5cGVvZiBrID09PSBcImZ1bmN0aW9uXCIgPyBrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBrO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwKTtcbiAgfTtcblxuICB6b29tLnRyYW5zbGF0ZUJ5ID0gZnVuY3Rpb24oc2VsZWN0aW9uLCB4LCB5KSB7XG4gICAgem9vbS50cmFuc2Zvcm0oc2VsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zdHJhaW4odGhpcy5fX3pvb20udHJhbnNsYXRlKFxuICAgICAgICB0eXBlb2YgeCA9PT0gXCJmdW5jdGlvblwiID8geC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogeCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHlcbiAgICAgICksIGV4dGVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0cmFuc2xhdGVFeHRlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIHpvb20udHJhbnNsYXRlVG8gPSBmdW5jdGlvbihzZWxlY3Rpb24sIHgsIHksIHApIHtcbiAgICB6b29tLnRyYW5zZm9ybShzZWxlY3Rpb24sIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGUgPSBleHRlbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgICAgcDAgPSBwID09IG51bGwgPyBjZW50cm9pZChlKSA6IHR5cGVvZiBwID09PSBcImZ1bmN0aW9uXCIgPyBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiBwO1xuICAgICAgcmV0dXJuIGNvbnN0cmFpbihpZGVudGl0eS50cmFuc2xhdGUocDBbMF0sIHAwWzFdKS5zY2FsZSh0LmspLnRyYW5zbGF0ZShcbiAgICAgICAgdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIiA/IC14LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteCxcbiAgICAgICAgdHlwZW9mIHkgPT09IFwiZnVuY3Rpb25cIiA/IC15LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiAteVxuICAgICAgKSwgZSwgdHJhbnNsYXRlRXh0ZW50KTtcbiAgICB9LCBwKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzY2FsZSh0cmFuc2Zvcm0sIGspIHtcbiAgICBrID0gTWF0aC5tYXgoc2NhbGVFeHRlbnRbMF0sIE1hdGgubWluKHNjYWxlRXh0ZW50WzFdLCBrKSk7XG4gICAgcmV0dXJuIGsgPT09IHRyYW5zZm9ybS5rID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybShrLCB0cmFuc2Zvcm0ueCwgdHJhbnNmb3JtLnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHRyYW5zZm9ybSwgcDAsIHAxKSB7XG4gICAgdmFyIHggPSBwMFswXSAtIHAxWzBdICogdHJhbnNmb3JtLmssIHkgPSBwMFsxXSAtIHAxWzFdICogdHJhbnNmb3JtLms7XG4gICAgcmV0dXJuIHggPT09IHRyYW5zZm9ybS54ICYmIHkgPT09IHRyYW5zZm9ybS55ID8gdHJhbnNmb3JtIDogbmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0uaywgeCwgeSk7XG4gIH1cblxuICBmdW5jdGlvbiBjZW50cm9pZChleHRlbnQpIHtcbiAgICByZXR1cm4gWygrZXh0ZW50WzBdWzBdICsgK2V4dGVudFsxXVswXSkgLyAyLCAoK2V4dGVudFswXVsxXSArICtleHRlbnRbMV1bMV0pIC8gMl07XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZSh0cmFuc2l0aW9uLCB0cmFuc2Zvcm0sIHBvaW50KSB7XG4gICAgdHJhbnNpdGlvblxuICAgICAgICAub24oXCJzdGFydC56b29tXCIsIGZ1bmN0aW9uKCkgeyBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cykuc3RhcnQoKTsgfSlcbiAgICAgICAgLm9uKFwiaW50ZXJydXB0Lnpvb20gZW5kLnpvb21cIiwgZnVuY3Rpb24oKSB7IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKS5lbmQoKTsgfSlcbiAgICAgICAgLnR3ZWVuKFwiem9vbVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgICAgIGcgPSBnZXN0dXJlKHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBlID0gZXh0ZW50LmFwcGx5KHRoYXQsIGFyZ3MpLFxuICAgICAgICAgICAgICBwID0gcG9pbnQgPT0gbnVsbCA/IGNlbnRyb2lkKGUpIDogdHlwZW9mIHBvaW50ID09PSBcImZ1bmN0aW9uXCIgPyBwb2ludC5hcHBseSh0aGF0LCBhcmdzKSA6IHBvaW50LFxuICAgICAgICAgICAgICB3ID0gTWF0aC5tYXgoZVsxXVswXSAtIGVbMF1bMF0sIGVbMV1bMV0gLSBlWzBdWzFdKSxcbiAgICAgICAgICAgICAgYSA9IHRoYXQuX196b29tLFxuICAgICAgICAgICAgICBiID0gdHlwZW9mIHRyYW5zZm9ybSA9PT0gXCJmdW5jdGlvblwiID8gdHJhbnNmb3JtLmFwcGx5KHRoYXQsIGFyZ3MpIDogdHJhbnNmb3JtLFxuICAgICAgICAgICAgICBpID0gaW50ZXJwb2xhdGUoYS5pbnZlcnQocCkuY29uY2F0KHcgLyBhLmspLCBiLmludmVydChwKS5jb25jYXQodyAvIGIuaykpO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBpZiAodCA9PT0gMSkgdCA9IGI7IC8vIEF2b2lkIHJvdW5kaW5nIGVycm9yIG9uIGVuZC5cbiAgICAgICAgICAgIGVsc2UgeyB2YXIgbCA9IGkodCksIGsgPSB3IC8gbFsyXTsgdCA9IG5ldyBUcmFuc2Zvcm0oaywgcFswXSAtIGxbMF0gKiBrLCBwWzFdIC0gbFsxXSAqIGspOyB9XG4gICAgICAgICAgICBnLnpvb20obnVsbCwgdCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXN0dXJlKHRoYXQsIGFyZ3MsIGNsZWFuKSB7XG4gICAgcmV0dXJuICghY2xlYW4gJiYgdGhhdC5fX3pvb21pbmcpIHx8IG5ldyBHZXN0dXJlKHRoYXQsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gR2VzdHVyZSh0aGF0LCBhcmdzKSB7XG4gICAgdGhpcy50aGF0ID0gdGhhdDtcbiAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgIHRoaXMuYWN0aXZlID0gMDtcbiAgICB0aGlzLmV4dGVudCA9IGV4dGVudC5hcHBseSh0aGF0LCBhcmdzKTtcbiAgICB0aGlzLnRhcHMgPSAwO1xuICB9XG5cbiAgR2VzdHVyZS5wcm90b3R5cGUgPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCsrdGhpcy5hY3RpdmUgPT09IDEpIHtcbiAgICAgICAgdGhpcy50aGF0Ll9fem9vbWluZyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdChcInN0YXJ0XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB6b29tOiBmdW5jdGlvbihrZXksIHRyYW5zZm9ybSkge1xuICAgICAgaWYgKHRoaXMubW91c2UgJiYga2V5ICE9PSBcIm1vdXNlXCIpIHRoaXMubW91c2VbMV0gPSB0cmFuc2Zvcm0uaW52ZXJ0KHRoaXMubW91c2VbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gwICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMFsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDBbMF0pO1xuICAgICAgaWYgKHRoaXMudG91Y2gxICYmIGtleSAhPT0gXCJ0b3VjaFwiKSB0aGlzLnRvdWNoMVsxXSA9IHRyYW5zZm9ybS5pbnZlcnQodGhpcy50b3VjaDFbMF0pO1xuICAgICAgdGhpcy50aGF0Ll9fem9vbSA9IHRyYW5zZm9ybTtcbiAgICAgIHRoaXMuZW1pdChcInpvb21cIik7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aGlzLmFjdGl2ZSA9PT0gMCkge1xuICAgICAgICBkZWxldGUgdGhpcy50aGF0Ll9fem9vbWluZztcbiAgICAgICAgdGhpcy5lbWl0KFwiZW5kXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBlbWl0OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICBjdXN0b21FdmVudChuZXcgWm9vbUV2ZW50KHpvb20sIHR5cGUsIHRoaXMudGhhdC5fX3pvb20pLCBsaXN0ZW5lcnMuYXBwbHksIGxpc3RlbmVycywgW3R5cGUsIHRoaXMudGhhdCwgdGhpcy5hcmdzXSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHdoZWVsZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMpLFxuICAgICAgICB0ID0gdGhpcy5fX3pvb20sXG4gICAgICAgIGsgPSBNYXRoLm1heChzY2FsZUV4dGVudFswXSwgTWF0aC5taW4oc2NhbGVFeHRlbnRbMV0sIHQuayAqIE1hdGgucG93KDIsIHdoZWVsRGVsdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKSkpKSxcbiAgICAgICAgcCA9IG1vdXNlKHRoaXMpO1xuXG4gICAgLy8gSWYgdGhlIG1vdXNlIGlzIGluIHRoZSBzYW1lIGxvY2F0aW9uIGFzIGJlZm9yZSwgcmV1c2UgaXQuXG4gICAgLy8gSWYgdGhlcmUgd2VyZSByZWNlbnQgd2hlZWwgZXZlbnRzLCByZXNldCB0aGUgd2hlZWwgaWRsZSB0aW1lb3V0LlxuICAgIGlmIChnLndoZWVsKSB7XG4gICAgICBpZiAoZy5tb3VzZVswXVswXSAhPT0gcFswXSB8fCBnLm1vdXNlWzBdWzFdICE9PSBwWzFdKSB7XG4gICAgICAgIGcubW91c2VbMV0gPSB0LmludmVydChnLm1vdXNlWzBdID0gcCk7XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQoZy53aGVlbCk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3aGVlbCBldmVudCB3b27igJl0IHRyaWdnZXIgYSB0cmFuc2Zvcm0gY2hhbmdlLCBpZ25vcmUgaXQuXG4gICAgZWxzZSBpZiAodC5rID09PSBrKSByZXR1cm47XG5cbiAgICAvLyBPdGhlcndpc2UsIGNhcHR1cmUgdGhlIG1vdXNlIHBvaW50IGFuZCBsb2NhdGlvbiBhdCB0aGUgc3RhcnQuXG4gICAgZWxzZSB7XG4gICAgICBnLm1vdXNlID0gW3AsIHQuaW52ZXJ0KHApXTtcbiAgICAgIGludGVycnVwdCh0aGlzKTtcbiAgICAgIGcuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBub2V2ZW50KCk7XG4gICAgZy53aGVlbCA9IHNldFRpbWVvdXQod2hlZWxpZGxlZCwgd2hlZWxEZWxheSk7XG4gICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShzY2FsZSh0LCBrKSwgZy5tb3VzZVswXSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcblxuICAgIGZ1bmN0aW9uIHdoZWVsaWRsZWQoKSB7XG4gICAgICBnLndoZWVsID0gbnVsbDtcbiAgICAgIGcuZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW91c2Vkb3duZWQoKSB7XG4gICAgaWYgKHRvdWNoZW5kaW5nIHx8ICFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMsIHRydWUpLFxuICAgICAgICB2ID0gc2VsZWN0KGV2ZW50LnZpZXcpLm9uKFwibW91c2Vtb3ZlLnpvb21cIiwgbW91c2Vtb3ZlZCwgdHJ1ZSkub24oXCJtb3VzZXVwLnpvb21cIiwgbW91c2V1cHBlZCwgdHJ1ZSksXG4gICAgICAgIHAgPSBtb3VzZSh0aGlzKSxcbiAgICAgICAgeDAgPSBldmVudC5jbGllbnRYLFxuICAgICAgICB5MCA9IGV2ZW50LmNsaWVudFk7XG5cbiAgICBkcmFnRGlzYWJsZShldmVudC52aWV3KTtcbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgZy5tb3VzZSA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCldO1xuICAgIGludGVycnVwdCh0aGlzKTtcbiAgICBnLnN0YXJ0KCk7XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmVkKCkge1xuICAgICAgbm9ldmVudCgpO1xuICAgICAgaWYgKCFnLm1vdmVkKSB7XG4gICAgICAgIHZhciBkeCA9IGV2ZW50LmNsaWVudFggLSB4MCwgZHkgPSBldmVudC5jbGllbnRZIC0geTA7XG4gICAgICAgIGcubW92ZWQgPSBkeCAqIGR4ICsgZHkgKiBkeSA+IGNsaWNrRGlzdGFuY2UyO1xuICAgICAgfVxuICAgICAgZy56b29tKFwibW91c2VcIiwgY29uc3RyYWluKHRyYW5zbGF0ZShnLnRoYXQuX196b29tLCBnLm1vdXNlWzBdID0gbW91c2UoZy50aGF0KSwgZy5tb3VzZVsxXSksIGcuZXh0ZW50LCB0cmFuc2xhdGVFeHRlbnQpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwcGVkKCkge1xuICAgICAgdi5vbihcIm1vdXNlbW92ZS56b29tIG1vdXNldXAuem9vbVwiLCBudWxsKTtcbiAgICAgIGRyYWdFbmFibGUoZXZlbnQudmlldywgZy5tb3ZlZCk7XG4gICAgICBub2V2ZW50KCk7XG4gICAgICBnLmVuZCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRibGNsaWNrZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0MCA9IHRoaXMuX196b29tLFxuICAgICAgICBwMCA9IG1vdXNlKHRoaXMpLFxuICAgICAgICBwMSA9IHQwLmludmVydChwMCksXG4gICAgICAgIGsxID0gdDAuayAqIChldmVudC5zaGlmdEtleSA/IDAuNSA6IDIpLFxuICAgICAgICB0MSA9IGNvbnN0cmFpbih0cmFuc2xhdGUoc2NhbGUodDAsIGsxKSwgcDAsIHAxKSwgZXh0ZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHRyYW5zbGF0ZUV4dGVudCk7XG5cbiAgICBub2V2ZW50KCk7XG4gICAgaWYgKGR1cmF0aW9uID4gMCkgc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5kdXJhdGlvbihkdXJhdGlvbikuY2FsbChzY2hlZHVsZSwgdDEsIHAwKTtcbiAgICBlbHNlIHNlbGVjdCh0aGlzKS5jYWxsKHpvb20udHJhbnNmb3JtLCB0MSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaHN0YXJ0ZWQoKSB7XG4gICAgaWYgKCFmaWx0ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSkgcmV0dXJuO1xuICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLFxuICAgICAgICBnID0gZ2VzdHVyZSh0aGlzLCBhcmd1bWVudHMsIGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aCA9PT0gbiksXG4gICAgICAgIHN0YXJ0ZWQsIGksIHQsIHA7XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgcCA9IFtwLCB0aGlzLl9fem9vbS5pbnZlcnQocCksIHQuaWRlbnRpZmllcl07XG4gICAgICBpZiAoIWcudG91Y2gwKSBnLnRvdWNoMCA9IHAsIHN0YXJ0ZWQgPSB0cnVlLCBnLnRhcHMgPSAxICsgISF0b3VjaHN0YXJ0aW5nO1xuICAgICAgZWxzZSBpZiAoIWcudG91Y2gxICYmIGcudG91Y2gwWzJdICE9PSBwWzJdKSBnLnRvdWNoMSA9IHAsIGcudGFwcyA9IDA7XG4gICAgfVxuXG4gICAgaWYgKHRvdWNoc3RhcnRpbmcpIHRvdWNoc3RhcnRpbmcgPSBjbGVhclRpbWVvdXQodG91Y2hzdGFydGluZyk7XG5cbiAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgaWYgKGcudGFwcyA8IDIpIHRvdWNoc3RhcnRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyB0b3VjaHN0YXJ0aW5nID0gbnVsbDsgfSwgdG91Y2hEZWxheSk7XG4gICAgICBpbnRlcnJ1cHQodGhpcyk7XG4gICAgICBnLnN0YXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG91Y2htb3ZlZCgpIHtcbiAgICBpZiAoIXRoaXMuX196b29taW5nKSByZXR1cm47XG4gICAgdmFyIGcgPSBnZXN0dXJlKHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHRvdWNoZXMgPSBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgbiA9IHRvdWNoZXMubGVuZ3RoLCBpLCB0LCBwLCBsO1xuXG4gICAgbm9ldmVudCgpO1xuICAgIGlmICh0b3VjaHN0YXJ0aW5nKSB0b3VjaHN0YXJ0aW5nID0gY2xlYXJUaW1lb3V0KHRvdWNoc3RhcnRpbmcpO1xuICAgIGcudGFwcyA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdCA9IHRvdWNoZXNbaV0sIHAgPSB0b3VjaCh0aGlzLCB0b3VjaGVzLCB0LmlkZW50aWZpZXIpO1xuICAgICAgaWYgKGcudG91Y2gwICYmIGcudG91Y2gwWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gwWzBdID0gcDtcbiAgICAgIGVsc2UgaWYgKGcudG91Y2gxICYmIGcudG91Y2gxWzJdID09PSB0LmlkZW50aWZpZXIpIGcudG91Y2gxWzBdID0gcDtcbiAgICB9XG4gICAgdCA9IGcudGhhdC5fX3pvb207XG4gICAgaWYgKGcudG91Y2gxKSB7XG4gICAgICB2YXIgcDAgPSBnLnRvdWNoMFswXSwgbDAgPSBnLnRvdWNoMFsxXSxcbiAgICAgICAgICBwMSA9IGcudG91Y2gxWzBdLCBsMSA9IGcudG91Y2gxWzFdLFxuICAgICAgICAgIGRwID0gKGRwID0gcDFbMF0gLSBwMFswXSkgKiBkcCArIChkcCA9IHAxWzFdIC0gcDBbMV0pICogZHAsXG4gICAgICAgICAgZGwgPSAoZGwgPSBsMVswXSAtIGwwWzBdKSAqIGRsICsgKGRsID0gbDFbMV0gLSBsMFsxXSkgKiBkbDtcbiAgICAgIHQgPSBzY2FsZSh0LCBNYXRoLnNxcnQoZHAgLyBkbCkpO1xuICAgICAgcCA9IFsocDBbMF0gKyBwMVswXSkgLyAyLCAocDBbMV0gKyBwMVsxXSkgLyAyXTtcbiAgICAgIGwgPSBbKGwwWzBdICsgbDFbMF0pIC8gMiwgKGwwWzFdICsgbDFbMV0pIC8gMl07XG4gICAgfVxuICAgIGVsc2UgaWYgKGcudG91Y2gwKSBwID0gZy50b3VjaDBbMF0sIGwgPSBnLnRvdWNoMFsxXTtcbiAgICBlbHNlIHJldHVybjtcbiAgICBnLnpvb20oXCJ0b3VjaFwiLCBjb25zdHJhaW4odHJhbnNsYXRlKHQsIHAsIGwpLCBnLmV4dGVudCwgdHJhbnNsYXRlRXh0ZW50KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaGVuZGVkKCkge1xuICAgIGlmICghdGhpcy5fX3pvb21pbmcpIHJldHVybjtcbiAgICB2YXIgZyA9IGdlc3R1cmUodGhpcywgYXJndW1lbnRzKSxcbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICBuID0gdG91Y2hlcy5sZW5ndGgsIGksIHQ7XG5cbiAgICBub3Byb3BhZ2F0aW9uKCk7XG4gICAgaWYgKHRvdWNoZW5kaW5nKSBjbGVhclRpbWVvdXQodG91Y2hlbmRpbmcpO1xuICAgIHRvdWNoZW5kaW5nID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgdG91Y2hlbmRpbmcgPSBudWxsOyB9LCB0b3VjaERlbGF5KTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICB0ID0gdG91Y2hlc1tpXTtcbiAgICAgIGlmIChnLnRvdWNoMCAmJiBnLnRvdWNoMFsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDA7XG4gICAgICBlbHNlIGlmIChnLnRvdWNoMSAmJiBnLnRvdWNoMVsyXSA9PT0gdC5pZGVudGlmaWVyKSBkZWxldGUgZy50b3VjaDE7XG4gICAgfVxuICAgIGlmIChnLnRvdWNoMSAmJiAhZy50b3VjaDApIGcudG91Y2gwID0gZy50b3VjaDEsIGRlbGV0ZSBnLnRvdWNoMTtcbiAgICBpZiAoZy50b3VjaDApIGcudG91Y2gwWzFdID0gdGhpcy5fX3pvb20uaW52ZXJ0KGcudG91Y2gwWzBdKTtcbiAgICBlbHNlIHtcbiAgICAgIGcuZW5kKCk7XG4gICAgICAvLyBJZiB0aGlzIHdhcyBhIGRibHRhcCwgcmVyb3V0ZSB0byB0aGUgKG9wdGlvbmFsKSBkYmxjbGljay56b29tIGhhbmRsZXIuXG4gICAgICBpZiAoZy50YXBzID09PSAyKSB7XG4gICAgICAgIHZhciBwID0gc2VsZWN0KHRoaXMpLm9uKFwiZGJsY2xpY2suem9vbVwiKTtcbiAgICAgICAgaWYgKHApIHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB6b29tLndoZWVsRGVsdGEgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAod2hlZWxEZWx0YSA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCB6b29tKSA6IHdoZWVsRGVsdGE7XG4gIH07XG5cbiAgem9vbS5maWx0ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZmlsdGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudCghIV8pLCB6b29tKSA6IGZpbHRlcjtcbiAgfTtcblxuICB6b29tLnRvdWNoYWJsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0b3VjaGFibGUgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCEhXyksIHpvb20pIDogdG91Y2hhYmxlO1xuICB9O1xuXG4gIHpvb20uZXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGV4dGVudCA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoW1srX1swXVswXSwgK19bMF1bMV1dLCBbK19bMV1bMF0sICtfWzFdWzFdXV0pLCB6b29tKSA6IGV4dGVudDtcbiAgfTtcblxuICB6b29tLnNjYWxlRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlRXh0ZW50WzBdID0gK19bMF0sIHNjYWxlRXh0ZW50WzFdID0gK19bMV0sIHpvb20pIDogW3NjYWxlRXh0ZW50WzBdLCBzY2FsZUV4dGVudFsxXV07XG4gIH07XG5cbiAgem9vbS50cmFuc2xhdGVFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodHJhbnNsYXRlRXh0ZW50WzBdWzBdID0gK19bMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVswXSA9ICtfWzFdWzBdLCB0cmFuc2xhdGVFeHRlbnRbMF1bMV0gPSArX1swXVsxXSwgdHJhbnNsYXRlRXh0ZW50WzFdWzFdID0gK19bMV1bMV0sIHpvb20pIDogW1t0cmFuc2xhdGVFeHRlbnRbMF1bMF0sIHRyYW5zbGF0ZUV4dGVudFswXVsxXV0sIFt0cmFuc2xhdGVFeHRlbnRbMV1bMF0sIHRyYW5zbGF0ZUV4dGVudFsxXVsxXV1dO1xuICB9O1xuXG4gIHpvb20uY29uc3RyYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNvbnN0cmFpbiA9IF8sIHpvb20pIDogY29uc3RyYWluO1xuICB9O1xuXG4gIHpvb20uZHVyYXRpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZHVyYXRpb24gPSArXywgem9vbSkgOiBkdXJhdGlvbjtcbiAgfTtcblxuICB6b29tLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgem9vbSkgOiBpbnRlcnBvbGF0ZTtcbiAgfTtcblxuICB6b29tLm9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdGVuZXJzLm9uLmFwcGx5KGxpc3RlbmVycywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IGxpc3RlbmVycyA/IHpvb20gOiB2YWx1ZTtcbiAgfTtcblxuICB6b29tLmNsaWNrRGlzdGFuY2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2xpY2tEaXN0YW5jZTIgPSAoXyA9ICtfKSAqIF8sIHpvb20pIDogTWF0aC5zcXJ0KGNsaWNrRGlzdGFuY2UyKTtcbiAgfTtcblxuICByZXR1cm4gem9vbTtcbn1cbiIsImV4cG9ydCB7dmVyc2lvbn0gZnJvbSBcIi4vZGlzdC9wYWNrYWdlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtYXJyYXlcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1heGlzXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtYnJ1c2hcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1jaG9yZFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWNvbGxlY3Rpb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1jb2xvclwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWNvbnRvdXJcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWRyYWdcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1kc3ZcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1lYXNlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtZmV0Y2hcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1mb3JjZVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWZvcm1hdFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWdlb1wiO1xuZXhwb3J0ICogZnJvbSBcImQzLWhpZXJhcmNoeVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtcGF0aFwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXBvbHlnb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy1xdWFkdHJlZVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXJhbmRvbVwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXNjYWxlXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2NhbGUtY2hyb21hdGljXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtc2hhcGVcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy10aW1lXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtdGltZS1mb3JtYXRcIjtcbmV4cG9ydCAqIGZyb20gXCJkMy10aW1lclwiO1xuZXhwb3J0ICogZnJvbSBcImQzLXRyYW5zaXRpb25cIjtcbmV4cG9ydCAqIGZyb20gXCJkMy12b3Jvbm9pXCI7XG5leHBvcnQgKiBmcm9tIFwiZDMtem9vbVwiO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYWYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhZicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcmllX0ZlYnJ1YXJpZV9NYWFydF9BcHJpbF9NZWlfSnVuaWVfSnVsaWVfQXVndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTXJ0X0Fwcl9NZWlfSnVuX0p1bF9BdWdfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTb25kYWdfTWFhbmRhZ19EaW5zZGFnX1dvZW5zZGFnX0RvbmRlcmRhZ19WcnlkYWdfU2F0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU29uX01hYV9EaW5fV29lX0Rvbl9WcnlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19NYV9EaV9Xb19Eb19Wcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3ZtfG5tL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXm5tJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICd2bScgOiAnVk0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdubScgOiAnTk0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVmFuZGFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tNw7RyZSBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0dpc3RlciBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhYXNdIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb29yICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgZ2VsZWRlJyxcbiAgICAgICAgICAgIHMgOiAnXFwnbiBwYWFyIHNla29uZGVzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla29uZGVzJyxcbiAgICAgICAgICAgIG0gOiAnXFwnbiBtaW51dXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlJyxcbiAgICAgICAgICAgIGggOiAnXFwnbiB1dXInLFxuICAgICAgICAgICAgaGggOiAnJWQgdXJlJyxcbiAgICAgICAgICAgIGQgOiAnXFwnbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFlJyxcbiAgICAgICAgICAgIE0gOiAnXFwnbiBtYWFuZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtYWFuZGUnLFxuICAgICAgICAgICAgeSA6ICdcXCduIGphYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgamFhcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICgobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjApID8gJ3N0ZScgOiAnZGUnKTsgLy8gVGhhbmtzIHRvIEpvcmlzIFLDtmxpbmcgOiBodHRwczovL2dpdGh1Yi5jb20vamp1cGl0ZXJcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1hYW5kYWcgaXMgZGllIGVlcnN0ZSBkYWcgdmFuIGRpZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gRGllIHdlZWsgd2F0IGRpZSA0ZGUgSmFudWFyaWUgYmV2YXQgaXMgZGllIGVlcnN0ZSB3ZWVrIHZhbiBkaWUgamFhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFmO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfZoScsXG4gICAgICAgICcyJzogJ9miJyxcbiAgICAgICAgJzMnOiAn2aMnLFxuICAgICAgICAnNCc6ICfZpCcsXG4gICAgICAgICc1JzogJ9mlJyxcbiAgICAgICAgJzYnOiAn2aYnLFxuICAgICAgICAnNyc6ICfZpycsXG4gICAgICAgICc4JzogJ9moJyxcbiAgICAgICAgJzknOiAn2aknLFxuICAgICAgICAnMCc6ICfZoCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICfZoCc6ICcwJ1xuICAgIH0sIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiBuID09PSAxID8gMSA6IG4gPT09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1O1xuICAgIH0sIHBsdXJhbHMgPSB7XG4gICAgICAgIHMgOiBbJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLCAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJywgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLCAnJWQg2KvZiNin2YYnLCAnJWQg2KvYp9mG2YrYqScsICclZCDYq9in2YbZitipJ10sXG4gICAgICAgIG0gOiBbJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLCAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJywgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLCAnJWQg2K/Zgtin2KbZgicsICclZCDYr9mC2YrZgtipJywgJyVkINiv2YLZitmC2KknXSxcbiAgICAgICAgaCA6IFsn2KPZgtmEINmF2YYg2LPYp9i52KknLCAn2LPYp9i52Kkg2YjYp9it2K/YqScsIFsn2LPYp9i52KrYp9mGJywgJ9iz2KfYudiq2YrZhiddLCAnJWQg2LPYp9i52KfYqicsICclZCDYs9in2LnYqScsICclZCDYs9in2LnYqSddLFxuICAgICAgICBkIDogWyfYo9mC2YQg2YXZhiDZitmI2YUnLCAn2YrZiNmFINmI2KfYrdivJywgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSwgJyVkINij2YrYp9mFJywgJyVkINmK2YjZhdmL2KcnLCAnJWQg2YrZiNmFJ10sXG4gICAgICAgIE0gOiBbJ9ij2YLZhCDZhdmGINi02YfYsScsICfYtNmH2LEg2YjYp9it2K8nLCBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLCAnJWQg2KPYtNmH2LEnLCAnJWQg2LTZh9ix2KcnLCAnJWQg2LTZh9ixJ10sXG4gICAgICAgIHkgOiBbJ9ij2YLZhCDZhdmGINi52KfZhScsICfYudin2YUg2YjYp9it2K8nLCBbJ9i52KfZhdin2YYnLCAn2LnYp9mF2YrZhiddLCAnJWQg2KPYudmI2KfZhScsICclZCDYudin2YXZi9inJywgJyVkINi52KfZhSddXG4gICAgfSwgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgIGlmIChmID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgICAgIH07XG4gICAgfSwgbW9udGhzID0gW1xuICAgICAgICAn2YrZhtin2YrYsScsXG4gICAgICAgICfZgdio2LHYp9mK2LEnLFxuICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAn2KPYqNix2YrZhCcsXG4gICAgICAgICfZhdin2YrZiCcsXG4gICAgICAgICfZitmI2YbZitmIJyxcbiAgICAgICAgJ9mK2YjZhNmK2YgnLFxuICAgICAgICAn2KPYutiz2LfYsycsXG4gICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAn2KPZg9iq2YjYqNixJyxcbiAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICfYr9mK2LPZhdio2LEnXG4gICAgXTtcblxuICAgIHZhciBhciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyJywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbSA6IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW0gOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoIDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkIDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTSA6IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU0gOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5IDogcGx1cmFsaXplKCd5JylcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYXJEeiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWR6Jywge1xuICAgICAgICBtb250aHMgOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2KPYrV/YpdirX9ir2YTYp1/Yo9ixX9iu2YVf2KzZhV/Ys9ioJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgcyA6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzcyA6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG0gOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGggOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGggOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZCA6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNIDogJ9i02YfYsScsXG4gICAgICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5IDogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eSA6ICclZCDYs9mG2YjYp9iqJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhckR6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYXJLdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWt3Jywge1xuICAgICAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYqtmG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9in2K3Yr1/Yp9iq2YbZitmGX9ir2YTYp9ir2KfYoV/Yp9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhckt3O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICcxJyxcbiAgICAgICAgJzInOiAnMicsXG4gICAgICAgICczJzogJzMnLFxuICAgICAgICAnNCc6ICc0JyxcbiAgICAgICAgJzUnOiAnNScsXG4gICAgICAgICc2JzogJzYnLFxuICAgICAgICAnNyc6ICc3JyxcbiAgICAgICAgJzgnOiAnOCcsXG4gICAgICAgICc5JzogJzknLFxuICAgICAgICAnMCc6ICcwJ1xuICAgIH0sIHBsdXJhbEZvcm0gPSBmdW5jdGlvbiAobikge1xuICAgICAgICByZXR1cm4gbiA9PT0gMCA/IDAgOiBuID09PSAxID8gMSA6IG4gPT09IDIgPyAyIDogbiAlIDEwMCA+PSAzICYmIG4gJSAxMDAgPD0gMTAgPyAzIDogbiAlIDEwMCA+PSAxMSA/IDQgOiA1O1xuICAgIH0sIHBsdXJhbHMgPSB7XG4gICAgICAgIHMgOiBbJ9ij2YLZhCDZhdmGINir2KfZhtmK2KknLCAn2KvYp9mG2YrYqSDZiNin2K3Yr9ipJywgWyfYq9in2YbZitiq2KfZhicsICfYq9in2YbZitiq2YrZhiddLCAnJWQg2KvZiNin2YYnLCAnJWQg2KvYp9mG2YrYqScsICclZCDYq9in2YbZitipJ10sXG4gICAgICAgIG0gOiBbJ9ij2YLZhCDZhdmGINiv2YLZitmC2KknLCAn2K/ZgtmK2YLYqSDZiNin2K3Yr9ipJywgWyfYr9mC2YrZgtiq2KfZhicsICfYr9mC2YrZgtiq2YrZhiddLCAnJWQg2K/Zgtin2KbZgicsICclZCDYr9mC2YrZgtipJywgJyVkINiv2YLZitmC2KknXSxcbiAgICAgICAgaCA6IFsn2KPZgtmEINmF2YYg2LPYp9i52KknLCAn2LPYp9i52Kkg2YjYp9it2K/YqScsIFsn2LPYp9i52KrYp9mGJywgJ9iz2KfYudiq2YrZhiddLCAnJWQg2LPYp9i52KfYqicsICclZCDYs9in2LnYqScsICclZCDYs9in2LnYqSddLFxuICAgICAgICBkIDogWyfYo9mC2YQg2YXZhiDZitmI2YUnLCAn2YrZiNmFINmI2KfYrdivJywgWyfZitmI2YXYp9mGJywgJ9mK2YjZhdmK2YYnXSwgJyVkINij2YrYp9mFJywgJyVkINmK2YjZhdmL2KcnLCAnJWQg2YrZiNmFJ10sXG4gICAgICAgIE0gOiBbJ9ij2YLZhCDZhdmGINi02YfYsScsICfYtNmH2LEg2YjYp9it2K8nLCBbJ9i02YfYsdin2YYnLCAn2LTZh9ix2YrZhiddLCAnJWQg2KPYtNmH2LEnLCAnJWQg2LTZh9ix2KcnLCAnJWQg2LTZh9ixJ10sXG4gICAgICAgIHkgOiBbJ9ij2YLZhCDZhdmGINi52KfZhScsICfYudin2YUg2YjYp9it2K8nLCBbJ9i52KfZhdin2YYnLCAn2LnYp9mF2YrZhiddLCAnJWQg2KPYudmI2KfZhScsICclZCDYudin2YXZi9inJywgJyVkINi52KfZhSddXG4gICAgfSwgcGx1cmFsaXplID0gZnVuY3Rpb24gKHUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgIHZhciBmID0gcGx1cmFsRm9ybShudW1iZXIpLFxuICAgICAgICAgICAgICAgIHN0ciA9IHBsdXJhbHNbdV1bcGx1cmFsRm9ybShudW1iZXIpXTtcbiAgICAgICAgICAgIGlmIChmID09PSAyKSB7XG4gICAgICAgICAgICAgICAgc3RyID0gc3RyW3dpdGhvdXRTdWZmaXggPyAwIDogMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgICAgIH07XG4gICAgfSwgbW9udGhzID0gW1xuICAgICAgICAn2YrZhtin2YrYsScsXG4gICAgICAgICfZgdio2LHYp9mK2LEnLFxuICAgICAgICAn2YXYp9ix2LMnLFxuICAgICAgICAn2KPYqNix2YrZhCcsXG4gICAgICAgICfZhdin2YrZiCcsXG4gICAgICAgICfZitmI2YbZitmIJyxcbiAgICAgICAgJ9mK2YjZhNmK2YgnLFxuICAgICAgICAn2KPYutiz2LfYsycsXG4gICAgICAgICfYs9io2KrZhdio2LEnLFxuICAgICAgICAn2KPZg9iq2YjYqNixJyxcbiAgICAgICAgJ9mG2YjZgdmF2KjYsScsXG4gICAgICAgICfYr9mK2LPZhdio2LEnXG4gICAgXTtcblxuICAgIHZhciBhckx5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItbHknLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnRC9cXHUyMDBGTS9cXHUyMDBGWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2YvYpyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2KjYudivICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIHNzIDogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBtIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBtbSA6IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgaCA6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgaGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGQgOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIGRkIDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBNIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICBNTSA6IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgeSA6IHBsdXJhbGl6ZSgneScpLFxuICAgICAgICAgICAgeXkgOiBwbHVyYWxpemUoJ3knKVxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhckx5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYXJNYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLW1hJywge1xuICAgICAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2Ypf2YrZiNmG2YrZiF/ZitmI2YTZitmI2LJf2LrYtNiqX9i02KrZhtio2LFf2KPZg9iq2YjYqNixX9mG2YjZhtio2LFf2K/YrNmG2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYqtmG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9in2K3Yr1/Yp9iq2YbZitmGX9ir2YTYp9ir2KfYoV/Yp9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyTWE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ9mhJyxcbiAgICAgICAgJzInOiAn2aInLFxuICAgICAgICAnMyc6ICfZoycsXG4gICAgICAgICc0JzogJ9mkJyxcbiAgICAgICAgJzUnOiAn2aUnLFxuICAgICAgICAnNic6ICfZpicsXG4gICAgICAgICc3JzogJ9mnJyxcbiAgICAgICAgJzgnOiAn2agnLFxuICAgICAgICAnOSc6ICfZqScsXG4gICAgICAgICcwJzogJ9mgJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ9mhJzogJzEnLFxuICAgICAgICAn2aInOiAnMicsXG4gICAgICAgICfZoyc6ICczJyxcbiAgICAgICAgJ9mkJzogJzQnLFxuICAgICAgICAn2aUnOiAnNScsXG4gICAgICAgICfZpic6ICc2JyxcbiAgICAgICAgJ9mnJzogJzcnLFxuICAgICAgICAn2agnOiAnOCcsXG4gICAgICAgICfZqSc6ICc5JyxcbiAgICAgICAgJ9mgJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBhclNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXItc2EnLCB7XG4gICAgICAgIG1vbnRocyA6ICfZitmG2KfZitixX9mB2KjYsdin2YrYsV/Zhdin2LHYs1/Yo9io2LHZitmEX9mF2KfZitmIX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiF/Yo9i62LPYt9izX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LV82YUvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mFJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9in2YTZitmI2YUg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYutiv2Kcg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgcyA6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzcyA6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG0gOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbSA6ICclZCDYr9mC2KfYptmCJyxcbiAgICAgICAgICAgIGggOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGggOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkIDogJ9mK2YjZhScsXG4gICAgICAgICAgICBkZCA6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNIDogJ9i02YfYsScsXG4gICAgICAgICAgICBNTSA6ICclZCDYo9i02YfYsScsXG4gICAgICAgICAgICB5IDogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eSA6ICclZCDYs9mG2YjYp9iqJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhclNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYXJUbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXRuJywge1xuICAgICAgICBtb250aHM6ICfYrNin2YbZgdmKX9mB2YrZgdix2Ypf2YXYp9ix2LNf2KPZgdix2YrZhF/Zhdin2Ypf2KzZiNin2YZf2KzZiNmK2YTZitipX9ij2YjYql/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ9in2YTYo9it2K9f2KfZhNil2KvZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0OiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHM6ICfYq9mI2KfZhicsXG4gICAgICAgICAgICBzcyA6ICclZCDYq9in2YbZitipJyxcbiAgICAgICAgICAgIG06ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoOiAn2LPYp9i52KknLFxuICAgICAgICAgICAgaGg6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQ6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQ6ICclZCDYo9mK2KfZhScsXG4gICAgICAgICAgICBNOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeTogJ9iz2YbYqScsXG4gICAgICAgICAgICB5eTogJyVkINiz2YbZiNin2KonXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJUbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiAnLWluY2knLFxuICAgICAgICA1OiAnLWluY2knLFxuICAgICAgICA4OiAnLWluY2knLFxuICAgICAgICA3MDogJy1pbmNpJyxcbiAgICAgICAgODA6ICctaW5jaScsXG4gICAgICAgIDI6ICctbmNpJyxcbiAgICAgICAgNzogJy1uY2knLFxuICAgICAgICAyMDogJy1uY2knLFxuICAgICAgICA1MDogJy1uY2knLFxuICAgICAgICAzOiAnLcO8bmPDvCcsXG4gICAgICAgIDQ6ICctw7xuY8O8JyxcbiAgICAgICAgMTAwOiAnLcO8bmPDvCcsXG4gICAgICAgIDY6ICctbmPEsScsXG4gICAgICAgIDk6ICctdW5jdScsXG4gICAgICAgIDEwOiAnLXVuY3UnLFxuICAgICAgICAzMDogJy11bmN1JyxcbiAgICAgICAgNjA6ICctxLFuY8SxJyxcbiAgICAgICAgOTA6ICctxLFuY8SxJ1xuICAgIH07XG5cbiAgICB2YXIgYXogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdheicsIHtcbiAgICAgICAgbW9udGhzIDogJ3lhbnZhcl9mZXZyYWxfbWFydF9hcHJlbF9tYXlfaXl1bl9peXVsX2F2cXVzdF9zZW50eWFicl9va3R5YWJyX25veWFicl9kZWthYnInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3lhbl9mZXZfbWFyX2Fwcl9tYXlfaXluX2l5bF9hdnFfc2VuX29rdF9ub3lfZGVrJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdCYXphcl9CYXphciBlcnTJmXNpX8OHyZlyxZ/JmW5iyZkgYXjFn2FtxLFfw4fJmXLFn8mZbmLJmV9Dw7xtyZkgYXjFn2FtxLFfQ8O8bcmZX8WeyZluYsmZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0Jhel9CekVfw4dBeF/Dh8mZcl9DQXhfQ8O8bV/FnsmZbicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnQnpfQkVfw4dBX8OHyZlfQ0FfQ8O8X8WeyZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tidWfDvG4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbc2FiYWggc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW2fJmWzJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZMO8bsmZbl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2tlw6fJmW4gaMmZZnTJmV0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgyZl2dsmZbCcsXG4gICAgICAgICAgICBzIDogJ2Jpcm5lw6fJmSBzYW5pecmZJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhbml5yZknLFxuICAgICAgICAgICAgbSA6ICdiaXIgZMmZcWlxyZknLFxuICAgICAgICAgICAgbW0gOiAnJWQgZMmZcWlxyZknLFxuICAgICAgICAgICAgaCA6ICdiaXIgc2FhdCcsXG4gICAgICAgICAgICBoaCA6ICclZCBzYWF0JyxcbiAgICAgICAgICAgIGQgOiAnYmlyIGfDvG4nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ8O8bicsXG4gICAgICAgICAgICBNIDogJ2JpciBheScsXG4gICAgICAgICAgICBNTSA6ICclZCBheScsXG4gICAgICAgICAgICB5IDogJ2JpciBpbCcsXG4gICAgICAgICAgICB5eSA6ICclZCBpbCdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2dlY8mZfHPJmWjJmXJ8Z8O8bmTDvHp8YXjFn2FtLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKGfDvG5kw7x6fGF4xZ9hbSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2dlY8mZJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzyZloyZlyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnw7xuZMO8eic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnYXjFn2FtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjEsW5jxLF8aW5jaXxuY2l8w7xuY8O8fG5jxLF8dW5jdSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkgeyAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICctxLFuY8SxJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciAlIDEwMCAtIGEsXG4gICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSB8fCBzdWZmaXhlc1tjXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGF6O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3NzJzogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScgOiAn0YXQstGW0LvRltC90YNf0YXQstGW0LvRltC90Ytf0YXQstGW0LvRltC9JyxcbiAgICAgICAgICAgICdoaCc6IHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LBf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyA6ICfQs9Cw0LTQt9GW0L3Rg1/Qs9Cw0LTQt9GW0L3Ri1/Qs9Cw0LTQt9GW0L0nLFxuICAgICAgICAgICAgJ2RkJzogJ9C00LfQtdC90Yxf0LTQvdGWX9C00LfRkdC9JyxcbiAgICAgICAgICAgICdNTSc6ICfQvNC10YHRj9GGX9C80LXRgdGP0YbRi1/QvNC10YHRj9GG0LDRnicsXG4gICAgICAgICAgICAneXknOiAn0LPQvtC0X9Cz0LDQtNGLX9Cz0LDQtNC+0Z4nXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstGW0LvRltC90LAnIDogJ9GF0LLRltC70ZbQvdGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQsNC00LfRltC90LAnIDogJ9Cz0LDQtNC30ZbQvdGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYmUnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9GB0YLRg9C00LfQtdC90Y9f0LvRjtGC0LDQs9CwX9GB0LDQutCw0LLRltC60LBf0LrRgNCw0YHQsNCy0ZbQutCwX9GC0YDQsNGe0L3Rj1/Rh9GN0YDQstC10L3Rj1/Qu9GW0L/QtdC90Y9f0LbQvdGW0Z7QvdGPX9Cy0LXRgNCw0YHQvdGPX9C60LDRgdGC0YDRi9GH0L3RltC60LBf0LvRltGB0YLQsNC/0LDQtNCwX9GB0L3QtdC20L3Rjycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRgdGC0YPQtNC30LXQvdGMX9C70Y7RgtGLX9GB0LDQutCw0LLRltC6X9C60YDQsNGB0LDQstGW0Lpf0YLRgNCw0LLQtdC90Yxf0YfRjdGA0LLQtdC90Yxf0LvRltC/0LXQvdGMX9C20L3RltCy0LXQvdGMX9Cy0LXRgNCw0YHQtdC90Yxf0LrQsNGB0YLRgNGL0YfQvdGW0Lpf0LvRltGB0YLQsNC/0LDQtF/RgdC90LXQttCw0L3RjCcuc3BsaXQoJ18nKVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICfRgdGC0YPQtF/Qu9GO0YJf0YHQsNC6X9C60YDQsNGBX9GC0YDQsNCyX9GH0Y3RgNCyX9C70ZbQv1/QttC90ZbQsl/QstC10YBf0LrQsNGB0YJf0LvRltGB0YJf0YHQvdC10LYnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0L3Rj9C00LfQtdC70Y5f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNGDX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbRg1/RgdGD0LHQvtGC0YMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0L3Rj9C00LfQtdC70Y9f0L/QsNC90Y/QtNC30LXQu9Cw0Lpf0LDRntGC0L7RgNCw0Lpf0YHQtdGA0LDQtNCwX9GH0LDRhtCy0LXRgF/Qv9GP0YLQvdGW0YbQsF/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL1xcWyA/W9Cj0YPRnl0gPyg/OtC80ZbQvdGD0LvRg9GOfNC90LDRgdGC0YPQv9C90YPRjik/ID9cXF0gP2RkZGQvXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0L3QtF/Qv9C9X9Cw0YJf0YHRgF/Rh9GGX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZINCzLicsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0LMuLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodGR0L3QvdGPINGeXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9CX0LDRntGC0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQo9GH0L7RgNCwINGeXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW9CjXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRg9GOXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0KMg0LzRltC90YPQu9GLXSBkZGRkIFvRnl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQv9GA0LDQtyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINGC0LDQvNGDJyxcbiAgICAgICAgICAgIHMgOiAn0L3QtdC60LDQu9GM0LrRliDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAn0LTQt9C10L3RjCcsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRi3zRgNCw0L3RltGG0Yt80LTQvdGPfNCy0LXRh9Cw0YDQsC8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LDRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0YsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdGW0YbRiyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQsNGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGWfNGLfNCz0LApLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAobnVtYmVyICUgMTAgPT09IDIgfHwgbnVtYmVyICUgMTAgPT09IDMpICYmIChudW1iZXIgJSAxMDAgIT09IDEyICYmIG51bWJlciAlIDEwMCAhPT0gMTMpID8gbnVtYmVyICsgJy3RlicgOiBudW1iZXIgKyAnLdGLJztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQsCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBiZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JnJywge1xuICAgICAgICBtb250aHMgOiAn0Y/QvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LPRg9GB0YJf0YHQtdC/0YLQtdC80LLRgNC4X9C+0LrRgtC+0LzQstGA0Lhf0L3QvtC10LzQstGA0Lhf0LTQtdC60LXQvNCy0YDQuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0Y/QvdGAX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/RjtC90Lhf0Y7Qu9C4X9Cw0LLQs1/RgdC10L9f0L7QutGCX9C90L7QtV/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9C90LXQtNC10LvRj1/Qv9C+0L3QtdC00LXQu9C90LjQul/QstGC0L7RgNC90LjQul/RgdGA0Y/QtNCwX9GH0LXRgtCy0YrRgNGC0YrQul/Qv9C10YLRitC6X9GB0YrQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0Y9f0YfQtdGCX9C/0LXRgl/RgdGK0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb0JTQvdC10YEg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Cj0YLRgNC1INCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JLRh9C10YDQsCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQuNC30LzQuNC90LDQu9Cw0YLQsF0gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0LjQt9C80LjQvdCw0LvQuNGPXSBkZGRkIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0YHQu9C10LQgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfQv9GA0LXQtNC4ICVzJyxcbiAgICAgICAgICAgIHMgOiAn0L3Rj9C60L7Qu9C60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgbSA6ICfQvNC40L3Rg9GC0LAnLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgtC4JyxcbiAgICAgICAgICAgIGggOiAn0YfQsNGBJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGH0LDRgdCwJyxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC00L3QuCcsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdC10YYnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0LzQtdGB0LXRhtCwJyxcbiAgICAgICAgICAgIHkgOiAn0LPQvtC00LjQvdCwJyxcbiAgICAgICAgICAgIHl5IDogJyVkINCz0L7QtNC40L3QuCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGxhc3QyRGlnaXRzID0gbnVtYmVyICUgMTAwO1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10LInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA+IDEwICYmIGxhc3QyRGlnaXRzIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDcgfHwgbGFzdERpZ2l0ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LzQuCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBiZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGJtID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm0nLCB7XG4gICAgICAgIG1vbnRocyA6ICdaYW53dXlla2Fsb19GZXd1cnV5ZWthbG9fTWFyaXNpa2Fsb19Bd2lyaWxpa2Fsb19NyZtrYWxvX1p1d8mbbmthbG9fWnVsdXlla2Fsb19VdGlrYWxvX1PJm3RhbmJ1cnVrYWxvX8mUa3V0yZRidXJ1a2Fsb19Ob3dhbmJ1cnVrYWxvX0Rlc2FuYnVydWthbG8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1phbl9GZXdfTWFyX0F3aV9NyZtfWnV3X1p1bF9VdGlfU8mbdF/JlGt1X05vd19EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0thcmlfTnTJm27Jm25fVGFyYXRhX0FyYWJhX0FsYW1pc2FfSnVtYV9TaWJpcmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnS2FyX050yZtfVGFyX0FyYV9BbGFfSnVtX1NpYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnS2FfTnRfVGFfQXJfQWxfSnVfU2knLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZIFtsyZtyyZtdIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0JpIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbU2luaSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2RvbiBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0t1bnUgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFt0yZttyZtuZW4gbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMga8mUbsmUJyxcbiAgICAgICAgICAgIHBhc3QgOiAnYSBiyZsgJXMgYsmUJyxcbiAgICAgICAgICAgIHMgOiAnc2FuZ2EgZGFtYSBkYW1hJyxcbiAgICAgICAgICAgIHNzIDogJ3Nla29uZGkgJWQnLFxuICAgICAgICAgICAgbSA6ICdtaW5pdGkga2VsZW4nLFxuICAgICAgICAgICAgbW0gOiAnbWluaXRpICVkJyxcbiAgICAgICAgICAgIGggOiAnbMmbcsmbIGtlbGVuJyxcbiAgICAgICAgICAgIGhoIDogJ2zJm3LJmyAlZCcsXG4gICAgICAgICAgICBkIDogJ3RpbGUga2VsZW4nLFxuICAgICAgICAgICAgZGQgOiAndGlsZSAlZCcsXG4gICAgICAgICAgICBNIDogJ2thbG8ga2VsZW4nLFxuICAgICAgICAgICAgTU0gOiAna2FsbyAlZCcsXG4gICAgICAgICAgICB5IDogJ3NhbiBrZWxlbicsXG4gICAgICAgICAgICB5eSA6ICdzYW4gJWQnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJtO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgp6cnLFxuICAgICAgICAnMic6ICfgp6gnLFxuICAgICAgICAnMyc6ICfgp6knLFxuICAgICAgICAnNCc6ICfgp6onLFxuICAgICAgICAnNSc6ICfgp6snLFxuICAgICAgICAnNic6ICfgp6wnLFxuICAgICAgICAnNyc6ICfgp60nLFxuICAgICAgICAnOCc6ICfgp64nLFxuICAgICAgICAnOSc6ICfgp68nLFxuICAgICAgICAnMCc6ICfgp6YnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgp6cnOiAnMScsXG4gICAgICAgICfgp6gnOiAnMicsXG4gICAgICAgICfgp6knOiAnMycsXG4gICAgICAgICfgp6onOiAnNCcsXG4gICAgICAgICfgp6snOiAnNScsXG4gICAgICAgICfgp6wnOiAnNicsXG4gICAgICAgICfgp60nOiAnNycsXG4gICAgICAgICfgp64nOiAnOCcsXG4gICAgICAgICfgp68nOiAnOScsXG4gICAgICAgICfgp6YnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGJuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYm4nLCB7XG4gICAgICAgIG1vbnRocyA6ICfgppzgpr7gpqjgp4Hgp5/gpr7gprDgp4Bf4Kar4KeH4Kas4KeN4Kaw4KeB4Kef4Ka+4Kaw4Ka/X+CmruCmvuCmsOCnjeCmml/gpo/gpqrgp43gprDgpr/gprJf4Kau4KeHX+CmnOCngeCmqF/gppzgp4HgprLgpr7gpodf4KaG4KaX4Ka44KeN4KafX+CmuOCnh+CmquCnjeCmn+Cnh+CmruCnjeCmrOCmsF/gpoXgppXgp43gpp/gp4vgpqzgprBf4Kao4Kat4KeH4Kau4KeN4Kas4KawX+CmoeCmv+CmuOCnh+CmruCnjeCmrOCmsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4Kac4Ka+4Kao4KeBX+Cmq+Cnh+CmrF/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4KawX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4KayX+CmhuCml1/gprjgp4fgpqrgp43gpp9f4KaF4KaV4KeN4Kaf4KeLX+CmqOCmreCnh1/gpqHgpr/gprjgp4cnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+CmsOCmrOCmv+CmrOCmvuCmsF/gprjgp4vgpq7gpqzgpr7gprBf4Kau4KaZ4KeN4KaX4Kay4Kas4Ka+4KawX+CmrOCngeCmp+CmrOCmvuCmsF/gpqzgp4Pgprngprjgp43gpqrgpqTgpr/gpqzgpr7gprBf4Ka24KeB4KaV4KeN4Kaw4Kas4Ka+4KawX+CmtuCmqOCmv+CmrOCmvuCmsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml+Cmsl/gpqzgp4Hgpqdf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/X+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CmsOCmrOCmv1/gprjgp4vgpq5f4Kau4KaZ4KeN4KaXX+CmrOCngeCmp1/gpqzgp4PgprngpoNf4Ka24KeB4KaV4KeN4KawX+CmtuCmqOCmvycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4Ka44Kau4KefJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCmuOCmruCnnydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpobgppxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CmhuCml+CmvuCmruCngOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KaX4Kak4KaV4Ka+4KayXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4KaX4KakXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4Kaq4Kaw4KeHJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KaG4KaX4KeHJyxcbiAgICAgICAgICAgIHMgOiAn4KaV4Kef4KeH4KaVIOCmuOCnh+CmleCnh+CmqOCnjeCmoScsXG4gICAgICAgICAgICBzcyA6ICclZCDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgbSA6ICfgpo/gppUg4Kau4Ka/4Kao4Ka/4KafJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBoIDogJ+Cmj+CmlSDgppjgpqjgp43gpp/gpr4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGQgOiAn4KaP4KaVIOCmpuCmv+CmqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgTSA6ICfgpo/gppUg4Kau4Ka+4Ka4JyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCmruCmvuCmuCcsXG4gICAgICAgICAgICB5IDogJ+Cmj+CmlSDgpqzgppvgprAnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Kas4Kab4KawJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Ken4Keo4Kep4Keq4Ker4Kes4Ket4Keu4Kev4KemXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kaw4Ka+4KakfOCmuOCmleCmvuCmsnzgpqbgp4Hgpqrgp4HgprB84Kas4Ka/4KaV4Ka+4KayfOCmsOCmvuCmpC8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4Kaw4Ka+4KakJyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgICAgIChtZXJpZGllbSA9PT0gJ+CmpuCngeCmquCngeCmsCcgJiYgaG91ciA8IDUpIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4Kas4Ka/4KaV4Ka+4KayJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprjgppXgpr7gprInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmpuCngeCmquCngeCmsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kas4Ka/4KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgprDgpr7gpqQnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBibjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4LyhJyxcbiAgICAgICAgJzInOiAn4LyiJyxcbiAgICAgICAgJzMnOiAn4LyjJyxcbiAgICAgICAgJzQnOiAn4LykJyxcbiAgICAgICAgJzUnOiAn4LylJyxcbiAgICAgICAgJzYnOiAn4LymJyxcbiAgICAgICAgJzcnOiAn4LynJyxcbiAgICAgICAgJzgnOiAn4LyoJyxcbiAgICAgICAgJzknOiAn4LypJyxcbiAgICAgICAgJzAnOiAn4LygJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4LyhJzogJzEnLFxuICAgICAgICAn4LyiJzogJzInLFxuICAgICAgICAn4LyjJzogJzMnLFxuICAgICAgICAn4LykJzogJzQnLFxuICAgICAgICAn4LylJzogJzUnLFxuICAgICAgICAn4LymJzogJzYnLFxuICAgICAgICAn4LynJzogJzcnLFxuICAgICAgICAn4LyoJzogJzgnLFxuICAgICAgICAn4LypJzogJzknLFxuICAgICAgICAn4LygJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBibyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JvJywge1xuICAgICAgICBtb250aHMgOiAn4L2f4L6z4LyL4L2W4LyL4L2R4L2E4LyL4L2U4L28X+C9n+C+s+C8i+C9luC8i+C9guC9ieC9suC9puC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvYLgvabgvbTgvZjgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2e4L2y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9o+C+lOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvrLgvbTgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2R4L204L2T4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9ouC+kuC+seC9keC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZHgvYLgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9heC9suC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYngvbLgvabgvIvgvZQnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C9n+C+s+C8i+C9luC8i+C9keC9hOC8i+C9lOC9vF/gvZ/gvrPgvIvgvZbgvIvgvYLgvYngvbLgvabgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2C4L2m4L204L2Y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9nuC9suC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvaPgvpTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L6y4L204L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9keC9tOC9k+C8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvaLgvpLgvrHgvZHgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L2C4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYXgvbLgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2J4L2y4L2m4LyL4L2UJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgvYLgvZ/gvaDgvIvgvYngvbLgvIvgvZjgvItf4L2C4L2f4L2g4LyL4L2f4L6z4LyL4L2W4LyLX+C9guC9n+C9oOC8i+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvYLgvZ/gvaDgvIvgvaPgvrfgvYLgvIvgvZTgvItf4L2C4L2f4L2g4LyL4L2V4L204L2i4LyL4L2W4L20X+C9guC9n+C9oOC8i+C9lOC8i+C9puC9hOC9puC8i1/gvYLgvZ/gvaDgvIvgvabgvqTgvbrgvZPgvIvgvZTgvIsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgvYngvbLgvIvgvZjgvItf4L2f4L6z4LyL4L2W4LyLX+C9mOC9suC9guC8i+C9keC9mOC9ouC8i1/gvaPgvrfgvYLgvIvgvZTgvItf4L2V4L204L2i4LyL4L2W4L20X+C9lOC8i+C9puC9hOC9puC8i1/gvabgvqTgvbrgvZPgvIvgvZTgvIsnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgvZHgvbLgvIvgvaLgvbLgvYRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+C9puC9hOC8i+C9ieC9suC9k10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9ouC+l+C9uuC9puC8i+C9mF0sIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C9geC8i+C9puC9hF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C9luC9keC9tOC9k+C8i+C9leC+suC9guC8i+C9mOC9kOC9oOC8i+C9mF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOC9o+C8iycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOC9puC+lOC9k+C8i+C9oycsXG4gICAgICAgICAgICBzIDogJ+C9o+C9mOC8i+C9puC9hCcsXG4gICAgICAgICAgICBzcyA6ICclZCDgvabgvpDgvaLgvIvgvYbgvI0nLFxuICAgICAgICAgICAgbSA6ICfgvabgvpDgvaLgvIvgvZjgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgbW0gOiAnJWQg4L2m4L6Q4L2i4LyL4L2YJyxcbiAgICAgICAgICAgIGggOiAn4L2G4L204LyL4L2a4L284L2R4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOC9huC9tOC8i+C9muC9vOC9kScsXG4gICAgICAgICAgICBkIDogJ+C9ieC9suC9k+C8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBkZCA6ICclZCDgvYngvbLgvZPgvIsnLFxuICAgICAgICAgICAgTSA6ICfgvZ/gvrPgvIvgvZbgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgTU0gOiAnJWQg4L2f4L6z4LyL4L2WJyxcbiAgICAgICAgICAgIHkgOiAn4L2j4L284LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOC9o+C9vCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+C8oeC8ouC8o+C8pOC8peC8puC8p+C8qOC8qeC8oF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C9mOC9muC9k+C8i+C9mOC9vHzgvZ7gvbzgvYLgvabgvIvgvYDgvaZ84L2J4L2y4L2T4LyL4L2C4L204L2EfOC9keC9guC9vOC9hOC8i+C9keC9gnzgvZjgvZrgvZPgvIvgvZjgvbwvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChtZXJpZGllbSA9PT0gJ+C9mOC9muC9k+C8i+C9mOC9vCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnICYmIGhvdXIgPCA1KSB8fFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C9keC9guC9vOC9hOC8i+C9keC9gicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2e4L284L2C4L2m4LyL4L2A4L2mJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvYngvbLgvZPgvIvgvYLgvbTgvYQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9keC9guC9vOC9hOC8i+C9keC9gic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2Y4L2a4L2T4LyL4L2Y4L28JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ21tJzogJ211bnV0ZW5uJyxcbiAgICAgICAgICAgICdNTSc6ICdtaXonLFxuICAgICAgICAgICAgJ2RkJzogJ2RldmV6aCdcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIG11dGF0aW9uKGZvcm1hdFtrZXldLCBudW1iZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFycyhudW1iZXIpIHtcbiAgICAgICAgc3dpdGNoIChsYXN0TnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyBibG9heic7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnIHZsb2F6JztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBsYXN0TnVtYmVyKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID4gOSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3ROdW1iZXIobnVtYmVyICUgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG11dGF0aW9uKHRleHQsIG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICByZXR1cm4gc29mdE11dGF0aW9uKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzb2Z0TXV0YXRpb24odGV4dCkge1xuICAgICAgICB2YXIgbXV0YXRpb25UYWJsZSA9IHtcbiAgICAgICAgICAgICdtJzogJ3YnLFxuICAgICAgICAgICAgJ2InOiAndicsXG4gICAgICAgICAgICAnZCc6ICd6J1xuICAgICAgICB9O1xuICAgICAgICBpZiAobXV0YXRpb25UYWJsZVt0ZXh0LmNoYXJBdCgwKV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldICsgdGV4dC5zdWJzdHJpbmcoMSk7XG4gICAgfVxuXG4gICAgdmFyIGJyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnInLCB7XG4gICAgICAgIG1vbnRocyA6ICdHZW52ZXJfQ1xcJ2h3ZXZyZXJfTWV1cnpoX0VicmVsX01hZV9NZXpoZXZlbl9Hb3VlcmVfRW9zdF9Hd2VuZ29sb19IZXJlX0R1X0tlcnp1Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdHZW5fQ1xcJ2h3ZV9NZXVfRWJyX01hZV9FdmVfR291X0Vvc19Hd2VfSGVyX0R1X0tlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VsX0x1bl9NZXVyemhfTWVyY1xcJ2hlcl9ZYW91X0d3ZW5lcl9TYWRvcm4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VsX0x1bl9NZXVfTWVyX1lhb19Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9MdV9NZV9NZXJfWWFfR3dfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaFtlXW1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2hbZV1tbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFthIHZpel0gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFthIHZpel0gTU1NTSBZWVlZIGhbZV1tbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tIaXppdiBkYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbV2FyY1xcJ2hvYXpoIGRhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbRGVjXFwnaCBkYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbcGFzZXQgZGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdhLWJlbm4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBcXCd6bycsXG4gICAgICAgICAgICBzIDogJ3VuIG5lYmV1ZCBzZWdvbmRlbm5vw7knLFxuICAgICAgICAgICAgc3MgOiAnJWQgZWlsZW5uJyxcbiAgICAgICAgICAgIG0gOiAndXIgdnVudXRlbm4nLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBoIDogJ3VuIGV1cicsXG4gICAgICAgICAgICBoaCA6ICclZCBldXInLFxuICAgICAgICAgICAgZCA6ICd1biBkZXZlemgnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICBNIDogJ3VyIG1peicsXG4gICAgICAgICAgICBNTSA6IHJlbGF0aXZlVGltZVdpdGhNdXRhdGlvbixcbiAgICAgICAgICAgIHkgOiAndXIgYmxvYXonLFxuICAgICAgICAgICAgeXkgOiBzcGVjaWFsTXV0YXRpb25Gb3JZZWFyc1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oYcOxfHZldCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IChudW1iZXIgPT09IDEpID8gJ2HDsScgOiAndmV0JztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYnMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdicycsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgIDogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5ICA6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzICAgICAgOiAncGFyIHNla3VuZGknLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgICAgICBkZCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXkgICAgIDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBjYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NhJywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAnZ2VuZXJfZmVicmVyX21hcsOnX2FicmlsX21haWdfanVueV9qdWxpb2xfYWdvc3Rfc2V0ZW1icmVfb2N0dWJyZV9ub3ZlbWJyZV9kZXNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ2RlIGdlbmVyX2RlIGZlYnJlcl9kZSBtYXLDp19kXFwnYWJyaWxfZGUgbWFpZ19kZSBqdW55X2RlIGp1bGlvbF9kXFwnYWdvc3RfZGUgc2V0ZW1icmVfZFxcJ29jdHVicmVfZGUgbm92ZW1icmVfZGUgZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXHMpK01NTU0vXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2dlbi5fZmVici5fbWFyw6dfYWJyLl9tYWlnX2p1bnlfanVsLl9hZy5fc2V0Ll9vY3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpdW1lbmdlX2RpbGx1bnNfZGltYXJ0c19kaW1lY3Jlc19kaWpvdXNfZGl2ZW5kcmVzX2Rpc3NhYnRlJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RnLl9kbC5fZHQuX2RjLl9kai5fZHYuX2RzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGdfZGxfZHRfZGNfZGpfZHZfZHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBsbCA6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gW2RlXSBZWVlZIFthIGxlc10gSDptbScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSwgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdkZGQgRCBNTU0gWVlZWSwgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F2dWkgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2RlbcOgIGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYWhpciBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNzYXQgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZFxcJ2FxdcOtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnZmEgJXMnLFxuICAgICAgICAgICAgcyA6ICd1bnMgc2Vnb25zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ29ucycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0cycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmVzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZGlhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRpZXMnLFxuICAgICAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzb3MnLFxuICAgICAgICAgICAgeSA6ICd1biBhbnknLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW55cydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHJ8bnx0fMOofGEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IChudW1iZXIgPT09IDEpID8gJ3InIDpcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSAyKSA/ICduJyA6XG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMykgPyAncicgOlxuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDQpID8gJ3QnIDogJ8OoJztcbiAgICAgICAgICAgIGlmIChwZXJpb2QgPT09ICd3JyB8fCBwZXJpb2QgPT09ICdXJykge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9ICdhJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gJ2xlZGVuX8O6bm9yX2LFmWV6ZW5fZHViZW5fa3bEm3Rlbl/EjWVydmVuX8SNZXJ2ZW5lY19zcnBlbl96w6HFmcOtX8WZw61qZW5fbGlzdG9wYWRfcHJvc2luZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2xlZF/Dum5vX2LFmWVfZHViX2t2xJtfxI12bl/EjXZjX3NycF96w6HFmV/FmcOtal9saXNfcHJvJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9ebGVkL2ksIC9ew7puby9pLCAvXmLFmWUvaSwgL15kdWIvaSwgL15rdsSbL2ksIC9eKMSNdm58xI1lcnZlbiR8xI1lcnZuYSkvaSwgL14oxI12Y3zEjWVydmVuZWN8xI1lcnZlbmNlKS9pLCAvXnNycC9pLCAvXnrDocWZL2ksIC9exZnDrWovaSwgL15saXMvaSwgL15wcm8vaV07XG4gICAgLy8gTk9URTogJ8SNZXJ2ZW4nIGlzIHN1YnN0cmluZyBvZiAnxI1lcnZlbmVjJzsgdGhlcmVmb3JlICfEjWVydmVuZWMnIG11c3QgcHJlY2VkZSAnxI1lcnZlbicgaW4gdGhlIHJlZ2V4IHRvIGJlIGZ1bGx5IG1hdGNoZWQuXG4gICAgLy8gT3RoZXJ3aXNlIHBhcnNlciBtYXRjaGVzICcxLiDEjWVydmVuZWMnIGFzICcxLiDEjWVydmVuJyArICdlYycuXG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14obGVkZW58w7pub3J8YsWZZXplbnxkdWJlbnxrdsSbdGVufMSNZXJ2ZW5lY3zEjWVydmVuY2V8xI1lcnZlbnzEjWVydm5hfHNycGVufHrDocWZw618xZnDrWplbnxsaXN0b3BhZHxwcm9zaW5lY3xsZWR8w7pub3xixZllfGR1YnxrdsSbfMSNdm58xI12Y3xzcnB8esOhxZl8xZnDrWp8bGlzfHBybykvaTtcblxuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiAobiA+IDEpICYmIChuIDwgNSkgJiYgKH5+KG4gLyAxMCkgIT09IDEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzogIC8vIGEgZmV3IHNlY29uZHMgLyBpbiBhIGZldyBzZWNvbmRzIC8gYSBmZXcgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3DDoXIgc2VrdW5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6IC8vIDkgc2Vjb25kcyAvIGluIDkgc2Vjb25kcyAvIDkgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla3VuZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2VrdW5kYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzogIC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogKGlzRnV0dXJlID8gJ21pbnV0dScgOiAnbWludXRvdScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW51dHknIDogJ21pbnV0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6ICAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnaG9kaW5hJyA6IChpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2RpbicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnaG9kaW5hbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOiAgLy8gYSBkYXkgLyBpbiBhIGRheSAvIGEgZGF5IGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnZGVuJyA6ICdkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG55JyA6ICdkbsOtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkbnknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ00nOiAgLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnbcSbc8OtYycgOiAnbcSbc8OtY2VtJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzogLy8gOSBtb250aHMgLyBpbiA5IG1vbnRocyAvIDkgbW9udGhzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbcSbc8OtY2UnIDogJ23Em3PDrWPFrycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcSbc8OtY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOiAgLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAncm9rJyA6ICdyb2tlbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Jva3knIDogJ2xldCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbGV0eSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3MnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleCA6IG1vbnRoc1JlZ2V4LFxuICAgICAgICAvLyBOT1RFOiAnxI1lcnZlbicgaXMgc3Vic3RyaW5nIG9mICfEjWVydmVuZWMnOyB0aGVyZWZvcmUgJ8SNZXJ2ZW5lYycgbXVzdCBwcmVjZWRlICfEjWVydmVuJyBpbiB0aGUgcmVnZXggdG8gYmUgZnVsbHkgbWF0Y2hlZC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIHBhcnNlciBtYXRjaGVzICcxLiDEjWVydmVuZWMnIGFzICcxLiDEjWVydmVuJyArICdlYycuXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4IDogL14obGVkZW58bGVkbmF8w7pub3JhfMO6bm9yfGLFmWV6ZW58YsWZZXpuYXxkdWJlbnxkdWJuYXxrdsSbdGVufGt2xJt0bmF8xI1lcnZlbmVjfMSNZXJ2ZW5jZXzEjWVydmVufMSNZXJ2bmF8c3JwZW58c3JwbmF8esOhxZnDrXzFmcOtamVufMWZw61qbmF8bGlzdG9wYWR1fGxpc3RvcGFkfHByb3NpbmVjfHByb3NpbmNlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4IDogL14obGVkfMO6bm98YsWZZXxkdWJ8a3bEm3zEjXZufMSNdmN8c3JwfHrDocWZfMWZw61qfGxpc3xwcm8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ25lZMSbbGVfcG9uZMSbbMOtX8O6dGVyw71fc3TFmWVkYV/EjXR2cnRla19ww6F0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25lX3BvX8O6dF9zdF/EjXRfcMOhX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb1/DunRfc3RfxI10X3DDoV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC4gTS4gWVlZWSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RuZXMgdl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t6w610cmEgdl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZlIHN0xZllZHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSDEjXR2cnRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgcMOhdGVrIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzb2JvdHUgdl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYSB2XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IG5lZMSbbGkgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw6ldIGRkZGQgW3ZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwxZllZCAlcycsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3M7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBjdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2N2Jywge1xuICAgICAgICBtb250aHMgOiAn0LrTkdGA0LvQsNGHX9C90LDRgNOR0YFf0L/Rg9GIX9Cw0LrQsF/QvNCw0Llf0qvTl9GA0YLQvNC1X9GD0YLTkV/Sq9GD0YDQu9CwX9Cw0LLTkdC9X9GO0L/QsF/Rh9Oz0Lpf0YDQsNGI0YLQsNCyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfQutOR0YBf0L3QsNGAX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgF/Rg9GC05Ff0qvRg9GAX9Cw0LLQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn0LLRi9GA0YHQsNGA0L3QuNC60YPQvV/RgtGD0L3RgtC40LrRg9C9X9GL0YLQu9Cw0YDQuNC60YPQvV/RjtC90LrRg9C9X9C605fSq9C90LXRgNC90LjQutGD0L1f0Y3RgNC90LXQutGD0L1f0YjTkdC80LDRgtC60YPQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQstGL0YBf0YLRg9C9X9GL0YLQu1/RjtC9X9C605fSq1/RjdGA0L1f0YjTkdC8Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQstGAX9GC0L1f0YvRgl/RjtC9X9C60qtf0Y3RgF/RiNC8Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEwgOiAnWVlZWSBb0qvRg9C70YXQuF0gTU1NTSBb0YPQudOR0YXTl9C9XSBEWy3QvNOX0YjTl10nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFlZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddLCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Cf0LDRj9C9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0KvRgNCw0L1dIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vTltC90LXRgF0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vSqtC40YLQtdGBXSBkZGRkIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb0JjRgNGC0L3Tl10gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgICAgICAgICAgIHZhciBhZmZpeCA9IC/RgdC10YXQtdGCJC9pLmV4ZWMob3V0cHV0KSA/ICfRgNC10L0nIDogL9Kr0YPQuyQvaS5leGVjKG91dHB1dCkgPyAn0YLQsNC9JyA6ICfRgNCw0L0nO1xuICAgICAgICAgICAgICAgIHJldHVybiBvdXRwdXQgKyBhZmZpeDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0IDogJyVzINC60LDRj9C70LvQsCcsXG4gICAgICAgICAgICBzIDogJ9C/05fRgC3QuNC6INKr0LXQutC60YPQvdGCJyxcbiAgICAgICAgICAgIHNzIDogJyVkINKr0LXQutC60YPQvdGCJyxcbiAgICAgICAgICAgIG0gOiAn0L/Tl9GAINC80LjQvdGD0YInLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBoIDogJ9C/05fRgCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGB0LXRhdC10YInLFxuICAgICAgICAgICAgZCA6ICfQv9OX0YAg0LrRg9C9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNIDogJ9C/05fRgCDRg9C505HRhScsXG4gICAgICAgICAgICBNTSA6ICclZCDRg9C505HRhScsXG4gICAgICAgICAgICB5IDogJ9C/05fRgCDSq9GD0LsnLFxuICAgICAgICAgICAgeXkgOiAnJWQg0qvRg9C7J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0t0LzTl9GILyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC3QvNOX0YgnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGN5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnY3knLCB7XG4gICAgICAgIG1vbnRoczogJ0lvbmF3cl9DaHdlZnJvcl9NYXdydGhfRWJyaWxsX01haV9NZWhlZmluX0dvcmZmZW5uYWZfQXdzdF9NZWRpX0h5ZHJlZl9UYWNod2VkZF9SaGFnZnlyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ0lvbl9DaHdlX01hd19FYnJfTWFpX01laF9Hb3JfQXdzX01lZF9IeWRfVGFjaF9SaGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ0R5ZGQgU3VsX0R5ZGQgTGx1bl9EeWRkIE1hd3J0aF9EeWRkIE1lcmNoZXJfRHlkZCBJYXVfRHlkZCBHd2VuZXJfRHlkZCBTYWR3cm4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTdWxfTGx1bl9NYXdfTWVyX0lhdV9Hd2VfU2FkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1N1X0xsX01hX01lX0lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICAvLyB0aW1lIGZvcm1hdHMgYXJlIHRoZSBzYW1lIGFzIGVuLWdiXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGVkZGl3IGFtXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW1lmb3J5IGFtXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FtXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0Rkb2UgYW1dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZGl3ZXRoYWYgYW1dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdtZXduICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyB5biDDtGwnLFxuICAgICAgICAgICAgczogJ3ljaHlkaWcgZWlsaWFkYXUnLFxuICAgICAgICAgICAgc3M6ICclZCBlaWxpYWQnLFxuICAgICAgICAgICAgbTogJ211bnVkJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbXVudWQnLFxuICAgICAgICAgICAgaDogJ2F3cicsXG4gICAgICAgICAgICBoaDogJyVkIGF3cicsXG4gICAgICAgICAgICBkOiAnZGl3cm5vZCcsXG4gICAgICAgICAgICBkZDogJyVkIGRpd3Jub2QnLFxuICAgICAgICAgICAgTTogJ21pcycsXG4gICAgICAgICAgICBNTTogJyVkIG1pcycsXG4gICAgICAgICAgICB5OiAnYmx3eWRkeW4nLFxuICAgICAgICAgICAgeXk6ICclZCBmbHluZWRkJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZmVkfGFpbnxhZnxpbHx5ZGR8ZWR8ZWcpLyxcbiAgICAgICAgLy8gdHJhZGl0aW9uYWwgb3JkaW5hbCBudW1iZXJzIGFib3ZlIDMxIGFyZSBub3QgY29tbW9ubHkgdXNlZCBpbiBjb2xsb3F1aWFsIFdlbHNoXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICcnLFxuICAgICAgICAgICAgICAgIGxvb2t1cCA9IFtcbiAgICAgICAgICAgICAgICAgICAgJycsICdhZicsICdpbCcsICd5ZGQnLCAneWRkJywgJ2VkJywgJ2VkJywgJ2VkJywgJ2ZlZCcsICdmZWQnLCAnZmVkJywgLy8gMWFmIHRvIDEwZmVkXG4gICAgICAgICAgICAgICAgICAgICdlZycsICdmZWQnLCAnZWcnLCAnZWcnLCAnZmVkJywgJ2VnJywgJ2VnJywgJ2ZlZCcsICdlZycsICdmZWQnIC8vIDExZWcgdG8gMjBmZWRcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKGIgPiAyMCkge1xuICAgICAgICAgICAgICAgIGlmIChiID09PSA0MCB8fCBiID09PSA1MCB8fCBiID09PSA2MCB8fCBiID09PSA4MCB8fCBiID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2ZlZCc7IC8vIG5vdCAzMGFpbiwgNzBhaW4gb3IgOTBhaW5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYWluJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGIgPiAwKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gbG9va3VwW2JdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBkYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RhJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFydHNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzw7huZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7hyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDuG5fbWFuX3Rpcl9vbnNfdG9yX2ZyZV9sw7hyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIFtkLl0gRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW2kgZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbaSBtb3JnZW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdww6UgZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tpIGfDpXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbaV0gZGRkZFtzIGtsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgc2lkZW4nLFxuICAgICAgICAgICAgcyA6ICdmw6Ugc2VrdW5kZXInLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbSA6ICdldCBtaW51dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHRlcicsXG4gICAgICAgICAgICBoIDogJ2VuIHRpbWUnLFxuICAgICAgICAgICAgaGggOiAnJWQgdGltZXInLFxuICAgICAgICAgICAgZCA6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZScsXG4gICAgICAgICAgICBNIDogJ2VuIG3DpW5lZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6VuZWRlcicsXG4gICAgICAgICAgICB5IDogJ2V0IMOlcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGE7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICAnZCc6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICAnTSc6IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyX0ZlYnJ1YXJfTcOkcnpfQXByaWxfTWFpX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ20nOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgJ2gnOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgJ00nOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICAneSc6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGVBdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2RlLWF0Jywge1xuICAgICAgICBtb250aHMgOiAnSsOkbm5lcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKw6RuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTby5fTW8uX0RpLl9NaS5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGV1dGUgdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnZXN0ZXJuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tsZXR6dGVuXSBkZGRkIFt1bV0gTFQgW1Vocl0nXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3ZvciAlcycsXG4gICAgICAgICAgICBzIDogJ2VpbiBwYWFyIFNla3VuZGVuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIFNla3VuZGVuJyxcbiAgICAgICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gOiAnJWQgTWludXRlbicsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogJyVkIFN0dW5kZW4nLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVBdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtJzogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgICdkJzogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgJ2RkJzogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgJ3knOiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1jaCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvX01vX0RpX01pX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICfelt6s3oLeqt6H3qbeg96pJyxcbiAgICAgICAgJ96K3qzehN6w3oPeqt6H3qbeg96pJyxcbiAgICAgICAgJ96J3qfeg96o3pfeqicsXG4gICAgICAgICfeh96t3pXesN6D3qnejd6qJyxcbiAgICAgICAgJ96J3q0nLFxuICAgICAgICAn3pbeq96C3rAnLFxuICAgICAgICAn3pbeqt6N3qbeh96oJyxcbiAgICAgICAgJ96H3q/ejt6m3pDesN6T3qonLFxuICAgICAgICAn3pDerN6V3rDek96s3onesN6E3qbeg96qJyxcbiAgICAgICAgJ96H3q7eht6w3pPer96E3qbeg96qJyxcbiAgICAgICAgJ96C3q7eiN6s3onesN6E3qbeg96qJyxcbiAgICAgICAgJ96R3qjekN6s3onesN6E3qbeg96qJ1xuICAgIF0sIHdlZWtkYXlzID0gW1xuICAgICAgICAn3ofep96L3qjeh96w3ozepicsXG4gICAgICAgICfegN6v3onepicsXG4gICAgICAgICfeh96m3oLesN6O3qfeg96mJyxcbiAgICAgICAgJ96E3qrei96mJyxcbiAgICAgICAgJ96E3qreg96n3pDesN6K3qbejN6oJyxcbiAgICAgICAgJ96A3qreht6q3oPeqicsXG4gICAgICAgICfegN6u3oLeqN6A3qjeg96qJ1xuICAgIF07XG5cbiAgICB2YXIgZHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkdicsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfeh96n3oveqF/egN6v3onepl/eh96m3oLesF/ehN6q3ovepl/ehN6q3oPep1/egN6q3obeql/egN6u3oLeqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG5cbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QvTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/eid6GfN6J3oovLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ96J3oonID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfeid6GJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfeid6KJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1veid6o3ofept6L3qpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW96J3qfei96m3onep10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1veh96o3ofesN6U3qxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1veit6n3ofeqN6M3qreiN6oXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfejN6s3oPerd6O3qbeh96oICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn3obeqt6D3qjegt6wICVzJyxcbiAgICAgICAgICAgIHMgOiAn3pDeqN6G3qregt6w3ozeqt6G3q7ehd6s3ofesCcsXG4gICAgICAgICAgICBzcyA6ICdkJSDekN6o3obeqt6C3rDejN6qJyxcbiAgICAgICAgICAgIG0gOiAn3oneqN6C3qjek96s3ofesCcsXG4gICAgICAgICAgICBtbSA6ICfeid6o3oLeqN6T3qogJWQnLFxuICAgICAgICAgICAgaCA6ICfejt6m3pHeqN6H3qjeg96s3ofesCcsXG4gICAgICAgICAgICBoaCA6ICfejt6m3pHeqN6H3qjeg96qICVkJyxcbiAgICAgICAgICAgIGQgOiAn3oveqt6I3qbegN6s3ofesCcsXG4gICAgICAgICAgICBkZCA6ICfei96q3ojept6Q3rAgJWQnLFxuICAgICAgICAgICAgTSA6ICfeid6m3oDerN6H3rAnLFxuICAgICAgICAgICAgTU0gOiAn3onept6Q3rAgJWQnLFxuICAgICAgICAgICAgeSA6ICfeh96m3oDept6D3qzeh96wJyxcbiAgICAgICAgICAgIHl5IDogJ96H3qbegN6m3oPeqiAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNywgIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIGlzRnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRnVuY3Rpb24gfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbiAgICB9XG5cblxuICAgIHZhciBlbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VsJywge1xuICAgICAgICBtb250aHNOb21pbmF0aXZlRWwgOiAnzpnOsc69zr/Phc6sz4HOuc6/z4JfzqbOtc6yz4HOv8+FzqzPgc65zr/Pgl/OnM6sz4HPhM65zr/Pgl/Okc+Az4HOr867zrnOv8+CX86czqzOuc6/z4JfzpnOv8+Nzr3Ouc6/z4JfzpnOv8+NzrvOuc6/z4JfzpHPjc6zzr/Phc+Dz4TOv8+CX86jzrXPgM+Ezq3OvM6yz4HOuc6/z4Jfzp/Ous+Ez47Oss+BzrnOv8+CX86dzr/Orc68zrLPgc65zr/Pgl/OlM61zrrOrc68zrLPgc65zr/Pgicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzR2VuaXRpdmVFbCA6ICfOmc6xzr3Ov8+FzrHPgc6vzr/PhV/Ops61zrLPgc6/z4XOsc+Bzq/Ov8+FX86czrHPgc+Ezq/Ov8+FX86Rz4DPgc65zrvOr86/z4VfzpzOsc6Qzr/PhV/Omc6/z4XOvc6vzr/PhV/Omc6/z4XOu86vzr/PhV/Okc+FzrPOv8+Nz4PPhM6/z4VfzqPOtc+Az4TOtc68zrLPgc6vzr/PhV/On866z4TPic6yz4HOr86/z4Vfzp3Ov861zrzOss+Bzq/Ov8+FX86UzrXOus61zrzOss+Bzq/Ov8+FJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHMgOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnICYmIC9ELy50ZXN0KGZvcm1hdC5zdWJzdHJpbmcoMCwgZm9ybWF0LmluZGV4T2YoJ01NTU0nKSkpKSB7IC8vIGlmIHRoZXJlIGlzIGEgZGF5IG51bWJlciBiZWZvcmUgJ01NTU0nXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc0dlbml0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNOb21pbmF0aXZlRWxbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ86ZzrHOvV/Ops61zrJfzpzOsc+BX86Rz4DPgV/OnM6xz4pfzpnOv8+Fzr1fzpnOv8+FzrtfzpHPhc6zX86jzrXPgF/On866z4Rfzp3Ov861X86UzrXOuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnzprPhc+BzrnOsc66zq5fzpTOtc+Fz4TOrc+BzrFfzqTPgc6vz4TOt1/OpM61z4TOrM+Bz4TOt1/OoM6tzrzPgM+EzrdfzqDOsc+BzrHPg866zrXPhc6uX86jzqzOss6yzrHPhM6/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ86az4XPgV/OlM61z4VfzqTPgc65X86kzrXPhF/OoM61zrxfzqDOsc+BX86jzrHOsicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnzprPhV/OlM61X86kz4FfzqTOtV/OoM61X86gzrFfzqPOsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnzrzOvCcgOiAnzpzOnCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ8+AzrwnIDogJ86gzpwnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpWzBdID09PSAnzrwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZSA6IC9bzqDOnF1cXC4/zpw/XFwuPy9pLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhckVsIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbzqPOrs68zrXPgc6xIHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vOkc+Nz4HOuc6/IHt9XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFt7fV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbzqfOuM61z4Ige31dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM6/IM+Az4HOv863zrPOv8+NzrzOtc69zr9dIGRkZGQgW3t9XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vPhM63zr0gz4DPgc6/zrfOs86/z43OvM61zr3Ot10gZGRkZCBbe31dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiBmdW5jdGlvbiAoa2V5LCBtb20pIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhckVsW2tleV0sXG4gICAgICAgICAgICAgICAgaG91cnMgPSBtb20gJiYgbW9tLmhvdXJzKCk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihvdXRwdXQpKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0LmFwcGx5KG1vbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoJ3t9JywgKGhvdXJzICUgMTIgPT09IDEgPyAnz4PPhM63JyA6ICfPg8+EzrnPgicpKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ8+DzrUgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDPgM+BzrnOvScsXG4gICAgICAgICAgICBzIDogJ867zq/Os86xIM60zrXPhc+EzrXPgc+MzrvOtc+Az4TOsScsXG4gICAgICAgICAgICBzcyA6ICclZCDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgbSA6ICfOrc69zrEgzrvOtc+Az4TPjCcsXG4gICAgICAgICAgICBtbSA6ICclZCDOu861z4DPhM6sJyxcbiAgICAgICAgICAgIGggOiAnzrzOr86xIM+Oz4HOsScsXG4gICAgICAgICAgICBoaCA6ICclZCDPjs+BzrXPgicsXG4gICAgICAgICAgICBkIDogJ868zq/OsSDOvM6tz4HOsScsXG4gICAgICAgICAgICBkZCA6ICclZCDOvM6tz4HOtc+CJyxcbiAgICAgICAgICAgIE0gOiAnzq3Ovc6xz4IgzrzOrs69zrHPgicsXG4gICAgICAgICAgICBNTSA6ICclZCDOvM6uzr3Otc+CJyxcbiAgICAgICAgICAgIHkgOiAnzq3Ovc6xz4Igz4fPgc+Mzr3Ov8+CJyxcbiAgICAgICAgICAgIHl5IDogJyVkIM+Hz4HPjM69zrnOsSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9zrcvLFxuICAgICAgICBvcmRpbmFsOiAnJWTOtycsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDRzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5TRyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLVNHJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5TRztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuQXUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1hdScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbkF1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5DYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWNhJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIE1NTU0gRCwgWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbkNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW5HYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VuLWdiJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyeV9GZWJydWFyeV9NYXJjaF9BcHJpbF9NYXlfSnVuZV9KdWx5X0F1Z3VzdF9TZXB0ZW1iZXJfT2N0b2Jlcl9Ob3ZlbWJlcl9EZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bmRheV9Nb25kYXlfVHVlc2RheV9XZWRuZXNkYXlfVGh1cnNkYXlfRnJpZGF5X1NhdHVyZGF5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTW9fVHVfV2VfVGhfRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5HYjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuSWUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1pZScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuSWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1pbCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5JbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuTnogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1ueicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbk56O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbycsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcm9fZmVicnVhcm9fbWFydG9fYXByaWxvX21ham9fanVuaW9fanVsaW9fYcWtZ3VzdG9fc2VwdGVtYnJvX29rdG9icm9fbm92ZW1icm9fZGVjZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hxa1nX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnZGltYW7EiW9fbHVuZG9fbWFyZG9fbWVya3JlZG9fxLVhxa1kb192ZW5kcmVkb19zYWJhdG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZGltX2x1bl9tYXJkX21lcmtfxLVhxa1fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGlfbHVfbWFfbWVfxLVhX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnRFstYSBkZV0gTU1NTSwgWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRFstYSBkZV0gTU1NTSwgWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFtsYV0gRFstYSBkZV0gTU1NTSwgWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL1thcF1cXC50XFwubS9pLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSA9PT0gJ3AnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdwLnQubS4nIDogJ1AuVC5NLic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2EudC5tLicgOiAnQS5ULk0uJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tIb2RpYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tNb3JnYcWtIGplXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtqZV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSGllcmHFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3Bhc2ludGFdIGRkZGQgW2plXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAncG9zdCAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2FudGHFrSAlcycsXG4gICAgICAgICAgICBzIDogJ3Nla3VuZG9qJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZG9qJyxcbiAgICAgICAgICAgIG0gOiAnbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b2onLFxuICAgICAgICAgICAgaCA6ICdob3JvJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcm9qJyxcbiAgICAgICAgICAgIGQgOiAndGFnbycsLy9uZSAnZGl1cm5vJywgxIlhciBlc3RhcyB1eml0YSBwb3IgcHJva3NpbXVtb1xuICAgICAgICAgICAgZGQgOiAnJWQgdGFnb2onLFxuICAgICAgICAgICAgTSA6ICdtb25hdG8nLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9uYXRvaicsXG4gICAgICAgICAgICB5IDogJ2phcm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgamFyb2onXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfWEvLFxuICAgICAgICBvcmRpbmFsIDogJyVkYScsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eZW5lL2ksIC9eZmViL2ksIC9ebWFyL2ksIC9eYWJyL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYWdvL2ksIC9ec2VwL2ksIC9eb2N0L2ksIC9ebm92L2ksIC9eZGljL2ldO1xuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcycsIHtcbiAgICAgICAgbW9udGhzIDogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleCA6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleCA6IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXggOiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNTaG9ydERvdCA9ICdlbmUuX2ZlYi5fbWFyLl9hYnIuX21heS5fanVuLl9qdWwuX2Fnby5fc2VwLl9vY3QuX25vdi5fZGljLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnZW5lX2ZlYl9tYXJfYWJyX21heV9qdW5fanVsX2Fnb19zZXBfb2N0X25vdl9kaWMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgbW9udGhzUGFyc2UgPSBbL15lbmUvaSwgL15mZWIvaSwgL15tYXIvaSwgL15hYnIvaSwgL15tYXkvaSwgL15qdW4vaSwgL15qdWwvaSwgL15hZ28vaSwgL15zZXAvaSwgL15vY3QvaSwgL15ub3YvaSwgL15kaWMvaV07XG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZXxlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaTtcblxuICAgIHZhciBlc0RvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMtZG8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihlbmVcXC4/fGZlYlxcLj98bWFyXFwuP3xhYnJcXC4/fG1heVxcLj98anVuXFwuP3xqdWxcXC4/fGFnb1xcLj98c2VwXFwuP3xvY3RcXC4/fG5vdlxcLj98ZGljXFwuPykvaSxcbiAgICAgICAgbW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5lc19tYXJ0ZXNfbWnDqXJjb2xlc19qdWV2ZXNfdmllcm5lc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX21pw6kuX2p1ZS5fdmllLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWlfanVfdmlfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbaG95IGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDsWFuYSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW2EgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbYXllciBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tlbF0gZGRkZCBbcGFzYWRvIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdlbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2hhY2UgJXMnLFxuICAgICAgICAgICAgcyA6ICd1bm9zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkIDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhw7FvJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGHDsW9zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsIDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlc0RvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eZW5lL2ksIC9eZmViL2ksIC9ebWFyL2ksIC9eYWJyL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYWdvL2ksIC9ec2VwL2ksIC9eb2N0L2ksIC9ebm92L2ksIC9eZGljL2ldO1xuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXNVcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLXVzJywge1xuICAgICAgICBtb250aHMgOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ01NL0REL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNVcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdzJyA6IFsnbcO1bmUgc2VrdW5kaScsICdtw7VuaSBzZWt1bmQnLCAncGFhciBzZWt1bmRpdCddLFxuICAgICAgICAgICAgJ3NzJzogW251bWJlciArICdzZWt1bmRpJywgbnVtYmVyICsgJ3Nla3VuZGl0J10sXG4gICAgICAgICAgICAnbScgOiBbJ8O8aGUgbWludXRpJywgJ8O8a3MgbWludXQnXSxcbiAgICAgICAgICAgICdtbSc6IFtudW1iZXIgKyAnIG1pbnV0aScsIG51bWJlciArICcgbWludXRpdCddLFxuICAgICAgICAgICAgJ2gnIDogWyfDvGhlIHR1bm5pJywgJ3R1bmQgYWVnYScsICfDvGtzIHR1bmQnXSxcbiAgICAgICAgICAgICdoaCc6IFtudW1iZXIgKyAnIHR1bm5pJywgbnVtYmVyICsgJyB0dW5kaSddLFxuICAgICAgICAgICAgJ2QnIDogWyfDvGhlIHDDpGV2YScsICfDvGtzIHDDpGV2J10sXG4gICAgICAgICAgICAnTScgOiBbJ2t1dSBhamEnLCAna3V1IGFlZ2EnLCAnw7xrcyBrdXUnXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIGt1dScsIG51bWJlciArICcga3V1ZCddLFxuICAgICAgICAgICAgJ3knIDogWyfDvGhlIGFhc3RhJywgJ2Fhc3RhJywgJ8O8a3MgYWFzdGEnXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIGFhc3RhJywgbnVtYmVyICsgJyBhYXN0YXQnXVxuICAgICAgICB9O1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdFtrZXldWzJdID8gZm9ybWF0W2tleV1bMl0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBldCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2V0Jywge1xuICAgICAgICBtb250aHMgICAgICAgIDogJ2phYW51YXJfdmVlYnJ1YXJfbcOkcnRzX2FwcmlsbF9tYWlfanV1bmlfanV1bGlfYXVndXN0X3NlcHRlbWJlcl9va3Rvb2Jlcl9ub3ZlbWJlcl9kZXRzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ICAgOiAnamFhbl92ZWVicl9tw6RydHNfYXByX21haV9qdXVuaV9qdXVsaV9hdWdfc2VwdF9va3Rfbm92X2RldHMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzICAgICAgOiAncMO8aGFww6Rldl9lc21hc3DDpGV2X3RlaXNpcMOkZXZfa29sbWFww6Rldl9uZWxqYXDDpGV2X3JlZWRlX2xhdXDDpGV2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1BfRV9UX0tfTl9SX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluICAgOiAnUF9FX1RfS19OX1JfTCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCAgIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCAgICA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMICAgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCAgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbVMOkbmEsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5ICA6ICdbSG9tbWUsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdbSsOkcmdtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tFaWxlLF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0VlbG1pbmVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHDDpHJhc3QnLFxuICAgICAgICAgICAgcGFzdCAgIDogJyVzIHRhZ2FzaScsXG4gICAgICAgICAgICBzICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3MgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG0gICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgICAgIDogJyVkIHDDpGV2YScsXG4gICAgICAgICAgICBNICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBldSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2V1Jywge1xuICAgICAgICBtb250aHMgOiAndXJ0YXJyaWxhX290c2FpbGFfbWFydHhvYV9hcGlyaWxhX21haWF0emFfZWthaW5hX3V6dGFpbGFfYWJ1enR1YV9pcmFpbGFfdXJyaWFfYXphcm9hX2FiZW5kdWEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3VydC5fb3RzLl9tYXIuX2FwaS5fbWFpLl9la2EuX3V6dC5fYWJ1Ll9pcmEuX3Vyci5fYXphLl9hYmUuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnaWdhbmRlYV9hc3RlbGVoZW5hX2FzdGVhcnRlYV9hc3RlYXprZW5hX29zdGVndW5hX29zdGlyYWxhX2xhcnVuYmF0YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdpZy5fYWwuX2FyLl9hei5fb2cuX29sLl9sci4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2lnX2FsX2FyX2F6X29nX29sX2xyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWVtrb10gTU1NTVtyZW5dIERbYV0nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVlba29dIE1NTU1bcmVuXSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgWVlZWVtrb10gTU1NTVtyZW5dIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZLU0tRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZW2tvXSBNTU0gRFthXScsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWVtrb10gTU1NIERbYV0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdkZGQsIFlZWVlba29dIE1NTSBEW2FdIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW2dhdXJdIExUW2V0YW5dJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2JpaGFyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUW2V0YW5dJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW2F0em9dIExUW2V0YW5dJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1thdXJyZWtvXSBkZGRkIExUW2V0YW5dJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBiYXJydScsXG4gICAgICAgICAgICBwYXN0IDogJ2R1ZWxhICVzJyxcbiAgICAgICAgICAgIHMgOiAnc2VndW5kbyBiYXR6dWsnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtIDogJ21pbnV0dSBiYXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR1JyxcbiAgICAgICAgICAgIGggOiAnb3JkdSBiYXQnLFxuICAgICAgICAgICAgaGggOiAnJWQgb3JkdScsXG4gICAgICAgICAgICBkIDogJ2VndW4gYmF0JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGVndW4nLFxuICAgICAgICAgICAgTSA6ICdoaWxhYmV0ZSBiYXQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgaGlsYWJldGUnLFxuICAgICAgICAgICAgeSA6ICd1cnRlIGJhdCcsXG4gICAgICAgICAgICB5eSA6ICclZCB1cnRlJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfbsScsXG4gICAgICAgICcyJzogJ9uyJyxcbiAgICAgICAgJzMnOiAn27MnLFxuICAgICAgICAnNCc6ICfbtCcsXG4gICAgICAgICc1JzogJ9u1JyxcbiAgICAgICAgJzYnOiAn27YnLFxuICAgICAgICAnNyc6ICfbtycsXG4gICAgICAgICc4JzogJ9u4JyxcbiAgICAgICAgJzknOiAn27knLFxuICAgICAgICAnMCc6ICfbsCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfbsSc6ICcxJyxcbiAgICAgICAgJ9uyJzogJzInLFxuICAgICAgICAn27MnOiAnMycsXG4gICAgICAgICfbtCc6ICc0JyxcbiAgICAgICAgJ9u1JzogJzUnLFxuICAgICAgICAn27YnOiAnNicsXG4gICAgICAgICfbtyc6ICc3JyxcbiAgICAgICAgJ9u4JzogJzgnLFxuICAgICAgICAn27knOiAnOScsXG4gICAgICAgICfbsCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgZmEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmYScsIHtcbiAgICAgICAgbW9udGhzIDogJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9qY2KfZhtmI24zZh1/ZgdmI2LHbjNmHX9mF2KfYsdizX9ii2YjYsduM2YRf2YXZh1/amNmI2KbZhl/amNmI2KbbjNmHX9in2YjYql/Ys9m+2KrYp9mF2KjYsV/Yp9qp2KrYqNixX9mG2YjYp9mF2KjYsV/Yr9iz2KfZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn24zaqVxcdTIwMGPYtNmG2KjZh1/Yr9mI2LTZhtio2Ydf2LPZh1xcdTIwMGPYtNmG2KjZh1/ahtmH2KfYsdi02YbYqNmHX9m+2YbYrFxcdTIwMGPYtNmG2KjZh1/YrNmF2LnZh1/YtNmG2KjZhycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn24xf2K9f2LNf2oZf2b5f2Kxf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9mC2KjZhCDYp9iyINi42YfYsXzYqNi52K8g2KfYsiDYuNmH2LEvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAv2KjYudivINin2LIg2LjZh9ixLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZgtio2YQg2KfYsiDYuNmH2LEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9io2LnYryDYp9iyINi42YfYsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb2KfZhdix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb2YHYsdiv2Kcg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9iz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vYr9uM2LHZiNiyINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFvZvtuM2LRdIFvYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9iv2LEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDZvtuM2LQnLFxuICAgICAgICAgICAgcyA6ICfahtmG2K8g2KvYp9mG24zZhycsXG4gICAgICAgICAgICBzcyA6ICfYq9in2YbbjNmHIGQlJyxcbiAgICAgICAgICAgIG0gOiAn24zaqSDYr9mC24zZgtmHJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiv2YLbjNmC2YcnLFxuICAgICAgICAgICAgaCA6ICfbjNqpINiz2KfYudiqJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudiqJyxcbiAgICAgICAgICAgIGQgOiAn24zaqSDYsdmI2LInLFxuICAgICAgICAgICAgZGQgOiAnJWQg2LHZiNiyJyxcbiAgICAgICAgICAgIE0gOiAn24zaqSDZhdin2YcnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2YXYp9mHJyxcbiAgICAgICAgICAgIHkgOiAn24zaqSDYs9in2YQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPYp9mEJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b27At27ldL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3ZhS8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTZhScsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbnVtYmVyc1Bhc3QgPSAnbm9sbGEgeWtzaSBrYWtzaSBrb2xtZSBuZWxqw6Qgdmlpc2kga3V1c2kgc2VpdHNlbcOkbiBrYWhkZWtzYW4geWhkZWtzw6RuJy5zcGxpdCgnICcpLFxuICAgICAgICBudW1iZXJzRnV0dXJlID0gW1xuICAgICAgICAgICAgJ25vbGxhJywgJ3loZGVuJywgJ2thaGRlbicsICdrb2xtZW4nLCAnbmVsasOkbicsICd2aWlkZW4nLCAna3V1ZGVuJyxcbiAgICAgICAgICAgIG51bWJlcnNQYXN0WzddLCBudW1iZXJzUGFzdFs4XSwgbnVtYmVyc1Bhc3RbOV1cbiAgICAgICAgXTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtdXV0YW1hbiBzZWt1bm5pbicgOiAnbXV1dGFtYSBzZWt1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnc2VrdW5uaW4nIDogJ3Nla3VudGlhJztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGknO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ21pbnV1dGluJyA6ICdtaW51dXR0aWEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3R1bm5pbicgOiAndHVudGknO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3R1bm5pbicgOiAndHVudGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdww6RpdsOkbicgOiAncMOkaXbDpCc7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6TDpCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna3V1a2F1ZGVuJyA6ICdrdXVrYXVzaSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaXNGdXR1cmUgPyAna3V1a2F1ZGVuJyA6ICdrdXVrYXV0dGEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3Z1b2RlbicgOiAndnVvc2knO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3Z1b2RlbicgOiAndnVvdHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkgKyAnICcgKyByZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmJhbE51bWJlcihudW1iZXIsIGlzRnV0dXJlKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgPCAxMCA/IChpc0Z1dHVyZSA/IG51bWJlcnNGdXR1cmVbbnVtYmVyXSA6IG51bWJlcnNQYXN0W251bWJlcl0pIDogbnVtYmVyO1xuICAgIH1cblxuICAgIHZhciBmaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZpJywge1xuICAgICAgICBtb250aHMgOiAndGFtbWlrdXVfaGVsbWlrdXVfbWFhbGlza3V1X2h1aHRpa3V1X3RvdWtva3V1X2tlc8Oka3V1X2hlaW7DpGt1dV9lbG9rdXVfc3l5c2t1dV9sb2tha3V1X21hcnJhc2t1dV9qb3VsdWt1dScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAndGFtbWlfaGVsbWlfbWFhbGlzX2h1aHRpX3RvdWtvX2tlc8OkX2hlaW7DpF9lbG9fc3l5c19sb2thX21hcnJhc19qb3VsdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3VubnVudGFpX21hYW5hbnRhaV90aWlzdGFpX2tlc2tpdmlpa2tvX3RvcnN0YWlfcGVyamFudGFpX2xhdWFudGFpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1X21hX3RpX2tlX3RvX3BlX2xhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0RvIE1NTU1bdGFdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0RvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRG8gTU1NTVt0YV0gWVlZWSwgW2tsb10gSEgubW0nLFxuICAgICAgICAgICAgbCA6ICdELk0uWVlZWScsXG4gICAgICAgICAgICBsbCA6ICdEbyBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkLCBEbyBNTU0gWVlZWSwgW2tsb10gSEgubW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbdMOkbsOkw6RuXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1todW9tZW5uYV0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba2xvXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tlaWxlbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3ZpaW1lXSBkZGRkW25hXSBba2xvXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgcMOkw6RzdMOkJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgc2l0dGVuJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmbycsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnNfYXByw61sX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3VubnVkYWd1cl9tw6FuYWRhZ3VyX3TDvXNkYWd1cl9taWt1ZGFndXJfaMOzc2RhZ3VyX2Zyw61nZ2phZGFndXJfbGV5Z2FyZGFndXInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnc3VuX23DoW5fdMO9c19taWtfaMOzc19mcsOtX2xleScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc3VfbcOhX3TDvV9taV9ow7NfZnJfbGUnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0sIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbw40gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbw40gbW9yZ2luIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vDjSBnasOhciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tzw63DsHN0dV0gZGRkZCBba2xdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd1bSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHPDrcOwYW5pJyxcbiAgICAgICAgICAgIHMgOiAnZsOhIHNla3VuZCcsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWt1bmRpcicsXG4gICAgICAgICAgICBtIDogJ2VpbiBtaW51dHR1cicsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHRpcicsXG4gICAgICAgICAgICBoIDogJ2VpbiB0w61taScsXG4gICAgICAgICAgICBoaCA6ICclZCB0w61tYXInLFxuICAgICAgICAgICAgZCA6ICdlaW4gZGFndXInLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTSA6ICdlaW4gbcOhbmHDsHVyJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DoW5hw7BpcicsXG4gICAgICAgICAgICB5IDogJ2VpdHQgw6FyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMOhcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZyID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnInLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG0gOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkIDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTSA6ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgICAgICB5eSA6ICclZCBhbnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnwpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBSZXR1cm4gJ2UnIHdoZW4gZGF5IG9mIG1vbnRoID4gMS4gTW92ZSB0aGlzIGNhc2UgaW5zaWRlXG4gICAgICAgICAgICAgICAgLy8gYmxvY2sgZm9yIG1hc2N1bGluZSB3b3JkcyBiZWxvdy5cbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQvaXNzdWVzLzMzNzVcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZyQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jYScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHMgOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQgOiAndW4gam91cicsXG4gICAgICAgICAgICBkZCA6ICclZCBqb3VycycsXG4gICAgICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFucydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmckNhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZnJDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyLWNoJywge1xuICAgICAgICBtb250aHMgOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgcyA6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtIDogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8ZSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJDaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tYWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9ICdqYW5fZmViX21ydF9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlcycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBmeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2Z5Jywge1xuICAgICAgICBtb250aHMgOiAnamFubmV3YXJpc19mZWJyZXdhcmlzX21hYXJ0X2FwcmlsX21hYWllX2p1bnlfanVseV9hdWd1c3R1c19zZXB0aW1iZXJfb2t0b2Jlcl9ub3ZpbWJlcl9kZXNpbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnc25laW5fbW9hbmRlaV90aWlzZGVpX3dvYW5zZGVpX3RvbmdlcnNkZWlfZnJlZWRfc25lb24nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnc2kuX21vLl90aS5fd28uX3RvLl9mci5fc28uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTaV9Nb19UaV9Xb19Ub19Gcl9Tbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toam9lZCBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb2FybiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tqdXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW8O0ZnLDu25lXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb2VyICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgbHluJyxcbiAgICAgICAgICAgIHMgOiAnaW4gcGVhciBzZWtvbmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRlbicsXG4gICAgICAgICAgICBtIDogJ2llbiBtaW7DunQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoIDogJ2llbiBvZXJlJyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9lcmVuJyxcbiAgICAgICAgICAgIGQgOiAnaWVuIGRlaScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNIDogJ2llbiBtb2FubmUnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9hbm5lbicsXG4gICAgICAgICAgICB5IDogJ2llbiBqaWVyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGppZXJyZW4nXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZ5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICdFYW7DoWlyJywgJ0ZlYWJocmEnLCAnTcOhcnRhJywgJ0FpYnJlw6FuJywgJ0JlYWx0YWluZScsICdNw6lpdGhlYW1oJywgJ0nDumlsJywgJ0zDum5hc2EnLCAnTWXDoW4gRsOzbWhhaXInLCAnRGVhaXJlYWRoIEbDs21oYWlyJywgJ1NhbWhhaW4nLCAnTm9sbGFpZydcbiAgICBdO1xuXG4gICAgdmFyIG1vbnRoc1Nob3J0ID0gWydFYW7DoScsICdGZWFiJywgJ03DoXJ0JywgJ0FpYnInLCAnQmVhbCcsICdNw6lpdCcsICdJw7ppbCcsICdMw7puYScsICdNZcOhbicsICdEZWFpJywgJ1NhbWgnLCAnTm9sbCddO1xuXG4gICAgdmFyIHdlZWtkYXlzID0gWydEw6kgRG9taG5haWdoJywgJ0TDqSBMdWFpbicsICdEw6kgTcOhaXJ0JywgJ0TDqSBDw6lhZGFvaW4nLCAnRMOpYXJkYW9pbicsICdEw6kgaEFvaW5lJywgJ0TDqSBTYXRoYXJuJ107XG5cbiAgICB2YXIgd2Vla2RheXNTaG9ydCA9IFsnRG9tJywgJ0x1YScsICdNw6FpJywgJ0PDqWEnLCAnRMOpYScsICdoQW8nLCAnU2F0J107XG5cbiAgICB2YXIgd2Vla2RheXNNaW4gPSBbJ0RvJywgJ0x1JywgJ03DoScsICdDZScsICdEw6knLCAnaEEnLCAnU2EnXTtcblxuICAgIHZhciBnYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dhJywge1xuICAgICAgICBtb250aHM6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQ6IG1vbnRoc1Nob3J0LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IHdlZWtkYXlzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzTWluOiB3ZWVrZGF5c01pbixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0lubml1IGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0Ftw6FyYWNoIGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lubsOpIGFpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtzZW8gY2FpdGVdIFthZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ2kgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIMOzIHNoaW4nLFxuICAgICAgICAgICAgczogJ2PDunBsYSBzb2ljaW5kJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc29pY2luZCcsXG4gICAgICAgICAgICBtOiAnbsOzaW3DqWFkJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbsOzaW3DqWFkJyxcbiAgICAgICAgICAgIGg6ICd1YWlyIGFuIGNobG9pZycsXG4gICAgICAgICAgICBoaDogJyVkIHVhaXIgYW4gY2hsb2lnJyxcbiAgICAgICAgICAgIGQ6ICdsw6EnLFxuICAgICAgICAgICAgZGQ6ICclZCBsw6EnLFxuICAgICAgICAgICAgTTogJ23DrScsXG4gICAgICAgICAgICBNTTogJyVkIG3DrScsXG4gICAgICAgICAgICB5OiAnYmxpYWluJyxcbiAgICAgICAgICAgIHl5OiAnJWQgYmxpYWluJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZHxuYXxtaCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gbnVtYmVyID09PSAxID8gJ2QnIDogbnVtYmVyICUgMTAgPT09IDIgPyAnbmEnIDogJ21oJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAnQW0gRmFvaWxsZWFjaCcsICdBbiBHZWFycmFuJywgJ0FtIE3DoHJ0JywgJ0FuIEdpYmxlYW4nLCAnQW4gQ8OoaXRlYW4nLCAnQW4gdC3DkmdtaGlvcycsICdBbiB0LUl1Y2hhcicsICdBbiBMw7luYXN0YWwnLCAnQW4gdC1TdWx0YWluJywgJ0FuIETDoG1oYWlyJywgJ0FuIHQtU2FtaGFpbicsICdBbiBEw7liaGxhY2hkJ1xuICAgIF07XG5cbiAgICB2YXIgbW9udGhzU2hvcnQgPSBbJ0Zhb2knLCAnR2VhcicsICdNw6BydCcsICdHaWJsJywgJ0PDqGl0JywgJ8OSZ21oJywgJ0l1Y2gnLCAnTMO5bicsICdTdWx0JywgJ0TDoG1oJywgJ1NhbWgnLCAnRMO5YmgnXTtcblxuICAgIHZhciB3ZWVrZGF5cyA9IFsnRGlkw7JtaG5haWNoJywgJ0RpbHVhaW4nLCAnRGltw6BpcnQnLCAnRGljaWFkYWluJywgJ0RpYXJkYW9pbicsICdEaWhhb2luZScsICdEaXNhdGhhaXJuZSddO1xuXG4gICAgdmFyIHdlZWtkYXlzU2hvcnQgPSBbJ0RpZCcsICdEaWwnLCAnRGltJywgJ0RpYycsICdEaWEnLCAnRGloJywgJ0RpcyddO1xuXG4gICAgdmFyIHdlZWtkYXlzTWluID0gWydEw7InLCAnTHUnLCAnTcOgJywgJ0NpJywgJ0FyJywgJ0hhJywgJ1NhJ107XG5cbiAgICB2YXIgZ2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnZCcsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRoc1Nob3J0LFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6IHdlZWtkYXlzU2hvcnQsXG4gICAgICAgIHdlZWtkYXlzTWluIDogd2Vla2RheXNNaW4sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tBbi1kaXVnaCBhaWddIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0EtbcOgaXJlYWNoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYWlnXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tBbi1kw6ggYWlnXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtzZW8gY2hhaWRoXSBbYWlnXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnYW5uIGFuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnYmhvIGNoaW9ubiAlcycsXG4gICAgICAgICAgICBzIDogJ2JlYWdhbiBkaW9nYW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgZGlvZ2FuJyxcbiAgICAgICAgICAgIG0gOiAnbWlvbmFpZCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW9uYWlkZWFuJyxcbiAgICAgICAgICAgIGggOiAndWFpcicsXG4gICAgICAgICAgICBoaCA6ICclZCB1YWlyZWFuJyxcbiAgICAgICAgICAgIGQgOiAnbGF0aGEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgbGF0aGEnLFxuICAgICAgICAgICAgTSA6ICdtw6xvcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6xvc2FuJyxcbiAgICAgICAgICAgIHkgOiAnYmxpYWRobmEnLFxuICAgICAgICAgICAgeXkgOiAnJWQgYmxpYWRobmEnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn0oZHxuYXxtaCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBnZDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGdsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2wnLCB7XG4gICAgICAgIG1vbnRocyA6ICd4YW5laXJvX2ZlYnJlaXJvX21hcnpvX2FicmlsX21haW9feHXDsW9feHVsbG9fYWdvc3RvX3NldGVtYnJvX291dHVicm9fbm92ZW1icm9fZGVjZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3hhbi5fZmViLl9tYXIuX2Fici5fbWFpLl94dcOxLl94dWwuX2Fnby5fc2V0Ll9vdXQuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZG9taW5nb19sdW5zX21hcnRlc19tw6lyY29yZXNfeG92ZXNfdmVucmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbcOpci5feG92Ll92ZW4uX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkb19sdV9tYV9tw6lfeG9fdmVfc8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveGUgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ8OhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxw6EgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ8OhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFsnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbb250ZSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhJyA6ICdhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbb10gZGRkZCBbcGFzYWRvICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICdhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKHN0cikge1xuICAgICAgICAgICAgICAgIGlmIChzdHIuaW5kZXhPZigndW4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ24nICsgc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuICcgKyBzdHI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6ICdoYWkgJXMnLFxuICAgICAgICAgICAgcyA6ICd1bnMgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VuaGEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkIDogJ3VuIGTDrWEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZMOtYXMnLFxuICAgICAgICAgICAgTSA6ICd1biBtZXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhbm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5vcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2w7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAncyc6IFsndGhvZGRlIHNlY29uZGFuaW0nLCAndGhvZGRlIHNlY29uZCddLFxuICAgICAgICAgICAgJ3NzJzogW251bWJlciArICcgc2Vjb25kYW5pbScsIG51bWJlciArICcgc2Vjb25kJ10sXG4gICAgICAgICAgICAnbSc6IFsnZWthIG1pbnRhbicsICdlayBtaW51dGUnXSxcbiAgICAgICAgICAgICdtbSc6IFtudW1iZXIgKyAnIG1pbnRhbmltJywgbnVtYmVyICsgJyBtaW50YW0nXSxcbiAgICAgICAgICAgICdoJzogWydla2Egdm9yYW4nLCAnZWsgdm9yJ10sXG4gICAgICAgICAgICAnaGgnOiBbbnVtYmVyICsgJyB2b3JhbmltJywgbnVtYmVyICsgJyB2b3JhbSddLFxuICAgICAgICAgICAgJ2QnOiBbJ2VrYSBkaXNhbicsICdlayBkaXMnXSxcbiAgICAgICAgICAgICdkZCc6IFtudW1iZXIgKyAnIGRpc2FuaW0nLCBudW1iZXIgKyAnIGRpcyddLFxuICAgICAgICAgICAgJ00nOiBbJ2VrYSBtaG9pbmVhbicsICdlayBtaG9pbm8nXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIG1ob2luZWFuaW0nLCBudW1iZXIgKyAnIG1ob2luZSddLFxuICAgICAgICAgICAgJ3knOiBbJ2VrYSB2b3JzYW4nLCAnZWsgdm9yb3MnXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIHZvcnNhbmltJywgbnVtYmVyICsgJyB2b3JzYW0nXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGdvbUxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnb20tbGF0bicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbmVyX0ZlYnJlcl9NYXJzX0FicmlsX01haV9KdW5fSnVsYWlfQWdvc3RfU2V0ZW1icl9PdHVicl9Ob3ZlbWJyX0RlemVtYnInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbi5fRmViLl9NYXJzX0Fici5fTWFpX0p1bl9KdWwuX0Fnby5fU2V0Ll9PdHUuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ0FpdGFyX1NvbWFyX01vbmdsbGFyX0J1ZHZhcl9CcmVzdGFyX1N1a3Jhcl9Tb25cXCd2YXInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWl0Ll9Tb20uX01vbi5fQnVkLl9CcmUuX1N1ay5fU29uLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnQWlfU21fTW9fQnVfQnJfU3VfU24nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcyBbdmF6dGFdJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NW2FjaGVhXSBEbywgWVlZWSwgQSBoOm1tIFt2YXp0YV0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCwgRCBNTU0gWVlZWSwgQSBoOm1tIFt2YXp0YV0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tBaXpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRmFsZWFtXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tJZXRhIHRvXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbS2FsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tGYXRsb10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFkaW0nLFxuICAgICAgICAgICAgcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn0oZXIpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgb3JkaW5hbCAnZXInIG9ubHkgYXBwbGllcyB0byBkYXkgb2YgdGhlIG1vbnRoXG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnZXInO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcmF0aXxzb2thbGxpfGRvbnBhcmFtfHNhbmplLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3JhdGknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb2thbGxpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2RvbnBhcmFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID4gMTIgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NhbmplJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb2thbGxpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb25wYXJhbSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2FuamUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3JhdGknO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ29tTGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgICAgICcxJzogJ+CrpycsXG4gICAgICAgICAgICAnMic6ICfgq6gnLFxuICAgICAgICAgICAgJzMnOiAn4KupJyxcbiAgICAgICAgICAgICc0JzogJ+CrqicsXG4gICAgICAgICAgICAnNSc6ICfgq6snLFxuICAgICAgICAgICAgJzYnOiAn4KusJyxcbiAgICAgICAgICAgICc3JzogJ+CrrScsXG4gICAgICAgICAgICAnOCc6ICfgq64nLFxuICAgICAgICAgICAgJzknOiAn4KuvJyxcbiAgICAgICAgICAgICcwJzogJ+CrpidcbiAgICAgICAgfSxcbiAgICAgICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAgICAgJ+Crpyc6ICcxJyxcbiAgICAgICAgICAgICfgq6gnOiAnMicsXG4gICAgICAgICAgICAn4KupJzogJzMnLFxuICAgICAgICAgICAgJ+Crqic6ICc0JyxcbiAgICAgICAgICAgICfgq6snOiAnNScsXG4gICAgICAgICAgICAn4KusJzogJzYnLFxuICAgICAgICAgICAgJ+CrrSc6ICc3JyxcbiAgICAgICAgICAgICfgq64nOiAnOCcsXG4gICAgICAgICAgICAn4KuvJzogJzknLFxuICAgICAgICAgICAgJ+Crpic6ICcwJ1xuICAgICAgICB9O1xuXG4gICAgdmFyIGd1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ3UnLCB7XG4gICAgICAgIG1vbnRoczogJ+CqnOCqvuCqqOCrjeCqr+CrgeCqhuCqsOCrgF/gqqvgq4fgqqzgq43gqrDgq4HgqobgqrDgq4Bf4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqv+Cqsl/gqq7gq4df4Kqc4KuC4KqoX+CqnOCrgeCqsuCqvuCqiF/gqpHgqpfgqrjgq43gqp9f4Kq44Kqq4KuN4Kqf4KuH4Kqu4KuN4Kqs4KqwX+CqkeCqleCrjeCqn+CrjeCqrOCqsF/gqqjgqrXgq4fgqq7gq43gqqzgqrBf4Kqh4Kq/4Kq44KuH4Kqu4KuN4Kqs4KqwJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ+CqnOCqvuCqqOCrjeCqr+CrgS5f4Kqr4KuH4Kqs4KuN4Kqw4KuBLl/gqq7gqr7gqrDgq43gqppf4KqP4Kqq4KuN4Kqw4Kq/Ll/gqq7gq4df4Kqc4KuC4KqoX+CqnOCrgeCqsuCqvi5f4KqR4KqXLl/gqrjgqqrgq43gqp/gq4cuX+CqkeCqleCrjeCqn+CrjS5f4Kqo4Kq14KuHLl/gqqHgqr/gqrjgq4cuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ+CqsOCqteCqv+CqteCqvuCqsF/gqrjgq4vgqq7gqrXgqr7gqrBf4Kqu4KqC4KqX4Kqz4Kq14Kq+4KqwX+CqrOCrgeCqp+CrjeCqteCqvuCqsF/gqpfgq4HgqrDgq4HgqrXgqr7gqrBf4Kq24KuB4KqV4KuN4Kqw4Kq14Kq+4KqwX+CqtuCqqOCqv+CqteCqvuCqsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+CqsOCqteCqv1/gqrjgq4vgqq5f4Kqu4KqC4KqX4KqzX+CqrOCrgeCqp+CrjV/gqpfgq4HgqrDgq4Ff4Kq24KuB4KqV4KuN4KqwX+CqtuCqqOCqvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfgqrBf4Kq44KuLX+CqruCqgl/gqqzgq4Ff4KqX4KuBX+CqtuCrgV/gqrYnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0EgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTFRTOiAnQSBoOm1tOnNzIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4KqG4KqcXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+Cql+Cqh+CqleCqvuCqsuCrh10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4Kqq4Kq+4Kqb4Kqy4Kq+XSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXMg4Kqu4Kq+JyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDgqqrgq4fgqrngqrLgqr4nLFxuICAgICAgICAgICAgczogJ+CqheCqruCrgeCqlSDgqqrgqrPgq4snLFxuICAgICAgICAgICAgc3M6ICclZCDgqrjgq4fgqpXgqoLgqqEnLFxuICAgICAgICAgICAgbTogJ+Cqj+CqlSDgqq7gqr/gqqjgqr/gqp8nLFxuICAgICAgICAgICAgbW06ICclZCDgqq7gqr/gqqjgqr/gqp8nLFxuICAgICAgICAgICAgaDogJ+Cqj+CqlSDgqpXgqrLgqr7gqpUnLFxuICAgICAgICAgICAgaGg6ICclZCDgqpXgqrLgqr7gqpUnLFxuICAgICAgICAgICAgZDogJ+Cqj+CqlSDgqqbgqr/gqrXgqrgnLFxuICAgICAgICAgICAgZGQ6ICclZCDgqqbgqr/gqrXgqrgnLFxuICAgICAgICAgICAgTTogJ+Cqj+CqlSDgqq7gqrngqr/gqqjgq4snLFxuICAgICAgICAgICAgTU06ICclZCDgqq7gqrngqr/gqqjgq4snLFxuICAgICAgICAgICAgeTogJ+Cqj+CqlSDgqrXgqrDgq43gqrcnLFxuICAgICAgICAgICAgeXk6ICclZCDgqrXgqrDgq43gqrcnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgq6fgq6jgq6ngq6rgq6vgq6zgq63gq67gq6/gq6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIEd1amFyYXRpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIEd1amFyYXRpLlxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Kqw4Kq+4KqkfOCqrOCqquCri+CqsHzgqrjgqrXgqr7gqrB84Kq44Kq+4KqC4KqcLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kqw4Kq+4KqkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kq44Kq14Kq+4KqwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CqrOCqquCri+CqsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kq44Kq+4KqC4KqcJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kq44Kq14Kq+4KqwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqqzgqqrgq4vgqrAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CquOCqvuCqguCqnCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqw4Kq+4KqkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNiAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBndTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGhlID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGUnLCB7XG4gICAgICAgIG1vbnRocyA6ICfXmdeg15XXkNeoX9ek15HXqNeV15DXqF/Xnteo16Vf15DXpNeo15nXnF/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS15XXodeYX9eh16TXmNee15HXqF/XkNeV16fXmNeV15HXqF/XoNeV15HXnteR16hf15PXptee15HXqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn15nXoNeV17Nf16TXkdeo17Nf157XqNelX9eQ16TXqNezX9ee15DXmV/XmdeV16DXmV/XmdeV15zXmV/XkNeV15LXs1/Xodek15jXs1/XkNeV16fXs1/XoNeV15HXs1/Xk9em157Xsycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn16jXkNep15XXn1/Xqdeg15lf16nXnNeZ16nXmV/XqNeR15nXoteZX9eX157Xmdep15lf16nXmdep15lf16nXkdeqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9eQ17Nf15HXs1/XktezX9eT17Nf15TXs1/XldezX9ep17MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9eQX9eRX9eSX9eTX9eUX9eVX9epJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBb15FdTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFvXkV1NTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIFvXkV1NTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBsbCA6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbCA6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9eU15nXldedINeR1r5dTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb157Xl9eoINeR1r5dTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb15HXqdei15RdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9eQ16rXnteV15wg15HWvl1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb15HXmdeV151dIGRkZGQgW9eU15DXl9eo15XXnyDXkdep16LXlF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9eR16LXldeTICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn15zXpNeg15kgJXMnLFxuICAgICAgICAgICAgcyA6ICfXnteh16TXqCDXqdeg15nXldeqJyxcbiAgICAgICAgICAgIHNzIDogJyVkINep16DXmdeV16onLFxuICAgICAgICAgICAgbSA6ICfXk9en15QnLFxuICAgICAgICAgICAgbW0gOiAnJWQg15PXp9eV16onLFxuICAgICAgICAgICAgaCA6ICfXqdei15QnLFxuICAgICAgICAgICAgaGggOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16LXqteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16LXldeqJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkIDogJ9eZ15XXnScsXG4gICAgICAgICAgICBkZCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn15nXldee15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg15nXnteZ150nO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE0gOiAn15fXldeT16knLFxuICAgICAgICAgICAgTU0gOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9eX15XXk9ep15nXmdedJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg15fXldeT16nXmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5IDogJ9ep16DXlCcsXG4gICAgICAgICAgICB5eSA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAn16nXoNeq15nXmdedJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciAlIDEwID09PSAwICYmIG51bWJlciAhPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoNeUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg16nXoNeZ150nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv15DXl9eUXCLXpnzXnNek16DXlFwi16Z815DXl9eo15kg15TXpteU16jXmdeZ151815zXpNeg15kg15TXpteU16jXmdeZ151815zXpNeg15XXqiDXkdeV16fXqHzXkdeR15XXp9eofNeR16LXqNeRL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijXkNeX15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNeR16LXqNeRKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn15zXpNeg15XXqiDXkdeV16fXqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn15HXkdeV16fXqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ9ec16TXoNeUXCLXpicgOiAn15zXpNeg15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXkNeX15RcItemJyA6ICfXkNeX16jXmSDXlNem15TXqNeZ15nXnSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn15HXoteo15EnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+ClpycsXG4gICAgICAgICcyJzogJ+ClqCcsXG4gICAgICAgICczJzogJ+ClqScsXG4gICAgICAgICc0JzogJ+ClqicsXG4gICAgICAgICc1JzogJ+ClqycsXG4gICAgICAgICc2JzogJ+ClrCcsXG4gICAgICAgICc3JzogJ+ClrScsXG4gICAgICAgICc4JzogJ+ClricsXG4gICAgICAgICc5JzogJ+ClrycsXG4gICAgICAgICcwJzogJ+ClpidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgJ+Clpic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgaGkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoaScsIHtcbiAgICAgICAgbW9udGhzIDogJ+CknOCkqOCkteCksOClgF/gpKvgpLzgpLDgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliOCksl/gpK7gpIhf4KSc4KWC4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLjgpY3gpKRf4KS44KS/4KSk4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+ClguCkrOCksF/gpKjgpLXgpK7gpY3gpKzgpLBf4KSm4KS/4KS44KSu4KWN4KSs4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgpJzgpKguX+Ckq+CkvOCksC5f4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCliC5f4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLIuX+CkheCkly5f4KS44KS/4KSkLl/gpIXgpJXgpY3gpJ/gpYIuX+CkqOCktS5f4KSm4KS/4KS4Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLLgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSyX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4KSwX+CkuOCli1/gpK7gpIJf4KSs4KWBX+Ckl+ClgV/gpLbgpYFf4KS2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcyDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KSs4KSc4KWHJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+CkhuCknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgpJXgpLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgpKrgpL/gpJvgpLLgpYddIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgpK7gpYfgpIInLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgpKrgpLngpLLgpYcnLFxuICAgICAgICAgICAgcyA6ICfgpJXgpYHgpJsg4KS54KWAIOCkleCljeCkt+CkoycsXG4gICAgICAgICAgICBzcyA6ICclZCDgpLjgpYfgpJXgpILgpKEnLFxuICAgICAgICAgICAgbSA6ICfgpI/gpJUg4KSu4KS/4KSo4KSfJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCkruCkv+CkqOCknycsXG4gICAgICAgICAgICBoIDogJ+Ckj+CklSDgpJjgpILgpJ/gpL4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KSY4KSC4KSf4KWHJyxcbiAgICAgICAgICAgIGQgOiAn4KSP4KSVIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgTSA6ICfgpI/gpJUg4KSu4KS54KWA4KSo4KWHJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCkruCkueClgOCkqOClhycsXG4gICAgICAgICAgICB5IDogJ+Ckj+CklSDgpLXgpLDgpY3gpLcnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4KS14KSw4KWN4KS3J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBIaW5kaSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBIaW5kaS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpHzgpLjgpYHgpKzgpLl84KSm4KWL4KSq4KS54KSwfOCktuCkvuCkri8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpYHgpKzgpLknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KWL4KSq4KS54KSwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLbgpL7gpK4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KWB4KSs4KS5JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpYvgpKrgpLngpLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CktuCkvuCkric7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaGk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZG5hIG1pbnV0YScgOiAnamVkbmUgbWludXRlJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRhbiBzYXQnIDogJ2plZG5vZyBzYXRhJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2RhbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBociA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hyJywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdzaWplxI1uamFfdmVsamHEjWVfb8W+dWprYV90cmF2bmphX3N2aWJuamFfbGlwbmphX3NycG5qYV9rb2xvdm96YV9ydWpuYV9saXN0b3BhZGFfc3R1ZGVub2dhX3Byb3NpbmNhJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ3NpamXEjWFual92ZWxqYcSNYV9vxb51amFrX3RyYXZhbmpfc3ZpYmFual9saXBhbmpfc3JwYW5qX2tvbG92b3pfcnVqYW5fbGlzdG9wYWRfc3R1ZGVuaV9wcm9zaW5hYycuc3BsaXQoJ18nKVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICdzaWouX3ZlbGouX2/FvnUuX3RyYS5fc3ZpLl9saXAuX3NycC5fa29sLl9ydWouX2xpcy5fc3R1Ll9wcm8uJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWRqZWxqYV9wb25lZGplbGpha191dG9yYWtfc3JpamVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgIDogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5ICA6ICdbc3V0cmEgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lciB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWx1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzICAgICAgOiAncGFyIHNla3VuZGknLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgICAgICBkZCAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgICAgICA6ICdnb2RpbnUnLFxuICAgICAgICAgICAgeXkgICAgIDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB3ZWVrRW5kaW5ncyA9ICd2YXPDoXJuYXAgaMOpdGbFkW4ga2VkZGVuIHN6ZXJkw6FuIGNzw7x0w7ZydMO2a8O2biBww6ludGVrZW4gc3pvbWJhdG9uJy5zcGxpdCgnICcpO1xuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG51bSA9IG51bWJlcjtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCkgPyAnbsOpaMOhbnkgbcOhc29kcGVyYycgOiAnbsOpaMOhbnkgbcOhc29kcGVyY2UnO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCkgPyAnIG3DoXNvZHBlcmMnIDogJyBtw6Fzb2RwZXJjZSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgcGVyYycgOiAnIHBlcmNlJyk7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBwZXJjJyA6ICcgcGVyY2UnKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDs3JhJyA6ICcgw7Nyw6FqYScpO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBuYXAnIDogJyBuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgbmFwJyA6ICcgbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyBow7NuYXAnIDogJyBow7NuYXBqYScpO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiAnZWd5JyArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDqXYnIDogJyDDqXZlJyk7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bSArIChpc0Z1dHVyZSB8fCB3aXRob3V0U3VmZml4ID8gJyDDqXYnIDogJyDDqXZlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3ZWVrKGlzRnV0dXJlKSB7XG4gICAgICAgIHJldHVybiAoaXNGdXR1cmUgPyAnJyA6ICdbbcO6bHRdICcpICsgJ1snICsgd2Vla0VuZGluZ3NbdGhpcy5kYXkoKV0gKyAnXSBMVFsta29yXSc7XG4gICAgfVxuXG4gICAgdmFyIGh1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaHUnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51w6FyX2ZlYnJ1w6FyX23DoXJjaXVzX8OhcHJpbGlzX23DoWp1c19qw7puaXVzX2rDumxpdXNfYXVndXN6dHVzX3N6ZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbcOhcmNfw6Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc3plcHRfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3Zhc8Ohcm5hcF9ow6l0ZsWRX2tlZGRfc3plcmRhX2Nzw7x0w7ZydMO2a19ww6ludGVrX3N6b21iYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAndmFzX2jDqXRfa2VkZF9zemVfY3PDvHRfcMOpbl9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3ZfaF9rX3N6ZV9jc19wX3N6bycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS5NTS5ERC4nLFxuICAgICAgICAgICAgTEwgOiAnWVlZWS4gTU1NTSBELicsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWS4gTU1NTSBELiBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWS4gTU1NTSBELiwgZGRkZCBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZGV8ZHUvaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDEpLnRvTG93ZXJDYXNlKCkgPT09ICd1JztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPT09IHRydWUgPyAnZGUnIDogJ0RFJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPT09IHRydWUgPyAnZHUnIDogJ0RVJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1ttYV0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbaG9sbmFwXSBMVFsta29yXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2Vlay5jYWxsKHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW3RlZ25hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWsuY2FsbCh0aGlzLCBmYWxzZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIG3Dumx2YScsXG4gICAgICAgICAgICBwYXN0IDogJyVzJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGh1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgaHlBbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h5LWFtJywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfVsNW41oLVttW+1aHWgNWrX9aD1aXVv9aA1b7VodaA1atf1bTVodaA1b/Vq1/VodW61oDVq9Ws1atf1bTVodW11avVvdWrX9Ww1bjWgtW21avVvdWrX9Ww1bjWgtWs1avVvdWrX9aF1aPVuNW91b/VuNW91atf1b3VpdW61b/VpdW01aLVpdaA1atf1bDVuNWv1b/VpdW01aLVpdaA1atf1bbVuNW11aXVtNWi1aXWgNWrX9Wk1aXVr9W/1aXVtNWi1aXWgNWrJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9Ww1bjWgtW21b7VodaAX9aD1aXVv9aA1b7VodaAX9W01aHWgNW/X9Wh1brWgNWr1axf1bTVodW11avVvV/VsNW41oLVttWr1b1f1bDVuNaC1azVq9W9X9aF1aPVuNW91b/VuNW9X9W91aXVutW/1aXVtNWi1aXWgF/VsNW41a/Vv9Wl1bTVotWl1oBf1bbVuNW11aXVtNWi1aXWgF/VpNWl1a/Vv9Wl1bTVotWl1oAnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn1bDVttW+X9aD1b/WgF/VtNaA1b9f1aHVutaAX9W01bXVvV/VsNW21b1f1bDVrNW9X9aF1aPVvV/VvdW61b9f1bDVr9W/X9W21bTVol/VpNWv1b8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9Wv1avWgNWh1a/Vq1/VpdaA1a/VuNaC1bfVodWi1anVq1/VpdaA1aXWhNW31aHVotWp1atf1bnVuNaA1aXWhNW31aHVotWp1atf1bDVq9W21aPVt9Wh1aLVqdWrX9W41oLWgNWi1aHVqV/Vt9Wh1aLVodWpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Wv1oDVr1/VpdaA1a9f1aXWgNaEX9W51oDWhF/VsNW21aNf1bjWgtaA1aJf1bfVotWpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZINWpLicsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg1akuLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINWpLiwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vVodW11b3WhdaAXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9W+1aHVstWoXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9Wl1oDVpdWvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vVodW21oHVodWuXSBkZGRkIFvWhdaA1agg1arVodW01ahdIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDVsNWl1b/VuCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzINWh1bzVodW7JyxcbiAgICAgICAgICAgIHMgOiAn1bTVqyDWhNWh1bbVqyDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIHNzIDogJyVkINW+1aHVtdaA1a/VtdWh1bYnLFxuICAgICAgICAgICAgbSA6ICfWgNW41brVpScsXG4gICAgICAgICAgICBtbSA6ICclZCDWgNW41brVpScsXG4gICAgICAgICAgICBoIDogJ9Wq1aHVtCcsXG4gICAgICAgICAgICBoaCA6ICclZCDVqtWh1bQnLFxuICAgICAgICAgICAgZCA6ICfWhdaAJyxcbiAgICAgICAgICAgIGRkIDogJyVkINaF1oAnLFxuICAgICAgICAgICAgTSA6ICfVodW01avVvScsXG4gICAgICAgICAgICBNTSA6ICclZCDVodW01avVvScsXG4gICAgICAgICAgICB5IDogJ9W/1aHWgNWrJyxcbiAgICAgICAgICAgIHl5IDogJyVkINW/1aHWgNWrJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv1aPVq9W31aXWgNW+1aF81aHVvNWh1b7VuNW/1b7VoXzWgdWl1oDVpdWv1b7VoXzVpdaA1aXVr9W41bXVodW2LyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o1oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVtikkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVo9Wr1bfVpdaA1b7VoSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aHVvNWh1b7VuNW/1b7VoSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1oHVpdaA1aXVr9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wl1oDVpdWv1bjVtdWh1bYnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn18XFxkezEsMn0tKNWr1bZ81oDVpCkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICBjYXNlICdERERvJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct1avVtic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct1oDVpCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaHlBbTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGlkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaWQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0FndF9TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ01pbmdndV9TZW5pbl9TZWxhc2FfUmFidV9LYW1pc19KdW1hdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdNaW5fU2VuX1NlbF9SYWJfS2FtX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ01nX1NuX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXxzaWFuZ3xzb3JlfG1hbGFtLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2lhbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NvcmUnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc2lhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb3JlJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Jlc29rIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbS2VtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGFsdSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbGFtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgeWFuZyBsYWx1JyxcbiAgICAgICAgICAgIHMgOiAnYmViZXJhcGEgZGV0aWsnLFxuICAgICAgICAgICAgc3MgOiAnJWQgZGV0aWsnLFxuICAgICAgICAgICAgbSA6ICdzZW1lbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1lbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaWQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIGlmIChuICUgMTAwID09PSAxMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobiAlIDEwID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ25va2tyYXIgc2Vrw7puZHVyJyA6ICdub2trcnVtIHNla8O6bmR1bSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWvDum5kdXInIDogJ3Nla8O6bmR1bScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla8O6bmRhJztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ23DrW7DunRhJyA6ICdtw61uw7p0dSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtw61uw7p0dXInIDogJ23DrW7DunR1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DrW7DunRhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0dSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdrbHVra3VzdHVuZGlyJyA6ICdrbHVra3VzdHVuZHVtJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAna2x1a2t1c3R1bmQnO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkYWd1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdkYWcnIDogJ2RlZ2knO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkYWdhcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdkYWdhJyA6ICdkw7ZndW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkYWd1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ23DoW51w7B1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdtw6FudcOwJyA6ICdtw6FudcOwaSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7Bpcic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdtw6FudcOwaScgOiAnbcOhbnXDsHVtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOhbnXDsHVyJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChpc0Z1dHVyZSA/ICdtw6FudcOwJyA6ICdtw6FudcOwaScpO1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnw6FyJyA6ICfDoXJpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FydW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGlzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW7DumFyX2ZlYnLDumFyX21hcnNfYXByw61sX21hw61fasO6bsOtX2rDumzDrV/DoWfDunN0X3NlcHRlbWJlcl9va3TDs2Jlcl9uw7N2ZW1iZXJfZGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYcOtX2rDum5fasO6bF/DoWfDul9zZXBfb2t0X27Ds3ZfZGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzdW5udWRhZ3VyX23DoW51ZGFndXJfw75yacOwanVkYWd1cl9tacOwdmlrdWRhZ3VyX2ZpbW10dWRhZ3VyX2bDtnN0dWRhZ3VyX2xhdWdhcmRhZ3VyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1bl9tw6FuX8O+cmlfbWnDsF9maW1fZsO2c19sYXUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X03DoV/DnnJfTWlfRmlfRsO2X0xhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgW2tsLl0gSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vDrSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vDoSBtb3JndW4ga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW8OtIGfDpnIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbc8Otw7Bhc3RhXSBkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdlZnRpciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2Z5cmlyICVzIHPDrcOwYW4nLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6ICdrbHVra3VzdHVuZCcsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgaXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdpdCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2dlbm5haW9fZmViYnJhaW9fbWFyem9fYXByaWxlX21hZ2dpb19naXVnbm9fbHVnbGlvX2Fnb3N0b19zZXR0ZW1icmVfb3R0b2JyZV9ub3ZlbWJyZV9kaWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnZ2VuX2ZlYl9tYXJfYXByX21hZ19naXVfbHVnX2Fnb19zZXRfb3R0X25vdl9kaWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWVuaWNhX2x1bmVkw6xfbWFydGVkw6xfbWVyY29sZWTDrF9naW92ZWTDrF92ZW5lcmTDrF9zYWJhdG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tX2x1bl9tYXJfbWVyX2dpb192ZW5fc2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkb19sdV9tYV9tZV9naV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPZ2dpIGFsbGVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbRG9tYW5pIGFsbGVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbYWxsZV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJZXJpIGFsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xhIHNjb3JzYV0gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbG8gc2NvcnNvXSBkZGRkIFthbGxlXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCgvXlswLTldLiskLykudGVzdChzKSA/ICd0cmEnIDogJ2luJykgKyAnICcgKyBzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgZmEnLFxuICAgICAgICAgICAgcyA6ICdhbGN1bmkgc2Vjb25kaScsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRpJyxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0aScsXG4gICAgICAgICAgICBoIDogJ3VuXFwnb3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9yZScsXG4gICAgICAgICAgICBkIDogJ3VuIGdpb3JubycsXG4gICAgICAgICAgICBkZCA6ICclZCBnaW9ybmknLFxuICAgICAgICAgICAgTSA6ICd1biBtZXNlJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2knLFxuICAgICAgICAgICAgeSA6ICd1biBhbm5vJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFubmknXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWw6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBpdENoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQtY2gnLCB7XG4gICAgICAgIG1vbnRocyA6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoL15bMC05XS4rJC8pLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0IDogJyVzIGZhJyxcbiAgICAgICAgICAgIHMgOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaCA6ICd1blxcJ29yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBvcmUnLFxuICAgICAgICAgICAgZCA6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzZScsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm5pJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0Q2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBqYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2phJywge1xuICAgICAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfml6Xmm5zml6Vf5pyI5puc5pelX+eBq+abnOaXpV/msLTmm5zml6Vf5pyo5puc5pelX+mHkeabnOaXpV/lnJ/mm5zml6UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5pyIX+eBq1/msLRf5pyoX+mHkV/lnJ8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVnlubRN5pyIROaXpSBkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpShkZGQpIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5Y2I5YmNfOWNiOW+jC9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfljYjlvownO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOWJjSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Y2I5b6MJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rml6VdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+aYjuaXpV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdy53ZWVrKCkgPCB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vmnaXpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSA6ICdb5pio5pelXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53ZWVrKCkgPCBub3cud2VlaygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnW+WFiOmAsV1kZGRkIExUJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ95pelLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz5b6MJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICAgICAgcyA6ICfmlbDnp5InLFxuICAgICAgICAgICAgc3MgOiAnJWTnp5InLFxuICAgICAgICAgICAgbSA6ICcx5YiGJyxcbiAgICAgICAgICAgIG1tIDogJyVk5YiGJyxcbiAgICAgICAgICAgIGggOiAnMeaZgumWkycsXG4gICAgICAgICAgICBoaCA6ICclZOaZgumWkycsXG4gICAgICAgICAgICBkIDogJzHml6UnLFxuICAgICAgICAgICAgZGQgOiAnJWTml6UnLFxuICAgICAgICAgICAgTSA6ICcx44O25pyIJyxcbiAgICAgICAgICAgIE1NIDogJyVk44O25pyIJyxcbiAgICAgICAgICAgIHkgOiAnMeW5tCcsXG4gICAgICAgICAgICB5eSA6ICclZOW5tCdcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGphO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIganYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqdicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcmlfRmVicnVhcmlfTWFyZXRfQXByaWxfTWVpX0p1bmlfSnVsaV9BZ3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vcGVtYmVyX0Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWVpX0p1bl9KdWxfQWdzX1NlcF9Pa3RfTm9wX0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnTWluZ2d1X1NlbmVuX1NlbG9zb19SZWJ1X0tlbWlzX0plbXV3YWhfU2VwdHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTWluX1Nlbl9TZWxfUmViX0tlbV9KZW1fU2VwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2VuamluZ3xzaXlhbmd8c29udGVufG5kYWx1LyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ2VuamluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzaXlhbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NvbnRlbicgfHwgbWVyaWRpZW0gPT09ICduZGFsdScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VuamluZyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NpeWFuZyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NvbnRlbic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbmRhbHUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0RpbnRlbiBwdW5pa28gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW01iZW5qYW5nIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbS2FsYSB3aW5naSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBba2VwZW5na2VyIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnd29udGVuIGluZyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGluZ2thbmcga2VwZW5na2VyJyxcbiAgICAgICAgICAgIHMgOiAnc2F3ZXRhd2lzIGRldGlrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG0gOiAnc2V0dW5nZ2FsIG1lbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1lbml0JyxcbiAgICAgICAgICAgIGggOiAnc2V0dW5nZ2FsIGphbScsXG4gICAgICAgICAgICBoaCA6ICclZCBqYW0nLFxuICAgICAgICAgICAgZCA6ICdzZWRpbnRlbicsXG4gICAgICAgICAgICBkZCA6ICclZCBkaW50ZW4nLFxuICAgICAgICAgICAgTSA6ICdzZXd1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHd1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YXVuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHRhdW4nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGp2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIga2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrYScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ+GDmOGDkOGDnOGDleGDkOGDoOGDmF/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg5hf4YOb4YOQ4YOg4YOi4YOYX+GDkOGDnuGDoOGDmOGDmuGDmF/hg5vhg5Dhg5jhg6Hhg5hf4YOY4YOV4YOc4YOY4YOh4YOYX+GDmOGDleGDmuGDmOGDoeGDmF/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg51f4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOYX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDmF/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg5hf4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOYJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgZm9ybWF0OiAn4YOY4YOQ4YOc4YOV4YOQ4YOg4YOhX+GDl+GDlOGDkeGDlOGDoOGDleGDkOGDmuGDoV/hg5vhg5Dhg6Dhg6Lhg6Ff4YOQ4YOe4YOg4YOY4YOa4YOY4YOhX+GDm+GDkOGDmOGDoeGDoV/hg5jhg5Xhg5zhg5jhg6Hhg6Ff4YOY4YOV4YOa4YOY4YOh4YOhX+GDkOGDkuGDleGDmOGDoeGDouGDoV/hg6Hhg5Thg6Xhg6Lhg5Thg5vhg5Hhg5Thg6Dhg6Ff4YOd4YOl4YOi4YOd4YOb4YOR4YOU4YOg4YOhX+GDnOGDneGDlOGDm+GDkeGDlOGDoOGDoV/hg5Phg5Thg5nhg5Thg5vhg5Hhg5Thg6Dhg6EnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4YOY4YOQ4YOcX+GDl+GDlOGDkV/hg5vhg5Dhg6Bf4YOQ4YOe4YOgX+GDm+GDkOGDmF/hg5jhg5Xhg5xf4YOY4YOV4YOaX+GDkOGDkuGDlV/hg6Hhg5Thg6Vf4YOd4YOl4YOiX+GDnOGDneGDlF/hg5Phg5Thg5knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ+GDmeGDleGDmOGDoOGDkF/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDmF/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOYX+GDqOGDkOGDkeGDkOGDl+GDmCcuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ+GDmeGDleGDmOGDoOGDkOGDoV/hg53hg6Dhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOh4YOQ4YOb4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDneGDl+GDruGDqOGDkOGDkeGDkOGDl+GDoV/hg67hg6Phg5fhg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOe4YOQ4YOg4YOQ4YOh4YOZ4YOU4YOV4YOhX+GDqOGDkOGDkeGDkOGDl+GDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvKOGDrOGDmOGDnOGDkHzhg6jhg5Thg5vhg5Phg5Thg5IpL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+GDmeGDleGDmF/hg53hg6Dhg6hf4YOh4YOQ4YObX+GDneGDl+GDrl/hg67hg6Phg5df4YOe4YOQ4YOgX+GDqOGDkOGDkScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4YOZ4YOVX+GDneGDoF/hg6Hhg5Bf4YOd4YOXX+GDruGDo1/hg57hg5Bf4YOo4YOQJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+GDk+GDpuGDlOGDoV0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4YOu4YOV4YOQ4YOaXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vhg5Lhg6Phg6jhg5jhg5xdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vhg6jhg5Thg5vhg5Phg5Thg5JdIGRkZGQgTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+GDrOGDmOGDnOGDkF0gZGRkZCBMVC3hg5bhg5QnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKC8o4YOs4YOQ4YOb4YOYfOGDrOGDo+GDl+GDmHzhg6Hhg5Dhg5Dhg5fhg5h84YOs4YOU4YOa4YOYKS8pLnRlc3QocykgP1xuICAgICAgICAgICAgICAgICAgICBzLnJlcGxhY2UoL+GDmCQvLCAn4YOo4YOYJykgOlxuICAgICAgICAgICAgICAgICAgICBzICsgJ+GDqOGDmCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDk+GDpuGDlHzhg5fhg5Xhg5QpLykudGVzdChzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC8o4YOYfOGDlCkkLywgJ+GDmOGDoSDhg6zhg5jhg5wnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCgv4YOs4YOU4YOa4YOYLykudGVzdChzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKC/hg6zhg5Thg5rhg5gkLywgJ+GDrOGDmuGDmOGDoSDhg6zhg5jhg5wnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcyA6ICfhg6Dhg5Dhg5vhg5Phg5Thg5zhg5jhg5vhg5Qg4YOs4YOQ4YOb4YOYJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBtIDogJ+GDrOGDo+GDl+GDmCcsXG4gICAgICAgICAgICBtbSA6ICclZCDhg6zhg6Phg5fhg5gnLFxuICAgICAgICAgICAgaCA6ICfhg6Hhg5Dhg5Dhg5fhg5gnLFxuICAgICAgICAgICAgaGggOiAnJWQg4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgICAgIGQgOiAn4YOT4YOm4YOUJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOGDk+GDpuGDlCcsXG4gICAgICAgICAgICBNIDogJ+GDl+GDleGDlCcsXG4gICAgICAgICAgICBNTSA6ICclZCDhg5fhg5Xhg5QnLFxuICAgICAgICAgICAgeSA6ICfhg6zhg5Thg5rhg5gnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4YOs4YOU4YOa4YOYJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvMHwxLeGDmuGDmHzhg5vhg5QtXFxkezEsMn18XFxkezEsMn0t4YOULyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLeGDmuGDmCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG51bWJlciA8IDIwKSB8fCAobnVtYmVyIDw9IDEwMCAmJiAobnVtYmVyICUgMjAgPT09IDApKSB8fCAobnVtYmVyICUgMTAwID09PSAwKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4YOb4YOULScgKyBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5QnO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSxcbiAgICAgICAgICAgIGRveSA6IDdcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGthO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YjRlicsXG4gICAgICAgIDE6ICct0YjRlicsXG4gICAgICAgIDI6ICct0YjRlicsXG4gICAgICAgIDM6ICct0YjRlicsXG4gICAgICAgIDQ6ICct0YjRlicsXG4gICAgICAgIDU6ICct0YjRlicsXG4gICAgICAgIDY6ICct0YjRiycsXG4gICAgICAgIDc6ICct0YjRlicsXG4gICAgICAgIDg6ICct0YjRlicsXG4gICAgICAgIDk6ICct0YjRiycsXG4gICAgICAgIDEwOiAnLdGI0YsnLFxuICAgICAgICAyMDogJy3RiNGLJyxcbiAgICAgICAgMzA6ICct0YjRiycsXG4gICAgICAgIDQwOiAnLdGI0YsnLFxuICAgICAgICA1MDogJy3RiNGWJyxcbiAgICAgICAgNjA6ICct0YjRiycsXG4gICAgICAgIDcwOiAnLdGI0ZYnLFxuICAgICAgICA4MDogJy3RiNGWJyxcbiAgICAgICAgOTA6ICct0YjRiycsXG4gICAgICAgIDEwMDogJy3RiNGWJ1xuICAgIH07XG5cbiAgICB2YXIga2sgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdraycsIHtcbiAgICAgICAgbW9udGhzIDogJ9Kb0LDSo9GC0LDRgF/QsNKb0L/QsNC9X9C90LDRg9GA0YvQt1/RgdOZ0YPRltGAX9C80LDQvNGL0YBf0LzQsNGD0YHRi9C8X9GI0ZbQu9C00LVf0YLQsNC80YvQt1/Sm9GL0YDQutKv0LnQtdC6X9Kb0LDQt9Cw0L1f0pvQsNGA0LDRiNCwX9C20LXQu9GC0L7Sm9GB0LDQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0pvQsNKjX9Cw0pvQv1/QvdCw0YNf0YHTmdGDX9C80LDQvF/QvNCw0YNf0YjRltC7X9GC0LDQvF/Sm9GL0YBf0pvQsNC3X9Kb0LDRgF/QttC10LsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9C20LXQutGB0LXQvdCx0ZZf0LTSr9C50YHQtdC90LHRll/RgdC10LnRgdC10L3QsdGWX9GB05nRgNGB0LXQvdCx0ZZf0LHQtdC50YHQtdC90LHRll/QttKx0LzQsF/RgdC10L3QsdGWJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C20LXQul/QtNKv0Llf0YHQtdC5X9GB05nRgF/QsdC10Llf0LbSsdC8X9GB0LXQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0LbQul/QtNC5X9GB0Llf0YHRgF/QsdC5X9C20Lxf0YHQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CR0q/Qs9GW0L0g0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0JXRgNGC0LXSoyDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YjQtSDRgdCw0pPQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb06jRgtC60LXQvSDQsNC/0YLQsNC90YvSo10gZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINGW0YjRltC90LTQtScsXG4gICAgICAgICAgICBwYXN0IDogJyVzINCx0rHRgNGL0L0nLFxuICAgICAgICAgICAgcyA6ICfQsdGW0YDQvdC10YjQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG0gOiAn0LHRltGAINC80LjQvdGD0YInLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzQuNC90YPRgicsXG4gICAgICAgICAgICBoIDogJ9Cx0ZbRgCDRgdCw0pPQsNGCJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGB0LDSk9Cw0YInLFxuICAgICAgICAgICAgZCA6ICfQsdGW0YAg0LrSr9C9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC60q/QvScsXG4gICAgICAgICAgICBNIDogJ9Cx0ZbRgCDQsNC5JyxcbiAgICAgICAgICAgIE1NIDogJyVkINCw0LknLFxuICAgICAgICAgICAgeSA6ICfQsdGW0YAg0LbRi9C7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINC20YvQuydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRiNGWfNGI0YspLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+GfoScsXG4gICAgICAgICcyJzogJ+GfoicsXG4gICAgICAgICczJzogJ+GfoycsXG4gICAgICAgICc0JzogJ+GfpCcsXG4gICAgICAgICc1JzogJ+GfpScsXG4gICAgICAgICc2JzogJ+GfpicsXG4gICAgICAgICc3JzogJ+GfpycsXG4gICAgICAgICc4JzogJ+GfqCcsXG4gICAgICAgICc5JzogJ+GfqScsXG4gICAgICAgICcwJzogJ+GfoCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfhn6EnOiAnMScsXG4gICAgICAgICfhn6InOiAnMicsXG4gICAgICAgICfhn6MnOiAnMycsXG4gICAgICAgICfhn6QnOiAnNCcsXG4gICAgICAgICfhn6UnOiAnNScsXG4gICAgICAgICfhn6YnOiAnNicsXG4gICAgICAgICfhn6cnOiAnNycsXG4gICAgICAgICfhn6gnOiAnOCcsXG4gICAgICAgICfhn6knOiAnOScsXG4gICAgICAgICfhn6AnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGttID0gbW9tZW50LmRlZmluZUxvY2FsZSgna20nLCB7XG4gICAgICAgIG1vbnRoczogJ+GemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ+GemOGegOGemuGetl/hnoDhnrvhnpjhn5Lhnpfhn4hf4Z6Y4Z644Z6T4Z62X+GemOGfgeGen+Getl/hnqfhnp/hnpfhnrZf4Z6Y4Z634Z6Q4Z674Z6T4Z62X+GegOGegOGfkuGegOGeiuGetl/hnp/hnrjhnqDhnrZf4Z6A4Z6J4Z+S4Z6J4Z62X+Gej+Geu+Gem+Getl/hnpzhnrfhnoXhn5LhnobhnrfhnoDhnrZf4Z6S4Z+S4Z6T4Z68Jy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ+GeouGetuGekeGet+Gej+GfkuGemV/hnoXhn5DhnpPhn5LhnpFf4Z6i4Z6E4Z+S4Z6C4Z624Z6aX+GeluGeu+Gekl/hnpbhn5LhnprhnqDhnp/hn5LhnpThno/hnrfhn41f4Z6f4Z674Z6A4Z+S4Z6aX+Gen+GfheGemuGfjScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ+GeouGetl/hnoVf4Z6iX+Gell/hnpbhn5Lhnppf4Z6f4Z67X+Genycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/hnpbhn5LhnprhnrnhnoB84Z6b4Z+S4Z6E4Z624Z6FLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfhnpvhn5LhnoThnrbhnoUnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Z6W4Z+S4Z6a4Z654Z6AJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfhnpvhn5LhnoThnrbhnoUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vhnpDhn5LhnoThn4PhnpPhn4Hhn4cg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+Gen+GfkuGeouGfguGegCDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+GemOGfkuGen+Get+Gem+GemOGet+GeiSDhnpjhn4nhn4ThnoRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4Z6f4Z6U4Z+S4Z6P4Z624Z6g4Z+N4Z6Y4Z674Z6TXSBb4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPhnpHhn4Dhno8nLFxuICAgICAgICAgICAgcGFzdDogJyVz4Z6Y4Z674Z6TJyxcbiAgICAgICAgICAgIHM6ICfhnpThn4nhnrvhnpPhn5LhnpjhnrbhnpPhnpzhnrfhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgc3M6ICclZCDhnpzhnrfhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbTogJ+GemOGeveGemeGek+GetuGekeGeuCcsXG4gICAgICAgICAgICBtbTogJyVkIOGek+GetuGekeGeuCcsXG4gICAgICAgICAgICBoOiAn4Z6Y4Z694Z6Z4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4Z6Y4Z+J4Z+E4Z6EJyxcbiAgICAgICAgICAgIGQ6ICfhnpjhnr3hnpnhnpDhn5LhnoThn4MnLFxuICAgICAgICAgICAgZGQ6ICclZCDhnpDhn5LhnoThn4MnLFxuICAgICAgICAgICAgTTogJ+GemOGeveGemeGegeGfgicsXG4gICAgICAgICAgICBNTTogJyVkIOGegeGfgicsXG4gICAgICAgICAgICB5OiAn4Z6Y4Z694Z6Z4Z6G4Z+S4Z6T4Z624Z+GJyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Z6G4Z+S4Z6T4Z624Z+GJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL+GekeGeuFxcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6ICfhnpHhnrglZCcsXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vhn6Hhn6Lhn6Phn6Thn6Xhn6bhn6fhn6jhn6nhn6BdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga207XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+CzpycsXG4gICAgICAgICcyJzogJ+CzqCcsXG4gICAgICAgICczJzogJ+CzqScsXG4gICAgICAgICc0JzogJ+CzqicsXG4gICAgICAgICc1JzogJ+CzqycsXG4gICAgICAgICc2JzogJ+CzrCcsXG4gICAgICAgICc3JzogJ+CzrScsXG4gICAgICAgICc4JzogJ+CzricsXG4gICAgICAgICc5JzogJ+CzrycsXG4gICAgICAgICcwJzogJ+CzpidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Czpyc6ICcxJyxcbiAgICAgICAgJ+CzqCc6ICcyJyxcbiAgICAgICAgJ+CzqSc6ICczJyxcbiAgICAgICAgJ+Czqic6ICc0JyxcbiAgICAgICAgJ+Czqyc6ICc1JyxcbiAgICAgICAgJ+CzrCc6ICc2JyxcbiAgICAgICAgJ+CzrSc6ICc3JyxcbiAgICAgICAgJ+Czric6ICc4JyxcbiAgICAgICAgJ+Czryc6ICc5JyxcbiAgICAgICAgJ+Czpic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIga24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdrbicsIHtcbiAgICAgICAgbW9udGhzIDogJ+CynOCyqOCyteCysOCyv1/gsqvgs4bgsqzgs43gsrDgsrXgsrDgsr9f4LKu4LK+4LKw4LON4LKa4LONX+Cyj+CyquCzjeCysOCyv+CysuCzjV/gsq7gs4bgs5Vf4LKc4LOC4LKo4LONX+CynOCzgeCysuCzhuCzll/gsobgspfgsrjgs43gsp/gs41f4LK44LOG4LKq4LON4LKf4LOG4LKC4LKs4LKw4LONX+CyheCyleCzjeCyn+CzhuCzguCzleCyrOCysOCzjV/gsqjgsrXgs4bgsoLgsqzgsrDgs41f4LKh4LK/4LK44LOG4LKC4LKs4LKw4LONJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgspzgsqhf4LKr4LOG4LKs4LON4LKwX+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCygl/gsoXgspXgs43gsp/gs4bgs4Lgs5Vf4LKo4LK14LOG4LKCX+CyoeCyv+CyuOCzhuCygicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4LKt4LK+4LKo4LOB4LK14LK+4LKwX+CyuOCzhuCzguCzleCyruCyteCyvuCysF/gsq7gsoLgspfgsrPgsrXgsr7gsrBf4LKs4LOB4LKn4LK14LK+4LKwX+Cyl+CzgeCysOCzgeCyteCyvuCysF/gsrbgs4HgspXgs43gsrDgsrXgsr7gsrBf4LK24LKo4LK/4LK14LK+4LKwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CyreCyvuCyqOCzgV/gsrjgs4bgs4Lgs5Xgsq5f4LKu4LKC4LKX4LKzX+CyrOCzgeCyp1/gspfgs4HgsrDgs4Ff4LK24LOB4LKV4LON4LKwX+CytuCyqOCyvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LKt4LK+X+CyuOCzhuCzguCzlV/gsq7gsoJf4LKs4LOBX+Cyl+CzgV/gsrbgs4Ff4LK2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4LKH4LKC4LKm4LOBXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgsqjgsr7gsrPgs4ZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+CyqOCyv+CyqOCzjeCyqOCzhl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+CyleCzhuCzguCyqOCzhuCyr10gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCyqOCyguCypOCysCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCyueCyv+CyguCypuCzhicsXG4gICAgICAgICAgICBzIDogJ+CyleCzhuCysuCyteCzgSDgspXgs43gsrfgsqPgspfgsrPgs4EnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4LK44LOG4LKV4LOG4LKC4LKh4LOB4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIG0gOiAn4LKS4LKC4LKm4LOBIOCyqOCyv+CyruCyv+CytycsXG4gICAgICAgICAgICBtbSA6ICclZCDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICAgICAgaCA6ICfgspLgsoLgsqbgs4Eg4LKX4LKC4LKf4LOGJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCyl+CyguCyn+CzhicsXG4gICAgICAgICAgICBkIDogJ+CykuCyguCypuCzgSDgsqbgsr/gsqgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIE0gOiAn4LKS4LKC4LKm4LOBIOCypOCyv+CyguCyl+Cys+CzgScsXG4gICAgICAgICAgICBNTSA6ICclZCDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICAgICAgeSA6ICfgspLgsoLgsqbgs4Eg4LK14LKw4LON4LK3JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCyteCysOCzjeCytydcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Czp+CzqOCzqeCzquCzq+CzrOCzreCzruCzr+Czpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CysOCyvuCypOCzjeCysOCyv3zgsqzgs4bgsrPgsr/gspfgs43gspfgs4Z84LKu4LKn4LON4LKv4LK+4LK54LON4LKofOCyuOCyguCynOCzhi8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsrDgsr7gsqTgs43gsrDgsr8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsqzgs4bgsrPgsr/gspfgs43gspfgs4YnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsrjgsoLgspzgs4YnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsq7gsqfgs43gsq/gsr7gsrngs43gsqgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyuOCyguCynOCzhic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKw4LK+4LKk4LON4LKw4LK/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOCyqOCzhuCzlSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgsqjgs4bgs5UnO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGtvID0gbW9tZW50LmRlZmluZUxvY2FsZSgna28nLCB7XG4gICAgICAgIG1vbnRocyA6ICcx7JuUXzLsm5RfM+yblF807JuUXzXsm5RfNuyblF837JuUXzjsm5RfOeyblF8xMOyblF8xMeyblF8xMuyblCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+ydvOyalOydvF/sm5TsmpTsnbxf7ZmU7JqU7J28X+yImOyalOydvF/rqqnsmpTsnbxf6riI7JqU7J28X+2GoOyalOydvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+ydvF/sm5Rf7ZmUX+yImF/rqqlf6riIX+2GoCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVnrhYQgTU1NTSBE7J28JyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ64WEIE1NTU0gROydvCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaDptbScsXG4gICAgICAgICAgICBsIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIGxsIDogJ1lZWVnrhYQgTU1NTSBE7J28JyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ64WEIE1NTU0gROydvCBBIGg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ64WEIE1NTU0gROydvCBkZGRkIEEgaDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ+yYpOuKmCBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ+uCtOydvCBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAn7Ja07KCcIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ+yngOuCnOyjvCBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDtm4QnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDsoIQnLFxuICAgICAgICAgICAgcyA6ICfrqocg7LSIJyxcbiAgICAgICAgICAgIHNzIDogJyVk7LSIJyxcbiAgICAgICAgICAgIG0gOiAnMeu2hCcsXG4gICAgICAgICAgICBtbSA6ICclZOu2hCcsXG4gICAgICAgICAgICBoIDogJ+2VnCDsi5zqsIQnLFxuICAgICAgICAgICAgaGggOiAnJWTsi5zqsIQnLFxuICAgICAgICAgICAgZCA6ICftlZjro6gnLFxuICAgICAgICAgICAgZGQgOiAnJWTsnbwnLFxuICAgICAgICAgICAgTSA6ICftlZwg64usJyxcbiAgICAgICAgICAgIE1NIDogJyVk64usJyxcbiAgICAgICAgICAgIHkgOiAn7J28IOuFhCcsXG4gICAgICAgICAgICB5eSA6ICclZOuFhCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfSjsnbx87JuUfOyjvCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7J28JztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfsm5QnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+yjvCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZSA6IC/smKTsoIR87Jik7ZuELyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIHRva2VuID09PSAn7Jik7ZuEJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc1VwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gaG91ciA8IDEyID8gJ+yYpOyghCcgOiAn7Jik7ZuEJztcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfZoScsXG4gICAgICAgICcyJzogJ9miJyxcbiAgICAgICAgJzMnOiAn2aMnLFxuICAgICAgICAnNCc6ICfZpCcsXG4gICAgICAgICc1JzogJ9mlJyxcbiAgICAgICAgJzYnOiAn2aYnLFxuICAgICAgICAnNyc6ICfZpycsXG4gICAgICAgICc4JzogJ9moJyxcbiAgICAgICAgJzknOiAn2aknLFxuICAgICAgICAnMCc6ICfZoCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICfZoCc6ICcwJ1xuICAgIH0sXG4gICAgbW9udGhzID0gW1xuICAgICAgICAn2qnYp9mG2YjZhtuMINiv2YjZiNuV2YUnLFxuICAgICAgICAn2LTZiNio2KfYqicsXG4gICAgICAgICfYptin2LLYp9ixJyxcbiAgICAgICAgJ9mG24zYs9in2YYnLFxuICAgICAgICAn2KbYp9uM2KfYsScsXG4gICAgICAgICfYrdmI2LLblduM2LHYp9mGJyxcbiAgICAgICAgJ9iq25XZhdmF2YjYsicsXG4gICAgICAgICfYptin2KgnLFxuICAgICAgICAn2KbblduM2YTZiNmI2YQnLFxuICAgICAgICAn2KrYtNix24zZhtuMINuM25XZg9uV2YUnLFxuICAgICAgICAn2KrYtNix24zZhtuMINiv2YjZiNuV2YUnLFxuICAgICAgICAn2YPYp9mG2YjZhtuMINuM25XaqduV2YUnXG4gICAgXTtcblxuXG4gICAgdmFyIGt1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3UnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogJ9uM2YfigIzZg9i02YfigIzZhdmF2YfigIxf2K/ZiNmI2LTZh+KAjNmF2YXZh+KAjF/Ys9uO2LTZh+KAjNmF2YXZh+KAjF/ahtmI2KfYsdi02YfigIzZhdmF2YfigIxf2b7bjtmG2KzYtNmH4oCM2YXZhdmH4oCMX9mH2YfigIzbjNmG24xf2LTZh+KAjNmF2YXZh+KAjCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfbjNmH4oCM2YPYtNmH4oCM2YVf2K/ZiNmI2LTZh+KAjNmFX9iz247YtNmH4oCM2YVf2obZiNin2LHYtNmH4oCM2YVf2b7bjtmG2KzYtNmH4oCM2YVf2YfZh+KAjNuM2YbbjF/YtNmH4oCM2YXZhdmH4oCMJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfbjF/Yr1/Ys1/ahl/Zvl/Zh1/YtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2KbbjtmI2KfYsdmH4oCMfNio2YfigIzbjNin2YbbjC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC/YptuO2YjYp9ix2YfigIwvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9io2YfigIzbjNin2YbbjCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2KbbjtmI2KfYsdmH4oCMJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vYptmH4oCM2YXYsduGINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vYqNmH4oCM24zYp9mG24wg2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9mD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vYr9mI247ZhtuOINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFvZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9mE2YfigIwgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcycsXG4gICAgICAgICAgICBzIDogJ9qG2YfigIzZhtivINqG2LHZg9mH4oCM24zZh+KAjNmDJyxcbiAgICAgICAgICAgIHNzIDogJ9qG2LHZg9mH4oCMICVkJyxcbiAgICAgICAgICAgIG0gOiAn24zZh+KAjNmDINiu2YjZhNmH4oCM2YMnLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K7ZiNmE2YfigIzZgycsXG4gICAgICAgICAgICBoIDogJ9uM2YfigIzZgyDZg9in2KramNmF247YsScsXG4gICAgICAgICAgICBoaCA6ICclZCDZg9in2KramNmF247YsScsXG4gICAgICAgICAgICBkIDogJ9uM2YfigIzZgyDalduG2pgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2pXbhtqYJyxcbiAgICAgICAgICAgIE0gOiAn24zZh+KAjNmDINmF2KfZhtqvJyxcbiAgICAgICAgICAgIE1NIDogJyVkINmF2KfZhtqvJyxcbiAgICAgICAgICAgIHkgOiAn24zZh+KAjNmDINiz2KfatScsXG4gICAgICAgICAgICB5eSA6ICclZCDYs9in2rUnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGt1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YfSrycsXG4gICAgICAgIDE6ICct0YfQuCcsXG4gICAgICAgIDI6ICct0YfQuCcsXG4gICAgICAgIDM6ICct0YfSrycsXG4gICAgICAgIDQ6ICct0YfSrycsXG4gICAgICAgIDU6ICct0YfQuCcsXG4gICAgICAgIDY6ICct0YfRiycsXG4gICAgICAgIDc6ICct0YfQuCcsXG4gICAgICAgIDg6ICct0YfQuCcsXG4gICAgICAgIDk6ICct0YfRgycsXG4gICAgICAgIDEwOiAnLdGH0YMnLFxuICAgICAgICAyMDogJy3Rh9GLJyxcbiAgICAgICAgMzA6ICct0YfRgycsXG4gICAgICAgIDQwOiAnLdGH0YsnLFxuICAgICAgICA1MDogJy3Rh9KvJyxcbiAgICAgICAgNjA6ICct0YfRiycsXG4gICAgICAgIDcwOiAnLdGH0LgnLFxuICAgICAgICA4MDogJy3Rh9C4JyxcbiAgICAgICAgOTA6ICct0YfRgycsXG4gICAgICAgIDEwMDogJy3Rh9KvJ1xuICAgIH07XG5cbiAgICB2YXIga3kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdreScsIHtcbiAgICAgICAgbW9udGhzIDogJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YDRgl/QsNC/0YBf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9CW0LXQutGI0LXQvNCx0Lhf0JTSr9C50YjTqdC80LHSr1/QqNC10LnRiNC10LzQsdC4X9Co0LDRgNGI0LXQvNCx0Lhf0JHQtdC50YjQtdC80LHQuF/QltGD0LzQsF/QmNGI0LXQvNCx0LgnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0JbQtdC6X9CU0q/QuV/QqNC10Llf0KjQsNGAX9CR0LXQuV/QltGD0Lxf0JjRiNC1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQltC6X9CU0Llf0KjQuV/QqNGAX9CR0Llf0JbQvF/QmNGIJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb0JHSr9Cz0q/QvSDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0K3RgNGC0LXSoyDRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9Ca0LXRh9GN0Y0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vTqNGC0LrTqdC9INCw0L/RgtCw0L3Ri9C9XSBkZGRkIFvQutKv0L3Sr10gW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg0LjRh9C40L3QtNC1JyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg0LzRg9GA0YPQvScsXG4gICAgICAgICAgICBzIDogJ9Cx0LjRgNC90LXRh9C1INGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzcyA6ICclZCDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgbSA6ICfQsdC40YAg0LzSr9C906nRgicsXG4gICAgICAgICAgICBtbSA6ICclZCDQvNKv0L3TqdGCJyxcbiAgICAgICAgICAgIGggOiAn0LHQuNGAINGB0LDQsNGCJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGB0LDQsNGCJyxcbiAgICAgICAgICAgIGQgOiAn0LHQuNGAINC60q/QvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTSA6ICfQsdC40YAg0LDQuScsXG4gICAgICAgICAgICBNTSA6ICclZCDQsNC5JyxcbiAgICAgICAgICAgIHkgOiAn0LHQuNGAINC20YvQuycsXG4gICAgICAgICAgICB5eSA6ICclZCDQttGL0LsnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YfQuHzRh9GLfNGH0q980YfRgykvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBiID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBreTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtJzogWydlbmcgTWludXR0JywgJ2VuZ2VyIE1pbnV0dCddLFxuICAgICAgICAgICAgJ2gnOiBbJ2VuZyBTdG9ubicsICdlbmdlciBTdG9ubiddLFxuICAgICAgICAgICAgJ2QnOiBbJ2VlbiBEYWcnLCAnZW5nZW0gRGFnJ10sXG4gICAgICAgICAgICAnTSc6IFsnZWUgTW91bnQnLCAnZW5nZW0gTW91bnQnXSxcbiAgICAgICAgICAgICd5JzogWydlZSBKb2VyJywgJ2VuZ2VtIEpvZXInXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NGdXR1cmVUaW1lKHN0cmluZykge1xuICAgICAgICB2YXIgbnVtYmVyID0gc3RyaW5nLnN1YnN0cigwLCBzdHJpbmcuaW5kZXhPZignICcpKTtcbiAgICAgICAgaWYgKGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2EgJyArIHN0cmluZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FuICcgKyBzdHJpbmc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NQYXN0VGltZShzdHJpbmcpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YoJyAnKSk7XG4gICAgICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICd2aXJ1ICcgKyBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd2aXJ1biAnICsgc3RyaW5nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHdvcmQgYmVmb3JlIHRoZSBnaXZlbiBudW1iZXIgbG9zZXMgdGhlICctbicgZW5kaW5nLlxuICAgICAqIGUuZy4gJ2FuIDEwIERlZWcnIGJ1dCAnYSA1IERlZWcnXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbnVtYmVyIHtpbnRlZ2VyfVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpIHtcbiAgICAgICAgbnVtYmVyID0gcGFyc2VJbnQobnVtYmVyLCAxMCk7XG4gICAgICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIE51bWJlciAtLT4gYWx3YXlzIHRydWVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwKSB7XG4gICAgICAgICAgICAvLyBPbmx5IDEgZGlnaXRcbiAgICAgICAgICAgIGlmICg0IDw9IG51bWJlciAmJiBudW1iZXIgPD0gNykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMCkge1xuICAgICAgICAgICAgLy8gMiBkaWdpdHNcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCwgZmlyc3REaWdpdCA9IG51bWJlciAvIDEwO1xuICAgICAgICAgICAgaWYgKGxhc3REaWdpdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIoZmlyc3REaWdpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKGxhc3REaWdpdCk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgMTAwMDApIHtcbiAgICAgICAgICAgIC8vIDMgb3IgNCBkaWdpdHMgLS0+IHJlY3Vyc2l2ZWx5IGNoZWNrIGZpcnN0IGRpZ2l0XG4gICAgICAgICAgICB3aGlsZSAobnVtYmVyID49IDEwKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyIC8gMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBbnl0aGluZyBsYXJnZXIgdGhhbiA0IGRpZ2l0czogcmVjdXJzaXZlbHkgY2hlY2sgZmlyc3Qgbi0zIGRpZ2l0c1xuICAgICAgICAgICAgbnVtYmVyID0gbnVtYmVyIC8gMTAwMDtcbiAgICAgICAgICAgIHJldHVybiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2xiJywge1xuICAgICAgICBtb250aHM6ICdKYW51YXJfRmVicnVhcl9Nw6RlcnpfQWJyw6tsbF9NZWVfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdKYW4uX0ZlYnIuX01yei5fQWJyLl9NZWVfSnVuLl9KdWwuX0F1Zy5fU2VwdC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ1Nvbm5kZWdfTcOpaW5kZWdfRMOrbnNjaGRlZ19Nw6t0dHdvY2hfRG9ubmVzY2hkZWdfRnJlaWRlZ19TYW1zY2hkZWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdTby5fTcOpLl9Ew6suX03Dqy5fRG8uX0ZyLl9TYS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnU29fTcOpX0TDq19Nw6tfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0gW0F1ZXJdJyxcbiAgICAgICAgICAgIExUUzogJ0g6bW06c3MgW0F1ZXJdJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0gW0F1ZXJdJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIYXV0IHVtXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tNdWVyIHVtXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0fDq3NjaHRlciB1bV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBEaWZmZXJlbnQgZGF0ZSBzdHJpbmcgZm9yICdEw6tuc2NoZGVnJyAoVHVlc2RheSkgYW5kICdEb25uZXNjaGRlZycgKFRodXJzZGF5KSBkdWUgdG8gcGhvbm9sb2dpY2FsIHJ1bGVcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlbl0gZGRkZCBbdW1dIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW0xlc2NodGVdIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiBwcm9jZXNzRnV0dXJlVGltZSxcbiAgICAgICAgICAgIHBhc3QgOiBwcm9jZXNzUGFzdFRpbWUsXG4gICAgICAgICAgICBzIDogJ2UgcHVlciBTZWtvbm5lbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWtvbm5lbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0dGVuJyxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiAnJWQgU3Rvbm5lbicsXG4gICAgICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkIDogJyVkIERlZWcnLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6ICclZCBNw6lpbnQnLFxuICAgICAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSA6ICclZCBKb2VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsOiAnJWQuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbGI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBsbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2xvJywge1xuICAgICAgICBtb250aHMgOiAn4Lqh4Lqx4LqH4LqB4Lqt4LqZX+C6geC6uOC6oeC6nuC6sl/guqHgurXgupngurJf4LuA4Lqh4Lqq4LqyX+C6nuC6tuC6lOC6quC6sOC6nuC6sl/guqHgurTgupbgurjgupngurJf4LqB4LuN4Lql4Lqw4LqB4Lq74LqUX+C6quC6tOC6h+C6q+C6sl/guoHgurHgupnguo3gurJf4LqV4Lq44Lql4LqyX+C6nuC6sOC6iOC6tOC6gV/gupfgurHgupnguqfgurInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfguq3gurLgupfgurTgupRf4LqI4Lqx4LqZX+C6reC6seC6h+C6hOC6suC6mV/gup7gurjgupRf4Lqe4Lqw4Lqr4Lqx4LqUX+C6quC6uOC6gV/gu4DguqrgurvgurInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgupdf4LqIX+C6reC6hF/gup5f4Lqe4LqrX+C6quC6gV/guqonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICfguqfgurHguplkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyfOC6leC6reC6meC7geC6peC6hy8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4LqV4Lqt4LqZ4LuB4Lql4LqHJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgupXguq3gupngu4Dguorgurvgu4ngurInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C6leC6reC6meC7geC6peC6hyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4Lqh4Lq34LuJ4LqZ4Lq14LuJ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vguqHgurfgu4nguq3gurfgu4jgupngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vguqfgurHgupldZGRkZFvgu5zgu4ngurLgu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C6oeC6t+C7ieC6p+C6suC6meC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C6p+C6seC6mV1kZGRkW+C7geC6peC7ieC6p+C6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ+C6reC6teC6gSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVz4Lqc4LuI4Lqy4LqZ4Lqh4LqyJyxcbiAgICAgICAgICAgIHMgOiAn4Lqa4LuN4LuI4LuA4LqX4Lq74LuI4Lqy4LuD4LqU4Lqn4Lq04LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIHNzIDogJyVkIOC6p+C6tOC6meC6suC6l+C6tScgLFxuICAgICAgICAgICAgbSA6ICcxIOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBtbSA6ICclZCDgupngurLgupfgurUnLFxuICAgICAgICAgICAgaCA6ICcxIOC6iuC6u+C7iOC6p+C7guC6oeC6hycsXG4gICAgICAgICAgICBoaCA6ICclZCDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgZCA6ICcxIOC6oeC6t+C7iScsXG4gICAgICAgICAgICBkZCA6ICclZCDguqHgurfgu4knLFxuICAgICAgICAgICAgTSA6ICcxIOC7gOC6lOC6t+C6reC6mScsXG4gICAgICAgICAgICBNTSA6ICclZCDgu4DgupTgurfguq3gupknLFxuICAgICAgICAgICAgeSA6ICcxIOC6m+C6tScsXG4gICAgICAgICAgICB5eSA6ICclZCDgupvgurUnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC8o4LqX4Lq14LuIKVxcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAn4LqX4Lq14LuIJyArIG51bWJlcjtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdW5pdHMgPSB7XG4gICAgICAgICdzcycgOiAnc2VrdW5kxJdfc2VrdW5kxb5pxbNfc2VrdW5kZXMnLFxuICAgICAgICAnbScgOiAnbWludXTEl19taW51dMSXc19taW51dMSZJyxcbiAgICAgICAgJ21tJzogJ21pbnV0xJdzX21pbnXEjWnFs19taW51dGVzJyxcbiAgICAgICAgJ2gnIDogJ3ZhbGFuZGFfdmFsYW5kb3NfdmFsYW5kxIUnLFxuICAgICAgICAnaGgnOiAndmFsYW5kb3NfdmFsYW5kxbNfdmFsYW5kYXMnLFxuICAgICAgICAnZCcgOiAnZGllbmFfZGllbm9zX2RpZW7EhScsXG4gICAgICAgICdkZCc6ICdkaWVub3NfZGllbsWzX2RpZW5hcycsXG4gICAgICAgICdNJyA6ICdtxJdudW9fbcSXbmVzaW9fbcSXbmVzxK8nLFxuICAgICAgICAnTU0nOiAnbcSXbmVzaWFpX23El25lc2nFs19txJduZXNpdXMnLFxuICAgICAgICAneScgOiAnbWV0YWlfbWV0xbNfbWV0dXMnLFxuICAgICAgICAneXknOiAnbWV0YWlfbWV0xbNfbWV0dXMnXG4gICAgfTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgcmV0dXJuICdrZWxpb3Mgc2VrdW5kxJdzJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICdrZWxpxbMgc2VrdW5kxb5pxbMnIDogJ2tlbGlhcyBzZWt1bmRlcyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybXMoa2V5KVswXSA6IChpc0Z1dHVyZSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BlY2lhbChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAwIHx8IChudW1iZXIgPiAxMCAmJiBudW1iZXIgPCAyMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1zKGtleSkge1xuICAgICAgICByZXR1cm4gdW5pdHNba2V5XS5zcGxpdCgnXycpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyB0cmFuc2xhdGVTaW5ndWxhcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleVswXSwgaXNGdXR1cmUpO1xuICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIGZvcm1zKGtleSlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoc3BlY2lhbChudW1iZXIpID8gZm9ybXMoa2V5KVsxXSA6IGZvcm1zKGtleSlbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBsdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2x0Jywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICdzYXVzaW9fdmFzYXJpb19rb3ZvX2JhbGFuZMW+aW9fZ2VndcW+xJdzX2JpcsW+ZWxpb19saWVwb3NfcnVncGrFq8SNaW9fcnVnc8SXam9fc3BhbGlvX2xhcGtyacSNaW9fZ3J1b2TFvmlvJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ3NhdXNpc192YXNhcmlzX2tvdmFzX2JhbGFuZGlzX2dlZ3XFvsSXX2JpcsW+ZWxpc19saWVwYV9ydWdwasWrdGlzX3J1Z3PEl2ppc19zcGFsaXNfbGFwa3JpdGlzX2dydW9kaXMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogL0Rbb0RdPyhcXFtbXlxcW1xcXV0qXFxdfFxccykrTU1NTT98TU1NTT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK0Rbb0RdPy9cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnc2F1X3Zhc19rb3ZfYmFsX2dlZ19iaXJfbGllX3JncF9yZ3Nfc3BhX2xhcF9ncmQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2VrbWFkaWVuxK9fcGlybWFkaWVuxK9fYW50cmFkaWVuxK9fdHJlxI1pYWRpZW7Er19rZXR2aXJ0YWRpZW7Er19wZW5rdGFkaWVuxK9fxaFlxaF0YWRpZW7Erycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzZWttYWRpZW5pc19waXJtYWRpZW5pc19hbnRyYWRpZW5pc190cmXEjWlhZGllbmlzX2tldHZpcnRhZGllbmlzX3Blbmt0YWRpZW5pc1/FoWXFoXRhZGllbmlzJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9kZGRkIEhIOm1tL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1Nla19QaXJfQW50X1RyZV9LZXRfUGVuX8WgZcWhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTX1BfQV9UX0tfUG5fxaAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGRkLCBISDptbSBbdmFsLl0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIGxsIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXScsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBISDptbSBbdmFsLl0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIGRkZCwgSEg6bW0gW3ZhbC5dJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW8WgaWFuZGllbl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbUnl0b2pdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbVmFrYXJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tQcmHEl2p1c8SvXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdwbyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3ByaWXFoSAlcycsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlU2Vjb25kcyxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tb2ppLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLW9qaSc7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGx0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdW5pdHMgPSB7XG4gICAgICAgICdzcyc6ICdzZWt1bmRlc19zZWt1bmTEk21fc2VrdW5kZV9zZWt1bmRlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ20nOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdtbSc6ICdtaW7Fq3Rlc19taW7Fq3TEk21fbWluxat0ZV9taW7Fq3Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ2gnOiAnc3R1bmRhc19zdHVuZMSBbV9zdHVuZGFfc3R1bmRhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ2hoJzogJ3N0dW5kYXNfc3R1bmTEgW1fc3R1bmRhX3N0dW5kYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdkJzogJ2RpZW5hc19kaWVuxIFtX2RpZW5hX2RpZW5hcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ2RkJzogJ2RpZW5hc19kaWVuxIFtX2RpZW5hX2RpZW5hcycuc3BsaXQoJ18nKSxcbiAgICAgICAgJ00nOiAnbcSTbmXFoWFfbcSTbmXFoWllbV9txJNuZXNpc19txJNuZcWhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgJ01NJzogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgICAgICd5JzogJ2dhZGFfZ2FkaWVtX2dhZHNfZ2FkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgJ3l5JzogJ2dhZGFfZ2FkaWVtX2dhZHNfZ2FkaScuc3BsaXQoJ18nKVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHdpdGhvdXRTdWZmaXggYm9vbGVhbiB0cnVlID0gYSBsZW5ndGggb2YgdGltZTsgZmFsc2UgPSBiZWZvcmUvYWZ0ZXIgYSBwZXJpb2Qgb2YgdGltZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JtYXQoZm9ybXMsIG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVcIiwgXCIzIG1pbsWrdGVzXCIuXG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICUgMTAgPT09IDEgJiYgbnVtYmVyICUgMTAwICE9PSAxMSA/IGZvcm1zWzJdIDogZm9ybXNbM107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBFLmcuIFwiMjEgbWluxat0ZXNcIiBhcyBpbiBcInDEk2MgMjEgbWluxat0ZXNcIi5cbiAgICAgICAgICAgIC8vIEUuZy4gXCIzIG1pbsWrdMSTbVwiIGFzIGluIFwicMSTYyAzIG1pbsWrdMSTbVwiLlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxICYmIG51bWJlciAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IGZvcm1zWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIGZvcm1hdCh1bml0c1trZXldLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdCh1bml0c1trZXldLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVNlY29uZHMobnVtYmVyLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2Rhxb5hcyBzZWt1bmRlcycgOiAnZGHFvsSBbSBzZWt1bmTEk20nO1xuICAgIH1cblxuICAgIHZhciBsdiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2x2Jywge1xuICAgICAgICBtb250aHMgOiAnamFudsSBcmlzX2ZlYnJ1xIFyaXNfbWFydHNfYXByxKtsaXNfbWFpanNfasWrbmlqc19qxatsaWpzX2F1Z3VzdHNfc2VwdGVtYnJpc19va3RvYnJpc19ub3ZlbWJyaXNfZGVjZW1icmlzJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFpX2rFq25fasWrbF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzdsSTdGRpZW5hX3Bpcm1kaWVuYV9vdHJkaWVuYV90cmXFoWRpZW5hX2NldHVydGRpZW5hX3BpZWt0ZGllbmFfc2VzdGRpZW5hJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3ZfUF9PX1RfQ19Qa19TJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVkuJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkuIFtnYWRhXSBELiBNTU1NJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTSwgZGRkZCwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbxaBvZGllbiBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbUsSrdCBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1Zha2FyIHB1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbUGFnxIFqdcWhxIFdIGRkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAncMSTYyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3Bpcm1zICVzJyxcbiAgICAgICAgICAgIHMgOiByZWxhdGl2ZVNlY29uZHMsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGx2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHsgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ3Nla3VuZCcsICdzZWt1bmRhJywgJ3Nla3VuZGknXSxcbiAgICAgICAgICAgIG06IFsnamVkYW4gbWludXQnLCAnamVkbm9nIG1pbnV0YSddLFxuICAgICAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRhJywgJ21pbnV0YSddLFxuICAgICAgICAgICAgaDogWydqZWRhbiBzYXQnLCAnamVkbm9nIHNhdGEnXSxcbiAgICAgICAgICAgIGhoOiBbJ3NhdCcsICdzYXRhJywgJ3NhdGknXSxcbiAgICAgICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgICAgIE1NOiBbJ21qZXNlYycsICdtamVzZWNhJywgJ21qZXNlY2knXSxcbiAgICAgICAgICAgIHl5OiBbJ2dvZGluYScsICdnb2RpbmUnLCAnZ29kaW5hJ11cbiAgICAgICAgfSxcbiAgICAgICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMSA/IHdvcmRLZXlbMF0gOiAobnVtYmVyID49IDIgJiYgbnVtYmVyIDw9IDQgPyB3b3JkS2V5WzFdIDogd29yZEtleVsyXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XTtcbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBtZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21lJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5fanVsX2F2Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ25lZC5fcG9uLl91dG8uX3NyaS5fxI1ldC5fcGV0Ll9zdWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ25lX3BvX3V0X3NyX8SNZV9wZV9zdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RhbmFzIHVdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbc2p1dHJhIHVdIExUJyxcblxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW25lZGplbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3N1Ym90dV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5ICA6ICdbanXEjWUgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbbmVkamVsamVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGplbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JpamVkZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BldGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCdcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmlqZSAlcycsXG4gICAgICAgICAgICBzICAgICAgOiAnbmVrb2xpa28gc2VrdW5kaScsXG4gICAgICAgICAgICBzcyAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZCAgICAgIDogJ2RhbicsXG4gICAgICAgICAgICBkZCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gICAgICA6ICdtamVzZWMnLFxuICAgICAgICAgICAgTU0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21pJywge1xuICAgICAgICBtb250aHM6ICdLb2hpLXTEgXRlX0h1aS10YW5ndXJ1X1BvdXTFqy10ZS1yYW5naV9QYWVuZ2Etd2jEgXdoxIFfSGFyYXR1YV9QaXBpcmlfSMWNbmdvaW5nb2lfSGVyZS10dXJpLWvFjWvEgV9NYWh1cnVfV2hpcmluZ2EtxIEtbnVrdV9XaGlyaW5nYS3EgS1yYW5naV9IYWtpaGVhJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ0tvaGlfSHVpX1BvdV9QYWVfSGFyYV9QaXBpX0jFjW5nb2lfSGVyZV9NYWh1X1doaS1udV9XaGktcmFfSGFraScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDN9L2ksXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsMn0vaSxcbiAgICAgICAgd2Vla2RheXM6ICdSxIF0YXB1X01hbmVfVMWrcmVpX1dlbmVyZWlfVMSBaXRlX1BhcmFpcmVfSMSBdGFyZWknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdUYV9NYV9UxatfV2VfVMSBaV9QYV9IxIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtpXSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgW2ldIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tpIHRlaWUgbWFoYW5hLCBpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2Fwb3BvIGldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbaV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpbmFuYWhpIGldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbd2hha2FtdXR1bmdhIGldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpIHJvdG8gaSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgaSBtdWEnLFxuICAgICAgICAgICAgczogJ3RlIGjEk2tvbmEgcnVhcnVhJyxcbiAgICAgICAgICAgIHNzOiAnJWQgaMSTa29uYScsXG4gICAgICAgICAgICBtOiAnaGUgbWVuZXRpJyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWVuZXRpJyxcbiAgICAgICAgICAgIGg6ICd0ZSBoYW9yYScsXG4gICAgICAgICAgICBoaDogJyVkIGhhb3JhJyxcbiAgICAgICAgICAgIGQ6ICdoZSByYScsXG4gICAgICAgICAgICBkZDogJyVkIHJhJyxcbiAgICAgICAgICAgIE06ICdoZSBtYXJhbWEnLFxuICAgICAgICAgICAgTU06ICclZCBtYXJhbWEnLFxuICAgICAgICAgICAgeTogJ2hlIHRhdScsXG4gICAgICAgICAgICB5eTogJyVkIHRhdSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1pO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbWsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtaycsIHtcbiAgICAgICAgbW9udGhzIDogJ9GY0LDQvdGD0LDRgNC4X9GE0LXQstGA0YPQsNGA0Lhf0LzQsNGA0YJf0LDQv9GA0LjQu1/QvNCw0Zhf0ZjRg9C90Lhf0ZjRg9C70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GY0LDQvV/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQvdC10LTQtdC70LBf0L/QvtC90LXQtNC10LvQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQvtC6X9C/0LXRgtC+0Lpf0YHQsNCx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LXQtF/Qv9C+0L1f0LLRgtC+X9GB0YDQtV/Rh9C10YJf0L/QtdGCX9GB0LDQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0L1lX9C/b1/QstGCX9GB0YBf0YfQtV/Qv9C1X9GBYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnRC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQlNC10L3QtdGBINCy0L5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Cj0YLRgNC1INCy0L5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vQktC+XSBkZGRkIFvQstC+XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQktGH0LXRgNCwINCy0L5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JjQt9C80LjQvdCw0YLQsNGC0LBdIGRkZGQgW9Cy0L5dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JjQt9C80LjQvdCw0YLQuNC+0YJdIGRkZGQgW9Cy0L5dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9C/0L7RgdC70LUgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfQv9GA0LXQtCAlcycsXG4gICAgICAgICAgICBzIDogJ9C90LXQutC+0LvQutGDINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIG0gOiAn0LzQuNC90YPRgtCwJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YLQuCcsXG4gICAgICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgICAgICBoaCA6ICclZCDRh9Cw0YHQsCcsXG4gICAgICAgICAgICBkIDogJ9C00LXQvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQtNC10L3QsCcsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdC10YYnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0LzQtdGB0LXRhtC4JyxcbiAgICAgICAgICAgIHkgOiAn0LPQvtC00LjQvdCwJyxcbiAgICAgICAgICAgIHl5IDogJyVkINCz0L7QtNC40L3QuCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQtdCyfNC10L180YLQuHzQstC4fNGA0Lh80LzQuCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxhc3REaWdpdCA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGxhc3QyRGlnaXRzID0gbnVtYmVyICUgMTAwO1xuICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10LInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC10L0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0MkRpZ2l0cyA+IDEwICYmIGxhc3QyRGlnaXRzIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGA0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDcgfHwgbGFzdERpZ2l0ID09PSA4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LzQuCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdGC0LgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtaztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1sID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWwnLCB7XG4gICAgICAgIG1vbnRocyA6ICfgtJzgtKjgtYHgtLXgtLDgtL9f4LSr4LWG4LSs4LWN4LSw4LWB4LS14LSw4LS/X+C0ruC0vuC1vOC0muC1jeC0muC1jV/gtI/gtKrgtY3gtLDgtL/gtb1f4LSu4LWH4LSv4LWNX+C0nOC1guC1ul/gtJzgtYLgtLLgtYhf4LST4LSX4LS44LWN4LSx4LWN4LSx4LWNX+C0uOC1huC0quC1jeC0seC1jeC0seC0guC0rOC1vF/gtJLgtJXgtY3gtJ/gtYvgtKzgtbxf4LSo4LS14LSC4LSs4LW8X+C0oeC0v+C0uOC0guC0rOC1vCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LSc4LSo4LWBLl/gtKvgtYbgtKzgtY3gtLDgtYEuX+C0ruC0vuC1vC5f4LSP4LSq4LWN4LSw4LS/Ll/gtK7gtYfgtK/gtY1f4LSc4LWC4LW6X+C0nOC1guC0suC1iC5f4LST4LSXLl/gtLjgtYbgtKrgtY3gtLHgtY3gtLEuX+C0kuC0leC1jeC0n+C1iy5f4LSo4LS14LSCLl/gtKHgtL/gtLjgtIIuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4LSe4LS+4LSv4LSx4LS+4LS04LWN4LSaX+C0pOC0v+C0meC1jeC0leC0s+C0vuC0tOC1jeC0ml/gtJrgtYrgtLXgtY3gtLXgtL7gtLTgtY3gtJpf4LSs4LWB4LSn4LSo4LS+4LS04LWN4LSaX+C0teC1jeC0r+C0vuC0tOC0vuC0tOC1jeC0ml/gtLXgtYbgtLPgtY3gtLPgtL/gtK/gtL7gtLTgtY3gtJpf4LS24LSo4LS/4LSv4LS+4LS04LWN4LSaJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C0nuC0vuC0r+C1vF/gtKTgtL/gtJngtY3gtJXgtb5f4LSa4LWK4LS14LWN4LS1X+C0rOC1geC0p+C1u1/gtLXgtY3gtK/gtL7gtLTgtIJf4LS14LWG4LSz4LWN4LSz4LS/X+C0tuC0qOC0vycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LSe4LS+X+C0pOC0v1/gtJrgtYpf4LSs4LWBX+C0teC1jeC0r+C0vl/gtLXgtYZf4LS2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSAt4LSo4LWBJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MgLeC0qOC1gScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0gLeC0qOC1gScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0gLeC0qOC1gSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgtIfgtKjgtY3gtKjgtY1dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+C0qOC0vuC0s+C1hl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4LSH4LSo4LWN4LSo4LSy4LWGXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4LSV4LS04LS/4LSe4LWN4LSeXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4LSV4LS04LS/4LSe4LWN4LSe4LWNJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4LSu4LWB4LW74LSq4LWNJyxcbiAgICAgICAgICAgIHMgOiAn4LSF4LW94LSqIOC0qOC0v+C0ruC0v+C0t+C0meC1jeC0meC1vicsXG4gICAgICAgICAgICBzcyA6ICclZCDgtLjgtYbgtJXgtY3gtJXgtbvgtKHgtY0nLFxuICAgICAgICAgICAgbSA6ICfgtJLgtLDgtYEg4LSu4LS/4LSo4LS/4LSx4LWN4LSx4LWNJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgICAgICBoIDogJ+C0kuC0sOC1gSDgtK7gtKPgtL/gtJXgtY3gtJXgtYLgtbwnLFxuICAgICAgICAgICAgaGggOiAnJWQg4LSu4LSj4LS/4LSV4LWN4LSV4LWC4LW8JyxcbiAgICAgICAgICAgIGQgOiAn4LSS4LSw4LWBIOC0puC0v+C0teC0uOC0gicsXG4gICAgICAgICAgICBkZCA6ICclZCDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgTSA6ICfgtJLgtLDgtYEg4LSu4LS+4LS44LSCJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOC0ruC0vuC0uOC0gicsXG4gICAgICAgICAgICB5IDogJ+C0kuC0sOC1gSDgtLXgtbzgtLfgtIInLFxuICAgICAgICAgICAgeXkgOiAnJWQg4LS14LW84LS34LSCJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LSw4LS+4LSk4LWN4LSw4LS/fOC0sOC0vuC0teC0v+C0suC1hnzgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNfOC0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gnzgtLDgtL7gtKTgtY3gtLDgtL8vaSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgobWVyaWRpZW0gPT09ICfgtLDgtL7gtKTgtY3gtLDgtL8nICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNJyB8fFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+C0teC1iOC0leC1geC0qOC1jeC0qOC1h+C0sOC0gicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0pOC1jeC0sOC0vyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSw4LS+4LS14LS/4LSy4LWGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtIngtJrgtY3gtJog4LSV4LS04LS/4LSe4LWN4LSe4LWNJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0pOC1jeC0sOC0vyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXRjdC00YXRjdC9INGB0LXQutGD0L3QtCcgOiAn0YXRjdC00YXRjdC9INGB0LXQutGD0L3QtNGL0L0nO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0YHQtdC60YPQvdC0JyA6ICcg0YHQtdC60YPQvdC00YvQvScpO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDQvNC40L3Rg9GCJyA6ICcg0LzQuNC90YPRgtGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0YbQsNCzJyA6ICcg0YbQsNCz0LjQudC9Jyk7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINOp0LTTqdGAJyA6ICcg06nQtNGA0LjQudC9Jyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGB0LDRgCcgOiAnINGB0LDRgNGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0LbQuNC7JyA6ICcg0LbQuNC70LjQudC9Jyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbW4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtbicsIHtcbiAgICAgICAgbW9udGhzIDogJ9Cd0Y3Qs9C00q/Qs9GN0Y3RgCDRgdCw0YBf0KXQvtGR0YDQtNGD0LPQsNCw0YAg0YHQsNGAX9CT0YPRgNCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CU06nRgNOp0LLQtNKv0LPRjdGN0YAg0YHQsNGAX9Ci0LDQstC00YPQs9Cw0LDRgCDRgdCw0YBf0JfRg9GA0LPQsNC00YPQs9Cw0LDRgCDRgdCw0YBf0JTQvtC70LTRg9Cz0LDQsNGAINGB0LDRgF/QndCw0LnQvNC00YPQs9Cw0LDRgCDRgdCw0YBf0JXRgdC00q/Qs9GN0Y3RgCDRgdCw0YBf0JDRgNCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CQ0YDQstCw0L0g0L3RjdCz0LTSr9Cz0Y3RjdGAINGB0LDRgF/QkNGA0LLQsNC9INGF0L7RkdGA0LTRg9Cz0LDQsNGAINGB0LDRgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnMSDRgdCw0YBfMiDRgdCw0YBfMyDRgdCw0YBfNCDRgdCw0YBfNSDRgdCw0YBfNiDRgdCw0YBfNyDRgdCw0YBfOCDRgdCw0YBfOSDRgdCw0YBfMTAg0YHQsNGAXzExINGB0LDRgF8xMiDRgdCw0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQndGP0Lxf0JTQsNCy0LDQsF/QnNGP0LPQvNCw0YBf0JvRhdCw0LPQstCwX9Cf0q/RgNGN0LJf0JHQsNCw0YHQsNC9X9CR0Y/QvNCx0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0J3Rj9C8X9CU0LDQsl/QnNGP0LNf0JvRhdCwX9Cf0q/RgF/QkdCw0LBf0JHRj9C8Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQndGPX9CU0LBf0JzRj1/Qm9GFX9Cf0q9f0JHQsF/QkdGPJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWSDQvtC90YsgTU1NTdGL0L0gRCcsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWSDQvtC90YsgTU1NTdGL0L0gRCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFlZWVkg0L7QvdGLIE1NTU3Ri9C9IEQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/SrtOofNKu0KUvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn0q7QpSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0q7TqCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0q7QpSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb06jQvdOp06nQtNOp0YBdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Cc0LDRgNCz0LDQsNGIXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb0JjRgNGN0YVdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb06jRh9C40LPQtNOp0YBdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vTqNC90LPTqdGA0YHTqdC9XSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDQtNCw0YDQsNCwJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg06nQvNC906knLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDTqdC006nRgC8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg06nQtNOp0YAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4KWnJyxcbiAgICAgICAgJzInOiAn4KWoJyxcbiAgICAgICAgJzMnOiAn4KWpJyxcbiAgICAgICAgJzQnOiAn4KWqJyxcbiAgICAgICAgJzUnOiAn4KWrJyxcbiAgICAgICAgJzYnOiAn4KWsJyxcbiAgICAgICAgJzcnOiAn4KWtJyxcbiAgICAgICAgJzgnOiAn4KWuJyxcbiAgICAgICAgJzknOiAn4KWvJyxcbiAgICAgICAgJzAnOiAn4KWmJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4KWnJzogJzEnLFxuICAgICAgICAn4KWoJzogJzInLFxuICAgICAgICAn4KWpJzogJzMnLFxuICAgICAgICAn4KWqJzogJzQnLFxuICAgICAgICAn4KWrJzogJzUnLFxuICAgICAgICAn4KWsJzogJzYnLFxuICAgICAgICAn4KWtJzogJzcnLFxuICAgICAgICAn4KWuJzogJzgnLFxuICAgICAgICAn4KWvJzogJzknLFxuICAgICAgICAn4KWmJzogJzAnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZU1yKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSlcbiAgICB7XG4gICAgICAgIHZhciBvdXRwdXQgPSAnJztcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAncyc6IG91dHB1dCA9ICfgpJXgpL7gpLngpYAg4KS44KWH4KSV4KSC4KSmJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3MnOiBvdXRwdXQgPSAnJWQg4KS44KWH4KSV4KSC4KSmJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbSc6IG91dHB1dCA9ICfgpI/gpJUg4KSu4KS/4KSo4KS/4KSfJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW0nOiBvdXRwdXQgPSAnJWQg4KSu4KS/4KSo4KS/4KSf4KWHJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaCc6IG91dHB1dCA9ICfgpI/gpJUg4KSk4KS+4KS4JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaGgnOiBvdXRwdXQgPSAnJWQg4KSk4KS+4KS4JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6IG91dHB1dCA9ICfgpI/gpJUg4KSm4KS/4KS14KS4JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGQnOiBvdXRwdXQgPSAnJWQg4KSm4KS/4KS14KS4JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6IG91dHB1dCA9ICfgpI/gpJUg4KSu4KS54KS/4KSo4KS+JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnTU0nOiBvdXRwdXQgPSAnJWQg4KSu4KS54KS/4KSo4KWHJzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneSc6IG91dHB1dCA9ICfgpI/gpJUg4KS14KSw4KWN4KS3JzsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAneXknOiBvdXRwdXQgPSAnJWQg4KS14KSw4KWN4KS34KWHJzsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOiBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpuCkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NzJzogb3V0cHV0ID0gJyVkIOCkuOClh+CkleCkguCkpuCkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkruCkv+CkqOCkv+Ckn+Ckvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21tJzogb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+CkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpOCkvuCkuOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hoJzogb3V0cHV0ID0gJyVkIOCkpOCkvuCkuOCkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkpuCkv+CkteCkuOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RkJzogb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuOCkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkruCkueCkv+CkqOCljeCkr+Ckvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ01NJzogb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOCljeCkr+CkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOiBvdXRwdXQgPSAn4KSP4KSV4KS+IOCkteCksOCljeCkt+Ckvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3l5Jzogb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+CkvuCkgic7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQucmVwbGFjZSgvJWQvaSwgbnVtYmVyKTtcbiAgICB9XG5cbiAgICB2YXIgbXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcicsIHtcbiAgICAgICAgbW9udGhzIDogJ+CknOCkvuCkqOClh+CkteCkvuCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpL7gpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+Ckj+CkquCljeCksOCkv+Cksl/gpK7gpYdf4KSc4KWC4KSoX+CknOClgeCksuCliF/gpJHgpJfgpLjgpY3gpJ9f4KS44KSq4KWN4KSf4KWH4KSC4KSs4KSwX+CkkeCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpLXgpY3gpLngpYfgpILgpKzgpLBf4KSh4KS/4KS44KWH4KSC4KSs4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ+CknOCkvuCkqOClhy5f4KSr4KWH4KSs4KWN4KSw4KWBLl/gpK7gpL7gpLDgpY3gpJouX+Ckj+CkquCljeCksOCkvy5f4KSu4KWHLl/gpJzgpYLgpKguX+CknOClgeCksuCliC5f4KSR4KSXLl/gpLjgpKrgpY3gpJ/gpYfgpIIuX+CkkeCkleCljeCkn+Cliy5f4KSo4KWL4KS14KWN4KS54KWH4KSCLl/gpKHgpL/gpLjgpYfgpIIuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4KSw4KS14KS/4KS14KS+4KSwX+CkuOCli+CkruCkteCkvuCksF/gpK7gpILgpJfgpLPgpLXgpL7gpLBf4KSs4KWB4KSn4KS14KS+4KSwX+Ckl+ClgeCksOClguCkteCkvuCksF/gpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLBf4KS24KSo4KS/4KS14KS+4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CksOCkteCkv1/gpLjgpYvgpK5f4KSu4KSC4KSX4KSzX+CkrOClgeCkp1/gpJfgpYHgpLDgpYJf4KS24KWB4KSV4KWN4KSwX+CktuCkqOCkvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4KSwX+CkuOCli1/gpK7gpIJf4KSs4KWBX+Ckl+ClgV/gpLbgpYFf4KS2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcyDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvicsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4KS14KS+4KSc4KSk4KS+J1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+CkhuCknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4KSJ4KSm4KWN4KSv4KS+XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgpJXgpL7gpLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CkruCkvuCkl+ClgOCksl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlOiAnJXPgpK7gpKfgpY3gpK/gpYcnLFxuICAgICAgICAgICAgcGFzdDogJyVz4KSq4KWC4KSw4KWN4KS14KWAJyxcbiAgICAgICAgICAgIHM6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgc3M6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgbTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBtbTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBoOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGhoOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGQ6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgZGQ6IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgTTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBNTTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICB5OiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHl5OiByZWxhdGl2ZVRpbWVNclxuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSk4KWN4KSw4KWAfOCkuOCkleCkvuCks+ClgHzgpKbgpYHgpKrgpL7gpLDgpYB84KS44KS+4KSv4KSC4KSV4KS+4KSz4KWALyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCljeCksOClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkleCkvuCks+ClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpYHgpKrgpL7gpLDgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkr+CkguCkleCkvuCks+ClgCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpY3gpLDgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkleCkvuCks+ClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWB4KSq4KS+4KSw4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCljeCksOClgCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1yO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcycsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0FoYWRfSXNuaW5fU2VsYXNhX1JhYnVfS2hhbWlzX0p1bWFhdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncGFnaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICd0ZW5nYWhhcmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0ZW5nYWhhcmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwZXRhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tIYXJpIGluaSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbRXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlbG1hcmluIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtsZXBhcyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbGFtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgeWFuZyBsZXBhcycsXG4gICAgICAgICAgICBzIDogJ2JlYmVyYXBhIHNhYXQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBtIDogJ3NlbWluaXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWluaXQnLFxuICAgICAgICAgICAgaCA6ICdzZWphbScsXG4gICAgICAgICAgICBoaCA6ICclZCBqYW0nLFxuICAgICAgICAgICAgZCA6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQgOiAnJWQgaGFyaScsXG4gICAgICAgICAgICBNIDogJ3NlYnVsYW4nLFxuICAgICAgICAgICAgTU0gOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeSA6ICdzZXRhaHVuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHRhaHVuJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1zTXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtcy1teScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcmlfRmVicnVhcmlfTWFjX0FwcmlsX01laV9KdW5fSnVsYWlfT2dvc19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EaXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX09nc19TZXBfT2t0X05vdl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0FoYWRfSXNuaW5fU2VsYXNhX1JhYnVfS2hhbWlzX0p1bWFhdF9TYWJ0dScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdBaGRfSXNuX1NlbF9SYWJfS2hhX0p1bV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0FoX0lzX1NsX1JiX0ttX0ptX1NiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hILm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISC5tbS5zcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvcGFnaXx0ZW5nYWhhcml8cGV0YW5nfG1hbGFtLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAncGFnaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICd0ZW5nYWhhcmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3BldGFuZycgfHwgbWVyaWRpZW0gPT09ICdtYWxhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3BhZ2knO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd0ZW5nYWhhcmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwZXRhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ21hbGFtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tIYXJpIGluaSBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbRXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlbG1hcmluIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtsZXBhcyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbGFtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgeWFuZyBsZXBhcycsXG4gICAgICAgICAgICBzIDogJ2JlYmVyYXBhIHNhYXQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBtIDogJ3NlbWluaXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWluaXQnLFxuICAgICAgICAgICAgaCA6ICdzZWphbScsXG4gICAgICAgICAgICBoaCA6ICclZCBqYW0nLFxuICAgICAgICAgICAgZCA6ICdzZWhhcmknLFxuICAgICAgICAgICAgZGQgOiAnJWQgaGFyaScsXG4gICAgICAgICAgICBNIDogJ3NlYnVsYW4nLFxuICAgICAgICAgICAgTU0gOiAnJWQgYnVsYW4nLFxuICAgICAgICAgICAgeSA6ICdzZXRhaHVuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHRhaHVuJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtc015O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtdCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbm5hcl9GcmFyX01hcnp1X0FwcmlsX01lamp1X8SgdW5qdV9MdWxqdV9Bd3dpc3N1X1NldHRlbWJydV9PdHR1YnJ1X05vdmVtYnJ1X0RpxItlbWJydScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZyYV9NYXJfQXByX01lal/EoHVuX0x1bF9Bd3dfU2V0X090dF9Ob3ZfRGnEiycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnSWwtxKZhZGRfSXQtVG5lam5fSXQtVGxpZXRhX0wtRXJiZ8SnYV9JbC3EpmFtaXNfSWwtxKBpbWfEp2FfSXMtU2lidCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfEpmFkX1RuZV9UbGlfRXJiX8SmYW1fxKBpbV9TaWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ8SmYV9Ubl9UbF9Fcl/EpmFfxKBpX1NpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSWxsdW0gZmlsLV1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tHxKdhZGEgZmlsLV1MVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtmaWwtXUxUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0lsLWJpZXJhxKcgZmlsLV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtsaSBnxKdhZGRhXSBbZmlsLV1MVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZuKAmSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGlsdScsXG4gICAgICAgICAgICBzIDogJ2Z0aXQgc2Vrb25kaScsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRpJyxcbiAgICAgICAgICAgIG0gOiAnbWludXRhJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0aScsXG4gICAgICAgICAgICBoIDogJ3NpZWfEp2EnLFxuICAgICAgICAgICAgaGggOiAnJWQgc2llZ8SnYXQnLFxuICAgICAgICAgICAgZCA6ICfEoXVybmF0YScsXG4gICAgICAgICAgICBkZCA6ICclZCDEoXJhbmV0JyxcbiAgICAgICAgICAgIE0gOiAneGFoYXInLFxuICAgICAgICAgICAgTU0gOiAnJWQgeGh1cicsXG4gICAgICAgICAgICB5IDogJ3NlbmEnLFxuICAgICAgICAgICAgeXkgOiAnJWQgc25pJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG10O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfhgYEnLFxuICAgICAgICAnMic6ICfhgYInLFxuICAgICAgICAnMyc6ICfhgYMnLFxuICAgICAgICAnNCc6ICfhgYQnLFxuICAgICAgICAnNSc6ICfhgYUnLFxuICAgICAgICAnNic6ICfhgYYnLFxuICAgICAgICAnNyc6ICfhgYcnLFxuICAgICAgICAnOCc6ICfhgYgnLFxuICAgICAgICAnOSc6ICfhgYknLFxuICAgICAgICAnMCc6ICfhgYAnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4YGBJzogJzEnLFxuICAgICAgICAn4YGCJzogJzInLFxuICAgICAgICAn4YGDJzogJzMnLFxuICAgICAgICAn4YGEJzogJzQnLFxuICAgICAgICAn4YGFJzogJzUnLFxuICAgICAgICAn4YGGJzogJzYnLFxuICAgICAgICAn4YGHJzogJzcnLFxuICAgICAgICAn4YGIJzogJzgnLFxuICAgICAgICAn4YGJJzogJzknLFxuICAgICAgICAn4YGAJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBteSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ215Jywge1xuICAgICAgICBtb250aHM6ICfhgIfhgJThgLrhgJThgJ3hgKvhgJvhgK5f4YCW4YCx4YCW4YCx4YCs4YC64YCd4YCr4YCb4YCuX+GAmeGAkOGAul/hgKfhgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgIfhgLDhgJzhgK3hgK/hgIThgLpf4YCe4YC84YCC4YCv4YCQ4YC6X+GAheGAgOGAuuGAkOGAhOGAuuGAmOGArF/hgKHhgLHhgKzhgIDhgLrhgJDhgK3hgK/hgJjhgKxf4YCU4YCt4YCv4YCd4YCE4YC64YCY4YCsX+GAkuGAruGAh+GAhOGAuuGAmOGArCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhgIfhgJThgLpf4YCW4YCxX+GAmeGAkOGAul/hgJXhgLzhgK5f4YCZ4YCxX+GAh+GAveGAlOGAul/hgJzhgK3hgK/hgIThgLpf4YCe4YC8X+GAheGAgOGAul/hgKHhgLHhgKzhgIDhgLpf4YCU4YCt4YCvX+GAkuGAricuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfhgJDhgJThgIThgLrhgLnhgILhgJThgL3hgLFf4YCQ4YCU4YCE4YC64YC54YCc4YCsX+GAoeGAhOGAuuGAueGAguGAq1/hgJfhgK/hgJLhgLnhgJPhgJ/hgLDhgLhf4YCA4YC84YCs4YCe4YCV4YCQ4YCx4YC4X+GAnuGAseGArOGAgOGAvOGArF/hgIXhgJThgLEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhgJThgL3hgLFf4YCc4YCsX+GAguGAq1/hgJ/hgLDhgLhf4YCA4YC84YCsX+GAnuGAseGArF/hgJThgLEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+GAmuGAlOGAsS5dIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4YCZ4YCU4YCA4YC64YCW4YC84YCU4YC6XSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhgJnhgJThgLEu4YCAXSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vhgJXhgLzhgK7hgLjhgIHhgLLhgLfhgJ7hgLHhgKxdIGRkZGQgTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ+GAnOGArOGAmeGAiuGAuuGAtyAlcyDhgJnhgL7hgKwnLFxuICAgICAgICAgICAgcGFzdDogJ+GAnOGAveGAlOGAuuGAgeGAsuGAt+GAnuGAseGArCAlcyDhgIAnLFxuICAgICAgICAgICAgczogJ+GAheGAgOGAueGAgOGAlOGAui7hgKHhgJThgIrhgLrhgLjhgIThgJrhgLonLFxuICAgICAgICAgICAgc3MgOiAnJWQg4YCF4YCA4YC54YCA4YCU4YC34YC6JyxcbiAgICAgICAgICAgIG06ICfhgJDhgIXhgLrhgJnhgK3hgJThgIXhgLonLFxuICAgICAgICAgICAgbW06ICclZCDhgJnhgK3hgJThgIXhgLonLFxuICAgICAgICAgICAgaDogJ+GAkOGAheGAuuGAlOGArOGAm+GAricsXG4gICAgICAgICAgICBoaDogJyVkIOGAlOGArOGAm+GAricsXG4gICAgICAgICAgICBkOiAn4YCQ4YCF4YC64YCb4YCA4YC6JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4YCb4YCA4YC6JyxcbiAgICAgICAgICAgIE06ICfhgJDhgIXhgLrhgJwnLFxuICAgICAgICAgICAgTU06ICclZCDhgJwnLFxuICAgICAgICAgICAgeTogJ+GAkOGAheGAuuGAlOGAvuGAheGAuicsXG4gICAgICAgICAgICB5eTogJyVkIOGAlOGAvuGAheGAuidcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+GBgeGBguGBg+GBhOGBheGBhuGBh+GBiOGBieGBgF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBteTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG5iID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmInLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW4uX2ZlYi5fbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVzLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ3PDuG5kYWdfbWFuZGFnX3RpcnNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDuHJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnc8O4Ll9tYS5fdGkuX29uLl90by5fZnIuX2zDuC4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3PDuF9tYV90aV9vbl90b19mcl9sw7gnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSBkYWcga2wuXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZm9ycmlnZV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHMgOiAnbm9lbiBzZWt1bmRlcicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWt1bmRlcicsXG4gICAgICAgICAgICBtIDogJ2V0dCBtaW51dHQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0ZXInLFxuICAgICAgICAgICAgaCA6ICdlbiB0aW1lJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2VyJyxcbiAgICAgICAgICAgIE0gOiAnZW4gbcOlbmVkJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DpW5lZGVyJyxcbiAgICAgICAgICAgIHkgOiAnZXR0IMOlcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+ClpycsXG4gICAgICAgICcyJzogJ+ClqCcsXG4gICAgICAgICczJzogJ+ClqScsXG4gICAgICAgICc0JzogJ+ClqicsXG4gICAgICAgICc1JzogJ+ClqycsXG4gICAgICAgICc2JzogJ+ClrCcsXG4gICAgICAgICc3JzogJ+ClrScsXG4gICAgICAgICc4JzogJ+ClricsXG4gICAgICAgICc5JzogJ+ClrycsXG4gICAgICAgICcwJzogJ+ClpidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgJ+Clpic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgbmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCduZScsIHtcbiAgICAgICAgbW9udGhzIDogJ+CknOCkqOCkteCksOClgF/gpKvgpYfgpKzgpY3gpLDgpYHgpLXgpLDgpYBf4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkv+Cksl/gpK7gpIhf4KSc4KWB4KSoX+CknOClgeCksuCkvuCkiF/gpIXgpJfgpLfgpY3gpJ9f4KS44KWH4KSq4KWN4KSf4KWH4KSu4KWN4KSs4KSwX+CkheCkleCljeCkn+Cli+CkrOCksF/gpKjgpYvgpK3gpYfgpK7gpY3gpKzgpLBf4KSh4KS/4KS44KWH4KSu4KWN4KSs4KSwJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgpJzgpKguX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaX+CkheCkquCljeCksOCkvy5f4KSu4KSIX+CknOClgeCkqF/gpJzgpYHgpLLgpL7gpIguX+CkheCkly5f4KS44KWH4KSq4KWN4KSfLl/gpIXgpJXgpY3gpJ/gpYsuX+CkqOCli+CkreClhy5f4KSh4KS/4KS44KWHLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CkhuCkh+CkpOCkrOCkvuCksF/gpLjgpYvgpK7gpKzgpL7gpLBf4KSu4KSZ4KWN4KSX4KSy4KSs4KS+4KSwX+CkrOClgeCkp+CkrOCkvuCksF/gpKzgpL/gpLngpL/gpKzgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KSs4KS+4KSwX+CktuCkqOCkv+CkrOCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgpIbgpIfgpKQuX+CkuOCli+Ckri5f4KSu4KSZ4KWN4KSX4KSyLl/gpKzgpYHgpKcuX+CkrOCkv+CkueCkvy5f4KS24KWB4KSV4KWN4KSwLl/gpLbgpKjgpL8uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgpIYuX+CkuOCliy5f4KSu4KSCLl/gpKzgpYEuX+CkrOCkvy5f4KS24KWBLl/gpLYuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0HgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTFRTIDogJ0HgpJXgpYsgaDptbTpzcyDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhycsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4KWn4KWo4KWp4KWq4KWr4KWs4KWt4KWu4KWv4KWmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4KSw4KS+4KSk4KS/fOCkrOCkv+CkueCkvuCkqHzgpKbgpL/gpIngpIHgpLjgpYt84KS44KS+4KSB4KSdLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CksOCkvuCkpOCkvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkrOCkv+CkueCkvuCkqCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKbgpL/gpIngpIHgpLjgpYsnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkuOCkvuCkgeCknScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKzgpL/gpLngpL7gpKgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuCkv+CkieCkgeCkuOCliyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSB4KSdJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+CkhuCknF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4KSt4KWL4KSy4KS/XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4KSG4KSJ4KSB4KSm4KWLXSBkZGRkWyxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+CkueCkv+CknOCli10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+Ckl+Ckj+CkleCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXPgpK7gpL4nLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgpIXgpJfgpL7gpKHgpL8nLFxuICAgICAgICAgICAgcyA6ICfgpJXgpYfgpLngpYAg4KSV4KWN4KS34KSjJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCkuOClh+CkleClh+Cko+CljeCkoScsXG4gICAgICAgICAgICBtIDogJ+Ckj+CklSDgpK7gpL/gpKjgpYfgpJ8nLFxuICAgICAgICAgICAgbW0gOiAnJWQg4KSu4KS/4KSo4KWH4KSfJyxcbiAgICAgICAgICAgIGggOiAn4KSP4KSVIOCkmOCko+CljeCkn+CkvicsXG4gICAgICAgICAgICBoaCA6ICclZCDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgZCA6ICfgpI/gpJUg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBNIDogJ+Ckj+CklSDgpK7gpLngpL/gpKjgpL4nLFxuICAgICAgICAgICAgTU0gOiAnJWQg4KSu4KS54KS/4KSo4KS+JyxcbiAgICAgICAgICAgIHkgOiAn4KSP4KSVIOCkrOCksOCljeCktycsXG4gICAgICAgICAgICB5eSA6ICclZCDgpKzgpLDgpY3gpLcnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9ICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eamFuL2ksIC9eZmViL2ksIC9ebWFhcnR8bXJ0Lj8kL2ksIC9eYXByL2ksIC9ebWVpJC9pLCAvXmp1bltpLl0/JC9pLCAvXmp1bFtpLl0/JC9pLCAvXmF1Zy9pLCAvXnNlcC9pLCAvXm9rdC9pLCAvXm5vdi9pLCAvXmRlYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzIDogJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgcyA6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtIDogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGggOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHV1cicsXG4gICAgICAgICAgICBkIDogJ8Opw6luIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNIDogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1hYW5kZW4nLFxuICAgICAgICAgICAgeSA6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5sO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnRXaXRoRG90cyA9ICdqYW4uX2ZlYi5fbXJ0Ll9hcHIuX21laV9qdW4uX2p1bC5fYXVnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydFdpdGhvdXREb3RzID0gJ2phbl9mZWJfbXJ0X2Fwcl9tZWlfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eamFuL2ksIC9eZmViL2ksIC9ebWFhcnR8bXJ0Lj8kL2ksIC9eYXByL2ksIC9ebWVpJC9pLCAvXmp1bltpLl0/JC9pLCAvXmp1bFtpLl0/JC9pLCAvXmF1Zy9pLCAvXnNlcC9pLCAvXm9rdC9pLCAvXm5vdi9pLCAvXmRlYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyfGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2k7XG5cbiAgICB2YXIgbmxCZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25sLWJlJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyaV9mZWJydWFyaV9tYWFydF9hcHJpbF9tZWlfanVuaV9qdWxpX2F1Z3VzdHVzX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhvdXREb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFdpdGhEb3RzW20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKGphbnVhcml8ZmVicnVhcml8bWFhcnR8YXByaWx8bWVpfGp1W25sXWl8YXVndXN0dXN8c2VwdGVtYmVyfG9rdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKGphblxcLj98ZmViXFwuP3xtcnRcXC4/fGFwclxcLj98bWVpfGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pLFxuXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgd2Vla2RheXMgOiAnem9uZGFnX21hYW5kYWdfZGluc2RhZ193b2Vuc2RhZ19kb25kZXJkYWdfdnJpamRhZ196YXRlcmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICd6by5fbWEuX2RpLl93by5fZG8uX3ZyLl96YS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3pvX21hX2RpX3dvX2RvX3ZyX3phJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW3ZhbmRhYWcgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dpc3RlcmVuIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1thZmdlbG9wZW5dIGRkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvdmVyICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgZ2VsZWRlbicsXG4gICAgICAgICAgICBzIDogJ2VlbiBwYWFyIHNlY29uZGVuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGVuJyxcbiAgICAgICAgICAgIG0gOiAnw6nDqW4gbWludXV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6ICfDqcOpbiB1dXInLFxuICAgICAgICAgICAgaGggOiAnJWQgdXVyJyxcbiAgICAgICAgICAgIGQgOiAnw6nDqW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2VuJyxcbiAgICAgICAgICAgIE0gOiAnw6nDqW4gbWFhbmQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWFhbmRlbicsXG4gICAgICAgICAgICB5IDogJ8Opw6luIGphYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgamFhcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0ZXxkZSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICgobnVtYmVyID09PSAxIHx8IG51bWJlciA9PT0gOCB8fCBudW1iZXIgPj0gMjApID8gJ3N0ZScgOiAnZGUnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmxCZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG5uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbm4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcmlsX21haV9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3VuZGFnX23DpW5kYWdfdHlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sYXVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1bl9tw6VuX3R5c19vbnNfdG9yX2ZyZV9sYXUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3N1X23DpV90eV9vbl90b19mcl9sw7gnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJIGRhZyBrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSSBtb3Jnb24ga2xva2thXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2tsb2trYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJIGfDpXIga2xva2thXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tGw7hyZWfDpWFuZGVdIGRkZGQgW2tsb2trYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBzaWRhbicsXG4gICAgICAgICAgICBzIDogJ25va3JlIHNla3VuZCcsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWt1bmQnLFxuICAgICAgICAgICAgbSA6ICdlaXQgbWludXR0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0dCcsXG4gICAgICAgICAgICBoIDogJ2VpbiB0aW1lJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRpbWFyJyxcbiAgICAgICAgICAgIGQgOiAnZWluIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdhcicsXG4gICAgICAgICAgICBNIDogJ2VpbiBtw6VuYWQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOlbmFkZXInLFxuICAgICAgICAgICAgeSA6ICdlaXQgw6VyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMOlcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBubjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4KmnJyxcbiAgICAgICAgJzInOiAn4KmoJyxcbiAgICAgICAgJzMnOiAn4KmpJyxcbiAgICAgICAgJzQnOiAn4KmqJyxcbiAgICAgICAgJzUnOiAn4KmrJyxcbiAgICAgICAgJzYnOiAn4KmsJyxcbiAgICAgICAgJzcnOiAn4KmtJyxcbiAgICAgICAgJzgnOiAn4KmuJyxcbiAgICAgICAgJzknOiAn4KmvJyxcbiAgICAgICAgJzAnOiAn4KmmJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4KmnJzogJzEnLFxuICAgICAgICAn4KmoJzogJzInLFxuICAgICAgICAn4KmpJzogJzMnLFxuICAgICAgICAn4KmqJzogJzQnLFxuICAgICAgICAn4KmrJzogJzUnLFxuICAgICAgICAn4KmsJzogJzYnLFxuICAgICAgICAn4KmtJzogJzcnLFxuICAgICAgICAn4KmuJzogJzgnLFxuICAgICAgICAn4KmvJzogJzknLFxuICAgICAgICAn4KmmJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBwYUluID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGEtaW4nLCB7XG4gICAgICAgIC8vIFRoZXJlIGFyZSBtb250aHMgbmFtZSBhcyBwZXIgTmFuYWtzaGFoaSBDYWxlbmRhciBidXQgdGhleSBhcmUgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gUHVuamFiaS5cbiAgICAgICAgbW9udGhzIDogJ+ConOCoqOCoteCosOCpgF/gqKvgqLzgqLDgqLXgqLDgqYBf4Kiu4Ki+4Kiw4KiaX+CoheCoquCpjeCosOCpiOCosl/gqK7gqIhf4Kic4KmC4KioX+ConOCpgeCosuCovuCoiF/gqIXgqJfgqLjgqKRf4Ki44Kik4Kmw4Kis4KiwX+CoheColeCopOCpguCorOCosF/gqKjgqLXgqbDgqKzgqLBf4Kim4Ki44Kmw4Kis4KiwJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4KiQ4Kik4Ki14Ki+4KiwX+CouOCpi+CoruCoteCovuCosF/gqK7gqbDgqJfgqLLgqLXgqL7gqLBf4Kis4KmB4Kin4Ki14Ki+4KiwX+CoteCpgOCosOCoteCovuCosF/gqLjgqLzgqYHgqbHgqJXgqLDgqLXgqL7gqLBf4Ki44Ki84Kio4KmA4Kia4Kiw4Ki14Ki+4KiwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4KiQ4KikX+CouOCpi+Corl/gqK7gqbDgqJfgqLJf4Kis4KmB4KinX+CoteCpgOCosF/gqLjgqLzgqYHgqJXgqLBf4Ki44Ki84Kio4KmAJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcyDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphycsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0g4Ki14Kic4KmHJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+CoheConF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4KiF4KiX4Kiy4Ki+XSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgqJXgqLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgqKrgqL/gqJvgqLLgqYddIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgqLXgqL/gqbHgqJonLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgqKrgqL/gqJvgqLLgqYcnLFxuICAgICAgICAgICAgcyA6ICfgqJXgqYHgqJ0g4Ki44KiV4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCouOColeCov+CpsOConycsXG4gICAgICAgICAgICBtIDogJ+Coh+ColSDgqK7gqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbW0gOiAnJWQg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIGggOiAn4KiH4Kmx4KiVIOComOCpsOCon+CovicsXG4gICAgICAgICAgICBoaCA6ICclZCDgqJjgqbDgqJ/gqYcnLFxuICAgICAgICAgICAgZCA6ICfgqIfgqbHgqJUg4Kim4Ki/4KioJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCopuCov+CoqCcsXG4gICAgICAgICAgICBNIDogJ+Coh+CpseColSDgqK7gqLngqYDgqKjgqL4nLFxuICAgICAgICAgICAgTU0gOiAnJWQg4Kiu4Ki54KmA4Kio4KmHJyxcbiAgICAgICAgICAgIHkgOiAn4KiH4Kmx4KiVIOCouOCovuCosicsXG4gICAgICAgICAgICB5eSA6ICclZCDgqLjgqL7gqLInXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgqafgqajgqangqargqavgqazgqa3gqa7gqa/gqaZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFB1bmphYmkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gUHVuamFiaS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CosOCovuCopHzgqLjgqLXgqYfgqLB84Kim4KmB4Kiq4Ki54Ki/4KiwfOCouOCovOCovuCori8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgqLDgqL7gqKQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLXgqYfgqLAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Kim4KmB4Kiq4Ki54Ki/4KiwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqLjgqLzgqL7gqK4nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ki44Ki14KmH4KiwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqKbgqYHgqKrgqLngqL/gqLAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CouOCovOCovuCoric7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kiw4Ki+4KikJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGFJbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc05vbWluYXRpdmUgPSAnc3R5Y3plxYRfbHV0eV9tYXJ6ZWNfa3dpZWNpZcWEX21hal9jemVyd2llY19saXBpZWNfc2llcnBpZcWEX3dyemVzaWXFhF9wYcW6ZHppZXJuaWtfbGlzdG9wYWRfZ3J1ZHppZcWEJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTdWJqZWN0aXZlID0gJ3N0eWN6bmlhX2x1dGVnb19tYXJjYV9rd2lldG5pYV9tYWphX2N6ZXJ3Y2FfbGlwY2Ffc2llcnBuaWFfd3J6ZcWbbmlhX3Bhxbpkemllcm5pa2FfbGlzdG9wYWRhX2dydWRuaWEnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIChuICUgMTAgPCA1KSAmJiAobiAlIDEwID4gMSkgJiYgKCh+fihuIC8gMTApICUgMTApICE9PSAxKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWt1bmQnKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAnbWludXTEmSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW51dHknIDogJ21pbnV0Jyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCAgPyAnZ29kemluYScgIDogJ2dvZHppbsSZJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2dvZHppbnknIDogJ2dvZHppbicpO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWllc2nEhWNlJyA6ICdtaWVzacSZY3knKTtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2xhdGEnIDogJ2xhdCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBsID0gbW9tZW50LmRlZmluZUxvY2FsZSgncGwnLCB7XG4gICAgICAgIG1vbnRocyA6IGZ1bmN0aW9uIChtb21lbnRUb0Zvcm1hdCwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudFRvRm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc05vbWluYXRpdmU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAvLyBIYWNrOiBpZiBmb3JtYXQgZW1wdHkgd2Uga25vdyB0aGlzIGlzIHVzZWQgdG8gZ2VuZXJhdGVcbiAgICAgICAgICAgICAgICAvLyBSZWdFeHAgYnkgbW9tZW50LiBHaXZlIHRoZW4gYmFjayBib3RoIHZhbGlkIGZvcm1zIG9mIG1vbnRoc1xuICAgICAgICAgICAgICAgIC8vIGluIFJlZ0V4cCByZWFkeSBmb3JtYXQuXG4gICAgICAgICAgICAgICAgcmV0dXJuICcoJyArIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV0gKyAnfCcgKyBtb250aHNOb21pbmF0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvRCBNTU1NLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU3ViamVjdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc05vbWluYXRpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3N0eV9sdXRfbWFyX2t3aV9tYWpfY3plX2xpcF9zaWVfd3J6X3BhxbpfbGlzX2dydScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmllZHppZWxhX3BvbmllZHppYcWCZWtfd3RvcmVrX8Wbcm9kYV9jendhcnRla19wacSFdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZHpfcG9uX3d0X8Wbcl9jendfcHRfc29iJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdOZF9Qbl9XdF/FmnJfQ3pfUHRfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0R6acWbIG9dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSnV0cm8gb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyBuaWVkemllbMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXZSB3dG9yZWsgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgxZtyb2TEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyBzb2JvdMSZIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbV10gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW1djem9yYWogb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSBuaWVkemllbMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSDFm3JvZMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbVyB6ZXN6xYLEhSBzb2JvdMSZIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCeV0gZGRkZCBbb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHRlbXUnLFxuICAgICAgICAgICAgcyA6ICdraWxrYSBzZWt1bmQnLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogJzEgZHppZcWEJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRuaScsXG4gICAgICAgICAgICBNIDogJ21pZXNpxIVjJyxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6ICdyb2snLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHB0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgncHQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5laXJvX0ZldmVyZWlyb19NYXLDp29fQWJyaWxfTWFpb19KdW5ob19KdWxob19BZ29zdG9fU2V0ZW1icm9fT3V0dWJyb19Ob3ZlbWJyb19EZXplbWJybycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0Zldl9NYXJfQWJyX01haV9KdW5fSnVsX0Fnb19TZXRfT3V0X05vdl9EZXonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0RvbWluZ29fU2VndW5kYS1mZWlyYV9UZXLDp2EtZmVpcmFfUXVhcnRhLWZlaXJhX1F1aW50YS1mZWlyYV9TZXh0YS1mZWlyYV9Tw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0RvbV9TZWdfVGVyX1F1YV9RdWlfU2V4X1PDoWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0RvXzLCql8zwqpfNMKqXzXCql82wqpfU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIFtkZV0gTU1NTSBbZGVdIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tIb2plIMOgc10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbWFuaMOjIMOgc10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbT250ZW0gw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5kYXkoKSA9PT0gMCB8fCB0aGlzLmRheSgpID09PSA2KSA/XG4gICAgICAgICAgICAgICAgICAgICdbw5psdGltb10gZGRkZCBbw6BzXSBMVCcgOiAvLyBTYXR1cmRheSArIFN1bmRheVxuICAgICAgICAgICAgICAgICAgICAnW8OabHRpbWFdIGRkZGQgW8Ogc10gTFQnOyAvLyBNb25kYXkgLSBGcmlkYXlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdlbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2jDoSAlcycsXG4gICAgICAgICAgICBzIDogJ3NlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW0gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bWEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkIDogJ3VtIGRpYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkaWFzJyxcbiAgICAgICAgICAgIE0gOiAndW0gbcOqcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VtIGFubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm9zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHB0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgcHRCciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0LWJyJywge1xuICAgICAgICBtb250aHMgOiAnSmFuZWlyb19GZXZlcmVpcm9fTWFyw6dvX0FicmlsX01haW9fSnVuaG9fSnVsaG9fQWdvc3RvX1NldGVtYnJvX091dHVicm9fTm92ZW1icm9fRGV6ZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIFvDoHNdIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICAgICAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIDogLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdow6EgJXMnLFxuICAgICAgICAgICAgcyA6ICdwb3Vjb3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1bSBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VtYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW0gZGlhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRpYXMnLFxuICAgICAgICAgICAgTSA6ICd1bSBtw6pzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW0gYW5vJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6J1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHB0QnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICAgICAnc3MnOiAnc2VjdW5kZScsXG4gICAgICAgICAgICAgICAgJ21tJzogJ21pbnV0ZScsXG4gICAgICAgICAgICAgICAgJ2hoJzogJ29yZScsXG4gICAgICAgICAgICAgICAgJ2RkJzogJ3ppbGUnLFxuICAgICAgICAgICAgICAgICdNTSc6ICdsdW5pJyxcbiAgICAgICAgICAgICAgICAneXknOiAnYW5pJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNlcGFyYXRvciA9ICcgJztcbiAgICAgICAgaWYgKG51bWJlciAlIDEwMCA+PSAyMCB8fCAobnVtYmVyID49IDEwMCAmJiBudW1iZXIgJSAxMDAgPT09IDApKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAnIGRlICc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bWJlciArIHNlcGFyYXRvciArIGZvcm1hdFtrZXldO1xuICAgIH1cblxuICAgIHZhciBybyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3JvJywge1xuICAgICAgICBtb250aHMgOiAnaWFudWFyaWVfZmVicnVhcmllX21hcnRpZV9hcHJpbGllX21haV9pdW5pZV9pdWxpZV9hdWd1c3Rfc2VwdGVtYnJpZV9vY3RvbWJyaWVfbm9pZW1icmllX2RlY2VtYnJpZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnaWFuLl9mZWJyLl9tYXJ0Ll9hcHIuX21haV9pdW4uX2l1bC5fYXVnLl9zZXB0Ll9vY3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZHVtaW5pY8SDX2x1bmlfbWFyyJtpX21pZXJjdXJpX2pvaV92aW5lcmlfc8OibWLEg3TEgycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEdW1fTHVuX01hcl9NaWVfSm9pX1Zpbl9Tw6JtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEdV9MdV9NYV9NaV9Kb19WaV9Tw6InLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYXppIGxhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW23DomluZSBsYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtsYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpZXJpIGxhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tmb3N0YV0gZGRkZCBbbGFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3Blc3RlICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgw65uIHVybcSDJyxcbiAgICAgICAgICAgIHMgOiAnY8OidGV2YSBzZWN1bmRlJyxcbiAgICAgICAgICAgIHNzIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXQnLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6ICdvIG9yxIMnLFxuICAgICAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZCA6ICdvIHppJyxcbiAgICAgICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE0gOiAnbyBsdW7EgycsXG4gICAgICAgICAgICBNTSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBybztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiAobnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApID8gZm9ybXNbMV0gOiBmb3Jtc1syXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdzcyc6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgJ21tJzogd2l0aG91dFN1ZmZpeCA/ICfQvNC40L3Rg9GC0LBf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInIDogJ9C80LjQvdGD0YLRg1/QvNC40L3Rg9GC0Ytf0LzQuNC90YPRgicsXG4gICAgICAgICAgICAnaGgnOiAn0YfQsNGBX9GH0LDRgdCwX9GH0LDRgdC+0LInLFxuICAgICAgICAgICAgJ2RkJzogJ9C00LXQvdGMX9C00L3Rj1/QtNC90LXQuScsXG4gICAgICAgICAgICAnTU0nOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0LBf0LzQtdGB0Y/RhtC10LInLFxuICAgICAgICAgICAgJ3l5JzogJ9Cz0L7QtF/Qs9C+0LTQsF/Qu9C10YInXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwJyA6ICfQvNC40L3Rg9GC0YMnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9e0Y/QvdCyL2ksIC9e0YTQtdCyL2ksIC9e0LzQsNGAL2ksIC9e0LDQv9GAL2ksIC9e0LzQsFvQudGPXS9pLCAvXtC40Y7QvS9pLCAvXtC40Y7Quy9pLCAvXtCw0LLQsy9pLCAvXtGB0LXQvS9pLCAvXtC+0LrRgi9pLCAvXtC90L7Rjy9pLCAvXtC00LXQui9pXTtcblxuICAgIC8vIGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL3J1bGVzLzEzOS1wcm9wIDogwqcgMTAzXG4gICAgLy8g0KHQvtC60YDQsNGJ0LXQvdC40Y8g0LzQtdGB0Y/RhtC10LI6IGh0dHA6Ly9uZXcuZ3JhbW90YS5ydS9zcHJhdmthL2J1cm8vc2VhcmNoLWFuc3dlcj9zPTI0MjYzN1xuICAgIC8vIENMRFIgZGF0YTogICAgICAgICAgaHR0cDovL3d3dy51bmljb2RlLm9yZy9jbGRyL2NoYXJ0cy8yOC9zdW1tYXJ5L3J1Lmh0bWwjMTc1M1xuICAgIHZhciBydSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3J1Jywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LLQsNGA0Y9f0YTQtdCy0YDQsNC70Y9f0LzQsNGA0YLQsF/QsNC/0YDQtdC70Y9f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQs9GD0YHRgtCwX9GB0LXQvdGC0Y/QsdGA0Y9f0L7QutGC0Y/QsdGA0Y9f0L3QvtGP0LHRgNGPX9C00LXQutCw0LHRgNGPJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3QstCw0YDRjF/RhNC10LLRgNCw0LvRjF/QvNCw0YDRgl/QsNC/0YDQtdC70Yxf0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgNGMX9C+0LrRgtGP0LHRgNGMX9C90L7Rj9Cx0YDRjF/QtNC10LrQsNCx0YDRjCcuc3BsaXQoJ18nKVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6IHtcbiAgICAgICAgICAgIC8vINC/0L4gQ0xEUiDQuNC80LXQvdC90L4gXCLQuNGO0LsuXCIg0LggXCLQuNGO0L0uXCIsINC90L4g0LrQsNC60L7QuSDRgdC80YvRgdC7INC80LXQvdGP0YLRjCDQsdGD0LrQstGDINC90LAg0YLQvtGH0LrRgyA/XG4gICAgICAgICAgICBmb3JtYXQ6ICfRj9C90LIuX9GE0LXQstGALl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGPX9C40Y7QvdGPX9C40Y7Qu9GPX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGA0YJf0LDQv9GALl/QvNCw0Llf0LjRjtC90Yxf0LjRjtC70Yxf0LDQstCzLl/RgdC10L3Rgi5f0L7QutGCLl/QvdC+0Y/QsS5f0LTQtdC6Licuc3BsaXQoJ18nKVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTQsF/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbQsF/RgdGD0LHQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ9Cy0L7RgdC60YDQtdGB0LXQvdGM0LVf0L/QvtC90LXQtNC10LvRjNC90LjQul/QstGC0L7RgNC90LjQul/RgdGA0LXQtNGDX9GH0LXRgtCy0LXRgNCzX9C/0Y/RgtC90LjRhtGDX9GB0YPQsdCx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQktCyXSA/KD860L/RgNC+0YjQu9GD0Y580YHQu9C10LTRg9GO0YnRg9GOfNGN0YLRgyk/ID9cXF0gP2RkZGQvXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0LLRgV/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcblxuICAgICAgICAvLyDQv9C+0LvQvdGL0LUg0L3QsNC30LLQsNC90LjRjyDRgSDQv9Cw0LTQtdC20LDQvNC4LCDQv9C+INGC0YDQuCDQsdGD0LrQstGLLCDQtNC70Y8g0L3QtdC60L7RgtC+0YDRi9GFLCDQv9C+IDQg0LHRg9C60LLRiywg0YHQvtC60YDQsNGJ0LXQvdC40Y8g0YEg0YLQvtGH0LrQvtC5INC4INCx0LXQtyDRgtC+0YfQutC4XG4gICAgICAgIG1vbnRoc1JlZ2V4OiAvXijRj9C90LLQsNGAW9GM0Y9dfNGP0L3QslxcLj980YTQtdCy0YDQsNC7W9GM0Y9dfNGE0LXQstGAP1xcLj980LzQsNGA0YLQsD980LzQsNGAXFwuP3zQsNC/0YDQtdC7W9GM0Y9dfNCw0L/RgFxcLj980LzQsFvQudGPXXzQuNGO0L1b0YzRj1180LjRjtC9XFwuP3zQuNGO0Ltb0YzRj1180LjRjtC7XFwuP3zQsNCy0LPRg9GB0YLQsD980LDQstCzXFwuP3zRgdC10L3RgtGP0LHRgFvRjNGPXXzRgdC10L3Rgj9cXC4/fNC+0LrRgtGP0LHRgFvRjNGPXXzQvtC60YJcXC4/fNC90L7Rj9Cx0YBb0YzRj1180L3QvtGP0LE/XFwuP3zQtNC10LrQsNCx0YBb0YzRj1180LTQtdC6XFwuPykvaSxcblxuICAgICAgICAvLyDQutC+0L/QuNGPINC/0YDQtdC00YvQtNGD0YnQtdCz0L5cbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14o0Y/QvdCy0LDRgFvRj9GMXXzRhNC10LLRgNCw0Ltb0Y/RjF180LzQsNGA0YLQsD980LDQv9GA0LXQu1vRj9GMXXzQvNCwW9GP0LldfNC40Y7QvVvRj9GMXXzQuNGO0Ltb0Y/RjF180LDQstCz0YPRgdGC0LA/fNGB0LXQvdGC0Y/QsdGAW9GP0YxdfNC+0LrRgtGP0LHRgFvRj9GMXXzQvdC+0Y/QsdGAW9GP0YxdfNC00LXQutCw0LHRgFvRj9GMXSkvaSxcblxuICAgICAgICAvLyDQktGL0YDQsNC20LXQvdC40LUsINC60L7RgtC+0YDQvtC1INGB0L7QvtGC0LLQtdGB0YLQstGD0LXRgiDRgtC+0LvRjNC60L4g0YHQvtC60YDQsNGJ0ZHQvdC90YvQvCDRhNC+0YDQvNCw0LxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14o0Y/QvdCyXFwufNGE0LXQstGAP1xcLnzQvNCw0YBb0YIuXXzQsNC/0YBcXC580LzQsFvRj9C5XXzQuNGO0L1b0YzRjy5dfNC40Y7Qu1vRjNGPLl180LDQstCzXFwufNGB0LXQvdGCP1xcLnzQvtC60YJcXC580L3QvtGP0LE/XFwufNC00LXQulxcLikvaSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINCzLiwgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINCzLiwgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9Ch0LXQs9C+0LTQvdGPLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0LLRgtGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9CS0YfQtdGA0LAsINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC10LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0LjQuV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpICE9PSB0aGlzLndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70L7QtV0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9GL0LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRg9GOXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRheSgpID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQktC+XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSXSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfRh9C10YDQtdC3ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg0L3QsNC30LDQtCcsXG4gICAgICAgICAgICBzIDogJ9C90LXRgdC60L7Qu9GM0LrQviDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3MgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtbSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkIDogJ9C00LXQvdGMJyxcbiAgICAgICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIE0gOiAn0LzQtdGB0Y/RhicsXG4gICAgICAgICAgICBNTSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5IDogJ9Cz0L7QtCcsXG4gICAgICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9C4fNGD0YLRgNCwfNC00L3Rj3zQstC10YfQtdGA0LAvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQtdGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YPRgtGA0LAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0LXRgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+fNGPKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Rjyc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcnU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICfYrNmG2YjYsdmKJyxcbiAgICAgICAgJ9mB2YrYqNix2YjYsdmKJyxcbiAgICAgICAgJ9mF2KfYsdqGJyxcbiAgICAgICAgJ9in2b7YsdmK2YQnLFxuICAgICAgICAn2YXYptmKJyxcbiAgICAgICAgJ9is2YjZhicsXG4gICAgICAgICfYrNmI2YTYp9ih2ZAnLFxuICAgICAgICAn2KLar9iz2b0nLFxuICAgICAgICAn2LPZitm+2b3Zhdio2LEnLFxuICAgICAgICAn2KLaqtm92YjYqNixJyxcbiAgICAgICAgJ9mG2YjZhdio2LEnLFxuICAgICAgICAn2orYs9mF2KjYsSdcbiAgICBdO1xuICAgIHZhciBkYXlzID0gW1xuICAgICAgICAn2KLahtixJyxcbiAgICAgICAgJ9iz2YjZhdixJyxcbiAgICAgICAgJ9in2rHYp9ix2YgnLFxuICAgICAgICAn2KfYsdio2LknLFxuICAgICAgICAn2K7ZhdmK2LMnLFxuICAgICAgICAn2KzZhdi5JyxcbiAgICAgICAgJ9qH2Ybah9ixJ1xuICAgIF07XG5cbiAgICB2YXIgc2QgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZCcsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiBkYXlzLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vYp9qEXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vYs9qA2Kfau9mKXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYp9qz2YrZhiDZh9mB2KrZiiDYqtmKXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vaqtin2YTZh9mHXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb2q/Ystix2YrZhCDZh9mB2KrZil0gZGRkZCBb2KrZil0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINm+2YjYoScsXG4gICAgICAgICAgICBwYXN0IDogJyVzINin2rMnLFxuICAgICAgICAgICAgcyA6ICfahtmG2K8g2LPZitqq2YbaiicsXG4gICAgICAgICAgICBzcyA6ICclZCDYs9mK2qrZhtqKJyxcbiAgICAgICAgICAgIG0gOiAn2YfaqiDZhdmG2b0nLFxuICAgICAgICAgICAgbW0gOiAnJWQg2YXZhtm9JyxcbiAgICAgICAgICAgIGggOiAn2YfaqiDaqtmE2KfaqicsXG4gICAgICAgICAgICBoaCA6ICclZCDaqtmE2KfaqicsXG4gICAgICAgICAgICBkIDogJ9mH2qog2o/ZitmG2YfZhicsXG4gICAgICAgICAgICBkZCA6ICclZCDaj9mK2YbZh9mGJyxcbiAgICAgICAgICAgIE0gOiAn2YfaqiDZhdmH2YrZhtmIJyxcbiAgICAgICAgICAgIE1NIDogJyVkINmF2YfZitmG2KcnLFxuICAgICAgICAgICAgeSA6ICfZh9qqINiz2KfZhCcsXG4gICAgICAgICAgICB5eSA6ICclZCDYs9in2YQnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NlJywge1xuICAgICAgICBtb250aHMgOiAnb8SRxJFhamFnZW3DoW5udV9ndW92dmFtw6FubnVfbmp1a8SNYW3DoW5udV9jdW/Fi29tw6FubnVfbWllc3NlbcOhbm51X2dlYXNzZW3DoW5udV9zdW9pZG5lbcOhbm51X2JvcmdlbcOhbm51X8SNYWvEjWFtw6FubnVfZ29sZ2dvdG3DoW5udV9za8OhYm1hbcOhbm51X2p1b3ZsYW3DoW5udScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnb8SRxJFqX2d1b3Zfbmp1a19jdW9fbWllc19nZWFzX3N1b2lfYm9yZ1/EjWFrxI1fZ29sZ19za8OhYl9qdW92Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzb3RuYWJlYWl2aV92dW9zc8OhcmdhX21hxYvFi2Viw6FyZ2FfZ2Fza2F2YWhra3VfZHVvcmFzdGF0X2JlYXJqYWRhdF9sw6F2dmFyZGF0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3NvdG5fdnVvc19tYcWLX2dhc2tfZHVvcl9iZWFyX2zDoXYnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3Nfdl9tX2dfZF9iX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdNTU1NIEQuIFtiLl0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQuIFtiLl0gWVlZWSBbdGkuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW290bmUgdGldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbaWh0dGluIHRpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3RpXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2lrdGUgdGldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW292ZGRpdF0gZGRkZCBbdGldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIGdlYcW+ZXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdtYcWLaXQgJXMnLFxuICAgICAgICAgICAgcyA6ICdtb2FkZGUgc2VrdW5kZGF0JyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZGF0JyxcbiAgICAgICAgICAgIG0gOiAnb2t0YSBtaW51aHRhJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnVodGF0JyxcbiAgICAgICAgICAgIGggOiAnb2t0YSBkaWltbXUnLFxuICAgICAgICAgICAgaGggOiAnJWQgZGlpbW11dCcsXG4gICAgICAgICAgICBkIDogJ29rdGEgYmVhaXZpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGJlYWl2dml0JyxcbiAgICAgICAgICAgIE0gOiAnb2t0YSBtw6FubnUnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOhbnV0JyxcbiAgICAgICAgICAgIHkgOiAnb2t0YSBqYWhraScsXG4gICAgICAgICAgICB5eSA6ICclZCBqYWdpdCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgLypqc2hpbnQgLVcxMDAqL1xuICAgIHZhciBzaSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NpJywge1xuICAgICAgICBtb250aHMgOiAn4Lai4Lax4LeA4LeP4La74LeSX+C2tOC3meC2tuC2u+C3gOC3j+C2u+C3kl/gtrjgt4/gtrvgt4rgtq3gt5Rf4LaF4La04LeK4oCN4La74Lea4La94LeKX+C2uOC3kOC2uuC3kl/gtqLgt5bgtrHgt5Jf4Lai4LeW4La94LeSX+C2heC2nOC3neC3g+C3iuC2reC3lF/gt4Pgt5DgtrTgt4rgtq3gt5Dgtrjgt4rgtrbgtrvgt4pf4LaU4Laa4LeK4Lat4Led4La24La74LeKX+C2seC3nOC3gOC3kOC2uOC3iuC2tuC2u+C3il/gtq/gt5ngt4Pgt5Dgtrjgt4rgtrbgtrvgt4onLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C2ouC2sV/gtrTgt5ngtrZf4La44LeP4La74LeKX+C2heC2tOC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt51f4LeD4LeQ4La04LeKX+C2lOC2muC3il/gtrHgt5zgt4Dgt5Bf4Lav4LeZ4LeD4LeQJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgtongtrvgt5Lgtq/gt49f4LeD4Laz4LeU4Lav4LePX+C2heC2n+C3hOC2u+C3lOC3gOC3j+C2r+C3j1/gtrbgtq/gt4/gtq/gt49f4La24LeK4oCN4La74LeE4LeD4LeK4La04Lat4LeS4Lax4LeK4Lav4LePX+C3g+C3kuC2muC3lOC2u+C3j+C2r+C3j1/gt4Pgt5ngtrHgt4Pgt5Tgtrvgt4/gtq/gt48nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4LaJ4La74LeSX+C3g+C2s+C3lF/gtoXgtp9f4La24Lav4LePX+C2tuC3iuKAjeC2u+C3hF/gt4Pgt5Lgtprgt5Rf4LeD4LeZ4LaxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgtolf4LeDX+C2hV/gtrZf4La24LeK4oCN4La7X+C3g+C3kl/gt4Pgt5knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnYSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdhIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkgTU1NTSBEJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZIE1NTU0gRCwgYSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWSBNTU1NIEQgW+C3gOC3kOC2seC3kl0gZGRkZCwgYSBoOm1tOnNzJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+C2heC2r10gTFRb4LanXScsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgt4Tgt5ngtqddIExUW+C2p10nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C2iuC2uuC3ml0gTFRb4LanXScsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4La04LeD4LeU4Lac4LeS4La6XSBkZGRkIExUW+C2p10nLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz4Laa4LeS4Lax4LeKJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPgtprgtqcg4La04LeZ4La7JyxcbiAgICAgICAgICAgIHMgOiAn4Lat4Lat4LeK4La04La7IOC2muC3kuC3hOC3kuC2tOC2uicsXG4gICAgICAgICAgICBzcyA6ICfgtq3gtq3gt4rgtrTgtrsgJWQnLFxuICAgICAgICAgICAgbSA6ICfgtrjgt5LgtrHgt5Lgtq3gt4rgtq3gt5Tgt4AnLFxuICAgICAgICAgICAgbW0gOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeUICVkJyxcbiAgICAgICAgICAgIGggOiAn4La04LeQ4La6JyxcbiAgICAgICAgICAgIGhoIDogJ+C2tOC3kOC2uiAlZCcsXG4gICAgICAgICAgICBkIDogJ+C2r+C3kuC2seC2uicsXG4gICAgICAgICAgICBkZCA6ICfgtq/gt5LgtrEgJWQnLFxuICAgICAgICAgICAgTSA6ICfgtrjgt4/gt4PgtronLFxuICAgICAgICAgICAgTU0gOiAn4La44LeP4LeDICVkJyxcbiAgICAgICAgICAgIHkgOiAn4LeA4LeD4La7JyxcbiAgICAgICAgICAgIHl5IDogJ+C3gOC3g+C2uyAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9IOC3gOC3kOC2seC3ki8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDgt4Dgt5DgtrHgt5InO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlIDogL+C2tOC3meC2uyDgt4Dgtrvgt5R84La04LeD4LeKIOC3gOC2u+C3lHzgtrTgt5ku4LeAfOC2tC7gt4AuLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4La0LuC3gC4nIHx8IGlucHV0ID09PSAn4La04LeD4LeKIOC3gOC2u+C3lCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tC7gt4AuJyA6ICfgtrTgt4Pgt4og4LeA4La74LeUJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn4La04LeZLuC3gC4nIDogJ+C2tOC3meC2uyDgt4Dgtrvgt5QnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHMgPSAnamFudcOhcl9mZWJydcOhcl9tYXJlY19hcHLDrWxfbcOhal9qw7puX2rDumxfYXVndXN0X3NlcHRlbWJlcl9va3TDs2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgPSAnamFuX2ZlYl9tYXJfYXByX23DoWpfasO6bl9qw7psX2F1Z19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gcGx1cmFsKG4pIHtcbiAgICAgICAgcmV0dXJuIChuID4gMSkgJiYgKG4gPCA1KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6ICAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdww6FyIHNla8O6bmQnIDogJ3DDoXIgc2VrdW5kYW1pJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzogLy8gOSBzZWNvbmRzIC8gaW4gOSBzZWNvbmRzIC8gOSBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2Vrw7puZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnc2VrdW5kYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtJzogIC8vIGEgbWludXRlIC8gaW4gYSBtaW51dGUgLyBhIG1pbnV0ZSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW7DunRhJyA6IChpc0Z1dHVyZSA/ICdtaW7DunR1JyA6ICdtaW7DunRvdScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOiAvLyA5IG1pbnV0ZXMgLyBpbiA5IG1pbnV0ZXMgLyA5IG1pbnV0ZXMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtaW7DunR5JyA6ICdtaW7DunQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ21pbsO6dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaCc6ICAvLyBhbiBob3VyIC8gaW4gYW4gaG91ciAvIGFuIGhvdXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnaG9kaW5hJyA6IChpc0Z1dHVyZSA/ICdob2RpbnUnIDogJ2hvZGlub3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzogLy8gOSBob3VycyAvIGluIDkgaG91cnMgLyA5IGhvdXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnaG9kaW55JyA6ICdob2TDrW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzogIC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ2RlxYgnIDogJ2TFiG9tJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzogLy8gOSBkYXlzIC8gaW4gOSBkYXlzIC8gOSBkYXlzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnZG5pJyA6ICdkbsOtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdkxYhhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ00nOiAgLy8gYSBtb250aCAvIGluIGEgbW9udGggLyBhIG1vbnRoIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAnbWVzaWFjJyA6ICdtZXNpYWNvbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21lc2lhY2UnIDogJ21lc2lhY292Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtZXNpYWNtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAneSc6ICAvLyBhIHllYXIgLyBpbiBhIHllYXIgLyBhIHllYXIgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdyb2snIDogJ3Jva29tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzogLy8gOSB5ZWFycyAvIGluIDkgeWVhcnMgLyA5IHllYXJzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAncm9reScgOiAncm9rb3YnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Jva21pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2sgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaycsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRoc1Nob3J0LFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWRlxL5hX3BvbmRlbG9rX3V0b3Jva19zdHJlZGFfxaF0dnJ0b2tfcGlhdG9rX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ25lX3BvX3V0X3N0X8WhdF9waV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZG5lcyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3phanRyYSBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IG5lZGXEvnUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzdHJlZHUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2byDFoXR2cnRvayBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgcGlhdG9rIG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBzb2JvdHUgb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3bEjWVyYSBvXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO6IG5lZGXEvnUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBzdHJlZHUgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw71dIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBzb2JvdHUgb10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3ByZWQgJXMnLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2s7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICduZWthaiBzZWt1bmQnIDogJ25la2FqIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICdzZWt1bmRvJyA6ICdzZWt1bmRpJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWt1bmRpJyA6ICdzZWt1bmRhaCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3Nla3VuZGUnIDogJ3Nla3VuZGFoJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgbWludXRhJyA6ICdlbm8gbWludXRvJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ21pbnV0YScgOiAnbWludXRvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtaW51dGknIDogJ21pbnV0YW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRlJyA6ICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXQnIDogJ21pbnV0YW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2VuYSB1cmEnIDogJ2VubyB1cm8nO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAndXJhJyA6ICd1cm8nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ3VyaScgOiAndXJhbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmUnIDogJ3VyYW1pJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cicgOiAndXJhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW4gZGFuJyA6ICdlbmltIGRuZW0nO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZGFuJyA6ICdkbmVtJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkbmknIDogJ2RuZXZvbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RuaScgOiAnZG5ldmknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW4gbWVzZWMnIDogJ2VuaW0gbWVzZWNlbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlYycgOiAnbWVzZWNlbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNhJyA6ICdtZXNlY2VtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjZScgOiAnbWVzZWNpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2V2JyA6ICdtZXNlY2knO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAneSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZW5vIGxldG8nIDogJ2VuaW0gbGV0b20nO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbGV0bycgOiAnbGV0b20nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldGknIDogJ2xldG9tYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldGEnIDogJ2xldGknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldCcgOiAnbGV0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2wgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzbCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcmVjX2FwcmlsX21hal9qdW5pal9qdWxpal9hdmd1c3Rfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbi5fZmViLl9tYXIuX2Fwci5fbWFqLl9qdW4uX2p1bC5fYXZnLl9zZXAuX29rdC5fbm92Ll9kZWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWRlbGphX3BvbmVkZWxqZWtfdG9yZWtfc3JlZGFfxI1ldHJ0ZWtfcGV0ZWtfc29ib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ25lZC5fcG9uLl90b3IuX3NyZS5fxI1ldC5fcGV0Ll9zb2IuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb190b19zcl/EjWVfcGVfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgIDogJ1tkYW5lcyBvYl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW2p1dHJpIG9iXSBMVCcsXG5cbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbbmVkZWxqb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ZdIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5ICA6ICdbdsSNZXJhaiBvYl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzcmVkb10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qb10gW3NvYm90b10gW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3ByZWrFoW5qaV0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ8SNZXogJXMnLFxuICAgICAgICAgICAgcGFzdCAgIDogJ3ByZWQgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGggICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2w7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzcSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NxJywge1xuICAgICAgICBtb250aHMgOiAnSmFuYXJfU2hrdXJ0X01hcnNfUHJpbGxfTWFqX1FlcnNob3JfS29ycmlrX0d1c2h0X1NodGF0b3JfVGV0b3JfTsOrbnRvcl9EaGpldG9yJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fU2hrX01hcl9QcmlfTWFqX1Flcl9Lb3JfR3VzX1NodF9UZXRfTsOrbl9EaGonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0UgRGllbF9FIEjDq27Dq19FIE1hcnTDq19FIE3Dq3JrdXLDq19FIEVuanRlX0UgUHJlbXRlX0UgU2h0dW7Dqycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEaWVfSMOrbl9NYXJfTcOrcl9FbmpfUHJlX1NodCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnRF9IX01hX03Dq19FX1BfU2gnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9QRHxNRC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgwKSA9PT0gJ00nO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXJzIDwgMTIgPyAnUEQnIDogJ01EJztcbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1NvdCBuw6tdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW05lc8OrciBuw6tdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW27Dq10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbRGplIG7Dq10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbZSBrYWx1YXIgbsOrXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnbsOrICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgbcOrIHBhcsOrJyxcbiAgICAgICAgICAgIHMgOiAnZGlzYSBzZWtvbmRhJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla29uZGEnLFxuICAgICAgICAgICAgbSA6ICduasOrIG1pbnV0w6snLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRhJyxcbiAgICAgICAgICAgIGggOiAnbmrDqyBvcsOrJyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9yw6snLFxuICAgICAgICAgICAgZCA6ICduasOrIGRpdMOrJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRpdMOrJyxcbiAgICAgICAgICAgIE0gOiAnbmrDqyBtdWFqJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG11YWonLFxuICAgICAgICAgICAgeSA6ICduasOrIHZpdCcsXG4gICAgICAgICAgICB5eSA6ICclZCB2aXRlJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNxO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHsgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ3Nla3VuZGEnLCAnc2VrdW5kZScsICdzZWt1bmRpJ10sXG4gICAgICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5lIG1pbnV0ZSddLFxuICAgICAgICAgICAgbW06IFsnbWludXQnLCAnbWludXRlJywgJ21pbnV0YSddLFxuICAgICAgICAgICAgaDogWydqZWRhbiBzYXQnLCAnamVkbm9nIHNhdGEnXSxcbiAgICAgICAgICAgIGhoOiBbJ3NhdCcsICdzYXRhJywgJ3NhdGknXSxcbiAgICAgICAgICAgIGRkOiBbJ2RhbicsICdkYW5hJywgJ2RhbmEnXSxcbiAgICAgICAgICAgIE1NOiBbJ21lc2VjJywgJ21lc2VjYScsICdtZXNlY2knXSxcbiAgICAgICAgICAgIHl5OiBbJ2dvZGluYScsICdnb2RpbmUnLCAnZ29kaW5hJ11cbiAgICAgICAgfSxcbiAgICAgICAgY29ycmVjdEdyYW1tYXRpY2FsQ2FzZTogZnVuY3Rpb24gKG51bWJlciwgd29yZEtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciA9PT0gMSA/IHdvcmRLZXlbMF0gOiAobnVtYmVyID49IDIgJiYgbnVtYmVyIDw9IDQgPyB3b3JkS2V5WzFdIDogd29yZEtleVsyXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRyYW5zbGF0ZTogZnVuY3Rpb24gKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgICAgICB2YXIgd29yZEtleSA9IHRyYW5zbGF0b3Iud29yZHNba2V5XTtcbiAgICAgICAgICAgIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyB3b3JkS2V5WzBdIDogd29yZEtleVsxXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHRyYW5zbGF0b3IuY29ycmVjdEdyYW1tYXRpY2FsQ2FzZShudW1iZXIsIHdvcmRLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBzciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyJywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5fanVsX2F2Z3VzdF9zZXB0ZW1iYXJfb2t0b2Jhcl9ub3ZlbWJhcl9kZWNlbWJhcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hal9qdW5fanVsX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICduZWRlbGphX3BvbmVkZWxqYWtfdXRvcmFrX3NyZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmUuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRlbGp1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JlZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGVsamVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwb25lZGVsamthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbdXRvcmthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzcmVkZV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW8SNZXR2cnRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3BldGthXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCdcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAnbWVzZWMnLFxuICAgICAgICAgICAgTU0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc3I7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0cmFuc2xhdG9yID0ge1xuICAgICAgICB3b3JkczogeyAvL0RpZmZlcmVudCBncmFtbWF0aWNhbCBjYXNlc1xuICAgICAgICAgICAgc3M6IFsn0YHQtdC60YPQvdC00LAnLCAn0YHQtdC60YPQvdC00LUnLCAn0YHQtdC60YPQvdC00LgnXSxcbiAgICAgICAgICAgIG06IFsn0ZjQtdC00LDQvSDQvNC40L3Rg9GCJywgJ9GY0LXQtNC90LUg0LzQuNC90YPRgtC1J10sXG4gICAgICAgICAgICBtbTogWyfQvNC40L3Rg9GCJywgJ9C80LjQvdGD0YLQtScsICfQvNC40L3Rg9GC0LAnXSxcbiAgICAgICAgICAgIGg6IFsn0ZjQtdC00LDQvSDRgdCw0YInLCAn0ZjQtdC00L3QvtCzINGB0LDRgtCwJ10sXG4gICAgICAgICAgICBoaDogWyfRgdCw0YInLCAn0YHQsNGC0LAnLCAn0YHQsNGC0LgnXSxcbiAgICAgICAgICAgIGRkOiBbJ9C00LDQvScsICfQtNCw0L3QsCcsICfQtNCw0L3QsCddLFxuICAgICAgICAgICAgTU06IFsn0LzQtdGB0LXRhicsICfQvNC10YHQtdGG0LAnLCAn0LzQtdGB0LXRhtC4J10sXG4gICAgICAgICAgICB5eTogWyfQs9C+0LTQuNC90LAnLCAn0LPQvtC00LjQvdC1JywgJ9Cz0L7QtNC40L3QsCddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3JDeXJsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3ItY3lybCcsIHtcbiAgICAgICAgbW9udGhzOiAn0ZjQsNC90YPQsNGAX9GE0LXQsdGA0YPQsNGAX9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCx0LDRgF/QvtC60YLQvtCx0LDRgF/QvdC+0LLQtdC80LHQsNGAX9C00LXRhtC10LzQsdCw0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn0ZjQsNC9Ll/RhNC10LEuX9C80LDRgC5f0LDQv9GALl/QvNCw0Zhf0ZjRg9C9X9GY0YPQu1/QsNCy0LMuX9GB0LXQvy5f0L7QutGCLl/QvdC+0LIuX9C00LXRhi4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAn0L3QtdC00LXRmdCwX9C/0L7QvdC10LTQtdGZ0LDQul/Rg9GC0L7RgNCw0Lpf0YHRgNC10LTQsF/Rh9C10YLQstGA0YLQsNC6X9C/0LXRgtCw0Lpf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn0L3QtdC0Ll/Qv9C+0L0uX9GD0YLQvi5f0YHRgNC1Ll/Rh9C10YIuX9C/0LXRgi5f0YHRg9CxLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfQvdC1X9C/0L5f0YPRgl/RgdGAX9GH0LVf0L/QtV/RgdGDJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0LTQsNC90LDRgSDRg10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vRgdGD0YLRgNCwINGDXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9C90LXQtNC10ZnRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRgNC10LTRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBb0YHRg9Cx0L7RgtGDXSBb0YNdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIGRkZGQgW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1vRmNGD0YfQtSDRg10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RXZWVrRGF5cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvQvdC10LTQtdGZ0LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0L/QvtC90LXQtNC10ZnQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9GD0YLQvtGA0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0YHRgNC10LTQtV0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRh9C10YLQstGA0YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0LXRgtC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YPQsdC+0YLQtV0gW9GDXSBMVCdcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBsYXN0V2Vla0RheXNbdGhpcy5kYXkoKV07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdCAgIDogJ9C/0YDQtSAlcycsXG4gICAgICAgICAgICBzICAgICAgOiAn0L3QtdC60L7Qu9C40LrQviDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzcyAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgZCAgICAgIDogJ9C00LDQvScsXG4gICAgICAgICAgICBkZCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gICAgICA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ9Cz0L7QtNC40L3RgycsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyQ3lybDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHNzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3MnLCB7XG4gICAgICAgIG1vbnRocyA6IFwiQmhpbWJpZHZ3YW5lX0luZGxvdmFuYV9JbmRsb3YnbGVua2h1bHVfTWFiYXNhX0lua2h3ZWtod2V0aV9JbmhsYWJhX0tob2x3YW5lX0luZ2NpX0lueW9uaV9JbXBoYWxhX0x3ZXRpX0luZ29uZ29uaVwiLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0JoaV9JbmFfSW51X01hYl9JbmtfSW5oX0tob19JZ2NfSW55X0ltcF9Md2VfSWdvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdMaXNvbnRmb19VbXNvbWJ1bHVrb19MZXNpYmlsaV9MZXNpdHNhdGZ1X0xlc2luZV9MZXNpaGxhbnVfVW1nY2liZWxvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0xpc19VbWJfTHNiX0xlc19Mc2lfTHNoX1VtZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTGlfVXNfTGJfTHRfTHNfTGhfVWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbTmFtdWhsYSBuZ2FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0t1c2FzYSBuZ2FdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW25nYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSXRvbG8gbmdhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtsZWxpcGhlbGlsZV0gW25nYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ25nYSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3dlbnRla2EgbmdhICVzJyxcbiAgICAgICAgICAgIHMgOiAnZW1penV6d2FuYSBsb21jYW5lJyxcbiAgICAgICAgICAgIHNzIDogJyVkIG16dXp3YW5hJyxcbiAgICAgICAgICAgIG0gOiAndW16dXp1JyxcbiAgICAgICAgICAgIG1tIDogJyVkIGVtaXp1enUnLFxuICAgICAgICAgICAgaCA6ICdsaWhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgZW1haG9yYScsXG4gICAgICAgICAgICBkIDogJ2xpbGFuZ2EnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZW1hbGFuZ2EnLFxuICAgICAgICAgICAgTSA6ICdpbnlhbmdhJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHRpbnlhbmdhJyxcbiAgICAgICAgICAgIHkgOiAndW1ueWFrYScsXG4gICAgICAgICAgICB5eSA6ICclZCBpbWlueWFrYSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2VrdXNlbml8ZW1pbml8ZW50c2FtYmFtYXxlYnVzdWt1LyxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdla3VzZW5pJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW1pbmknO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbnRzYW1iYW1hJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlYnVzdWt1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ2VrdXNlbmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnZW1pbmknKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2VudHNhbWJhbWEnIHx8IG1lcmlkaWVtID09PSAnZWJ1c3VrdScpIHtcbiAgICAgICAgICAgICAgICBpZiAoaG91ciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZCcsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzdicsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFyc19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdGlfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzw7ZuZGFnX23DpW5kYWdfdGlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7ZyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDtm5fbcOlbl90aXNfb25zX3Rvcl9mcmVfbMO2cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc8O2X23DpV90aV9vbl90b19mcl9sw7YnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbCA6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkIEQgTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ltb3Jnb25dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWfDpXJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tJXSBkZGRkW3NdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnZsO2ciAlcyBzZWRhbicsXG4gICAgICAgICAgICBzIDogJ27DpWdyYSBzZWt1bmRlcicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWt1bmRlcicsXG4gICAgICAgICAgICBtIDogJ2VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXInLFxuICAgICAgICAgICAgaCA6ICdlbiB0aW1tZScsXG4gICAgICAgICAgICBoaCA6ICclZCB0aW1tYXInLFxuICAgICAgICAgICAgZCA6ICdlbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTSA6ICdlbiBtw6VuYWQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOlbmFkZXInLFxuICAgICAgICAgICAgeSA6ICdldHQgw6VyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMOlcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGV8YSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICdlJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ2EnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnYScgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdlJyA6ICdlJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN2O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzdycsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcmlfRmVicnVhcmlfTWFjaGlfQXByaWxpX01laV9KdW5pX0p1bGFpX0Fnb3N0aV9TZXB0ZW1iYV9Pa3RvYmFfTm92ZW1iYV9EZXNlbWJhJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hY19BcHJfTWVpX0p1bl9KdWxfQWdvX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnSnVtYXBpbGlfSnVtYXRhdHVfSnVtYW5uZV9KdW1hdGFub19BbGhhbWlzaV9JanVtYWFfSnVtYW1vc2knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnSnBsX0p0YXRfSm5uZV9KdGFuX0FsaF9Jam1fSm1vcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnSjJfSjNfSjRfSjVfQWxfSWpfSjEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tsZW8gc2FhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1trZXNobyBzYWFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1t3aWtpIGlqYXlvXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tqYW5hXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbd2lraSBpbGl5b3BpdGFdIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBiYWFkYXllJyxcbiAgICAgICAgICAgIHBhc3QgOiAndG9rZWEgJXMnLFxuICAgICAgICAgICAgcyA6ICdoaXZpIHB1bmRlJyxcbiAgICAgICAgICAgIHNzIDogJ3Nla3VuZGUgJWQnLFxuICAgICAgICAgICAgbSA6ICdkYWtpa2EgbW9qYScsXG4gICAgICAgICAgICBtbSA6ICdkYWtpa2EgJWQnLFxuICAgICAgICAgICAgaCA6ICdzYWEgbGltb2phJyxcbiAgICAgICAgICAgIGhoIDogJ21hc2FhICVkJyxcbiAgICAgICAgICAgIGQgOiAnc2lrdSBtb2phJyxcbiAgICAgICAgICAgIGRkIDogJ21hc2lrdSAlZCcsXG4gICAgICAgICAgICBNIDogJ213ZXppIG1tb2phJyxcbiAgICAgICAgICAgIE1NIDogJ21pZXppICVkJyxcbiAgICAgICAgICAgIHkgOiAnbXdha2EgbW1vamEnLFxuICAgICAgICAgICAgeXkgOiAnbWlha2EgJWQnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHN3O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgr6cnLFxuICAgICAgICAnMic6ICfgr6gnLFxuICAgICAgICAnMyc6ICfgr6knLFxuICAgICAgICAnNCc6ICfgr6onLFxuICAgICAgICAnNSc6ICfgr6snLFxuICAgICAgICAnNic6ICfgr6wnLFxuICAgICAgICAnNyc6ICfgr60nLFxuICAgICAgICAnOCc6ICfgr64nLFxuICAgICAgICAnOSc6ICfgr68nLFxuICAgICAgICAnMCc6ICfgr6YnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4K+nJzogJzEnLFxuICAgICAgICAn4K+oJzogJzInLFxuICAgICAgICAn4K+pJzogJzMnLFxuICAgICAgICAn4K+qJzogJzQnLFxuICAgICAgICAn4K+rJzogJzUnLFxuICAgICAgICAn4K+sJzogJzYnLFxuICAgICAgICAn4K+tJzogJzcnLFxuICAgICAgICAn4K+uJzogJzgnLFxuICAgICAgICAn4K+vJzogJzknLFxuICAgICAgICAn4K+mJzogJzAnXG4gICAgfTtcblxuICAgIHZhciB0YSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RhJywge1xuICAgICAgICBtb250aHMgOiAn4K6c4K6p4K614K6w4K6/X+CuquCuv+CuquCvjeCusOCuteCusOCuv1/grq7grr7grrDgr43grprgr41f4K6P4K6q4K+N4K6w4K6y4K+NX+CuruCvh1/grpzgr4Lgrqngr41f4K6c4K+C4K6y4K+IX+CuhuCuleCuuOCvjeCun+CvjV/grprgr4bgrqrgr43grp/gr4bgrq7gr43grqrgrrDgr41f4K6F4K6V4K+N4K6f4K+H4K6+4K6q4K6w4K+NX+CuqOCuteCuruCvjeCuquCusOCvjV/grp/grr/grprgrq7gr43grqrgrrDgr40nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgrp7grr7grq/grr/grrHgr43grrHgr4HgrpXgr43grpXgrr/grrTgrq7gr4hf4K6k4K6/4K6Z4K+N4K6V4K6f4K+N4K6V4K6/4K604K6u4K+IX+CumuCvhuCuteCvjeCuteCuvuCur+CvjeCuleCuv+CutOCuruCviF/grqrgr4HgrqTgrqngr43grpXgrr/grrTgrq7gr4hf4K614K6/4K6v4K6+4K604K6V4K+N4K6V4K6/4K604K6u4K+IX+CuteCvhuCus+CvjeCus+Cuv+CuleCvjeCuleCuv+CutOCuruCviF/grprgrqngrr/grpXgr43grpXgrr/grrTgrq7gr4gnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4K6e4K6+4K6v4K6/4K6x4K+BX+CupOCuv+CumeCvjeCuleCus+CvjV/grprgr4bgrrXgr43grrXgrr7grq/gr41f4K6q4K+B4K6k4K6p4K+NX+CuteCuv+Cur+CuvuCutOCuqeCvjV/grrXgr4bgrrPgr43grrPgrr9f4K6a4K6p4K6/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgrp7grr5f4K6k4K6/X+CumuCvhl/grqrgr4Ff4K614K6/X+CuteCvhl/grponLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+Cuh+CuqeCvjeCuseCvgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4K6o4K6+4K6z4K+IXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgrqjgr4fgrrHgr43grrHgr4FdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgrpXgrp/grqjgr43grqQg4K614K6+4K6w4K6u4K+NXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4K6H4K6y4K+NJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4K6u4K+B4K6p4K+NJyxcbiAgICAgICAgICAgIHMgOiAn4K6S4K6w4K+BIOCumuCuv+CusiDgrrXgrr/grqjgrr7grp/grr/grpXgrrPgr40nLFxuICAgICAgICAgICAgc3MgOiAnJWQg4K614K6/4K6o4K6+4K6f4K6/4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIG0gOiAn4K6S4K6w4K+BIOCuqOCuv+CuruCuv+Cun+CuruCvjScsXG4gICAgICAgICAgICBtbSA6ICclZCDgrqjgrr/grq7grr/grp/grpngr43grpXgrrPgr40nLFxuICAgICAgICAgICAgaCA6ICfgrpLgrrDgr4Eg4K6u4K6j4K6/IOCuqOCvh+CusOCuruCvjScsXG4gICAgICAgICAgICBoaCA6ICclZCDgrq7grqPgrr8g4K6o4K+H4K6w4K6u4K+NJyxcbiAgICAgICAgICAgIGQgOiAn4K6S4K6w4K+BIOCuqOCuvuCus+CvjScsXG4gICAgICAgICAgICBkZCA6ICclZCDgrqjgrr7grp/gr43grpXgrrPgr40nLFxuICAgICAgICAgICAgTSA6ICfgrpLgrrDgr4Eg4K6u4K6+4K6k4K6u4K+NJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCuruCuvuCupOCumeCvjeCuleCus+CvjScsXG4gICAgICAgICAgICB5IDogJ+CukuCusOCvgSDgrrXgrrDgr4Hgrp/grq7gr40nLFxuICAgICAgICAgICAgeXkgOiAnJWQg4K6G4K6j4K+N4K6f4K+B4K6V4K6z4K+NJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3grrXgrqTgr4EvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfgrrXgrqTgr4EnO1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4K+n4K+o4K+p4K+q4K+r4K+s4K+t4K+u4K+v4K+mXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyByZWZlciBodHRwOi8vdGEud2lraXBlZGlhLm9yZy9zLzFlcjFcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+Cur+CuvuCuruCuruCvjXzgrrXgr4jgrpXgrrHgr4h84K6V4K6+4K6y4K+IfOCuqOCuo+CvjeCuquCuleCusuCvjXzgro7grrHgr43grqrgrr7grp/gr4F84K6u4K6+4K6y4K+ILyxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuteCviOCuleCuseCviCc7ICAvLyDgrrXgr4jgrpXgrrHgr4hcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6V4K6+4K6y4K+IJzsgLy8g4K6V4K6+4K6y4K+IXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuqOCuo+CvjeCuquCuleCusuCvjSc7IC8vIOCuqOCuo+CvjeCuquCuleCusuCvjVxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgro7grrHgr43grqrgrr7grp/gr4EnOyAvLyDgro7grrHgr43grqrgrr7grp/gr4FcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6u4K6+4K6y4K+IJzsgLy8g4K6u4K6+4K6y4K+IXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCur+CuvuCuruCuruCvjSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgrq/grr7grq7grq7gr40nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrrXgr4jgrpXgrrHgr4gnIHx8IG1lcmlkaWVtID09PSAn4K6V4K6+4K6y4K+IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CuqOCuo+CvjeCuquCuleCusuCvjScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZScsIHtcbiAgICAgICAgbW9udGhzIDogJ+CwnOCwqOCwteCwsOCwv1/gsKvgsL/gsKzgsY3gsLDgsLXgsLDgsL9f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwv+CwsuCxjV/gsK7gsYdf4LCc4LGC4LCo4LGNX+CwnOCxgeCwsuCxiF/gsIbgsJfgsLjgsY3gsJ/gsYFf4LC44LGG4LCq4LGN4LCf4LGG4LCC4LCs4LCw4LGNX+CwheCwleCxjeCwn+Cxi+CwrOCwsOCxjV/gsKjgsLXgsILgsKzgsLDgsY1f4LCh4LC/4LC44LGG4LCC4LCs4LCw4LGNJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgsJzgsKguX+Cwq+Cwv+CwrOCxjeCwsC5f4LCu4LC+4LCw4LGN4LCa4LC/X+Cwj+CwquCxjeCwsOCwvy5f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCXLl/gsLjgsYbgsKrgsY0uX+CwheCwleCxjeCwn+Cxiy5f4LCo4LC1Ll/gsKHgsL/gsLjgsYYuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn4LCG4LCm4LC/4LC14LC+4LCw4LCCX+CwuOCxi+CwruCwteCwvuCwsOCwgl/gsK7gsILgsJfgsLPgsLXgsL7gsLDgsIJf4LCs4LGB4LCn4LC14LC+4LCw4LCCX+Cwl+CxgeCwsOCxgeCwteCwvuCwsOCwgl/gsLbgsYHgsJXgsY3gsLDgsLXgsL7gsLDgsIJf4LC24LCo4LC/4LC14LC+4LCw4LCCJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CwhuCwpuCwv1/gsLjgsYvgsK5f4LCu4LCC4LCX4LCzX+CwrOCxgeCwp1/gsJfgsYHgsLDgsYFf4LC24LGB4LCV4LGN4LCwX+CwtuCwqOCwvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LCGX+CwuOCxi1/gsK7gsIJf4LCs4LGBX+Cwl+CxgV/gsLbgsYFf4LC2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4LCo4LGH4LCh4LGBXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgsLDgsYfgsKrgsYFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+CwqOCwv+CwqOCxjeCwqF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+Cwl+CwpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCwsuCxiycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCwleCxjeCwsOCwv+CwpOCwgicsXG4gICAgICAgICAgICBzIDogJ+CwleCxiuCwqOCxjeCwqOCwvyDgsJXgsY3gsLfgsKPgsL7gsLLgsYEnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4LC44LGG4LCV4LCo4LGN4LCy4LGBJyxcbiAgICAgICAgICAgIG0gOiAn4LCS4LCVIOCwqOCwv+CwruCwv+Cwt+CwgicsXG4gICAgICAgICAgICBtbSA6ICclZCDgsKjgsL/gsK7gsL/gsLfgsL7gsLLgsYEnLFxuICAgICAgICAgICAgaCA6ICfgsJLgsJUg4LCX4LCC4LCfJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCwl+CwguCwn+CwsuCxgScsXG4gICAgICAgICAgICBkIDogJ+CwkuCwlSDgsLDgsYvgsJzgsYEnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4LCw4LGL4LCc4LGB4LCy4LGBJyxcbiAgICAgICAgICAgIE0gOiAn4LCS4LCVIOCwqOCxhuCwsicsXG4gICAgICAgICAgICBNTSA6ICclZCDgsKjgsYbgsLLgsLLgsYEnLFxuICAgICAgICAgICAgeSA6ICfgsJLgsJUg4LC44LCC4LC14LCk4LGN4LC44LCw4LCCJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwvuCwsuCxgSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfeCwtS8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTgsLUnLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4LCw4LC+4LCk4LGN4LCw4LC/fOCwieCwpuCwr+CwgnzgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIJ84LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CwsOCwvuCwpOCxjeCwsOCwvycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwieCwpuCwr+CwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCw4LC+4LCk4LGN4LCw4LC/JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsIngsKbgsK/gsIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwruCwp+CxjeCwr+CwvuCwueCxjeCwqOCwgic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LC44LC+4LCv4LCC4LCk4LGN4LCw4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsLDgsL7gsKTgsY3gsLDgsL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0ZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRldCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RldCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbmVpcnVfRmV2ZXJlaXJ1X01hcnN1X0FicmlsX01haXVfSnXDsXVfSnVsbHVfQWd1c3R1X1NldGVtYnJ1X091dHVicnVfTm92ZW1icnVfRGV6ZW1icnUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdEb21pbmd1X1NlZ3VuZGFfVGVyc2FfS3VhcnRhX0tpbnRhX1Nlc3RhX1NhYmFkdScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1RlcnNfS3VhX0tpbnRfU2VzdF9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0RvX1NlZ19UZV9LdV9LaV9TZXNfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW09oaW4gaWhhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0FiYW4gaWhhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2loYV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIb3Jpc2VpayBpaGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VtYW5hIGtvdHVrXSBbaWhhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpaGEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBsaXViYScsXG4gICAgICAgICAgICBzIDogJ21pbnV0dSBiYWx1bicsXG4gICAgICAgICAgICBzcyA6ICdtaW51dHUgJWQnLFxuICAgICAgICAgICAgbSA6ICdtaW51dHUgaWRhJyxcbiAgICAgICAgICAgIG1tIDogJ21pbnV0dSAlZCcsXG4gICAgICAgICAgICBoIDogJ29yYXMgaWRhJyxcbiAgICAgICAgICAgIGhoIDogJ29yYXMgJWQnLFxuICAgICAgICAgICAgZCA6ICdsb3JvbiBpZGEnLFxuICAgICAgICAgICAgZGQgOiAnbG9yb24gJWQnLFxuICAgICAgICAgICAgTSA6ICdmdWxhbiBpZGEnLFxuICAgICAgICAgICAgTU0gOiAnZnVsYW4gJWQnLFxuICAgICAgICAgICAgeSA6ICd0aW5hbiBpZGEnLFxuICAgICAgICAgICAgeXkgOiAndGluYW4gJWQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGV0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDA6ICct0YPQvCcsXG4gICAgICAgIDE6ICct0YPQvCcsXG4gICAgICAgIDI6ICct0Y7QvCcsXG4gICAgICAgIDM6ICct0Y7QvCcsXG4gICAgICAgIDQ6ICct0YPQvCcsXG4gICAgICAgIDU6ICct0YPQvCcsXG4gICAgICAgIDY6ICct0YPQvCcsXG4gICAgICAgIDc6ICct0YPQvCcsXG4gICAgICAgIDg6ICct0YPQvCcsXG4gICAgICAgIDk6ICct0YPQvCcsXG4gICAgICAgIDEwOiAnLdGD0LwnLFxuICAgICAgICAxMjogJy3Rg9C8JyxcbiAgICAgICAgMTM6ICct0YPQvCcsXG4gICAgICAgIDIwOiAnLdGD0LwnLFxuICAgICAgICAzMDogJy3RjtC8JyxcbiAgICAgICAgNDA6ICct0YPQvCcsXG4gICAgICAgIDUwOiAnLdGD0LwnLFxuICAgICAgICA2MDogJy3Rg9C8JyxcbiAgICAgICAgNzA6ICct0YPQvCcsXG4gICAgICAgIDgwOiAnLdGD0LwnLFxuICAgICAgICA5MDogJy3Rg9C8JyxcbiAgICAgICAgMTAwOiAnLdGD0LwnXG4gICAgfTtcblxuICAgIHZhciB0ZyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RnJywge1xuICAgICAgICBtb250aHMgOiAn0Y/QvdCy0LDRgF/RhNC10LLRgNCw0Ltf0LzQsNGA0YJf0LDQv9GA0LXQu1/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YBf0L7QutGC0Y/QsdGAX9C90L7Rj9Cx0YBf0LTQtdC60LDQsdGAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfRj9C90LJf0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCzX9GB0LXQvV/QvtC60YJf0L3QvtGPX9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn0Y/QutGI0LDQvdCx0LVf0LTRg9GI0LDQvdCx0LVf0YHQtdGI0LDQvdCx0LVf0YfQvtGA0YjQsNC90LHQtV/Qv9Cw0L3St9GI0LDQvdCx0LVf0rfRg9C80YrQsF/RiNCw0L3QsdC1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9GP0YjQsV/QtNGI0LFf0YHRiNCxX9GH0YjQsV/Qv9GI0LFf0rfRg9C8X9GI0L3QsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0Y/RiF/QtNGIX9GB0Yhf0YfRiF/Qv9GIX9K30Lxf0YjQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CY0LzRgNOv0Lcg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0J/QsNCz0L7SsyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQlNC40YDTr9C3INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGRb0LhdIFvSs9Cw0YTRgtCw0Lgg0L7Rj9C90LTQsCDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkW9C4XSBb0rPQsNGE0YLQsNC4INCz0YPQt9Cw0YjRgtCwINGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQsdCw0YrQtNC4ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg0L/QtdGIJyxcbiAgICAgICAgICAgIHMgOiAn0Y/QutGH0LDQvdC0INGB0L7QvdC40Y8nLFxuICAgICAgICAgICAgbSA6ICfRj9C6INC00LDSm9C40pvQsCcsXG4gICAgICAgICAgICBtbSA6ICclZCDQtNCw0pvQuNKb0LAnLFxuICAgICAgICAgICAgaCA6ICfRj9C6INGB0L7QsNGCJyxcbiAgICAgICAgICAgIGhoIDogJyVkINGB0L7QsNGCJyxcbiAgICAgICAgICAgIGQgOiAn0Y/QuiDRgNOv0LcnLFxuICAgICAgICAgICAgZGQgOiAnJWQg0YDTr9C3JyxcbiAgICAgICAgICAgIE0gOiAn0Y/QuiDQvNC+0rMnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0LzQvtKzJyxcbiAgICAgICAgICAgIHkgOiAn0Y/QuiDRgdC+0LsnLFxuICAgICAgICAgICAgeXkgOiAnJWQg0YHQvtC7J1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0YjQsNCxfNGB0YPQsdKzfNGA06/Qt3zQsdC10LPQvtKzLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn0YjQsNCxJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0YHRg9Cx0rMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0YDTr9C3Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfQsdC10LPQvtKzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GI0LDQsSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YHRg9Cx0rMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA06/Qtyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LHQtdCz0L7Ssyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YjQsNCxJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRg9C8fNGO0LwpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBiID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW251bWJlcl0gfHwgc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxdGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0ZztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGgnLCB7XG4gICAgICAgIG1vbnRocyA6ICfguKHguIHguKPguLLguITguKFf4LiB4Li44Lih4Lig4Liy4Lie4Lix4LiZ4LiY4LmMX+C4oeC4teC4meC4suC4hOC4oV/guYDguKHguKnguLLguKLguJlf4Lie4Lik4Lip4Lig4Liy4LiE4LihX+C4oeC4tOC4luC4uOC4meC4suC4ouC4mV/guIHguKPguIHguI7guLLguITguKFf4Liq4Li04LiH4Lir4Liy4LiE4LihX+C4geC4seC4meC4ouC4suC4ouC4mV/guJXguLjguKXguLLguITguKFf4Lie4Lik4Lio4LiI4Li04LiB4Liy4Lii4LiZX+C4mOC4seC4meC4p+C4suC4hOC4oScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LihLuC4hC5f4LiBLuC4ni5f4Lih4Li1LuC4hC5f4LmA4LihLuC4oi5f4LieLuC4hC5f4Lih4Li0LuC4oi5f4LiBLuC4hC5f4LiqLuC4hC5f4LiBLuC4oi5f4LiVLuC4hC5f4LieLuC4oi5f4LiYLuC4hC4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+C4reC4suC4l+C4tOC4leC4ouC5jF/guIjguLHguJnguJfguKPguYxf4Lit4Lix4LiH4LiE4Liy4LijX+C4nuC4uOC4mF/guJ7guKTguKvguLHguKrguJrguJTguLVf4Lio4Li44LiB4Lij4LmMX+C5gOC4quC4suC4o+C5jCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4LiqX+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYwnLnNwbGl0KCdfJyksIC8vIHllcywgdGhyZWUgY2hhcmFjdGVycyBkaWZmZXJlbmNlXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+C4reC4si5f4LiILl/guK0uX+C4ni5f4Lie4LikLl/guKguX+C4qi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIOC5gOC4p+C4peC4siBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAn4Lin4Lix4LiZZGRkZOC4l+C4teC5iCBEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4h3zguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C4q+C4peC4seC4h+C5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LiB4LmI4Lit4LiZ4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+C4p+C4seC4meC4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+C4nuC4o+C4uOC5iOC4h+C4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGRb4Lir4LiZ4LmJ4LiyIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4LmA4Lih4Li34LmI4Lit4Lin4Liy4LiZ4LiZ4Li14LmJIOC5gOC4p+C4peC4sl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C4p+C4seC4mV1kZGRkW+C4l+C4teC5iOC5geC4peC5ieC4pyDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfguK3guLXguIEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+C4l+C4teC5iOC5geC4peC5ieC4pycsXG4gICAgICAgICAgICBzIDogJ+C5hOC4oeC5iOC4geC4teC5iOC4p+C4tOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBzcyA6ICclZCDguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICAgICAgbSA6ICcxIOC4meC4suC4l+C4tScsXG4gICAgICAgICAgICBtbSA6ICclZCDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgaCA6ICcxIOC4iuC4seC5iOC4p+C5guC4oeC4hycsXG4gICAgICAgICAgICBoaCA6ICclZCDguIrguLHguYjguKfguYLguKHguIcnLFxuICAgICAgICAgICAgZCA6ICcxIOC4p+C4seC4mScsXG4gICAgICAgICAgICBkZCA6ICclZCDguKfguLHguJknLFxuICAgICAgICAgICAgTSA6ICcxIOC5gOC4lOC4t+C4reC4mScsXG4gICAgICAgICAgICBNTSA6ICclZCDguYDguJTguLfguK3guJknLFxuICAgICAgICAgICAgeSA6ICcxIOC4m+C4tScsXG4gICAgICAgICAgICB5eSA6ICclZCDguJvguLUnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0aDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRsUGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0bC1waCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0VuZXJvX1BlYnJlcm9fTWFyc29fQWJyaWxfTWF5b19IdW55b19IdWx5b19BZ29zdG9fU2V0eWVtYnJlX09rdHVicmVfTm9ieWVtYnJlX0Rpc3llbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnRW5lX1BlYl9NYXJfQWJyX01heV9IdW5fSHVsX0Fnb19TZXRfT2t0X05vYl9EaXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0xpbmdnb19MdW5lc19NYXJ0ZXNfTWl5ZXJrdWxlc19IdXdlYmVzX0JpeWVybmVzX1NhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdMaW5fTHVuX01hcl9NaXlfSHV3X0JpeV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0xpX0x1X01hX01pX0h1X0JpX1NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdNTS9EL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBELCBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdNTU1NIEQsIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIERELCBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdMVCBbbmdheW9uZyBhcmF3XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0J1a2FzIG5nXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xUIFtzYSBzdXN1bm9kIG5hXSBkZGRkJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdMVCBba2FoYXBvbl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMVCBbbm9vbmcgbmFrYXJhYW5nXSBkZGRkJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3NhIGxvb2IgbmcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhbmcgbmFrYWxpcGFzJyxcbiAgICAgICAgICAgIHMgOiAnaWxhbmcgc2VndW5kbycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvJyxcbiAgICAgICAgICAgIG0gOiAnaXNhbmcgbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0bycsXG4gICAgICAgICAgICBoIDogJ2lzYW5nIG9yYXMnLFxuICAgICAgICAgICAgaGggOiAnJWQgb3JhcycsXG4gICAgICAgICAgICBkIDogJ2lzYW5nIGFyYXcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgYXJhdycsXG4gICAgICAgICAgICBNIDogJ2lzYW5nIGJ1d2FuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1d2FuJyxcbiAgICAgICAgICAgIHkgOiAnaXNhbmcgdGFvbicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YW9uJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGxQaDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG51bWJlcnNOb3VucyA9ICdwYWdoX3dh4oCZX2NoYeKAmV93ZWpfbG9TX3ZhZ2hfamF2X1NvY2hfY2hvcmdoX0h1dCcuc3BsaXQoJ18nKTtcblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZUZ1dHVyZShvdXRwdXQpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgICAgIHRpbWUgPSAob3V0cHV0LmluZGV4T2YoJ2phaicpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdsZVMnIDpcbiAgICAgICAgKG91dHB1dC5pbmRleE9mKCdqYXInKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnd2FRJyA6XG4gICAgICAgIChvdXRwdXQuaW5kZXhPZignRElTJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ25lbScgOlxuICAgICAgICB0aW1lICsgJyBwSXEnO1xuICAgICAgICByZXR1cm4gdGltZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVQYXN0KG91dHB1dCkge1xuICAgICAgICB2YXIgdGltZSA9IG91dHB1dDtcbiAgICAgICAgdGltZSA9IChvdXRwdXQuaW5kZXhPZignamFqJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ0h14oCZJyA6XG4gICAgICAgIChvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dlbicgOlxuICAgICAgICAob3V0cHV0LmluZGV4T2YoJ0RJUycpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdiZW4nIDpcbiAgICAgICAgdGltZSArICcgcmV0JztcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwgc3RyaW5nLCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgbnVtYmVyTm91biA9IG51bWJlckFzTm91bihudW1iZXIpO1xuICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBsdXAnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyB0dXAnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyByZXAnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBqYWonO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBqYXInO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJOb3VuICsgJyBESVMnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbnVtYmVyQXNOb3VuKG51bWJlcikge1xuICAgICAgICB2YXIgaHVuZHJlZCA9IE1hdGguZmxvb3IoKG51bWJlciAlIDEwMDApIC8gMTAwKSxcbiAgICAgICAgdGVuID0gTWF0aC5mbG9vcigobnVtYmVyICUgMTAwKSAvIDEwKSxcbiAgICAgICAgb25lID0gbnVtYmVyICUgMTAsXG4gICAgICAgIHdvcmQgPSAnJztcbiAgICAgICAgaWYgKGh1bmRyZWQgPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9IG51bWJlcnNOb3Vuc1todW5kcmVkXSArICd2YXRsaCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlbiA+IDApIHtcbiAgICAgICAgICAgIHdvcmQgKz0gKCh3b3JkICE9PSAnJykgPyAnICcgOiAnJykgKyBudW1iZXJzTm91bnNbdGVuXSArICdtYUgnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbmUgPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9ICgod29yZCAhPT0gJycpID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW29uZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICh3b3JkID09PSAnJykgPyAncGFnaCcgOiB3b3JkO1xuICAgIH1cblxuICAgIHZhciB0bGggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0bGgnLCB7XG4gICAgICAgIG1vbnRocyA6ICd0ZXJh4oCZIGphciB3YeKAmV90ZXJh4oCZIGphciBjaGHigJlfdGVyYeKAmSBqYXIgd2VqX3RlcmHigJkgamFyIGxvU190ZXJh4oCZIGphciB2YWdoX3RlcmHigJkgamFyIGphdl90ZXJh4oCZIGphciBTb2NoX3RlcmHigJkgamFyIGNob3JnaF90ZXJh4oCZIGphciBIdXRfdGVyYeKAmSBqYXIgd2HigJltYUhfdGVyYeKAmSBqYXIgd2HigJltYUggd2HigJlfdGVyYeKAmSBqYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYXIgd2HigJlfamFyIGNoYeKAmV9qYXIgd2VqX2phciBsb1NfamFyIHZhZ2hfamFyIGphdl9qYXIgU29jaF9qYXIgY2hvcmdoX2phciBIdXRfamFyIHdh4oCZbWFIX2phciB3YeKAmW1hSCB3YeKAmV9qYXIgd2HigJltYUggY2hh4oCZJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnbG9qbUl0amFqX0RhU2phal9wb3ZqYWpfZ2hJdGxoamFqX2xvZ2hqYWpfYnVxamFqX2doSW5qYWonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEYUhqYWpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbd2HigJlsZVNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnTExMJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbd2HigJlIdeKAmV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdMTEwnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiB0cmFuc2xhdGVGdXR1cmUsXG4gICAgICAgICAgICBwYXN0IDogdHJhbnNsYXRlUGFzdCxcbiAgICAgICAgICAgIHMgOiAncHVTIGx1cCcsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiAnd2HigJkgdHVwJyxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6ICd3YeKAmSByZXAnLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogJ3dh4oCZIGphaicsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiAnd2HigJkgamFyJyxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6ICd3YeKAmSBESVMnLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0bGg7XG5cbn0pKSk7XG4iLCJcbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgc3VmZml4ZXMgPSB7XG4gICAgICAgIDE6ICdcXCdpbmNpJyxcbiAgICAgICAgNTogJ1xcJ2luY2knLFxuICAgICAgICA4OiAnXFwnaW5jaScsXG4gICAgICAgIDcwOiAnXFwnaW5jaScsXG4gICAgICAgIDgwOiAnXFwnaW5jaScsXG4gICAgICAgIDI6ICdcXCduY2knLFxuICAgICAgICA3OiAnXFwnbmNpJyxcbiAgICAgICAgMjA6ICdcXCduY2knLFxuICAgICAgICA1MDogJ1xcJ25jaScsXG4gICAgICAgIDM6ICdcXCfDvG5jw7wnLFxuICAgICAgICA0OiAnXFwnw7xuY8O8JyxcbiAgICAgICAgMTAwOiAnXFwnw7xuY8O8JyxcbiAgICAgICAgNjogJ1xcJ25jxLEnLFxuICAgICAgICA5OiAnXFwndW5jdScsXG4gICAgICAgIDEwOiAnXFwndW5jdScsXG4gICAgICAgIDMwOiAnXFwndW5jdScsXG4gICAgICAgIDYwOiAnXFwnxLFuY8SxJyxcbiAgICAgICAgOTA6ICdcXCfEsW5jxLEnXG4gICAgfTtcblxuICAgIHZhciB0ciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RyJywge1xuICAgICAgICBtb250aHMgOiAnT2Nha1/FnnViYXRfTWFydF9OaXNhbl9NYXnEsXNfSGF6aXJhbl9UZW1tdXpfQcSfdXN0b3NfRXlsw7xsX0VraW1fS2FzxLFtX0FyYWzEsWsnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ09jYV/FnnViX01hcl9OaXNfTWF5X0hhel9UZW1fQcSfdV9FeWxfRWtpX0thc19BcmEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1BhemFyX1BhemFydGVzaV9TYWzEsV/Dh2FyxZ9hbWJhX1BlcsWfZW1iZV9DdW1hX0N1bWFydGVzaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdQYXpfUHRzX1NhbF/Dh2FyX1Blcl9DdW1fQ3RzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdQel9QdF9TYV/Dh2FfUGVfQ3VfQ3QnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tidWfDvG4gc2FhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbeWFyxLFuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1tnZWxlY2VrXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tkw7xuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbZ2XDp2VuXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgc29ucmEnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDDtm5jZScsXG4gICAgICAgICAgICBzIDogJ2Jpcmthw6cgc2FuaXllJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhbml5ZScsXG4gICAgICAgICAgICBtIDogJ2JpciBkYWtpa2EnLFxuICAgICAgICAgICAgbW0gOiAnJWQgZGFraWthJyxcbiAgICAgICAgICAgIGggOiAnYmlyIHNhYXQnLFxuICAgICAgICAgICAgaGggOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBkIDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgTSA6ICdiaXIgYXknLFxuICAgICAgICAgICAgTU0gOiAnJWQgYXknLFxuICAgICAgICAgICAgeSA6ICdiaXIgecSxbCcsXG4gICAgICAgICAgICB5eSA6ICclZCB5xLFsJ1xuICAgICAgICB9LFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRG8nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0REJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7ICAvLyBzcGVjaWFsIGNhc2UgZm9yIHplcm9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnXFwnxLFuY8SxJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYiA9IG51bWJlciAlIDEwMCAtIGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gbnVtYmVyID49IDEwMCA/IDEwMCA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0cjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgLy8gQWZ0ZXIgdGhlIHllYXIgdGhlcmUgc2hvdWxkIGJlIGEgc2xhc2ggYW5kIHRoZSBhbW91bnQgb2YgeWVhcnMgc2luY2UgRGVjZW1iZXIgMjYsIDE5NzkgaW4gUm9tYW4gbnVtZXJhbHMuXG4gICAgLy8gVGhpcyBpcyBjdXJyZW50bHkgdG9vIGRpZmZpY3VsdCAobWF5YmUgZXZlbiBpbXBvc3NpYmxlKSB0byBhZGQuXG4gICAgdmFyIHR6bCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcl9GZXZyYWdsaF9NYXLDp19BdnLDr3VfTWFpX0fDvG5fSnVsaWFfR3VzY2h0X1NldGVtdmFyX0xpc3RvcMOkdHNfTm9lbXZhcl9aZWNlbXZhcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0Zldl9NYXJfQXZyX01haV9Hw7xuX0p1bF9HdXNfU2V0X0xpc19Ob2VfWmVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTw7psYWRpX0zDum5lw6dpX01haXR6aV9Nw6FyY3VyaV9YaMO6YWRpX1Zpw6luZXLDp2lfU8OhdHVyaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTw7psX0zDum5fTWFpX03DoXJfWGjDul9WacOpX1PDoXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1PDul9Mw7pfTWFfTcOhX1hoX1ZpX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBbZGFsbGFzXSBZWVlZIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgW2xpXSBELiBNTU1NIFtkYWxsYXNdIFlZWVkgSEgubW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9kXFwnb3xkXFwnYS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RcXCdvJyA9PT0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnZFxcJ28nIDogJ0RcXCdPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnZFxcJ2EnIDogJ0RcXCdBJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tveGhpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tkZW3DoCDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW2llaXJpIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbc8O8ciBlbF0gZGRkZCBbbGFzdGV1IMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb3NwcmVpICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnamElcycsXG4gICAgICAgICAgICBzIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAncyc6IFsndmllbnNhcyBzZWN1bmRzJywgJ1xcJ2llbnNhcyBzZWN1bmRzJ10sXG4gICAgICAgICAgICAnc3MnOiBbbnVtYmVyICsgJyBzZWN1bmRzJywgJycgKyBudW1iZXIgKyAnIHNlY3VuZHMnXSxcbiAgICAgICAgICAgICdtJzogWydcXCduIG3DrXV0JywgJ1xcJ2llbnMgbcOtdXQnXSxcbiAgICAgICAgICAgICdtbSc6IFtudW1iZXIgKyAnIG3DrXV0cycsICcnICsgbnVtYmVyICsgJyBtw611dHMnXSxcbiAgICAgICAgICAgICdoJzogWydcXCduIMO+b3JhJywgJ1xcJ2llbnNhIMO+b3JhJ10sXG4gICAgICAgICAgICAnaGgnOiBbbnVtYmVyICsgJyDDvm9yYXMnLCAnJyArIG51bWJlciArICcgw75vcmFzJ10sXG4gICAgICAgICAgICAnZCc6IFsnXFwnbiB6aXVhJywgJ1xcJ2llbnNhIHppdWEnXSxcbiAgICAgICAgICAgICdkZCc6IFtudW1iZXIgKyAnIHppdWFzJywgJycgKyBudW1iZXIgKyAnIHppdWFzJ10sXG4gICAgICAgICAgICAnTSc6IFsnXFwnbiBtZXMnLCAnXFwnaWVucyBtZXMnXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIG1lc2VuJywgJycgKyBudW1iZXIgKyAnIG1lc2VuJ10sXG4gICAgICAgICAgICAneSc6IFsnXFwnbiBhcicsICdcXCdpZW5zIGFyJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBhcnMnLCAnJyArIG51bWJlciArICcgYXJzJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiAod2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV0pO1xuICAgIH1cblxuICAgIHJldHVybiB0emw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0em0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0em0nLCB7XG4gICAgICAgIG1vbnRocyA6ICfitYnitY/itY/itLDitaLitZRf4rSx4rWV4rSw4rWi4rWVX+K1juK0sOK1leK1ml/itYnitLHitZTitYnitZRf4rWO4rSw4rWi4rWi4rWTX+K1ouK1k+K1j+K1ouK1k1/itaLitZPitY3itaLitZPitaNf4rWW4rWT4rWb4rWcX+K1m+K1k+K1nOK0sOK1j+K0seK1ieK1lF/itL3itZ/itZPitLHitZVf4rWP4rWT4rWh4rSw4rWP4rSx4rWJ4rWUX+K0t+K1k+K1iuK1j+K0seK1ieK1lCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+K0sOK1meK0sOK1juK0sOK1mV/itLDitaLitY/itLDitZlf4rSw4rWZ4rWJ4rWP4rSw4rWZX+K0sOK0veK1lOK0sOK1mV/itLDitL3itaHitLDitZlf4rSw4rWZ4rWJ4rWO4rWh4rSw4rWZX+K0sOK1meK1ieK0ueK1ouK0sOK1mScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+K0sOK1meK0t+K1hSDitLRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb4rSw4rWZ4rS94rSwIOK0tF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvitLRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4rSw4rWa4rSw4rWP4rWcIOK0tF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvitLRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ+K0t+K0sOK0t+K1hSDitZkg4rWi4rSw4rWPICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn4rWi4rSw4rWPICVzJyxcbiAgICAgICAgICAgIHMgOiAn4rWJ4rWO4rWJ4rS9JyxcbiAgICAgICAgICAgIHNzIDogJyVkIOK1ieK1juK1ieK0vScsXG4gICAgICAgICAgICBtIDogJ+K1juK1ieK1j+K1k+K0uicsXG4gICAgICAgICAgICBtbSA6ICclZCDitY7itYnitY/itZPitLonLFxuICAgICAgICAgICAgaCA6ICfitZnitLDitYTitLAnLFxuICAgICAgICAgICAgaGggOiAnJWQg4rWc4rSw4rWZ4rWZ4rSw4rWE4rWJ4rWPJyxcbiAgICAgICAgICAgIGQgOiAn4rSw4rWZ4rWZJyxcbiAgICAgICAgICAgIGRkIDogJyVkIG/itZnitZnitLDitY8nLFxuICAgICAgICAgICAgTSA6ICfitLDitaJv4rWT4rWUJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOK1ieK1ouK1ouK1ieK1lOK1jycsXG4gICAgICAgICAgICB5IDogJ+K0sOK1meK0s+K0sOK1mScsXG4gICAgICAgICAgICB5eSA6ICclZCDitYnitZnitLPitLDitZnitY8nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0em07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0em1MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptLWxhdG4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdpbm5heXJfYnLLpGF5csukX21hcsukc8ukX2licmlyX21heXl3X3l3bnl3X3l3bHl3el/Jo3fFoXRfxaF3dGFuYmlyX2t0y6R3YnLLpF9ud3dhbmJpcl9kd2puYmlyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2FzYW1hc19heW5hc19hc2luYXNfYWtyYXNfYWt3YXNfYXNpbXdhc19hc2nhuI15YXMnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbYXNka2ggZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1thc2thIGddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1thc3NhbnQgZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFtnXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWRraCBzIHlhbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ3lhbiAlcycsXG4gICAgICAgICAgICBzIDogJ2ltaWsnLFxuICAgICAgICAgICAgc3MgOiAnJWQgaW1paycsXG4gICAgICAgICAgICBtIDogJ21pbnXhuI0nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludeG4jScsXG4gICAgICAgICAgICBoIDogJ3NhyZthJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRhc3NhyZtpbicsXG4gICAgICAgICAgICBkIDogJ2FzcycsXG4gICAgICAgICAgICBkZCA6ICclZCBvc3NhbicsXG4gICAgICAgICAgICBNIDogJ2F5b3dyJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGl5eWlybicsXG4gICAgICAgICAgICB5IDogJ2FzZ2FzJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGlzZ2FzbidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDYsIC8vIFNhdHVyZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiAxMiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMTJ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHR6bUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxhbmd1YWdlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHVnQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1Zy1jbicsIHtcbiAgICAgICAgbW9udGhzOiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn2YrYp9mG24vYp9ixX9mB25Dbi9ix2KfZhF/Zhdin2LHYql/Yptin2b7YsduQ2YRf2YXYp9mKX9im2YnZituH2YZf2KbZidmK24fZhF/Yptin24vYutuH2LPYql/Ys9uQ2YbYqtuV2KjZidixX9im24bZg9iq25XYqNmJ2LFf2YbZiNmK2KfYqNmJ2LFf2K/bkNmD2KfYqNmJ2LEnLnNwbGl0KFxuICAgICAgICAgICAgJ18nXG4gICAgICAgICksXG4gICAgICAgIHdlZWtkYXlzOiAn2YrbldmD2LTbldmG2KjblV/Yr9uI2LTbldmG2KjblV/Ys9uV2YrYtNuV2YbYqNuVX9qG2KfYsdi025XZhtio25Vf2b7bldmK2LTbldmG2KjblV/YrNuI2YXblV/YtNuV2YbYqNuVJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfZituVX9iv24hf2LPblV/ahtinX9m+25Vf2KzbiF/YtNuVJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YknLFxuICAgICAgICAgICAgTExMOiAnWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRk2IwgWVlZWS3ZitmJ2YTZiU0t2KbYp9mK2YbZidqtRC3Zg9uI2YbZidiMIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2YrbkNix2YnZhSDZg9uQ2obblXzYs9uV2r7bldixfNqG24jYtNiq2YnZhiDYqNuH2LHbh9mGfNqG24jYtHzahtuI2LTYqtmJ2YYg2YPbkNmK2YnZhnzZg9uV2oYvLFxuICAgICAgICBtZXJpZGllbUhvdXI6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfZituQ2LHZidmFINmD25DahtuVJyB8fFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2LPbldq+25XYsScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJ1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn2obbiNi02KrZidmGINmD25DZitmJ2YYnIHx8IG1lcmlkaWVtID09PSAn2YPbldqGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mK25DYsdmJ2YUg2YPbkNqG25UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LPbldq+25XYsSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi02KrZidmGINio24fYsduH2YYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2obbiNi02KrZidmGINmD25DZitmJ2YYnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9mD25Xahic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9io24jar9uI2YYg2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vYptuV2KrblSDYs9in2KbbldiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1vZg9uQ2YTbldix2YPZiV0gZGRkZCBb2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYqtuG2YbbiNqv24jZhl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb2KbYp9mE2K/ZidmG2YLZiV0gZGRkZCBb2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzINmD25DZitmJ2YYnLFxuICAgICAgICAgICAgcGFzdDogJyVzINio24fYsduH2YYnLFxuICAgICAgICAgICAgczogJ9mG25XahtqG25Ug2LPbkNmD2YjZhtiqJyxcbiAgICAgICAgICAgIHNzOiAnJWQg2LPbkNmD2YjZhtiqJyxcbiAgICAgICAgICAgIG06ICfYqNmJ2LEg2YXZidmG24fYqicsXG4gICAgICAgICAgICBtbTogJyVkINmF2YnZhtuH2KonLFxuICAgICAgICAgICAgaDogJ9io2YnYsSDYs9in2KbbldiqJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9im25XYqicsXG4gICAgICAgICAgICBkOiAn2KjZidixINmD24jZhicsXG4gICAgICAgICAgICBkZDogJyVkINmD24jZhicsXG4gICAgICAgICAgICBNOiAn2KjZidixINim2KfZiicsXG4gICAgICAgICAgICBNTTogJyVkINim2KfZiicsXG4gICAgICAgICAgICB5OiAn2KjZidixINmK2YnZhCcsXG4gICAgICAgICAgICB5eTogJyVkINmK2YnZhCdcbiAgICAgICAgfSxcblxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oLdmD24jZhtmJfC3Yptin2Yp8Ldq+25XZvtiq25UpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdmD24jZhtmJJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct2r7bldm+2KrblSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICAvLyBHQi9UIDc0MDgtMTk5NOOAiuaVsOaNruWFg+WSjOS6pOaNouagvOW8j8K35L+h5oGv5Lqk5o2iwrfml6XmnJ/lkozml7bpl7TooajnpLrms5XjgIvkuI5JU08gODYwMToxOTg4562J5pWIXG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA3IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDFzdCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVnQ247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogKG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKSA/IGZvcm1zWzFdIDogZm9ybXNbMl0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnc3MnOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Lhf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgICdtbSc6IHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LBf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyA6ICfRhdCy0LjQu9C40L3Rg1/RhdCy0LjQu9C40L3QuF/RhdCy0LjQu9C40L0nLFxuICAgICAgICAgICAgJ2hoJzogd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LBf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nIDogJ9Cz0L7QtNC40L3Rg1/Qs9C+0LTQuNC90Lhf0LPQvtC00LjQvScsXG4gICAgICAgICAgICAnZGQnOiAn0LTQtdC90Yxf0LTQvdGWX9C00L3RltCyJyxcbiAgICAgICAgICAgICdNTSc6ICfQvNGW0YHRj9GG0Yxf0LzRltGB0Y/RhtGWX9C80ZbRgdGP0YbRltCyJyxcbiAgICAgICAgICAgICd5eSc6ICfRgNGW0Lpf0YDQvtC60Lhf0YDQvtC60ZbQsidcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGtleSA9PT0gJ20nKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfRhdCy0LjQu9C40L3QsCcgOiAn0YXQstC40LvQuNC90YMnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ2gnKSB7XG4gICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICfQs9C+0LTQuNC90LAnIDogJ9Cz0L7QtNC40L3Rgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3ZWVrZGF5c0Nhc2VSZXBsYWNlKG0sIGZvcm1hdCkge1xuICAgICAgICB2YXIgd2Vla2RheXMgPSB7XG4gICAgICAgICAgICAnbm9taW5hdGl2ZSc6ICfQvdC10LTRltC70Y9f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNCwX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRj1/RgdGD0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnYWNjdXNhdGl2ZSc6ICfQvdC10LTRltC70Y5f0L/QvtC90LXQtNGW0LvQvtC6X9Cy0ZbQstGC0L7RgNC+0Lpf0YHQtdGA0LXQtNGDX9GH0LXRgtCy0LXRgF/Qv+KAmdGP0YLQvdC40YbRjl/RgdGD0LHQvtGC0YMnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnZ2VuaXRpdmUnOiAn0L3QtdC00ZbQu9GWX9C/0L7QvdC10LTRltC70LrQsF/QstGW0LLRgtC+0YDQutCwX9GB0LXRgNC10LTQuF/Rh9C10YLQstC10YDQs9CwX9C/4oCZ0Y/RgtC90LjRhtGWX9GB0YPQsdC+0YLQuCcuc3BsaXQoJ18nKVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheXNbJ25vbWluYXRpdmUnXS5zbGljZSgxLCA3KS5jb25jYXQod2Vla2RheXNbJ25vbWluYXRpdmUnXS5zbGljZSgwLCAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla2RheXNbJ25vbWluYXRpdmUnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBub3VuQ2FzZSA9ICgvKFxcW1vQktCy0KPRg11cXF0pID9kZGRkLykudGVzdChmb3JtYXQpID9cbiAgICAgICAgICAgICdhY2N1c2F0aXZlJyA6XG4gICAgICAgICAgICAoKC9cXFs/KD860LzQuNC90YPQu9C+0Zd80L3QsNGB0YLRg9C/0L3QvtGXKT8gP1xcXSA/ZGRkZC8pLnRlc3QoZm9ybWF0KSA/XG4gICAgICAgICAgICAgICAgJ2dlbml0aXZlJyA6XG4gICAgICAgICAgICAgICAgJ25vbWluYXRpdmUnKTtcbiAgICAgICAgcmV0dXJuIHdlZWtkYXlzW25vdW5DYXNlXVttLmRheSgpXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyICsgJ9C+JyArICh0aGlzLmhvdXJzKCkgPT09IDExID8gJ9CxJyA6ICcnKSArICddIExUJztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgdWsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1aycsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgJ2Zvcm1hdCc6ICfRgdGW0YfQvdGPX9C70Y7RgtC+0LPQvl/QsdC10YDQtdC30L3Rj1/QutCy0ZbRgtC90Y9f0YLRgNCw0LLQvdGPX9GH0LXRgNCy0L3Rj1/Qu9C40L/QvdGPX9GB0LXRgNC/0L3Rj1/QstC10YDQtdGB0L3Rj1/QttC+0LLRgtC90Y9f0LvQuNGB0YLQvtC/0LDQtNCwX9Cz0YDRg9C00L3Rjycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgICdzdGFuZGFsb25lJzogJ9GB0ZbRh9C10L3RjF/Qu9GO0YLQuNC5X9Cx0LXRgNC10LfQtdC90Yxf0LrQstGW0YLQtdC90Yxf0YLRgNCw0LLQtdC90Yxf0YfQtdGA0LLQtdC90Yxf0LvQuNC/0LXQvdGMX9GB0LXRgNC/0LXQvdGMX9Cy0LXRgNC10YHQtdC90Yxf0LbQvtCy0YLQtdC90Yxf0LvQuNGB0YLQvtC/0LDQtF/Qs9GA0YPQtNC10L3RjCcuc3BsaXQoJ18nKVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICfRgdGW0Ydf0LvRjtGCX9Cx0LXRgF/QutCy0ZbRgl/RgtGA0LDQsl/Rh9C10YDQsl/Qu9C40L9f0YHQtdGA0L9f0LLQtdGAX9C20L7QstGCX9C70LjRgdGCX9Cz0YDRg9C0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHdlZWtkYXlzQ2FzZVJlcGxhY2UsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0L3QtF/Qv9C9X9Cy0YJf0YHRgF/Rh9GCX9C/0YJf0YHQsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZINGALicsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkg0YAuLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZINGALiwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQodGM0L7Qs9C+0LTQvdGWICcpLFxuICAgICAgICAgICAgbmV4dERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQl9Cw0LLRgtGA0LAgJyksXG4gICAgICAgICAgICBsYXN0RGF5OiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9CS0YfQvtGA0LAgJyksXG4gICAgICAgICAgICBuZXh0V2VlazogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQo10gZGRkZCBbJyksXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Rl10gZGRkZCBbJykuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzSG91cnNGdW5jdGlvbignW9Cc0LjQvdGD0LvQvtCz0L5dIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9C30LAgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDRgtC+0LzRgycsXG4gICAgICAgICAgICBzIDogJ9C00LXQutGW0LvRjNC60LAg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6ICfQs9C+0LTQuNC90YMnLFxuICAgICAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZCA6ICfQtNC10L3RjCcsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ9C80ZbRgdGP0YbRjCcsXG4gICAgICAgICAgICBNTSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICB5IDogJ9GA0ZbQuicsXG4gICAgICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gTS4gRS46IHRob3NlIHR3byBhcmUgdmlydHVhbGx5IHVudXNlZCBidXQgYSB1c2VyIG1pZ2h0IHdhbnQgdG8gaW1wbGVtZW50IHRoZW0gZm9yIGhpcy9oZXIgd2Vic2l0ZSBmb3Igc29tZSByZWFzb25cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9C90L7Rh9GWfNGA0LDQvdC60YN80LTQvdGPfNCy0LXRh9C+0YDQsC8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNC00L3Rj3zQstC10YfQvtGA0LApJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQvdC+0YfRlic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0YDQsNC90LrRgyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LTQvdGPJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQstC10YfQvtGA0LAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNC5fNCz0L4pLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC5JztcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LPQvic7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdWs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHMgPSBbXG4gICAgICAgICfYrNmG2YjYsduMJyxcbiAgICAgICAgJ9mB2LHZiNix24wnLFxuICAgICAgICAn2YXYp9ix2oYnLFxuICAgICAgICAn2KfZvtix24zZhCcsXG4gICAgICAgICfZhdim24wnLFxuICAgICAgICAn2KzZiNmGJyxcbiAgICAgICAgJ9is2YjZhNin2KbbjCcsXG4gICAgICAgICfYp9qv2LPYqicsXG4gICAgICAgICfYs9iq2YXYqNixJyxcbiAgICAgICAgJ9in2qnYqtmI2KjYsScsXG4gICAgICAgICfZhtmI2YXYqNixJyxcbiAgICAgICAgJ9iv2LPZhdio2LEnXG4gICAgXTtcbiAgICB2YXIgZGF5cyA9IFtcbiAgICAgICAgJ9in2KrZiNin2LEnLFxuICAgICAgICAn2b7bjNixJyxcbiAgICAgICAgJ9mF2Ybar9mEJyxcbiAgICAgICAgJ9io2K/avicsXG4gICAgICAgICfYrNmF2LnYsdin2KonLFxuICAgICAgICAn2KzZhdi524EnLFxuICAgICAgICAn24HZgdiq24EnXG4gICAgXTtcblxuICAgIHZhciB1ciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3VyJywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c01pbiA6IGRheXMsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRk2IwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Ytdio2K182LTYp9mFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtdio2K0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICfYtNin2YUnO1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9ii2Kwg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9qp2YQg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1var9iw2LTYqtuBINix2YjYsiDYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9qv2LDYtNiq24FdIGRkZGQgW9io2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg2KjYudivJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg2YLYqNmEJyxcbiAgICAgICAgICAgIHMgOiAn2obZhtivINiz24zaqdmG2ognLFxuICAgICAgICAgICAgc3MgOiAnJWQg2LPbjNqp2YbaiCcsXG4gICAgICAgICAgICBtIDogJ9in24zaqSDZhdmG2bknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2YXZhtm5JyxcbiAgICAgICAgICAgIGggOiAn2KfbjNqpINqv2r7Zhtm524EnLFxuICAgICAgICAgICAgaGggOiAnJWQg2q/avtmG2bnbkicsXG4gICAgICAgICAgICBkIDogJ9in24zaqSDYr9mGJyxcbiAgICAgICAgICAgIGRkIDogJyVkINiv2YYnLFxuICAgICAgICAgICAgTSA6ICfYp9uM2qkg2YXYp9uBJyxcbiAgICAgICAgICAgIE1NIDogJyVkINmF2KfbgScsXG4gICAgICAgICAgICB5IDogJ9in24zaqSDYs9in2YQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPYp9mEJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdXogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1eicsIHtcbiAgICAgICAgbW9udGhzIDogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9Cv0LrRiNCw0L3QsdCwX9CU0YPRiNCw0L3QsdCwX9Ch0LXRiNCw0L3QsdCwX9Cn0L7RgNGI0LDQvdCx0LBf0J/QsNC50YjQsNC90LHQsF/QltGD0LzQsF/QqNCw0L3QsdCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cv0LrRiF/QlNGD0Yhf0KHQtdGIX9Cn0L7RgF/Qn9Cw0Llf0JbRg9C8X9Co0LDQvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0K/Qul/QlNGDX9Ch0LVf0KfQvl/Qn9CwX9CW0YNf0KjQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ0QgTU1NTSBZWVlZLCBkZGRkIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CR0YPQs9GD0L0g0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQrdGA0YLQsNCz0LBdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9Ca0LXRh9CwINGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9Cj0YLQs9Cw0L1dIGRkZGQgW9C60YPQvdC4INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9Cv0LrQuNC9ICVzINC40YfQuNC00LAnLFxuICAgICAgICAgICAgcGFzdCA6ICfQkdC40YAg0L3QtdGH0LAgJXMg0L7Qu9C00LjQvScsXG4gICAgICAgICAgICBzIDogJ9GE0YPRgNGB0LDRgicsXG4gICAgICAgICAgICBzcyA6ICclZCDRhNGD0YDRgdCw0YInLFxuICAgICAgICAgICAgbSA6ICfQsdC40YAg0LTQsNC60LjQutCwJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBoIDogJ9Cx0LjRgCDRgdC+0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdC+0LDRgicsXG4gICAgICAgICAgICBkIDogJ9Cx0LjRgCDQutGD0L0nLFxuICAgICAgICAgICAgZGQgOiAnJWQg0LrRg9C9JyxcbiAgICAgICAgICAgIE0gOiAn0LHQuNGAINC+0LknLFxuICAgICAgICAgICAgTU0gOiAnJWQg0L7QuScsXG4gICAgICAgICAgICB5IDogJ9Cx0LjRgCDQudC40LsnLFxuICAgICAgICAgICAgeXkgOiAnJWQg0LnQuNC7J1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1ejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHV6TGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3V6LWxhdG4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdZYW52YXJfRmV2cmFsX01hcnRfQXByZWxfTWF5X0l5dW5fSXl1bF9Bdmd1c3RfU2VudGFicl9Pa3RhYnJfTm95YWJyX0Rla2Ficicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnWWFuX0Zldl9NYXJfQXByX01heV9JeXVuX0l5dWxfQXZnX1Nlbl9Pa3RfTm95X0Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnWWFrc2hhbmJhX0R1c2hhbmJhX1Nlc2hhbmJhX0Nob3JzaGFuYmFfUGF5c2hhbmJhX0p1bWFfU2hhbmJhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1lha19EdXNoX1Nlc2hfQ2hvcl9QYXlfSnVtX1NoYW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1lhX0R1X1NlX0Nob19QYV9KdV9TaGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tCdWd1biBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0VydGFnYV0gTFQgW2RhXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbS2VjaGEgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbT1xcJ3RnYW5dIGRkZGQgW2t1bmkgc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnWWFxaW4gJXMgaWNoaWRhJyxcbiAgICAgICAgICAgIHBhc3QgOiAnQmlyIG5lY2hhICVzIG9sZGluJyxcbiAgICAgICAgICAgIHMgOiAnc29uaXlhJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNvbml5YScsXG4gICAgICAgICAgICBtIDogJ2JpciBkYXFpcWEnLFxuICAgICAgICAgICAgbW0gOiAnJWQgZGFxaXFhJyxcbiAgICAgICAgICAgIGggOiAnYmlyIHNvYXQnLFxuICAgICAgICAgICAgaGggOiAnJWQgc29hdCcsXG4gICAgICAgICAgICBkIDogJ2JpciBrdW4nLFxuICAgICAgICAgICAgZGQgOiAnJWQga3VuJyxcbiAgICAgICAgICAgIE0gOiAnYmlyIG95JyxcbiAgICAgICAgICAgIE1NIDogJyVkIG95JyxcbiAgICAgICAgICAgIHkgOiAnYmlyIHlpbCcsXG4gICAgICAgICAgICB5eSA6ICclZCB5aWwnXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHV6TGF0bjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHZpID0gbW9tZW50LmRlZmluZUxvY2FsZSgndmknLCB7XG4gICAgICAgIG1vbnRocyA6ICd0aMOhbmcgMV90aMOhbmcgMl90aMOhbmcgM190aMOhbmcgNF90aMOhbmcgNV90aMOhbmcgNl90aMOhbmcgN190aMOhbmcgOF90aMOhbmcgOV90aMOhbmcgMTBfdGjDoW5nIDExX3Row6FuZyAxMicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnVGgwMV9UaDAyX1RoMDNfVGgwNF9UaDA1X1RoMDZfVGgwN19UaDA4X1RoMDlfVGgxMF9UaDExX1RoMTInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdjaOG7pyBuaOG6rXRfdGjhu6kgaGFpX3Ro4bupIGJhX3Ro4bupIHTGsF90aOG7qSBuxINtX3Ro4bupIHPDoXVfdGjhu6kgYuG6o3knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQ05fVDJfVDNfVDRfVDVfVDZfVDcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvc2F8Y2gvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eY2gkL2kudGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3NhJyA6ICdTQSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2NoJyA6ICdDSCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gW27Eg21dIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBbbsSDbV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBbbsSDbV0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsIDogJ0REL00vWVlZWScsXG4gICAgICAgICAgICBsbCA6ICdEIE1NTSBZWVlZJyxcbiAgICAgICAgICAgIGxsbCA6ICdEIE1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkLCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSMO0bSBuYXkgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tOZ8OgeSBtYWkgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt0deG6p24gdOG7m2kgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tIw7RtIHF1YSBsw7pjXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3R14bqnbiBy4buTaSBsw7pjXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyB04bubaScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHRyxrDhu5tjJyxcbiAgICAgICAgICAgIHMgOiAndsOgaSBnacOieScsXG4gICAgICAgICAgICBzcyA6ICclZCBnacOieScgLFxuICAgICAgICAgICAgbSA6ICdt4buZdCBwaMO6dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBwaMO6dCcsXG4gICAgICAgICAgICBoIDogJ23hu5l0IGdp4budJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGdp4budJyxcbiAgICAgICAgICAgIGQgOiAnbeG7mXQgbmfDoHknLFxuICAgICAgICAgICAgZGQgOiAnJWQgbmfDoHknLFxuICAgICAgICAgICAgTSA6ICdt4buZdCB0aMOhbmcnLFxuICAgICAgICAgICAgTU0gOiAnJWQgdGjDoW5nJyxcbiAgICAgICAgICAgIHkgOiAnbeG7mXQgbsSDbScsXG4gICAgICAgICAgICB5eSA6ICclZCBuxINtJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0vLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdmk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB4UHNldWRvID0gbW9tZW50LmRlZmluZUxvY2FsZSgneC1wc2V1ZG8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdKfsOhw7HDusOhfnLDvV9GfsOpYnLDun7DoXLDvV9+TcOhcmN+aF/DgXB+csOtbF9+TcOhw71ffkrDusOxw6l+X0rDumx+w71fw4HDun5nw7pzdH5fU8OpcH50w6ltYn7DqXJfw5N+Y3TDs2J+w6lyX8ORfsOzdsOpbX5iw6lyX35Ew6ljw6l+bWLDqXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0p+w6HDsV9+RsOpYl9+TcOhcl9+w4Fwcl9+TcOhw71ffkrDusOxX35Kw7psX37DgcO6Z19+U8OpcF9+w5NjdF9+w5HDs3ZffkTDqWMnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTfsO6w7Fkw6F+w71fTcOzfsOxZMOhw71+X1TDusOpfnNkw6HDvX5fV8OpZH7DscOpc2R+w6HDvV9UfmjDunJzfmTDocO9X35GcsOtZH7DocO9X1N+w6F0w7pyfmTDocO9Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N+w7rDsV9+TcOzw7FfflTDusOpX35Xw6lkX35UaMO6X35GcsOtX35Tw6F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTfsO6X03Ds35fVMO6X35Xw6lfVH5oX0Zyfl9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1R+w7Nkw6F+w70gw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUfsOzbcOzfnJyw7N+dyDDoXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbw51+w6lzdH7DqXJkw6F+w70gw6F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTH7DoXN0XSBkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfDrX7DsSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIMOhfmfDsycsXG4gICAgICAgICAgICBzIDogJ8OhIH5mw6l3IH5zw6ljw7N+w7FkcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzfsOpY8Ozw7F+ZHMnLFxuICAgICAgICAgICAgbSA6ICfDoSB+bcOtw7F+w7p0w6knLFxuICAgICAgICAgICAgbW0gOiAnJWQgbX7DrcOxw7p+dMOpcycsXG4gICAgICAgICAgICBoIDogJ8OhfsOxIGjDs37DunInLFxuICAgICAgICAgICAgaGggOiAnJWQgaH7Ds8O6cnMnLFxuICAgICAgICAgICAgZCA6ICfDoSB+ZMOhw70nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZH7DocO9cycsXG4gICAgICAgICAgICBNIDogJ8OhIH5tw7PDsX50aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtfsOzw7F0fmhzJyxcbiAgICAgICAgICAgIHkgOiAnw6EgfsO9w6nDoXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw71+w6nDoXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHhQc2V1ZG87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB5byA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3lvJywge1xuICAgICAgICBtb250aHMgOiAnU+G6ucyBcuG6ucyBX0XMgHJlzIBsZcyAX+G6uHLhurnMgG5hzIBfScyAZ2JlzIFfRcyAYmliaV9PzIBrdcyAZHVfQWfhurltb19PzIBndcyBbl9Pd2V3ZV/hu4zMgHdhzIByYcyAX0JlzIFsdcyBX+G7jMyAcOG6ucyAzIAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1PhurnMgXJfRcyAcmxf4bq4cm5fScyAZ2JfRcyAYmlfT8yAa3XMgF9BZ+G6uV9PzIBndcyBX093ZV/hu4zMgHdhzIBfQmXMgWxf4buMzIBw4bq5zIDMgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnQcyAacyAa3XMgV9BamXMgV9JzIBz4bq5zIFndW5f4buMauG7jcyBcnXMgV/hu4xq4buNzIFi4buNX+G6uHRpzIBfQcyAYmHMgW3hurnMgXRhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0HMgGnMgGtfQWplzIFfScyAc+G6ucyBX+G7jGpyX+G7jGpiX+G6uHRpzIBfQcyAYmHMgScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnQcyAacyAX0FqX0nMgHNf4buMcl/hu4xiX+G6uHRfQcyAYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tPzIBuacyAIG5pXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vhu4zMgGxhIG5pXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvhu4xz4bq5zIAgdG/MgW5cXCdi4buNXSBbbmldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0HMgG5hIG5pXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFvhu4xz4bq5zIAgdG/MgWzhu43MgV0gW25pXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnbmnMgSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGvhu41qYcyBJyxcbiAgICAgICAgICAgIHMgOiAnacyAc+G6uWp1zIEgYWF5YcyBIGRpZScsXG4gICAgICAgICAgICBzcyA6J2FheWHMgSAlZCcsXG4gICAgICAgICAgICBtIDogJ2nMgHPhurlqdcyBIGthbicsXG4gICAgICAgICAgICBtbSA6ICdpzIBz4bq5anXMgSAlZCcsXG4gICAgICAgICAgICBoIDogJ3dhzIFrYXRpIGthbicsXG4gICAgICAgICAgICBoaCA6ICd3YcyBa2F0aSAlZCcsXG4gICAgICAgICAgICBkIDogJ+G7jWrhu43MgSBrYW4nLFxuICAgICAgICAgICAgZGQgOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgICAgIE0gOiAnb3N1zIAga2FuJyxcbiAgICAgICAgICAgIE1NIDogJ29zdcyAICVkJyxcbiAgICAgICAgICAgIHkgOiAn4buNZHXMgW4ga2FuJyxcbiAgICAgICAgICAgIHl5IDogJ+G7jWR1zIFuICVkJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL+G7jWrhu43MgVxcc1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6ICfhu41q4buNzIEgJWQnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHlvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgemhDbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLWNuJywge1xuICAgICAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn5ZGo5pelX+WRqOS4gF/lkajkuoxf5ZGo5LiJX+WRqOWbm1/lkajkupRf5ZGo5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVnlubRN5pyIROaXpUFo54K5bW3liIYnLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6VkZGRkQWjngrltbeWIhicsXG4gICAgICAgICAgICBsIDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsIDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAn5Lit5Y2IJ1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vmmI7lpKldTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+S4i11kZGRkTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vkuIpdZGRkZExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOWRqCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+WRqCc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz5YaFJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICAgICAgcyA6ICflh6Dnp5InLFxuICAgICAgICAgICAgc3MgOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG0gOiAnMSDliIbpkp8nLFxuICAgICAgICAgICAgbW0gOiAnJWQg5YiG6ZKfJyxcbiAgICAgICAgICAgIGggOiAnMSDlsI/ml7YnLFxuICAgICAgICAgICAgaGggOiAnJWQg5bCP5pe2JyxcbiAgICAgICAgICAgIGQgOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE0gOiAnMSDkuKrmnIgnLFxuICAgICAgICAgICAgTU0gOiAnJWQg5Liq5pyIJyxcbiAgICAgICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg5bm0J1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB6aENuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgemhIayA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLWhrJywge1xuICAgICAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV1MVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vmmI7lpKldTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+S4i11kZGRkTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXUxUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vkuIpdZGRkZExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjml6V85pyIfOmAsSkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdEJyA6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pelJztcbiAgICAgICAgICAgICAgICBjYXNlICdNJyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JyA6XG4gICAgICAgICAgICAgICAgY2FzZSAnVycgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+mAsSc7XG4gICAgICAgICAgICAgICAgZGVmYXVsdCA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+WFpycsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5bm+56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOenkicsXG4gICAgICAgICAgICBtIDogJzEg5YiG6ZCYJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOWIhumQmCcsXG4gICAgICAgICAgICBoIDogJzEg5bCP5pmCJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOWwj+aZgicsXG4gICAgICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOWkqScsXG4gICAgICAgICAgICBNIDogJzEg5YCL5pyIJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOWAi+aciCcsXG4gICAgICAgICAgICB5IDogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOW5tCdcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHpoSGs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB6aFR3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnemgtdHcnLCB7XG4gICAgICAgIG1vbnRocyA6ICfkuIDmnIhf5LqM5pyIX+S4ieaciF/lm5vmnIhf5LqU5pyIX+WFreaciF/kuIPmnIhf5YWr5pyIX+S5neaciF/ljYHmnIhf5Y2B5LiA5pyIX+WNgeS6jOaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnMeaciF8y5pyIXzPmnIhfNOaciF815pyIXzbmnIhfN+aciF845pyIXznmnIhfMTDmnIhfMTHmnIhfMTLmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+aYn+acn+aXpV/mmJ/mnJ/kuIBf5pif5pyf5LqMX+aYn+acn+S4iV/mmJ/mnJ/lm5tf5pif5pyf5LqUX+aYn+acn+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfpgLHml6Vf6YCx5LiAX+mAseS6jF/pgLHkuIlf6YCx5ZubX+mAseS6lF/pgLHlha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+aXpV/kuIBf5LqMX+S4iV/lm5tf5LqUX+WFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZL01NL0REJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbScsXG4gICAgICAgICAgICBsIDogJ1lZWVkvTS9EJyxcbiAgICAgICAgICAgIGxsIDogJ1lZWVnlubRN5pyIROaXpScsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWeW5tE3mnIhE5pelIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWeW5tE3mnIhE5pelZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WHjOaZqHzml6nkuIp85LiK5Y2IfOS4reWNiHzkuIvljYh85pma5LiKLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8IG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4reWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5LiL5Y2IJyB8fCBtZXJpZGllbSA9PT0gJ+aZmuS4iicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHZhciBobSA9IGhvdXIgKiAxMDAgKyBtaW51dGU7XG4gICAgICAgICAgICBpZiAoaG0gPCA2MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WHjOaZqCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgOTAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfml6nkuIonO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4iuWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTIzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5Lit5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxODAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIvljYgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aZmuS4iic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb5LuK5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vmmI7lpKldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vmmKjlpKldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vkuIpdZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJyA6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCcgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTScgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndycgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXPlhacnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgICAgICBzIDogJ+W5vuenkicsXG4gICAgICAgICAgICBzcyA6ICclZCDnp5InLFxuICAgICAgICAgICAgbSA6ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbSA6ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaCA6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaCA6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZCA6ICcxIOWkqScsXG4gICAgICAgICAgICBkZCA6ICclZCDlpKknLFxuICAgICAgICAgICAgTSA6ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTSA6ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeSA6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB6aFR3O1xuXG59KSkpO1xuIiwiaW1wb3J0IFwiLi9tYWluLmNzc1wiO1xuaW1wb3J0IHsgTWFwYUNhbG9yIH0gZnJvbSBcIi4vbWFwYUNhbG9yXCI7XG5pbXBvcnQgeyBNYXBhLCBNYXBhRWRpdCwgQ29sb3JCYXJyaW8gfSBmcm9tIFwiLi9tYXBhXCI7XG5pbXBvcnQgeyBTZWxlY3RvclRpZW1wbyB9IGZyb20gXCIuL3RpbWVTZWxlY3RvclwiO1xuaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsgcHJlcHJvY2VzYXIsIHRvdGFsaXphclBvckJhcnJpbywgY29udmVydGlyQU1hdHJpeiwgY2FsY3VsYXJNYXhNaW59IGZyb20gJy4vZGF0b3MnO1xuXG5jb25zdCBydXRhVGFkb3MgPSByZXF1aXJlKFwiLi4vcHJ1ZWJhcy9kYXRvcy9kYXRhL3R3ZWV0LXNlcnZpY2lvLXZhbG9yYWNpb24yLmNzdlwiKTtcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24oZXZlbnQpIHsgXG5cdGQzLmNzdihydXRhVGFkb3MsIHByZXByb2Nlc2FyKVxuXHQudGhlbiggKGRhdG9zKSAgPT4ge1xuXHRcdE1hcGEoe1xuXHRcdCAgcGFkcmVTZWxlY3RvcjogXCIubWFwYVwiXG5cdFx0fSk7XG5cdFx0XG5cblx0XHRsZXQgZGF0b3NGaWx0cmFkb3MgPSAgZGF0b3M7XG5cdFx0bGV0IGRhdG9zUG9yQmFycmlvID0gdG90YWxpemFyUG9yQmFycmlvKGRhdG9zRmlsdHJhZG9zKTtcblx0XHRsZXQgZGF0b3NQb3JCYXJyaW9NYXRyaXogPSBjb252ZXJ0aXJBTWF0cml6KGRhdG9zUG9yQmFycmlvKTtcblx0XHRsZXQgbWF4TWluVmFsdWUgPSBjYWxjdWxhck1heE1pbihkYXRvc1BvckJhcnJpb01hdHJpei5kYXRvcyk7XG5cblx0XHRcblx0XHRsZXQgYWN0dWFsaXphckRhdG9zTWFwYUNhbG9yID0gTWFwYUNhbG9yKHtcblx0XHQgIHBhZHJlU2VsZWN0b3I6IFwiLm1hcGFDYWxvclwiLFxuXHRcdCAgbGFiZWxzY29sOiBkYXRvc1BvckJhcnJpb01hdHJpei5zZXJ2aWNpb3MsXG5cdFx0ICBsYWJlbHNyb3c6IGRhdG9zUG9yQmFycmlvTWF0cml6LmJhcnJpb3MsXG5cdFx0ICBzdGFydF9jb2xvcjogXCJyZ2IoMjE1LCAyMTUsIDIxNSlcIixcblx0XHQgIGVuZF9jb2xvcjogJ3JnYigwLCA3OCwgMjU1KScsXG5cdFx0ICBtaW5WYWx1ZTogbWF4TWluVmFsdWUubWluVmFsdWUsXG5cdFx0ICBtYXhWYWx1ZTogbWF4TWluVmFsdWUubWF4VmFsdWUsXG5cdFx0ICBjYWxsYmFja19NYXBhOiBNYXBhRWRpdCxcblx0XHQgIGNhbGxiYWNrX0JhcnJpbzogQ29sb3JCYXJyaW9cblx0XHR9KTtcblxuXG5cdFx0U2VsZWN0b3JUaWVtcG8oe1xuXHRcdCAgcGFkcmVTZWxlY3RvcjogXCIuc2VsZWN0b3JUaWVtcG9cIixcblx0XHR9LCBkYXRvcywgKHQxLCB0MikgPT4ge1xuXHRcdFx0bGV0IGRhdG9zRmlsdHJhZG9zID0gdDEgJiYgdDIgPyBkYXRvcy5maWx0ZXIoZCA9PiBkLnRpbWVzdGFtcD50MSAmJiBkLnRpbWVzdGFtcDx0MikgOiBkYXRvcztcblx0XHRcdGxldCBkYXRvc1BvckJhcnJpbyA9IHRvdGFsaXphclBvckJhcnJpbyhkYXRvc0ZpbHRyYWRvcy5sZW5ndGg+MSA/IGRhdG9zRmlsdHJhZG9zIDogZGF0b3MpO1xuXHRcdFx0bGV0IGRhdG9zUG9yQmFycmlvTWF0cml6ID0gY29udmVydGlyQU1hdHJpeihkYXRvc1BvckJhcnJpbyk7XG5cdFx0XHRpZihkYXRvc1BvckJhcnJpb01hdHJpei5kYXRvcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGFjdHVhbGl6YXJEYXRvc01hcGFDYWxvcihkYXRvc1BvckJhcnJpb01hdHJpei5kYXRvcyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cbiIsInZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSxcXG4uY29udGVuaWRvIHtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBtYXJnaW46IDA7XFxufVxcblxcblxcbi5jb250ZW5pZG8ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWZsb3c6IGNvbHVtbjtcXG59XFxuXFxuLmRhdG9zIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1mbG93OiByb3cgd3JhcDtcXG59XFxuLmRhdG9zID4gKiB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXg6IDEgYXV0bztcXG59XFxuXFxuLmNvbnRlbmlkbyA+ICoge1xcbiAgICBmbGV4OiAxIDEwMCVcXG59XFxuXFxuLnNlbGVjdG9yVGllbXBvIHtcXG4gICAgbWF4LWhlaWdodDogMTBlbTtcXG59XFxuXFxuQG1lZGlhICBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAwMHB4KSB7XFxuICAgIC5kYXRvcyA+ICoge1xcbiAgICAgICAgZmxleDogMSAxMDAlO1xcbiAgICB9XFxufVxcblxcblxcbi5iYWNrZ3JvdW5kLmJhciB7XFxuICBmaWxsOiAjY2NjO1xcbn1cXG4uZm9yZWdyb3VuZC5iYXIge1xcbiAgZmlsbDogc3RlZWxibHVlO1xcbn1cXG5cIiwgXCJcIl0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCJ7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbX2ldOyAvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG4gICAgICAvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuICAgICAgLy8gd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuICAgICAgLy8gSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXG4gICAgICBpZiAoaXRlbVswXSA9PSBudWxsIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGlmIChtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIihcIi5jb25jYXQoaXRlbVsyXSwgXCIpIGFuZCAoXCIpLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIilcIik7XG4gICAgICAgIH1cblxuICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCkuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGVzID0gW107XG4gIHZhciBuZXdTdHlsZXMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNzcyA9IGl0ZW1bMV07XG4gICAgdmFyIG1lZGlhID0gaXRlbVsyXTtcbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXTtcbiAgICB2YXIgcGFydCA9IHtcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9O1xuXG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIHBhcnRzOiBbcGFydF1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG4gICAgdmFyIGogPSAwO1xuXG4gICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICBkb21TdHlsZS5yZWZzKys7XG5cbiAgICAgIGZvciAoOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW107XG5cbiAgICAgIGZvciAoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7XG4gICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICByZWZzOiAxLFxuICAgICAgICBwYXJ0czogcGFydHNcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgb3B0aW9ucy5hdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMob3B0aW9ucy5hdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBvcHRpb25zLmF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5hdHRyaWJ1dGVzID0gdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ29iamVjdCcgPyBvcHRpb25zLmF0dHJpYnV0ZXMgOiB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICB2YXIgbWF5UmVtb3ZlID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGl0ZW0gPSBzdHlsZXNbaV07XG4gICAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuICAgICAgaWYgKGRvbVN0eWxlKSB7XG4gICAgICAgIGRvbVN0eWxlLnJlZnMtLTtcbiAgICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICB2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgICAgYWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbWF5UmVtb3ZlLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9kb21TdHlsZSA9IG1heVJlbW92ZVtfaV07XG5cbiAgICAgIGlmIChfZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9kb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIF9kb21TdHlsZS5wYXJ0c1tqXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW19kb21TdHlsZS5pZF07XG4gICAgICB9XG4gICAgfVxuICB9O1xufTsiLCJpbXBvcnQgKiBhcyBkMyBmcm9tIFwiZDNcIjtcbmltcG9ydCB7IE1hcGEgfSBmcm9tIFwiLi9tYXBhXCI7XG5cbmNvbnN0IGhlYXRtYXBfZGF0YSA9IHJlcXVpcmUoXCIuLi9kYXRhL2hlYXRtYXBfZGF0YS5jc3ZcIik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwYUNhbG9yT3BjaW9uZXMge1xuICBwYWRyZVNlbGVjdG9yOiBzdHJpbmc7IC8vZWxlbWVudG8gY29udGVuZWRvciBkZWwgbWFwYVxuICBsYWJlbHNjb2w6IHN0cmluZ1tdO1xuICBsYWJlbHNyb3c6IHN0cmluZ1tdO1xuICBzdGFydF9jb2xvcjogc3RyaW5nO1xuICBlbmRfY29sb3I6IHN0cmluZztcbiAgbWluVmFsdWU6IG51bWJlcjtcbiAgbWF4VmFsdWU6IG51bWJlcjtcbiAgY2FsbGJhY2tfTWFwYTogKHNlcnZpY2lvOiBzdHJpbmcsIGRhdG9zOiBudW1iZXJbXSwgbGFiZWw6IHN0cmluZ1tdKSA9PiB2b2lkO1xuICBjYWxsYmFja19CYXJyaW86IChiYXJyaW86IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1hcGFDYWxvcihvcHRpb25zOiBNYXBhQ2Fsb3JPcGNpb25lcykge1xuICB2YXIgbWFyZ2luID0geyB0b3A6IDUsIHJpZ2h0OiA1LCBib3R0b206IDEwMCwgbGVmdDogMTIwIH0sXG4gICAgd2lkdGggPSAzNTAsXG4gICAgaGVpZ2h0ID0gMzUwLFxuICAgIGNvbnRhaW5lciA9IG9wdGlvbnMucGFkcmVTZWxlY3RvcixcbiAgICBsYWJlbHNjb2xEYXRhID0gb3B0aW9ucy5sYWJlbHNjb2wsXG4gICAgbGFiZWxzcm93RGF0YSA9IG9wdGlvbnMubGFiZWxzcm93LFxuICAgIHN0YXJ0Q29sb3IgPSBvcHRpb25zLnN0YXJ0X2NvbG9yLFxuICAgIGVuZENvbG9yID0gb3B0aW9ucy5lbmRfY29sb3IsXG4gICAgbWluVmFsdWUgPSBvcHRpb25zLm1pblZhbHVlLFxuICAgIG1heFZhbHVlID0gb3B0aW9ucy5tYXhWYWx1ZTtcblxuICB2YXIgd2lkdGhMZWdlbmQgPSAxMzA7XG5cblxuICB2YXIgc3ZnID0gZDNcbiAgICAuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAuYXBwZW5kKFwic3ZnXCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCBcIjEwMCVcIilcbiAgICAuYXR0cihcImhlaWdodFwiLCBcIjEwMCVcIilcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIixcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgdmFyIGJhY2tncm91bmQgPSBzdmdcbiAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgIC5zdHlsZShcInN0cm9rZVwiLCBcImJsYWNrXCIpXG4gICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMnB4XCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpO1xuXG4gIC8vIGNvbnNvbGUubG9nKGQzLnJhbmdlKG51bWNvbHMpKTtcblxuICB2YXIgeCA9IGQzLnNjYWxlQmFuZDxudW1iZXI+KClcbiAgICAuZG9tYWluKGQzLnJhbmdlKGxhYmVsc2NvbERhdGEubGVuZ3RoKSlcbiAgICAucmFuZ2UoWzAsIHdpZHRoXSk7XG5cbiAgdmFyIHkgPSBkMy5zY2FsZUJhbmQ8bnVtYmVyPigpXG4gICAgLmRvbWFpbihkMy5yYW5nZShsYWJlbHNyb3dEYXRhLmxlbmd0aCkpXG4gICAgLnJhbmdlKFswLCBoZWlnaHRdKTtcbiAgXG4gIHZhciBsYWJlbHMgPSBzdmcuYXBwZW5kKFwiZ1wiKS5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbHNcIik7XG5cbiAgdmFyIGNvbHVtbkxhYmVscyA9IGxhYmVsc1xuICAgIC5zZWxlY3RBbGwoXCIuY29sdW1uLWxhYmVsXCIpXG4gICAgLmRhdGEobGFiZWxzY29sRGF0YSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcImNvbHVtbi1sYWJlbFwiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgoaSkgKyBcIixcIiArIGhlaWdodCArIFwiKVwiO1xuICAgIH0pO1xuXG4gIGNvbHVtbkxhYmVsc1xuICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgLnN0eWxlKFwic3Ryb2tlXCIsIFwiYmxhY2tcIilcbiAgICAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgXCIxcHhcIilcbiAgICAuYXR0cihcIngxXCIsIHguYmFuZHdpZHRoKCkgLyAyKVxuICAgIC5hdHRyKFwieDJcIiwgeC5iYW5kd2lkdGgoKSAvIDIpXG4gICAgLmF0dHIoXCJ5MVwiLCAwKVxuICAgIC5hdHRyKFwieTJcIiwgNSk7XG5cbiAgbGV0IHRleHRvQ29sdW1uYXMgPSBjb2x1bW5MYWJlbHNcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgIC5hdHRyKFwieFwiLCAwKVxuICAgIC5hdHRyKFwieVwiLCB5LmJhbmR3aWR0aCgpIC8gMilcbiAgICAuYXR0cihcImR5XCIsIFwiLjgyZW1cIilcbiAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTYwKVwiKVxuICAgIC5hdHRyKFwiaWRcIiwgZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gbGFiZWxzY29sRGF0YVtpXS5yZXBsYWNlKC9cXHMvZywnLScpOyB9KVxuICAgIC50ZXh0KGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIHJldHVybiBkO1xuICAgIH0pXG4gICAgdmFyIHJvd0xhYmVscyA9IGxhYmVsc1xuICAgICAgLnNlbGVjdEFsbChcIi5yb3ctbGFiZWxcIilcbiAgICAgIC5kYXRhKGxhYmVsc3Jvd0RhdGEpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJyb3ctbGFiZWxcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgMCArIFwiLFwiICsgeShpKSArIFwiKVwiO1xuICAgICAgfSk7XG5cbiAgICByb3dMYWJlbHNcbiAgICAgIC5hcHBlbmQoXCJsaW5lXCIpXG4gICAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAgICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMXB4XCIpXG4gICAgICAuYXR0cihcIngxXCIsIDApXG4gICAgICAuYXR0cihcIngyXCIsIC01KVxuICAgICAgLmF0dHIoXCJ5MVwiLCB5LmJhbmR3aWR0aCgpIC8gMilcbiAgICAgIC5hdHRyKFwieTJcIiwgeS5iYW5kd2lkdGgoKSAvIDIpO1xuXG4gIGxldCByb3dUZXh0cyA9IHJvd0xhYmVsc1xuICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgIC5hdHRyKFwieFwiLCAtOClcbiAgICAgIC5hdHRyKFwieVwiLCB5LmJhbmR3aWR0aCgpIC8gMilcbiAgICAgIC5hdHRyKFwiZHlcIiwgXCIuMzJlbVwiKVxuICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkLCBpKSB7IHJldHVybiBsYWJlbHNyb3dEYXRhW2ldLnJlcGxhY2UoL1xccy9nLCctJyk7IH0pXG4gICAgICAudGV4dChmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgICAgfSlcbiAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMTZweFwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwiYmxhY2tcIilcblxuICAgICAgdmFyIGtleSA9IGQzXG4gICAgICAuc2VsZWN0KFwiI2xlZ2VuZFwiKVxuICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aExlZ2VuZClcbiAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKTtcblxuICAgIHZhciBsZWdlbmQgPSBrZXlcbiAgICAgIC5hcHBlbmQoXCJkZWZzXCIpXG4gICAgICAuYXBwZW5kKFwic3ZnOmxpbmVhckdyYWRpZW50XCIpXG4gICAgICAuYXR0cihcImlkXCIsIFwiZ3JhZGllbnRcIilcbiAgICAgIC5hdHRyKFwieDFcIiwgXCIxMDAlXCIpXG4gICAgICAuYXR0cihcInkxXCIsIFwiMCVcIilcbiAgICAgIC5hdHRyKFwieDJcIiwgXCIxMDAlXCIpXG4gICAgICAuYXR0cihcInkyXCIsIFwiMTAwJVwiKVxuICAgICAgLmF0dHIoXCJzcHJlYWRNZXRob2RcIiwgXCJwYWRcIik7XG5cbiAgICBsZWdlbmRcbiAgICAgIC5hcHBlbmQoXCJzdG9wXCIpXG4gICAgICAuYXR0cihcIm9mZnNldFwiLCBcIjAlXCIpXG4gICAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgZW5kQ29sb3IpXG4gICAgICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLCAxKTtcblxuICAgIGxlZ2VuZFxuICAgICAgLmFwcGVuZChcInN0b3BcIilcbiAgICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMTAwJVwiKVxuICAgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIHN0YXJ0Q29sb3IpXG4gICAgICAuYXR0cihcInN0b3Atb3BhY2l0eVwiLCAxKTtcblxuICAgIGtleVxuICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGhMZWdlbmQgLyAyIC0gMTApXG4gICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAuc3R5bGUoXCJmaWxsXCIsIFwidXJsKCNncmFkaWVudClcIilcbiAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gIGxldCBzZXJ2aWNpb1NlbGVjY2lvbmFkbyA9IG51bGw7XG4gIGxldCBpbmRpY2VDb2x1bW5hU2VsZWNjaW9uYWRhID0gbnVsbDtcblxuICBsZXQgYWN0dWFsaWRhckRhdG9zID0gZnVuY3Rpb24oZGF0YTogbnVtYmVyW11bXSkge1xuICAgIFxuICAgIHRleHRvQ29sdW1uYXNcbiAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBoYW5kbGVNb3VzZU92ZXJDTGFiZWwpXG4gICAgICAub24oXCJtb3VzZW91dFwiLCBoYW5kbGVNb3VzZU91dENMYWJlbCk7XG5cbiAgICByb3dUZXh0c1xuICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGhhbmRsZU1vdXNlT3ZlclJMYWJlbClcbiAgICAgIC5vbihcIm1vdXNlb3V0XCIsIGhhbmRsZU1vdXNlT3V0UkxhYmVsKTtcblxuICAgIGlmIChzZXJ2aWNpb1NlbGVjY2lvbmFkbykge1xuICAgICAgb3B0aW9ucy5jYWxsYmFja19NYXBhKHNlcnZpY2lvU2VsZWNjaW9uYWRvLGRhdGEubWFwKHggPT4geFtpbmRpY2VDb2x1bW5hU2VsZWNjaW9uYWRhXSksbGFiZWxzcm93RGF0YSk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZU92ZXJSTGFiZWwoZCwgaSl7XG4gICAgICAvL2FsZXJ0KGQpO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VPdXRSTGFiZWwoZCwgaSl7XG4gICAgICAvL2FsZXJ0KCdPdXQnK2QpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNlT3ZlckNMYWJlbChkLCBpKXtcbiAgICAgIC8vYWxlcnQoZCk7XG4gICAgICBcbiAgICAgIGNvbHVtbkxhYmVscy5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAuZGF0YShsYWJlbHNjb2xEYXRhKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwKVxuICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIxNnB4XCIpXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJibGFja1wiKTtcbiAgICAgIFxuICAgICAgdmFyIHNlbGVjdFRleHQgPSAnIyc7IFxuICAgICAgdmFyIHNlbGVjdFRleHQgPSBzZWxlY3RUZXh0LmNvbmNhdChsYWJlbHNjb2xEYXRhW2ldKS5yZXBsYWNlKC9cXHMvZywnLScpOyBcbiAgICAgIGNvbHVtbkxhYmVscy5zZWxlY3Qoc2VsZWN0VGV4dCkudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMClcbiAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMjFweFwiKVxuICAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiKDAsIDc4LCAyNTUpXCIpO1xuICAgICAgc2VydmljaW9TZWxlY2Npb25hZG8gPSBkO1xuICAgICAgaW5kaWNlQ29sdW1uYVNlbGVjY2lvbmFkYSA9IGk7XG4gICAgICBvcHRpb25zLmNhbGxiYWNrX01hcGEoZCxkYXRhLm1hcCh4ID0+IHhbaV0pLGxhYmVsc3Jvd0RhdGEpO1xuICAgIH1cbiAgXG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2VPdXRDTGFiZWwoZCwgaSl7XG4gICAgICAvL2FsZXJ0KCdPdXQnK2QpO1xuICAgIH1cblxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8ICFkYXRhLmxlbmd0aCB8fCAhQXJyYXkuaXNBcnJheShkYXRhWzBdKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSXQgc2hvdWxkIGJlIGEgMi1EIGFycmF5XCIpO1xuICAgIH1cbiAgXG4gICAgLyogXG4gICAgLy9Fc3RlIGVyYSBlbCBjYWxjdWxvIG9yaWdpbmFsIGRlIGxvcyBtYXhpbW9zIHkgbWluaW1vcyBkZWwgY29sb3IuIFxuICAgIC8vIFNlIHBhc28gcGFyYSBhZnVlcmEgcGFyYSBxdWUgbm8gY2FtYmllIGVsIG1heGltbyBjb24gZWwgZmlsdHJvLlxuICAgIHZhciBtYXhWYWx1ZSA9IGQzLm1heChkYXRhLCBmdW5jdGlvbihsYXllcikge1xuICAgICAgcmV0dXJuIGQzLm1heChsYXllciwgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBtaW5WYWx1ZSA9IGQzLm1pbihkYXRhLCBmdW5jdGlvbihsYXllcikge1xuICAgICAgcmV0dXJuIGQzLm1pbihsYXllciwgZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgKi9cbiAgLy9jb25zdCBtYXhWYWx1ZSA9IDEzNDtcbiAgLy9jb25zdCBtaW5WYWx1ZSA9ICAgMDtcblxuICB2YXIgY29sb3JNYXAgPSBkMy5zY2FsZUxpbmVhcjxzdHJpbmc+KClcbiAgICAuZG9tYWluKFttaW5WYWx1ZSwgbWF4VmFsdWVdKVxuICAgIC5yYW5nZShbc3RhcnRDb2xvciwgZW5kQ29sb3JdKTtcblxuICBcbiAgdmFyIHJvdyA9IHN2Z1xuICAgIC5zZWxlY3RBbGwoXCIucm93XCIpXG4gICAgLmRhdGEoZGF0YSlcblxuICByb3cuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJjbGFzc1wiLCBcInJvd1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsIGkpIHtcbiAgICAgIHJldHVybiBcInRyYW5zbGF0ZSgwLFwiICsgeShpKSArIFwiKVwiO1xuICAgIH0pXG4gICAgLm9uKFwibW91c2VvdmVyXCIsIGhhbmRsZU1vdXNlT3ZlclJvdylcbiAgICAub24oXCJtb3VzZW91dFwiLCBoYW5kbGVNb3VzZU91dFJvdyk7XG5cbiAgdmFyIGNlbGwgPSByb3dcbiAgICAuc2VsZWN0QWxsKFwiLmNlbGxcIilcbiAgICAuZGF0YShmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gZDtcbiAgICB9KVxuXG4gICBjZWxsLmVudGVyKClcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjZWxsXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeChpKSArIFwiLCAwKVwiO1xuICAgIH0pXG4gICAgLm9uKFwibW91c2VvdmVyXCIsIGhhbmRsZU1vdXNlT3ZlckNvbClcbiAgICAub24oXCJtb3VzZW91dFwiLCBoYW5kbGVNb3VzZU91dENvbCk7XG5cbiAgY2VsbFxuICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCB4LmJhbmR3aWR0aCgpKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHkuYmFuZHdpZHRoKCkpXG4gICAgLnN0eWxlKFwic3Ryb2tlLXdpZHRoXCIsIDApO1xuXG4gIGNlbGxcbiAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgIC5hdHRyKFwiZHlcIiwgXCIuMzJlbVwiKVxuICAgIC5hdHRyKFwieFwiLCB4LmJhbmR3aWR0aCgpIC8gMilcbiAgICAuYXR0cihcInlcIiwgeS5iYW5kd2lkdGgoKSAvIDIpXG4gICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgcmV0dXJuIGQgPj0gbWF4VmFsdWUgLyAyID8gXCJ3aGl0ZVwiIDogXCJibGFja1wiO1xuICAgIH0pXG4gICAgLnRleHQoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgcmV0dXJuIGQ7XG4gICAgfSk7XG5cbiAgcm93XG4gICAgLnNlbGVjdEFsbChcIi5jZWxsXCIpXG4gICAgLmRhdGEoZnVuY3Rpb24oZCwgaSkge1xuICAgICAgcmV0dXJuIGRhdGFbaV07XG4gICAgfSlcbiAgICAuc3R5bGUoXCJmaWxsXCIsIGNvbG9yTWFwKTtcblxuXG5cbiAgdmFyIHlTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAucmFuZ2UoW2hlaWdodCwgMF0pXG4gICAgLmRvbWFpbihbbWluVmFsdWUsIG1heFZhbHVlXSk7XG5cbiAgdmFyIHlBeGlzID0gZDMuYXhpc1JpZ2h0KHlTY2FsZSlcblxuICBrZXlcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ5IGF4aXNcIilcbiAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSg0MSxcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAuY2FsbCh5QXhpcyk7XG5cbiAgLy8gRXZlbnRvcyBwb3IgTW91c2UgcG9yIEZpbGFcbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VPdmVyUm93KGQsIGkpIHsgIFxuICAgIC8qXG4gICAgLy9jb25zb2xlLmxvZyhcIk1vdXNlIE92ZXJcIiwgZFtpXSwgbGFiZWxzcm93RGF0YVtpXSwgaSk7XG4gICAgLy8gQXJtbyB1biBzdHJpbmcgY29uIGVsIGlkIGRlIGNhZGEgY29tcG9uZW50ZSBkZSB0ZXh0b1xuICAgIHZhciBzZWxlY3RUZXh0ID0gJyMnOyBcbiAgICB2YXIgc2VsZWN0VGV4dCA9IHNlbGVjdFRleHQuY29uY2F0KGxhYmVsc3Jvd0RhdGFbaV0pLnJlcGxhY2UoL1xccy9nLCctJyk7IFxuICAgIC8vY29uc29sZS5sb2coc2VsZWN0VGV4dCk7XG4gICAgcm93TGFiZWxzLnNlbGVjdChzZWxlY3RUZXh0KS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwKVxuICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMjFweFwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKTtcbiAgICBvcHRpb25zLmNhbGxiYWNrX0JhcnJpbyhsYWJlbHNyb3dEYXRhW2ldLnJlcGxhY2UoL1xccy9nLCctJykpO1xuICAgIC8vY29uc29sZS5sb2coXCJNb3VzZSBPdmVyIEZpblwiKTtcbiAgICAqL1xuICAgIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNb3VzZU91dFJvdyhkLCBpKSB7ICBcbiAgICAvKlxuICAgIC8vY29uc29sZS5sb2coXCJNb3VzZSBPdXRcIiwgZFtpXSk7XG4gICAgcm93TGFiZWxzLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAuZGF0YShsYWJlbHNyb3dEYXRhKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwKVxuICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMTZweFwiKVxuICAgIC5hdHRyKFwiZmlsbFwiLCBcImJsYWNrXCIpO1xuICAgIG9wdGlvbnMuY2FsbGJhY2tfQmFycmlvKFwiXCIpO1xuICAgICovXG4gIH1cblxuICAvLyBFdmVudG9zIHBvciBNb3VzZSBwb3IgQ29sdW1uYVxuICBmdW5jdGlvbiBoYW5kbGVNb3VzZU92ZXJDb2woZCwgaSkgeyAgXG4gICAgLyp2YXIgc2VsZWN0VGV4dCA9ICcjJzsgXG4gICAgdmFyIHNlbGVjdFRleHQgPSBzZWxlY3RUZXh0LmNvbmNhdChsYWJlbHNjb2xEYXRhW2ldKS5yZXBsYWNlKC9cXHMvZywnLScpOyBcbiAgICBjb2x1bW5MYWJlbHMuc2VsZWN0KHNlbGVjdFRleHQpLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApXG4gICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIyMXB4XCIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIFwicmVkXCIpO1xuICAgIC8vb3B0aW9ucy5jYWxsYmFja19NYXBhKGxhYmVsc2NvbERhdGFbaV0pO1xuICAgICovXG4gICAgfVxuICBcbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VPdXRDb2woZCwgaSkgeyAgXG4gICAgLypjb2x1bW5MYWJlbHMuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgIC5kYXRhKGxhYmVsc2NvbERhdGEpLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApXG4gICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIxNnB4XCIpXG4gICAgLmF0dHIoXCJmaWxsXCIsIFwiYmxhY2tcIik7XG4gICAgKi9cbiAgfVxuXG4gIH1cblxuICBcblxuICByZXR1cm4gYWN0dWFsaWRhckRhdG9zO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMjQwNWVlNjhkMzlkOTc2OGI0ZjJhODM4ZGQ0MmQwNGMuY3N2XCI7IiwiaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnO1xuaW1wb3J0IHsganNvbiwgZ2VvQ2VudHJvaWQgfSBmcm9tICdkMyc7XG5cbmNvbnN0IFN0SGltYXJrID0gcmVxdWlyZSgnLi4vZGF0YS9TdEhpbWFyay5nZW9qc29uJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwYU9wY2lvbmVzIHtcbiAgICBwYWRyZVNlbGVjdG9yOiBzdHJpbmcgLy9lbGVtZW50byBjb250ZW5lZG9yIGRlbCBtYXBhXG59XG5cbmZ1bmN0aW9uIGNyZWFyTWFwYShqc29uOiBhbnksIHN2ZzogZDMuU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIHVua25vd24sIEhUTUxFbGVtZW50LCBhbnk+KSB7XG5cbiAgICAvLyBsYSBwcm95ZWNjaW9uIHNlIGNhbGN1bGEgYXPDrTogaHR0cHM6Ly93d3cuZDNpbmRlcHRoLmNvbS9nZW9ncmFwaGljLyNwcm9qZWN0aW9uLWZ1bmN0aW9uc1xuICAgIHZhciBwcm9qZWN0aW9uID0gZDMuZ2VvTWVyY2F0b3IoKVxuICAgICAgICAuZml0U2l6ZShbNjAwLCA0NTBdLCBqc29uKTtcbiBcbiAgICB2YXIgZ2VvR2VuZXJhdG9yID0gZDMuZ2VvUGF0aCgpXG4gICAgICAgIC5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuXG4gICAgY29uc3QgZmVhdHVyZXMgPSBzdmcuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgLmRhdGEoanNvbi5mZWF0dXJlcyk7XG4gICAgXG4gICAgZmVhdHVyZXMuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgICAgIC5hdHRyKCdkJywgZ2VvR2VuZXJhdG9yKVxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnd2hpdGUnKVxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdibGFjaycpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGZ1bmN0aW9uKGQsIGkpIHsgcmV0dXJuIGpzb24uZmVhdHVyZXNbaV0ucHJvcGVydGllcy5OYnJob29kLnJlcGxhY2UoL1xccy9nLCctJyk7IH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJlZFwiKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCAnd2hpdGUnKTtcbiAgICAgICAgICAgIH0pO1xuICAgIFxuICAgIC8vIEFncmVnYSBsb3Mgbm9tYnJlcyBkZSBjYWRhIGJhcnJpbyBhbCBtYXBhLlxuICAgIC8vIExvIHViaWNhIGVuIGVsIGNlbnRybyBkZXNwbGF6YWRvIGEgbGEgaXpxdWllcmRhIHNlZ8O6biBlbCBsYXJnbyBkZWwgc3RyaW5nLlxuICAgIHZhciBsYWJlbCA9IHN2Zy5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuZGF0YShqc29uLmZlYXR1cmVzKVxuICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwibGFiZWxcIilcbiAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQsaSkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyBbZ2VvR2VuZXJhdG9yLmNlbnRyb2lkKGpzb24uZmVhdHVyZXNbaV0pWzBdLShqc29uLmZlYXR1cmVzWzBdLnByb3BlcnRpZXMuTmJyaG9vZC5sZW5ndGgvMio2KSxnZW9HZW5lcmF0b3IuY2VudHJvaWQoanNvbi5mZWF0dXJlc1tpXSlbMV1dICsgXCIpXCI7IH0pXG4gICAgICAgICAgICAudGV4dChmdW5jdGlvbihkLGkpIHsgcmV0dXJuIGpzb24uZmVhdHVyZXNbaV0ucHJvcGVydGllcy5OYnJob29kO30gKTtcblxufVxuZXhwb3J0IGZ1bmN0aW9uIE1hcGEob3BjaW9uZXM6IE1hcGFPcGNpb25lcykge1xuICAgIGNvbnN0IGNvbnRlbmVkb3IgPSBkMy5zZWxlY3Qob3BjaW9uZXMucGFkcmVTZWxlY3Rvcik7XG5cbiAgICBjb25zdCBzdmcgPSBjb250ZW5lZG9yLmFwcGVuZChcInN2Z1wiKVxuICAgIC5hdHRyKFwid2lkdGhcIiwgJzEwMCUnKVxuICAgIC5hdHRyKFwiaGVpZ2h0XCIsICcxMDAlJyk7XG5cbiAgICBkMy5qc29uKFN0SGltYXJrKS50aGVuKChqc29uOiBhbnkpID0+ICB7XG4gICAgICAgIGNyZWFyTWFwYShqc29uLCBzdmcpO1xuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDb2xvckJhcnJpbyhiYXJyaW86IHN0cmluZyl7XG4gICAgLy9jb25zb2xlLmxvZyhcIlRlc3QgQ29sb3JCYXJyaW9cIiwgYmFycmlvKTtcbiAgICAvL3NhY28gdG9kb3MgbG9zIGNvbG9yZXNcbiAgICB2YXIgYmFycmlvc1RvZG9zID0gZDMuc2VsZWN0QWxsKCdwYXRoJykudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMClcbiAgICAuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKTtcblxuICAgIC8vcGludG8gZWwgYmFycmlvIHNlbGVjY2lvbmFkb1xuICAgIGlmKGJhcnJpbyAhPT0gXCJcIil7XG4gICAgICAgIHZhciBzZWxlY3RCYXJyaW8gPSAnIyc7IFxuICAgICAgICB2YXIgc2VsZWN0QmFycmlvID0gc2VsZWN0QmFycmlvLmNvbmNhdChiYXJyaW8pOyBcbiAgICAgICAgdmFyIHVuQmFycmlvID0gZDMuc2VsZWN0KHNlbGVjdEJhcnJpbykudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMClcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmVkXCIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIE1hcGFFZGl0KHNlcnZpY2lvOiBzdHJpbmcsIGRhdG9zOiBudW1iZXJbXSwgbGFiZWxzOiBzdHJpbmdbXSl7XG4gICAgY29uc29sZS5sb2coXCJUZXN0IE1hcGFFZGl0XCIsIHNlcnZpY2lvKTtcbiAgICBjb25zb2xlLmxvZyhkYXRvcyk7XG4gICAgY29uc29sZS5sb2cobGFiZWxzKTtcbiAgICB2YXIgbWF4VmFsdWUgPSBNYXRoLm1heC5hcHBseShudWxsLCBkYXRvcyk7XG4gICAgdmFyIG1pblZhbHVlID0gTWF0aC5taW4uYXBwbHkobnVsbCwgZGF0b3MpO1xuICAgIHZhciBpID0gMDtcbiAgICBsYWJlbHMuZm9yRWFjaChmdW5jdGlvbiAoYmFycmlvKSB7XG4gICAgICAgIGJhcnJpbyA9IGJhcnJpby5yZXBsYWNlKC9cXHMvZywnLScpO1xuICAgICAgICB2YXIgc2VsZWN0QmFycmlvID0gJyMnOyBcbiAgICAgICAgdmFyIHNlbGVjdEJhcnJpbyA9IHNlbGVjdEJhcnJpby5jb25jYXQoYmFycmlvKTsgXG4gICAgICAgIHZhciB1bkJhcnJpbyA9IGQzLnNlbGVjdChzZWxlY3RCYXJyaW8pLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcInJnYigwLCA3OCwgMjU1LFwiKyhkYXRvc1tpXS9tYXhWYWx1ZSkrXCIpXCIpO1xuICAgICAgICBpKys7XG4gICAgfSlcbn1cblxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZGVlMDNjZjA3ZTc0YmYwODI3MTliZTg1NmQ2ZmI0OTYuZ2VvanNvblwiOyIsImltcG9ydCAqIGFzIGQzIGZyb20gXCJkM1wiO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcbmltcG9ydCAqIGFzIGNyb3NzZmlsdGVyIGZyb20gXCJjcm9zc2ZpbHRlcjJcIjtcbmltcG9ydCB7IGNyZWFyU2VsZWN0b3IgfSBmcm9tIFwiLi9wcnVlYmFCYXJjaGFydFNlbGVjdG9yXCI7XG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdG9yVGllbXBvT3BjaW9uZXMge1xuICBwYWRyZVNlbGVjdG9yOiBzdHJpbmc7IC8vZWxlbWVudG8gY29udGVuZWRvciBkZWwgbWFwYVxufVxuXG5pbnRlcmZhY2UgRGF0byB7XG4gIHRpbWVzdGFtcDogRGF0ZTtcbiAgdG90YWw6IG51bWJlcjtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3RvclRpZW1wbyhvcGNpb25lczogU2VsZWN0b3JUaWVtcG9PcGNpb25lcywgZGF0b3M6IERhdG9bXSwgb25DYW1iaW9TZWxlY2Npb24/OiAodDE6IERhdGUsIHQyOiBEYXRlKSA9PiB2b2lkKSB7XG5cbiAgdmFyIGNvZWZmID0gMTAwMCAqIDYwICogMzA7IC8vYWN1bXVsYWRvIGNhZGEgMzAgbWludXRvc1xuICB2YXIgZGF0b3NBY3VtdWxhZG9zUG9yVGllbXBvID0gZDMubmVzdDxEYXRvLCB7dG90YWw6IE51bWJlcn0+KClcbiAgLmtleShkID0+IG5ldyBEYXRlKE1hdGgucm91bmQoZC50aW1lc3RhbXAuZ2V0VGltZSgpIC8gY29lZmYpICogY29lZmYpLnRvU3RyaW5nKCkpXG4gIC5yb2xsdXAoYSA9PiAoe1xuICAgICAgdG90YWw6IGQzLnN1bShhLCBkID0+ZC50b3RhbCApXG4gICAgfSkpXG4gIC5lbnRyaWVzKGRhdG9zKVxuICAubWFwKGQgPT4gT2JqZWN0LmFzc2lnbih7fSwgZCwge3RpbWVzdGFtcDogbmV3IERhdGUoZC5rZXkpfSkpO1xuXG4gIGNvbnN0IG1hcmdpbiA9IHt0b3A6IDEwLCByaWdodDogMTAsIGJvdHRvbTogMTAsIGxlZnQ6IDYwfTtcbiAgY29uc3Qgd2lkdGggPSAxNDAwIC0gKCBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodCk7XG4gIGNvbnN0IGhlaWdodCA9IDE0MCAtICggbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pO1xuXG4gIGNvbnN0IHN2ZyA9IGQzXG4gICAgLnNlbGVjdChvcGNpb25lcy5wYWRyZVNlbGVjdG9yKVxuICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAuYXR0cihcImhlaWdodFwiLCBcIjEwMCVcIilcbiAgICAuYXR0cihcIndpZHRoXCIsIFwiMTAwJVwiKTtcblxuICBjb25zdCB5U2NhbGUgPSBkM1xuICAgIC5zY2FsZUxpbmVhcigpXG4gICAgLnJhbmdlKFtoZWlnaHQsIDBdKVxuICAgIC5kb21haW4oWzAsIDUwXSk7XG5cbiAgY29uc3QgY2hhcnQgPSBzdmdcbiAgICAuYXBwZW5kKFwiZ1wiKVxuICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7MH0pYCk7XG5cbiAgY29uc3QgeFNjYWxlID0gZDNcbiAgICAuc2NhbGVUaW1lKClcbiAgICAuZG9tYWluKFtcbiAgICAgIG1vbWVudChcIjIwMjAtMDQtMDYgMDA6MDA6MDBcIikudG9EYXRlKCksXG4gICAgICBtb21lbnQoXCIyMDIwLTA0LTExIDAwOjAwOjAwXCIpLnRvRGF0ZSgpXG4gICAgXSlcbiAgICAucmFuZ2VSb3VuZChbMCwgd2lkdGhdKTtcblxuICBjaGFydFxuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgYHRyYW5zbGF0ZSgwLCAke2hlaWdodH0pYClcbiAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkpO1xuXG4gIGxldCBiYXJyYXMgPSBjaGFydFxuICAgIC5zZWxlY3RBbGwoKVxuICAgIC5kYXRhKGRhdG9zQWN1bXVsYWRvc1BvclRpZW1wbylcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgLmF0dHIoXCJ4XCIsIGRhdG8gPT4geFNjYWxlKGRhdG8udGltZXN0YW1wKSlcbiAgICAuYXR0cihcInlcIiwgZGF0byA9PiB5U2NhbGUoZGF0by52YWx1ZS50b3RhbCkpXG4gICAgLmF0dHIoXCJoZWlnaHRcIiwgcyA9PiBoZWlnaHQgLSB5U2NhbGUocy52YWx1ZS50b3RhbCkpXG4gICAgLmF0dHIoXCJ3aWR0aFwiLCA1KVxuICAgIC5zdHlsZShcImZpbGxcIiwgXCJzdGVlbGJsdWVcIilcbiAgICAuc3R5bGUoXCJzdHJva2VcIiwgXCJibGFja1wiKVxuICAgIC5zdHlsZShcInN0b2tlLXdpZHRoXCIsIDEpO1xuXG5cbiAgLy8gYnJ1c2ggcGFyYSBzZWxlY2Npb24gZGUgZGF0b3NcbiAgbGV0IGJydXNoUmVzaXplUGF0aCA9IGZ1bmN0aW9uKGQpIHtcbiAgICBsZXQgZSA9ICsoZC50eXBlID09IFwiZVwiKSxcbiAgICAgICAgeCA9IGUgPyAxIDogLTEsXG4gICAgICAgIHkgPSBoZWlnaHQgLyAyO1xuICAgIHJldHVybiBcIk1cIiArICguNSAqIHgpICsgXCIsXCIgKyB5ICsgXCJBNiw2IDAgMCBcIiArIGUgKyBcIiBcIiArICg2LjUgKiB4KSArIFwiLFwiICsgKHkgKyA2KSArIFwiVlwiICsgKDIgKiB5IC0gNikgKyBcIkE2LDYgMCAwIFwiICsgZSArIFwiIFwiICsgKC41ICogeCkgKyBcIixcIiArICgyICogeSkgKyBcIlpcIiArIFwiTVwiICsgKDIuNSAqIHgpICsgXCIsXCIgKyAoeSArIDgpICsgXCJWXCIgKyAoMiAqIHkgLSA4KSArIFwiTVwiICsgKDQuNSAqIHgpICsgXCIsXCIgKyAoeSArIDgpICsgXCJWXCIgKyAoMiAqIHkgLSA4KTtcbn1cblxuICBsZXQgYnJ1c2hIYW5kbGUgPSAoZywgc2VsZWN0aW9uKSA9PiBnXG4gICAgLnNlbGVjdEFsbChcIi5oYW5kbGUtLWN1c3RvbVwiKVxuICAgIC5kYXRhKFt7dHlwZTogXCJ3XCJ9LCB7dHlwZTogXCJlXCJ9XSlcbiAgICAuam9pbihcbiAgICAgIGVudGVyID0+IGVudGVyLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiaGFuZGxlLS1jdXN0b21cIilcbiAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCIjNjY2XCIpXG4gICAgICAgICAgLmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC44KVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwiIzAwMFwiKVxuICAgICAgICAgIC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIDEuNSlcbiAgICAgICAgICAuYXR0cihcImN1cnNvclwiLCBcImV3LXJlc2l6ZVwiKVxuICAgICAgICAgIC5hdHRyKFwiZFwiLCBicnVzaFJlc2l6ZVBhdGgpXG4gICAgICAgICAgKVxuICAgIC5hdHRyKFwiZGlzcGxheVwiLCBzZWxlY3Rpb24gPT09IG51bGwgPyBcIm5vbmVcIiA6IG51bGwpXG4gICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgc2VsZWN0aW9uID09PSBudWxsID8gbnVsbCA6IChkLCBpKSA9PiBgdHJhbnNsYXRlKCR7c2VsZWN0aW9uW2ldfSwkey1tYXJnaW4udG9wLW1hcmdpbi5ib3R0b219KWApXG5cbiAgZnVuY3Rpb24gYnJ1c2hlZCgpIHtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSBkMy5ldmVudC5zZWxlY3Rpb247XG4gICAgaWYgKHNlbGVjdGlvbiA9PT0gbnVsbCkge1xuICAgICAgYmFycmFzLnN0eWxlKFwic3Ryb2tlXCIsICdibGFjaycpO1xuICAgICAgb25DYW1iaW9TZWxlY2Npb24gJiYgb25DYW1iaW9TZWxlY2Npb24obnVsbCwgbnVsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHN4ID0gc2VsZWN0aW9uLm1hcCh4U2NhbGUuaW52ZXJ0KTtcbiAgICAgIC8vIGJhcnJhcy5zdHlsZShcInN0cm9rZVwiLCBkID0+IHN4WzBdIDw9IGQudGltZXN0YW1wICYmIGQudGltZXN0YW1wIDw9IHN4WzFdID8gJ3JlZCcgOiAnYmxhY2snKTtcbiAgICAgIG9uQ2FtYmlvU2VsZWNjaW9uICYmIG9uQ2FtYmlvU2VsZWNjaW9uKHN4WzBdLCBzeFsxXSk7XG4gICAgfVxuICAgIGQzLnNlbGVjdCh0aGlzKS5jYWxsKGJydXNoSGFuZGxlLCBzZWxlY3Rpb24pO1xuICB9XG5cbiAgY29uc3QgYnJ1c2ggPSBkM1xuICAgIC5icnVzaFgoKVxuICAgIC5leHRlbnQoW1ttYXJnaW4ubGVmdCwgbWFyZ2luLnJpZ2h0XSwgW3dpZHRoIC0gKG1hcmdpbi5sZWZ0K21hcmdpbi5yaWdodCksIGhlaWdodF1dKVxuICAgIC5vbihcInN0YXJ0IGJydXNoIGVuZFwiLCBicnVzaGVkKTtcblxuICBjaGFydFxuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgLmNhbGwoYnJ1c2gpXG4gICAgLmNhbGwoYnJ1c2gubW92ZSwgWzAuMywgMC41XS5tYXAoeFNjYWxlKSk7XG5cblxuXG5cblxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IDIsXG5cdFwiLi9hZi5qc1wiOiAyLFxuXHRcIi4vYXJcIjogMyxcblx0XCIuL2FyLWR6XCI6IDQsXG5cdFwiLi9hci1kei5qc1wiOiA0LFxuXHRcIi4vYXIta3dcIjogNSxcblx0XCIuL2FyLWt3LmpzXCI6IDUsXG5cdFwiLi9hci1seVwiOiA2LFxuXHRcIi4vYXItbHkuanNcIjogNixcblx0XCIuL2FyLW1hXCI6IDcsXG5cdFwiLi9hci1tYS5qc1wiOiA3LFxuXHRcIi4vYXItc2FcIjogOCxcblx0XCIuL2FyLXNhLmpzXCI6IDgsXG5cdFwiLi9hci10blwiOiA5LFxuXHRcIi4vYXItdG4uanNcIjogOSxcblx0XCIuL2FyLmpzXCI6IDMsXG5cdFwiLi9helwiOiAxMCxcblx0XCIuL2F6LmpzXCI6IDEwLFxuXHRcIi4vYmVcIjogMTEsXG5cdFwiLi9iZS5qc1wiOiAxMSxcblx0XCIuL2JnXCI6IDEyLFxuXHRcIi4vYmcuanNcIjogMTIsXG5cdFwiLi9ibVwiOiAxMyxcblx0XCIuL2JtLmpzXCI6IDEzLFxuXHRcIi4vYm5cIjogMTQsXG5cdFwiLi9ibi5qc1wiOiAxNCxcblx0XCIuL2JvXCI6IDE1LFxuXHRcIi4vYm8uanNcIjogMTUsXG5cdFwiLi9iclwiOiAxNixcblx0XCIuL2JyLmpzXCI6IDE2LFxuXHRcIi4vYnNcIjogMTcsXG5cdFwiLi9icy5qc1wiOiAxNyxcblx0XCIuL2NhXCI6IDE4LFxuXHRcIi4vY2EuanNcIjogMTgsXG5cdFwiLi9jc1wiOiAxOSxcblx0XCIuL2NzLmpzXCI6IDE5LFxuXHRcIi4vY3ZcIjogMjAsXG5cdFwiLi9jdi5qc1wiOiAyMCxcblx0XCIuL2N5XCI6IDIxLFxuXHRcIi4vY3kuanNcIjogMjEsXG5cdFwiLi9kYVwiOiAyMixcblx0XCIuL2RhLmpzXCI6IDIyLFxuXHRcIi4vZGVcIjogMjMsXG5cdFwiLi9kZS1hdFwiOiAyNCxcblx0XCIuL2RlLWF0LmpzXCI6IDI0LFxuXHRcIi4vZGUtY2hcIjogMjUsXG5cdFwiLi9kZS1jaC5qc1wiOiAyNSxcblx0XCIuL2RlLmpzXCI6IDIzLFxuXHRcIi4vZHZcIjogMjYsXG5cdFwiLi9kdi5qc1wiOiAyNixcblx0XCIuL2VsXCI6IDI3LFxuXHRcIi4vZWwuanNcIjogMjcsXG5cdFwiLi9lbi1TR1wiOiAyOCxcblx0XCIuL2VuLVNHLmpzXCI6IDI4LFxuXHRcIi4vZW4tYXVcIjogMjksXG5cdFwiLi9lbi1hdS5qc1wiOiAyOSxcblx0XCIuL2VuLWNhXCI6IDMwLFxuXHRcIi4vZW4tY2EuanNcIjogMzAsXG5cdFwiLi9lbi1nYlwiOiAzMSxcblx0XCIuL2VuLWdiLmpzXCI6IDMxLFxuXHRcIi4vZW4taWVcIjogMzIsXG5cdFwiLi9lbi1pZS5qc1wiOiAzMixcblx0XCIuL2VuLWlsXCI6IDMzLFxuXHRcIi4vZW4taWwuanNcIjogMzMsXG5cdFwiLi9lbi1uelwiOiAzNCxcblx0XCIuL2VuLW56LmpzXCI6IDM0LFxuXHRcIi4vZW9cIjogMzUsXG5cdFwiLi9lby5qc1wiOiAzNSxcblx0XCIuL2VzXCI6IDM2LFxuXHRcIi4vZXMtZG9cIjogMzcsXG5cdFwiLi9lcy1kby5qc1wiOiAzNyxcblx0XCIuL2VzLXVzXCI6IDM4LFxuXHRcIi4vZXMtdXMuanNcIjogMzgsXG5cdFwiLi9lcy5qc1wiOiAzNixcblx0XCIuL2V0XCI6IDM5LFxuXHRcIi4vZXQuanNcIjogMzksXG5cdFwiLi9ldVwiOiA0MCxcblx0XCIuL2V1LmpzXCI6IDQwLFxuXHRcIi4vZmFcIjogNDEsXG5cdFwiLi9mYS5qc1wiOiA0MSxcblx0XCIuL2ZpXCI6IDQyLFxuXHRcIi4vZmkuanNcIjogNDIsXG5cdFwiLi9mb1wiOiA0Myxcblx0XCIuL2ZvLmpzXCI6IDQzLFxuXHRcIi4vZnJcIjogNDQsXG5cdFwiLi9mci1jYVwiOiA0NSxcblx0XCIuL2ZyLWNhLmpzXCI6IDQ1LFxuXHRcIi4vZnItY2hcIjogNDYsXG5cdFwiLi9mci1jaC5qc1wiOiA0Nixcblx0XCIuL2ZyLmpzXCI6IDQ0LFxuXHRcIi4vZnlcIjogNDcsXG5cdFwiLi9meS5qc1wiOiA0Nyxcblx0XCIuL2dhXCI6IDQ4LFxuXHRcIi4vZ2EuanNcIjogNDgsXG5cdFwiLi9nZFwiOiA0OSxcblx0XCIuL2dkLmpzXCI6IDQ5LFxuXHRcIi4vZ2xcIjogNTAsXG5cdFwiLi9nbC5qc1wiOiA1MCxcblx0XCIuL2dvbS1sYXRuXCI6IDUxLFxuXHRcIi4vZ29tLWxhdG4uanNcIjogNTEsXG5cdFwiLi9ndVwiOiA1Mixcblx0XCIuL2d1LmpzXCI6IDUyLFxuXHRcIi4vaGVcIjogNTMsXG5cdFwiLi9oZS5qc1wiOiA1Myxcblx0XCIuL2hpXCI6IDU0LFxuXHRcIi4vaGkuanNcIjogNTQsXG5cdFwiLi9oclwiOiA1NSxcblx0XCIuL2hyLmpzXCI6IDU1LFxuXHRcIi4vaHVcIjogNTYsXG5cdFwiLi9odS5qc1wiOiA1Nixcblx0XCIuL2h5LWFtXCI6IDU3LFxuXHRcIi4vaHktYW0uanNcIjogNTcsXG5cdFwiLi9pZFwiOiA1OCxcblx0XCIuL2lkLmpzXCI6IDU4LFxuXHRcIi4vaXNcIjogNTksXG5cdFwiLi9pcy5qc1wiOiA1OSxcblx0XCIuL2l0XCI6IDYwLFxuXHRcIi4vaXQtY2hcIjogNjEsXG5cdFwiLi9pdC1jaC5qc1wiOiA2MSxcblx0XCIuL2l0LmpzXCI6IDYwLFxuXHRcIi4vamFcIjogNjIsXG5cdFwiLi9qYS5qc1wiOiA2Mixcblx0XCIuL2p2XCI6IDYzLFxuXHRcIi4vanYuanNcIjogNjMsXG5cdFwiLi9rYVwiOiA2NCxcblx0XCIuL2thLmpzXCI6IDY0LFxuXHRcIi4va2tcIjogNjUsXG5cdFwiLi9ray5qc1wiOiA2NSxcblx0XCIuL2ttXCI6IDY2LFxuXHRcIi4va20uanNcIjogNjYsXG5cdFwiLi9rblwiOiA2Nyxcblx0XCIuL2tuLmpzXCI6IDY3LFxuXHRcIi4va29cIjogNjgsXG5cdFwiLi9rby5qc1wiOiA2OCxcblx0XCIuL2t1XCI6IDY5LFxuXHRcIi4va3UuanNcIjogNjksXG5cdFwiLi9reVwiOiA3MCxcblx0XCIuL2t5LmpzXCI6IDcwLFxuXHRcIi4vbGJcIjogNzEsXG5cdFwiLi9sYi5qc1wiOiA3MSxcblx0XCIuL2xvXCI6IDcyLFxuXHRcIi4vbG8uanNcIjogNzIsXG5cdFwiLi9sdFwiOiA3Myxcblx0XCIuL2x0LmpzXCI6IDczLFxuXHRcIi4vbHZcIjogNzQsXG5cdFwiLi9sdi5qc1wiOiA3NCxcblx0XCIuL21lXCI6IDc1LFxuXHRcIi4vbWUuanNcIjogNzUsXG5cdFwiLi9taVwiOiA3Nixcblx0XCIuL21pLmpzXCI6IDc2LFxuXHRcIi4vbWtcIjogNzcsXG5cdFwiLi9tay5qc1wiOiA3Nyxcblx0XCIuL21sXCI6IDc4LFxuXHRcIi4vbWwuanNcIjogNzgsXG5cdFwiLi9tblwiOiA3OSxcblx0XCIuL21uLmpzXCI6IDc5LFxuXHRcIi4vbXJcIjogODAsXG5cdFwiLi9tci5qc1wiOiA4MCxcblx0XCIuL21zXCI6IDgxLFxuXHRcIi4vbXMtbXlcIjogODIsXG5cdFwiLi9tcy1teS5qc1wiOiA4Mixcblx0XCIuL21zLmpzXCI6IDgxLFxuXHRcIi4vbXRcIjogODMsXG5cdFwiLi9tdC5qc1wiOiA4Myxcblx0XCIuL215XCI6IDg0LFxuXHRcIi4vbXkuanNcIjogODQsXG5cdFwiLi9uYlwiOiA4NSxcblx0XCIuL25iLmpzXCI6IDg1LFxuXHRcIi4vbmVcIjogODYsXG5cdFwiLi9uZS5qc1wiOiA4Nixcblx0XCIuL25sXCI6IDg3LFxuXHRcIi4vbmwtYmVcIjogODgsXG5cdFwiLi9ubC1iZS5qc1wiOiA4OCxcblx0XCIuL25sLmpzXCI6IDg3LFxuXHRcIi4vbm5cIjogODksXG5cdFwiLi9ubi5qc1wiOiA4OSxcblx0XCIuL3BhLWluXCI6IDkwLFxuXHRcIi4vcGEtaW4uanNcIjogOTAsXG5cdFwiLi9wbFwiOiA5MSxcblx0XCIuL3BsLmpzXCI6IDkxLFxuXHRcIi4vcHRcIjogOTIsXG5cdFwiLi9wdC1iclwiOiA5Myxcblx0XCIuL3B0LWJyLmpzXCI6IDkzLFxuXHRcIi4vcHQuanNcIjogOTIsXG5cdFwiLi9yb1wiOiA5NCxcblx0XCIuL3JvLmpzXCI6IDk0LFxuXHRcIi4vcnVcIjogOTUsXG5cdFwiLi9ydS5qc1wiOiA5NSxcblx0XCIuL3NkXCI6IDk2LFxuXHRcIi4vc2QuanNcIjogOTYsXG5cdFwiLi9zZVwiOiA5Nyxcblx0XCIuL3NlLmpzXCI6IDk3LFxuXHRcIi4vc2lcIjogOTgsXG5cdFwiLi9zaS5qc1wiOiA5OCxcblx0XCIuL3NrXCI6IDk5LFxuXHRcIi4vc2suanNcIjogOTksXG5cdFwiLi9zbFwiOiAxMDAsXG5cdFwiLi9zbC5qc1wiOiAxMDAsXG5cdFwiLi9zcVwiOiAxMDEsXG5cdFwiLi9zcS5qc1wiOiAxMDEsXG5cdFwiLi9zclwiOiAxMDIsXG5cdFwiLi9zci1jeXJsXCI6IDEwMyxcblx0XCIuL3NyLWN5cmwuanNcIjogMTAzLFxuXHRcIi4vc3IuanNcIjogMTAyLFxuXHRcIi4vc3NcIjogMTA0LFxuXHRcIi4vc3MuanNcIjogMTA0LFxuXHRcIi4vc3ZcIjogMTA1LFxuXHRcIi4vc3YuanNcIjogMTA1LFxuXHRcIi4vc3dcIjogMTA2LFxuXHRcIi4vc3cuanNcIjogMTA2LFxuXHRcIi4vdGFcIjogMTA3LFxuXHRcIi4vdGEuanNcIjogMTA3LFxuXHRcIi4vdGVcIjogMTA4LFxuXHRcIi4vdGUuanNcIjogMTA4LFxuXHRcIi4vdGV0XCI6IDEwOSxcblx0XCIuL3RldC5qc1wiOiAxMDksXG5cdFwiLi90Z1wiOiAxMTAsXG5cdFwiLi90Zy5qc1wiOiAxMTAsXG5cdFwiLi90aFwiOiAxMTEsXG5cdFwiLi90aC5qc1wiOiAxMTEsXG5cdFwiLi90bC1waFwiOiAxMTIsXG5cdFwiLi90bC1waC5qc1wiOiAxMTIsXG5cdFwiLi90bGhcIjogMTEzLFxuXHRcIi4vdGxoLmpzXCI6IDExMyxcblx0XCIuL3RyXCI6IDExNCxcblx0XCIuL3RyLmpzXCI6IDExNCxcblx0XCIuL3R6bFwiOiAxMTUsXG5cdFwiLi90emwuanNcIjogMTE1LFxuXHRcIi4vdHptXCI6IDExNixcblx0XCIuL3R6bS1sYXRuXCI6IDExNyxcblx0XCIuL3R6bS1sYXRuLmpzXCI6IDExNyxcblx0XCIuL3R6bS5qc1wiOiAxMTYsXG5cdFwiLi91Zy1jblwiOiAxMTgsXG5cdFwiLi91Zy1jbi5qc1wiOiAxMTgsXG5cdFwiLi91a1wiOiAxMTksXG5cdFwiLi91ay5qc1wiOiAxMTksXG5cdFwiLi91clwiOiAxMjAsXG5cdFwiLi91ci5qc1wiOiAxMjAsXG5cdFwiLi91elwiOiAxMjEsXG5cdFwiLi91ei1sYXRuXCI6IDEyMixcblx0XCIuL3V6LWxhdG4uanNcIjogMTIyLFxuXHRcIi4vdXouanNcIjogMTIxLFxuXHRcIi4vdmlcIjogMTIzLFxuXHRcIi4vdmkuanNcIjogMTIzLFxuXHRcIi4veC1wc2V1ZG9cIjogMTI0LFxuXHRcIi4veC1wc2V1ZG8uanNcIjogMTI0LFxuXHRcIi4veW9cIjogMTI1LFxuXHRcIi4veW8uanNcIjogMTI1LFxuXHRcIi4vemgtY25cIjogMTI2LFxuXHRcIi4vemgtY24uanNcIjogMTI2LFxuXHRcIi4vemgtaGtcIjogMTI3LFxuXHRcIi4vemgtaGsuanNcIjogMTI3LFxuXHRcIi4vemgtdHdcIjogMTI4LFxuXHRcIi4vemgtdHcuanNcIjogMTI4XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTQwOyIsImltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuLy8gQ29udmVyc2nDs24gZGUgdGlwb3MgZGUgZGF0b3MgYSBudW3DqXJpY28sIGN1YW5kbyBjb3JyZXNwb25kZS5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmFsb3JhY2lvblNlcnZpY2lvIHtcclxuICAgIHRvdGFsOiBudW1iZXI7XHJcbiAgICB3YXRlcjogbnVtYmVyO1xyXG4gICAgcm9hZHdheXM6IG51bWJlcjtcclxuICAgIGdhczogbnVtYmVyO1xyXG4gICAgcG93ZXI6IG51bWJlcjtcclxuICAgIGhlYWx0aGNhcmU6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEYXRvIGV4dGVuZHMgVmFsb3JhY2lvblNlcnZpY2lvIHsgXHJcbiAgICB0aW1lc3RhbXA6IERhdGU7XHJcbiAgICBsb2NhdGlvbjogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByZXByb2Nlc2FyKHQpOiBEYXRvIHtcclxuICAgIHQuZGlhID0gK3QuZGlhO1xyXG4gICAgdC5ob3JhID0gK3QuaG9yYTtcclxuICAgIHQubWludXRvID0gK3QubWludXRvO1xyXG4gICAgdC50aW1lc3RhbXAgPSBuZXcgRGF0ZSgyMDIwLCAzLCB0LmRpYSwgdC5ob3JhLCB0Lm1pbnV0bylcclxuXHJcbiAgICB0LnRvdGFsID0gK3QudG90YWw7XHJcbiAgICB0LmdhcyA9ICt0LmdhcztcclxuICAgIHQud2F0ZXIgPSArdC53YXRlcjtcclxuICAgIHQuaGVhbHRoY2FyZSA9ICt0LmhlYWx0aGNhcmU7XHJcbiAgICB0LnBvd2VyID0gK3QucG93ZXI7XHJcbiAgICB0LnJvYWR3YXlzID0gK3Qucm9hZHdheXM7XHJcblxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcblxyXG4vLyBNw6l0b2RvIHF1ZSByZWFsaXphIGxhIHN1bWEgZGUgbG9zIGRhdG9zIG51bcOpcmljb3MsIGFncnVwYWRvcyBwb3IgYmFycmlvcy5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvdGFsaXphclBvckJhcnJpbyhkYXRvczogRGF0b1tdKVxyXG57XHJcbiAgICBjb25zdCBzdW1hc1BvckdydXBvcyA9IGQzLm5lc3Q8RGF0bywgVmFsb3JhY2lvblNlcnZpY2lvPigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmtleShmdW5jdGlvbihkKXsgcmV0dXJuIGQubG9jYXRpb247IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLnJvbGx1cChmdW5jdGlvbih0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWw6IGQzLnN1bSh0LCBmdW5jdGlvbihkKXtyZXR1cm4gZC50b3RhbH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F0ZXI6IGQzLnN1bSh0LCBmdW5jdGlvbihkKXtyZXR1cm4gZC53YXRlcn0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9hZHdheXM6IGQzLnN1bSh0LCBmdW5jdGlvbihkKXtyZXR1cm4gZC5yb2Fkd2F5c30pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzOiBkMy5zdW0odCwgZnVuY3Rpb24oZCl7cmV0dXJuIGQuZ2FzfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3dlcjogZDMuc3VtKHQsIGZ1bmN0aW9uKGQpe3JldHVybiBkLnBvd2VyfSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFsdGhjYXJlOiBkMy5zdW0odCwgZnVuY3Rpb24oZCl7cmV0dXJuIGQuaGVhbHRoY2FyZX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgLmVudHJpZXMoZGF0b3MpO1xyXG4gICAgcmV0dXJuIHN1bWFzUG9yR3J1cG9zO1xyXG59XHJcblxyXG5cclxuLy8gTcOpdG9kbyBwYXJhIGNvbnZlcnRpciB1bmEgZXN0cnVjdHVyYSBkZSBvYmpldG9zIEpTT04gZW4gbWF0cml6LlxyXG4vLyBEZWJlIGhhYmVyIHVuYSBmb3JtYSBtw6FzIGVsZWdhbnRlIGRlIGhhY2VybG8uXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0aXJBTWF0cml6KGRhdG9zKToge2JhcnJpb3M6IHN0cmluZ1tdLCBzZXJ2aWNpb3M6IHN0cmluZ1tdLCBkYXRvczogbnVtYmVyW11bXX1cclxue1xyXG4gICAgY29uc3QgZGF0b3NQb3JCYXJyaW9NYXRyaXo6IG51bWJlcltdW10gPSBbXTtcclxuICAgIGNvbnN0IGJhcnJpb3M6IHN0cmluZ1tdID0gW107XHJcbiAgICBjb25zdCBzZXJ2aWNpb3M6IHN0cmluZ1tdID0gWyd3YXRlcicsICdyb2Fkd2F5cycsICdnYXMnLCAncG93ZXInLCAnaGVhbHRoY2FyZSddXHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0b3MubGVuZ3RoOyBpKyspXHJcbiAgICB7XHJcbiAgICAgICAgYmFycmlvcy5wdXNoKGRhdG9zW2ldLmtleSk7XHJcbiAgICAgICAgZGF0b3NQb3JCYXJyaW9NYXRyaXpbaV0gPSBbXTtcclxuICAgICAgICBkYXRvc1BvckJhcnJpb01hdHJpeltpXVswXSA9IGRhdG9zW2ldLnZhbHVlLndhdGVyO1xyXG4gICAgICAgIGRhdG9zUG9yQmFycmlvTWF0cml6W2ldWzFdID0gZGF0b3NbaV0udmFsdWUucm9hZHdheXM7XHJcbiAgICAgICAgZGF0b3NQb3JCYXJyaW9NYXRyaXpbaV1bMl0gPSBkYXRvc1tpXS52YWx1ZS5nYXM7XHJcbiAgICAgICAgZGF0b3NQb3JCYXJyaW9NYXRyaXpbaV1bM10gPSBkYXRvc1tpXS52YWx1ZS5wb3dlcjtcclxuICAgICAgICBkYXRvc1BvckJhcnJpb01hdHJpeltpXVs0XSA9IGRhdG9zW2ldLnZhbHVlLmhlYWx0aGNhcmU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGJhcnJpb3MsXHJcbiAgICAgICAgc2VydmljaW9zLFxyXG4gICAgICAgIGRhdG9zOiBkYXRvc1BvckJhcnJpb01hdHJpelxyXG4gICAgfTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhck1heE1pbihkYXRvczogbnVtYmVyW11bXSl7XHJcbiAgICB2YXIgbWF4VmFsdWUgPSBkMy5tYXgoZGF0b3MsIGZ1bmN0aW9uKGxheWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGQzLm1heChsYXllciwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB2YXIgbWluVmFsdWUgPSBkMy5taW4oZGF0b3MsIGZ1bmN0aW9uKGxheWVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGQzLm1pbihsYXllciwgZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtYXhWYWx1ZSxcclxuICAgICAgICBtaW5WYWx1ZVxyXG4gICAgfTtcclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiNDQ0NTIyYzNmMDVmZmM2ZGY3MjE4MjI4MjNjNjg0MC5jc3ZcIjsiXSwic291cmNlUm9vdCI6IiJ9