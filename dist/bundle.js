!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=129)}([function(t,e,n){(function(t){t.exports=function(){"use strict";var e,r;function a(){return e.apply(null,arguments)}function i(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function s(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function o(t){return void 0===t}function u(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function d(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function c(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function l(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function f(t,e){for(var n in e)l(e,n)&&(t[n]=e[n]);return l(e,"toString")&&(t.toString=e.toString),l(e,"valueOf")&&(t.valueOf=e.valueOf),t}function _(t,e,n,r){return Pe(t,e,n,r,!0).utc()}function h(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}function m(t){if(null==t._isValid){var e=h(t),n=r.call(e.parsedDateParts,(function(t){return null!=t})),a=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n);if(t._strict&&(a=a&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return a;t._isValid=a}return t._isValid}function p(t){var e=_(NaN);return null!=t?f(h(e),t):h(e).userInvalidated=!0,e}r=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,r=0;r<n;r++)if(r in e&&t.call(this,e[r],r,e))return!0;return!1};var y=a.momentProperties=[];function M(t,e){var n,r,a;if(o(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),o(e._i)||(t._i=e._i),o(e._f)||(t._f=e._f),o(e._l)||(t._l=e._l),o(e._strict)||(t._strict=e._strict),o(e._tzm)||(t._tzm=e._tzm),o(e._isUTC)||(t._isUTC=e._isUTC),o(e._offset)||(t._offset=e._offset),o(e._pf)||(t._pf=h(e)),o(e._locale)||(t._locale=e._locale),y.length>0)for(n=0;n<y.length;n++)o(a=e[r=y[n]])||(t[r]=a);return t}var g=!1;function L(t){M(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,a.updateOffset(this),g=!1)}function v(t){return t instanceof L||null!=t&&null!=t._isAMomentObject}function Y(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function b(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=Y(e)),n}function w(t,e,n){var r,a=Math.min(t.length,e.length),i=Math.abs(t.length-e.length),s=0;for(r=0;r<a;r++)(n&&t[r]!==e[r]||!n&&b(t[r])!==b(e[r]))&&s++;return s+i}function k(t){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function D(t,e){var n=!0;return f((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,t),n){for(var r,i=[],s=0;s<arguments.length;s++){if(r="","object"==typeof arguments[s]){for(var o in r+="\n["+s+"] ",arguments[0])r+=o+": "+arguments[0][o]+", ";r=r.slice(0,-2)}else r=arguments[s];i.push(r)}k(t+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return e.apply(this,arguments)}),e)}var T,x={};function S(t,e){null!=a.deprecationHandler&&a.deprecationHandler(t,e),x[t]||(k(e),x[t]=!0)}function H(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function j(t,e){var n,r=f({},t);for(n in e)l(e,n)&&(s(t[n])&&s(e[n])?(r[n]={},f(r[n],t[n]),f(r[n],e[n])):null!=e[n]?r[n]=e[n]:delete r[n]);for(n in t)l(t,n)&&!l(e,n)&&s(t[n])&&(r[n]=f({},r[n]));return r}function A(t){null!=t&&this.set(t)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,T=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)l(t,e)&&n.push(e);return n};var P={};function E(t,e){var n=t.toLowerCase();P[n]=P[n+"s"]=P[e]=t}function O(t){return"string"==typeof t?P[t]||P[t.toLowerCase()]:void 0}function N(t){var e,n,r={};for(n in t)l(t,n)&&(e=O(n))&&(r[e]=t[n]);return r}var W={};function z(t,e){W[t]=e}function F(t,e,n){var r=""+Math.abs(t),a=e-r.length;return(t>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var C=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,U={},I={};function J(t,e,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),t&&(I[t]=a),e&&(I[e[0]]=function(){return F(a.apply(this,arguments),e[1],e[2])}),n&&(I[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),t)})}function q(t,e){return t.isValid()?(e=G(e,t.localeData()),U[e]=U[e]||function(t){var e,n,r,a=t.match(C);for(e=0,n=a.length;e<n;e++)I[a[e]]?a[e]=I[a[e]]:a[e]=(r=a[e]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(e){var r,i="";for(r=0;r<n;r++)i+=H(a[r])?a[r].call(e,t):a[r];return i}}(e),U[e](t)):t.localeData().invalidDate()}function G(t,e){var n=5;function r(t){return e.longDateFormat(t)||t}for(R.lastIndex=0;n>=0&&R.test(t);)t=t.replace(R,r),R.lastIndex=0,n-=1;return t}var B=/\d/,V=/\d\d/,$=/\d{3}/,Z=/\d{4}/,K=/[+-]?\d{6}/,X=/\d\d?/,Q=/\d\d\d\d?/,tt=/\d\d\d\d\d\d?/,et=/\d{1,3}/,nt=/\d{1,4}/,rt=/[+-]?\d{1,6}/,at=/\d+/,it=/[+-]?\d+/,st=/Z|[+-]\d\d:?\d\d/gi,ot=/Z|[+-]\d\d(?::?\d\d)?/gi,ut=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,dt={};function ct(t,e,n){dt[t]=H(e)?e:function(t,r){return t&&n?n:e}}function lt(t,e){return l(dt,t)?dt[t](e._strict,e._locale):new RegExp(ft(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(t,e,n,r,a){return e||n||r||a}))))}function ft(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var _t={};function ht(t,e){var n,r=e;for("string"==typeof t&&(t=[t]),u(e)&&(r=function(t,n){n[e]=b(t)}),n=0;n<t.length;n++)_t[t[n]]=r}function mt(t,e){ht(t,(function(t,n,r,a){r._w=r._w||{},e(t,r._w,r,a)}))}function pt(t,e,n){null!=e&&l(_t,t)&&_t[t](e,n._a,n,t)}var yt=0,Mt=1,gt=2,Lt=3,vt=4,Yt=5,bt=6,wt=7,kt=8;function Dt(t){return Tt(t)?366:365}function Tt(t){return t%4==0&&t%100!=0||t%400==0}J("Y",0,0,(function(){var t=this.year();return t<=9999?""+t:"+"+t})),J(0,["YY",2],0,(function(){return this.year()%100})),J(0,["YYYY",4],0,"year"),J(0,["YYYYY",5],0,"year"),J(0,["YYYYYY",6,!0],0,"year"),E("year","y"),z("year",1),ct("Y",it),ct("YY",X,V),ct("YYYY",nt,Z),ct("YYYYY",rt,K),ct("YYYYYY",rt,K),ht(["YYYYY","YYYYYY"],yt),ht("YYYY",(function(t,e){e[yt]=2===t.length?a.parseTwoDigitYear(t):b(t)})),ht("YY",(function(t,e){e[yt]=a.parseTwoDigitYear(t)})),ht("Y",(function(t,e){e[yt]=parseInt(t,10)})),a.parseTwoDigitYear=function(t){return b(t)+(b(t)>68?1900:2e3)};var xt,St=Ht("FullYear",!0);function Ht(t,e){return function(n){return null!=n?(At(this,t,n),a.updateOffset(this,e),this):jt(this,t)}}function jt(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function At(t,e,n){t.isValid()&&!isNaN(n)&&("FullYear"===e&&Tt(t.year())&&1===t.month()&&29===t.date()?t._d["set"+(t._isUTC?"UTC":"")+e](n,t.month(),Pt(n,t.month())):t._d["set"+(t._isUTC?"UTC":"")+e](n))}function Pt(t,e){if(isNaN(t)||isNaN(e))return NaN;var n,r=(e%(n=12)+n)%n;return t+=(e-r)/12,1===r?Tt(t)?29:28:31-r%7%2}xt=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1},J("M",["MM",2],"Mo",(function(){return this.month()+1})),J("MMM",0,0,(function(t){return this.localeData().monthsShort(this,t)})),J("MMMM",0,0,(function(t){return this.localeData().months(this,t)})),E("month","M"),z("month",8),ct("M",X),ct("MM",X,V),ct("MMM",(function(t,e){return e.monthsShortRegex(t)})),ct("MMMM",(function(t,e){return e.monthsRegex(t)})),ht(["M","MM"],(function(t,e){e[Mt]=b(t)-1})),ht(["MMM","MMMM"],(function(t,e,n,r){var a=n._locale.monthsParse(t,r,n._strict);null!=a?e[Mt]=a:h(n).invalidMonth=t}));var Et=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ot="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Nt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Wt(t,e,n){var r,a,i,s=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(a=xt.call(this._shortMonthsParse,s))?a:null:-1!==(a=xt.call(this._longMonthsParse,s))?a:null:"MMM"===e?-1!==(a=xt.call(this._shortMonthsParse,s))?a:-1!==(a=xt.call(this._longMonthsParse,s))?a:null:-1!==(a=xt.call(this._longMonthsParse,s))?a:-1!==(a=xt.call(this._shortMonthsParse,s))?a:null}function zt(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=b(e);else if(!u(e=t.localeData().monthsParse(e)))return t;return n=Math.min(t.date(),Pt(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function Ft(t){return null!=t?(zt(this,t),a.updateOffset(this,!0),this):jt(this,"Month")}var Ct=ut,Rt=ut;function Ut(){function t(t,e){return e.length-t.length}var e,n,r=[],a=[],i=[];for(e=0;e<12;e++)n=_([2e3,e]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(t),a.sort(t),i.sort(t),e=0;e<12;e++)r[e]=ft(r[e]),a[e]=ft(a[e]);for(e=0;e<24;e++)i[e]=ft(i[e]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function It(t,e,n,r,a,i,s){var o;return t<100&&t>=0?(o=new Date(t+400,e,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(t)):o=new Date(t,e,n,r,a,i,s),o}function Jt(t){var e;if(t<100&&t>=0){var n=Array.prototype.slice.call(arguments);n[0]=t+400,e=new Date(Date.UTC.apply(null,n)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)}else e=new Date(Date.UTC.apply(null,arguments));return e}function qt(t,e,n){var r=7+e-n;return-(7+Jt(t,0,r).getUTCDay()-e)%7+r-1}function Gt(t,e,n,r,a){var i,s,o=1+7*(e-1)+(7+n-r)%7+qt(t,r,a);return o<=0?s=Dt(i=t-1)+o:o>Dt(t)?(i=t+1,s=o-Dt(t)):(i=t,s=o),{year:i,dayOfYear:s}}function Bt(t,e,n){var r,a,i=qt(t.year(),e,n),s=Math.floor((t.dayOfYear()-i-1)/7)+1;return s<1?r=s+Vt(a=t.year()-1,e,n):s>Vt(t.year(),e,n)?(r=s-Vt(t.year(),e,n),a=t.year()+1):(a=t.year(),r=s),{week:r,year:a}}function Vt(t,e,n){var r=qt(t,e,n),a=qt(t+1,e,n);return(Dt(t)-r+a)/7}function $t(t,e){return t.slice(e,7).concat(t.slice(0,e))}J("w",["ww",2],"wo","week"),J("W",["WW",2],"Wo","isoWeek"),E("week","w"),E("isoWeek","W"),z("week",5),z("isoWeek",5),ct("w",X),ct("ww",X,V),ct("W",X),ct("WW",X,V),mt(["w","ww","W","WW"],(function(t,e,n,r){e[r.substr(0,1)]=b(t)})),J("d",0,"do","day"),J("dd",0,0,(function(t){return this.localeData().weekdaysMin(this,t)})),J("ddd",0,0,(function(t){return this.localeData().weekdaysShort(this,t)})),J("dddd",0,0,(function(t){return this.localeData().weekdays(this,t)})),J("e",0,0,"weekday"),J("E",0,0,"isoWeekday"),E("day","d"),E("weekday","e"),E("isoWeekday","E"),z("day",11),z("weekday",11),z("isoWeekday",11),ct("d",X),ct("e",X),ct("E",X),ct("dd",(function(t,e){return e.weekdaysMinRegex(t)})),ct("ddd",(function(t,e){return e.weekdaysShortRegex(t)})),ct("dddd",(function(t,e){return e.weekdaysRegex(t)})),mt(["dd","ddd","dddd"],(function(t,e,n,r){var a=n._locale.weekdaysParse(t,r,n._strict);null!=a?e.d=a:h(n).invalidWeekday=t})),mt(["d","e","E"],(function(t,e,n,r){e[r]=b(t)}));var Zt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Kt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Xt="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Qt(t,e,n){var r,a,i,s=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(a=xt.call(this._weekdaysParse,s))?a:null:"ddd"===e?-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:null:"dddd"===e?-1!==(a=xt.call(this._weekdaysParse,s))?a:-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:null:"ddd"===e?-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:-1!==(a=xt.call(this._weekdaysParse,s))?a:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:null:-1!==(a=xt.call(this._minWeekdaysParse,s))?a:-1!==(a=xt.call(this._weekdaysParse,s))?a:-1!==(a=xt.call(this._shortWeekdaysParse,s))?a:null}var te=ut,ee=ut,ne=ut;function re(){function t(t,e){return e.length-t.length}var e,n,r,a,i,s=[],o=[],u=[],d=[];for(e=0;e<7;e++)n=_([2e3,1]).day(e),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),s.push(r),o.push(a),u.push(i),d.push(r),d.push(a),d.push(i);for(s.sort(t),o.sort(t),u.sort(t),d.sort(t),e=0;e<7;e++)o[e]=ft(o[e]),u[e]=ft(u[e]),d[e]=ft(d[e]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function ae(){return this.hours()%12||12}function ie(t,e){J(t,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)}))}function se(t,e){return e._meridiemParse}J("H",["HH",2],0,"hour"),J("h",["hh",2],0,ae),J("k",["kk",2],0,(function(){return this.hours()||24})),J("hmm",0,0,(function(){return""+ae.apply(this)+F(this.minutes(),2)})),J("hmmss",0,0,(function(){return""+ae.apply(this)+F(this.minutes(),2)+F(this.seconds(),2)})),J("Hmm",0,0,(function(){return""+this.hours()+F(this.minutes(),2)})),J("Hmmss",0,0,(function(){return""+this.hours()+F(this.minutes(),2)+F(this.seconds(),2)})),ie("a",!0),ie("A",!1),E("hour","h"),z("hour",13),ct("a",se),ct("A",se),ct("H",X),ct("h",X),ct("k",X),ct("HH",X,V),ct("hh",X,V),ct("kk",X,V),ct("hmm",Q),ct("hmmss",tt),ct("Hmm",Q),ct("Hmmss",tt),ht(["H","HH"],Lt),ht(["k","kk"],(function(t,e,n){var r=b(t);e[Lt]=24===r?0:r})),ht(["a","A"],(function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t})),ht(["h","hh"],(function(t,e,n){e[Lt]=b(t),h(n).bigHour=!0})),ht("hmm",(function(t,e,n){var r=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r)),h(n).bigHour=!0})),ht("hmmss",(function(t,e,n){var r=t.length-4,a=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r,2)),e[Yt]=b(t.substr(a)),h(n).bigHour=!0})),ht("Hmm",(function(t,e,n){var r=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r))})),ht("Hmmss",(function(t,e,n){var r=t.length-4,a=t.length-2;e[Lt]=b(t.substr(0,r)),e[vt]=b(t.substr(r,2)),e[Yt]=b(t.substr(a))}));var oe,ue=Ht("Hours",!0),de={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ot,monthsShort:Nt,week:{dow:0,doy:6},weekdays:Zt,weekdaysMin:Xt,weekdaysShort:Kt,meridiemParse:/[ap]\.?m?\.?/i},ce={},le={};function fe(t){return t?t.toLowerCase().replace("_","-"):t}function _e(e){var r=null;if(!ce[e]&&void 0!==t&&t&&t.exports)try{r=oe._abbr,n(140)("./"+e),he(r)}catch(t){}return ce[e]}function he(t,e){var n;return t&&((n=o(e)?pe(t):me(t,e))?oe=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),oe._abbr}function me(t,e){if(null!==e){var n,r=de;if(e.abbr=t,null!=ce[t])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ce[t]._config;else if(null!=e.parentLocale)if(null!=ce[e.parentLocale])r=ce[e.parentLocale]._config;else{if(null==(n=_e(e.parentLocale)))return le[e.parentLocale]||(le[e.parentLocale]=[]),le[e.parentLocale].push({name:t,config:e}),null;r=n._config}return ce[t]=new A(j(r,e)),le[t]&&le[t].forEach((function(t){me(t.name,t.config)})),he(t),ce[t]}return delete ce[t],null}function pe(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return oe;if(!i(t)){if(e=_e(t))return e;t=[t]}return function(t){for(var e,n,r,a,i=0;i<t.length;){for(e=(a=fe(t[i]).split("-")).length,n=(n=fe(t[i+1]))?n.split("-"):null;e>0;){if(r=_e(a.slice(0,e).join("-")))return r;if(n&&n.length>=e&&w(a,n,!0)>=e-1)break;e--}i++}return oe}(t)}function ye(t){var e,n=t._a;return n&&-2===h(t).overflow&&(e=n[Mt]<0||n[Mt]>11?Mt:n[gt]<1||n[gt]>Pt(n[yt],n[Mt])?gt:n[Lt]<0||n[Lt]>24||24===n[Lt]&&(0!==n[vt]||0!==n[Yt]||0!==n[bt])?Lt:n[vt]<0||n[vt]>59?vt:n[Yt]<0||n[Yt]>59?Yt:n[bt]<0||n[bt]>999?bt:-1,h(t)._overflowDayOfYear&&(e<yt||e>gt)&&(e=gt),h(t)._overflowWeeks&&-1===e&&(e=wt),h(t)._overflowWeekday&&-1===e&&(e=kt),h(t).overflow=e),t}function Me(t,e,n){return null!=t?t:null!=e?e:n}function ge(t){var e,n,r,i,s,o=[];if(!t._d){for(r=function(t){var e=new Date(a.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}(t),t._w&&null==t._a[gt]&&null==t._a[Mt]&&function(t){var e,n,r,a,i,s,o,u;if(null!=(e=t._w).GG||null!=e.W||null!=e.E)i=1,s=4,n=Me(e.GG,t._a[yt],Bt(Ee(),1,4).year),r=Me(e.W,1),((a=Me(e.E,1))<1||a>7)&&(u=!0);else{i=t._locale._week.dow,s=t._locale._week.doy;var d=Bt(Ee(),i,s);n=Me(e.gg,t._a[yt],d.year),r=Me(e.w,d.week),null!=e.d?((a=e.d)<0||a>6)&&(u=!0):null!=e.e?(a=e.e+i,(e.e<0||e.e>6)&&(u=!0)):a=i}r<1||r>Vt(n,i,s)?h(t)._overflowWeeks=!0:null!=u?h(t)._overflowWeekday=!0:(o=Gt(n,r,a,i,s),t._a[yt]=o.year,t._dayOfYear=o.dayOfYear)}(t),null!=t._dayOfYear&&(s=Me(t._a[yt],r[yt]),(t._dayOfYear>Dt(s)||0===t._dayOfYear)&&(h(t)._overflowDayOfYear=!0),n=Jt(s,0,t._dayOfYear),t._a[Mt]=n.getUTCMonth(),t._a[gt]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=o[e]=r[e];for(;e<7;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[Lt]&&0===t._a[vt]&&0===t._a[Yt]&&0===t._a[bt]&&(t._nextDay=!0,t._a[Lt]=0),t._d=(t._useUTC?Jt:It).apply(null,o),i=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Lt]=24),t._w&&void 0!==t._w.d&&t._w.d!==i&&(h(t).weekdayMismatch=!0)}}var Le=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ve=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ye=/Z|[+-]\d\d(?::?\d\d)?/,be=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],we=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],ke=/^\/?Date\((\-?\d+)/i;function De(t){var e,n,r,a,i,s,o=t._i,u=Le.exec(o)||ve.exec(o);if(u){for(h(t).iso=!0,e=0,n=be.length;e<n;e++)if(be[e][1].exec(u[1])){a=be[e][0],r=!1!==be[e][2];break}if(null==a)return void(t._isValid=!1);if(u[3]){for(e=0,n=we.length;e<n;e++)if(we[e][1].exec(u[3])){i=(u[2]||" ")+we[e][0];break}if(null==i)return void(t._isValid=!1)}if(!r&&null!=i)return void(t._isValid=!1);if(u[4]){if(!Ye.exec(u[4]))return void(t._isValid=!1);s="Z"}t._f=a+(i||"")+(s||""),je(t)}else t._isValid=!1}var Te=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function xe(t){var e=parseInt(t,10);return e<=49?2e3+e:e<=999?1900+e:e}var Se={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function He(t){var e,n,r,a,i,s,o,u=Te.exec(t._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){var d=(e=u[4],n=u[3],r=u[2],a=u[5],i=u[6],s=u[7],o=[xe(e),Nt.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],s&&o.push(parseInt(s,10)),o);if(!function(t,e,n){return!t||Kt.indexOf(t)===new Date(e[0],e[1],e[2]).getDay()||(h(n).weekdayMismatch=!0,n._isValid=!1,!1)}(u[1],d,t))return;t._a=d,t._tzm=function(t,e,n){if(t)return Se[t];if(e)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(u[8],u[9],u[10]),t._d=Jt.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),h(t).rfc2822=!0}else t._isValid=!1}function je(t){if(t._f!==a.ISO_8601)if(t._f!==a.RFC_2822){t._a=[],h(t).empty=!0;var e,n,r,i,s,o=""+t._i,u=o.length,d=0;for(r=G(t._f,t._locale).match(C)||[],e=0;e<r.length;e++)i=r[e],(n=(o.match(lt(i,t))||[])[0])&&((s=o.substr(0,o.indexOf(n))).length>0&&h(t).unusedInput.push(s),o=o.slice(o.indexOf(n)+n.length),d+=n.length),I[i]?(n?h(t).empty=!1:h(t).unusedTokens.push(i),pt(i,n,t)):t._strict&&!n&&h(t).unusedTokens.push(i);h(t).charsLeftOver=u-d,o.length>0&&h(t).unusedInput.push(o),t._a[Lt]<=12&&!0===h(t).bigHour&&t._a[Lt]>0&&(h(t).bigHour=void 0),h(t).parsedDateParts=t._a.slice(0),h(t).meridiem=t._meridiem,t._a[Lt]=function(t,e,n){var r;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?((r=t.isPM(n))&&e<12&&(e+=12),r||12!==e||(e=0),e):e}(t._locale,t._a[Lt],t._meridiem),ge(t),ye(t)}else He(t);else De(t)}function Ae(t){var e=t._i,n=t._f;return t._locale=t._locale||pe(t._l),null===e||void 0===n&&""===e?p({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),v(e)?new L(ye(e)):(d(e)?t._d=e:i(n)?function(t){var e,n,r,a,i;if(0===t._f.length)return h(t).invalidFormat=!0,void(t._d=new Date(NaN));for(a=0;a<t._f.length;a++)i=0,e=M({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[a],je(e),m(e)&&(i+=h(e).charsLeftOver,i+=10*h(e).unusedTokens.length,h(e).score=i,(null==r||i<r)&&(r=i,n=e));f(t,n||e)}(t):n?je(t):function(t){var e=t._i;o(e)?t._d=new Date(a.now()):d(e)?t._d=new Date(e.valueOf()):"string"==typeof e?function(t){var e=ke.exec(t._i);null===e?(De(t),!1===t._isValid&&(delete t._isValid,He(t),!1===t._isValid&&(delete t._isValid,a.createFromInputFallback(t)))):t._d=new Date(+e[1])}(t):i(e)?(t._a=c(e.slice(0),(function(t){return parseInt(t,10)})),ge(t)):s(e)?function(t){if(!t._d){var e=N(t._i);t._a=c([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],(function(t){return t&&parseInt(t,10)})),ge(t)}}(t):u(e)?t._d=new Date(e):a.createFromInputFallback(t)}(t),m(t)||(t._d=null),t))}function Pe(t,e,n,r,a){var o,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(s(t)&&function(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(t.hasOwnProperty(e))return!1;return!0}(t)||i(t)&&0===t.length)&&(t=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=t,u._f=e,u._strict=r,(o=new L(ye(Ae(u))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Ee(t,e,n,r){return Pe(t,e,n,r,!1)}a.createFromInputFallback=D("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Oe=D("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=Ee.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:p()})),Ne=D("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=Ee.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:p()}));function We(t,e){var n,r;if(1===e.length&&i(e[0])&&(e=e[0]),!e.length)return Ee();for(n=e[0],r=1;r<e.length;++r)e[r].isValid()&&!e[r][t](n)||(n=e[r]);return n}var ze=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Fe(t){var e=N(t),n=e.year||0,r=e.quarter||0,a=e.month||0,i=e.week||e.isoWeek||0,s=e.day||0,o=e.hour||0,u=e.minute||0,d=e.second||0,c=e.millisecond||0;this._isValid=function(t){for(var e in t)if(-1===xt.call(ze,e)||null!=t[e]&&isNaN(t[e]))return!1;for(var n=!1,r=0;r<ze.length;++r)if(t[ze[r]]){if(n)return!1;parseFloat(t[ze[r]])!==b(t[ze[r]])&&(n=!0)}return!0}(e),this._milliseconds=+c+1e3*d+6e4*u+1e3*o*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=pe(),this._bubble()}function Ce(t){return t instanceof Fe}function Re(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function Ue(t,e){J(t,0,0,(function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+F(~~(t/60),2)+e+F(~~t%60,2)}))}Ue("Z",":"),Ue("ZZ",""),ct("Z",ot),ct("ZZ",ot),ht(["Z","ZZ"],(function(t,e,n){n._useUTC=!0,n._tzm=Je(ot,t)}));var Ie=/([\+\-]|\d\d)/gi;function Je(t,e){var n=(e||"").match(t);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(Ie)||["-",0,0],a=60*r[1]+b(r[2]);return 0===a?0:"+"===r[0]?a:-a}function qe(t,e){var n,r;return e._isUTC?(n=e.clone(),r=(v(t)||d(t)?t.valueOf():Ee(t).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Ee(t).local()}function Ge(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Be(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Ve=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,$e=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ze(t,e){var n,r,a,i,s,o,d=t,c=null;return Ce(t)?d={ms:t._milliseconds,d:t._days,M:t._months}:u(t)?(d={},e?d[e]=t:d.milliseconds=t):(c=Ve.exec(t))?(n="-"===c[1]?-1:1,d={y:0,d:b(c[gt])*n,h:b(c[Lt])*n,m:b(c[vt])*n,s:b(c[Yt])*n,ms:b(Re(1e3*c[bt]))*n}):(c=$e.exec(t))?(n="-"===c[1]?-1:1,d={y:Ke(c[2],n),M:Ke(c[3],n),w:Ke(c[4],n),d:Ke(c[5],n),h:Ke(c[6],n),m:Ke(c[7],n),s:Ke(c[8],n)}):null==d?d={}:"object"==typeof d&&("from"in d||"to"in d)&&(i=Ee(d.from),s=Ee(d.to),a=i.isValid()&&s.isValid()?(s=qe(s,i),i.isBefore(s)?o=Xe(i,s):((o=Xe(s,i)).milliseconds=-o.milliseconds,o.months=-o.months),o):{milliseconds:0,months:0},(d={}).ms=a.milliseconds,d.M=a.months),r=new Fe(d),Ce(t)&&l(t,"_locale")&&(r._locale=t._locale),r}function Ke(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Xe(t,e){var n={};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Qe(t,e){return function(n,r){var a;return null===r||isNaN(+r)||(S(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),tn(this,Ze(n="string"==typeof n?+n:n,r),t),this}}function tn(t,e,n,r){var i=e._milliseconds,s=Re(e._days),o=Re(e._months);t.isValid()&&(r=null==r||r,o&&zt(t,jt(t,"Month")+o*n),s&&At(t,"Date",jt(t,"Date")+s*n),i&&t._d.setTime(t._d.valueOf()+i*n),r&&a.updateOffset(t,s||o))}Ze.fn=Fe.prototype,Ze.invalid=function(){return Ze(NaN)};var en=Qe(1,"add"),nn=Qe(-1,"subtract");function rn(t,e){var n=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(n,"months");return-(n+(e-r<0?(e-r)/(r-t.clone().add(n-1,"months")):(e-r)/(t.clone().add(n+1,"months")-r)))||0}function an(t){var e;return void 0===t?this._locale._abbr:(null!=(e=pe(t))&&(this._locale=e),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var sn=D("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(t){return void 0===t?this.localeData():this.locale(t)}));function on(){return this._locale}var un=1e3,dn=60*un,cn=60*dn,ln=3506328*cn;function fn(t,e){return(t%e+e)%e}function _n(t,e,n){return t<100&&t>=0?new Date(t+400,e,n)-ln:new Date(t,e,n).valueOf()}function hn(t,e,n){return t<100&&t>=0?Date.UTC(t+400,e,n)-ln:Date.UTC(t,e,n)}function mn(t,e){J(0,[t,t.length],0,e)}function pn(t,e,n,r,a){var i;return null==t?Bt(this,r,a).year:(e>(i=Vt(t,r,a))&&(e=i),yn.call(this,t,e,n,r,a))}function yn(t,e,n,r,a){var i=Gt(t,e,n,r,a),s=Jt(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}J(0,["gg",2],0,(function(){return this.weekYear()%100})),J(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),mn("gggg","weekYear"),mn("ggggg","weekYear"),mn("GGGG","isoWeekYear"),mn("GGGGG","isoWeekYear"),E("weekYear","gg"),E("isoWeekYear","GG"),z("weekYear",1),z("isoWeekYear",1),ct("G",it),ct("g",it),ct("GG",X,V),ct("gg",X,V),ct("GGGG",nt,Z),ct("gggg",nt,Z),ct("GGGGG",rt,K),ct("ggggg",rt,K),mt(["gggg","ggggg","GGGG","GGGGG"],(function(t,e,n,r){e[r.substr(0,2)]=b(t)})),mt(["gg","GG"],(function(t,e,n,r){e[r]=a.parseTwoDigitYear(t)})),J("Q",0,"Qo","quarter"),E("quarter","Q"),z("quarter",7),ct("Q",B),ht("Q",(function(t,e){e[Mt]=3*(b(t)-1)})),J("D",["DD",2],"Do","date"),E("date","D"),z("date",9),ct("D",X),ct("DD",X,V),ct("Do",(function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient})),ht(["D","DD"],gt),ht("Do",(function(t,e){e[gt]=b(t.match(X)[0])}));var Mn=Ht("Date",!0);J("DDD",["DDDD",3],"DDDo","dayOfYear"),E("dayOfYear","DDD"),z("dayOfYear",4),ct("DDD",et),ct("DDDD",$),ht(["DDD","DDDD"],(function(t,e,n){n._dayOfYear=b(t)})),J("m",["mm",2],0,"minute"),E("minute","m"),z("minute",14),ct("m",X),ct("mm",X,V),ht(["m","mm"],vt);var gn=Ht("Minutes",!1);J("s",["ss",2],0,"second"),E("second","s"),z("second",15),ct("s",X),ct("ss",X,V),ht(["s","ss"],Yt);var Ln,vn=Ht("Seconds",!1);for(J("S",0,0,(function(){return~~(this.millisecond()/100)})),J(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),J(0,["SSS",3],0,"millisecond"),J(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),J(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),J(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),J(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),J(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),J(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),E("millisecond","ms"),z("millisecond",16),ct("S",et,B),ct("SS",et,V),ct("SSS",et,$),Ln="SSSS";Ln.length<=9;Ln+="S")ct(Ln,at);function Yn(t,e){e[bt]=b(1e3*("0."+t))}for(Ln="S";Ln.length<=9;Ln+="S")ht(Ln,Yn);var bn=Ht("Milliseconds",!1);J("z",0,0,"zoneAbbr"),J("zz",0,0,"zoneName");var wn=L.prototype;function kn(t){return t}wn.add=en,wn.calendar=function(t,e){var n=t||Ee(),r=qe(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",s=e&&(H(e[i])?e[i].call(this,n):e[i]);return this.format(s||this.localeData().calendar(i,this,Ee(n)))},wn.clone=function(){return new L(this)},wn.diff=function(t,e,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=qe(t,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),e=O(e)){case"year":i=rn(this,r)/12;break;case"month":i=rn(this,r);break;case"quarter":i=rn(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:Y(i)},wn.endOf=function(t){var e;if(void 0===(t=O(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?hn:_n;switch(t){case"year":e=n(this.year()+1,0,1)-1;break;case"quarter":e=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=n(this.year(),this.month()+1,1)-1;break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=cn-fn(e+(this._isUTC?0:this.utcOffset()*dn),cn)-1;break;case"minute":e=this._d.valueOf(),e+=dn-fn(e,dn)-1;break;case"second":e=this._d.valueOf(),e+=un-fn(e,un)-1}return this._d.setTime(e),a.updateOffset(this,!0),this},wn.format=function(t){t||(t=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var e=q(this,t);return this.localeData().postformat(e)},wn.from=function(t,e){return this.isValid()&&(v(t)&&t.isValid()||Ee(t).isValid())?Ze({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},wn.fromNow=function(t){return this.from(Ee(),t)},wn.to=function(t,e){return this.isValid()&&(v(t)&&t.isValid()||Ee(t).isValid())?Ze({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},wn.toNow=function(t){return this.to(Ee(),t)},wn.get=function(t){return H(this[t=O(t)])?this[t]():this},wn.invalidAt=function(){return h(this).overflow},wn.isAfter=function(t,e){var n=v(t)?t:Ee(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=O(e)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},wn.isBefore=function(t,e){var n=v(t)?t:Ee(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=O(e)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},wn.isBetween=function(t,e,n,r){var a=v(t)?t:Ee(t),i=v(e)?e:Ee(e);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},wn.isSame=function(t,e){var n,r=v(t)?t:Ee(t);return!(!this.isValid()||!r.isValid())&&("millisecond"===(e=O(e)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},wn.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},wn.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},wn.isValid=function(){return m(this)},wn.lang=sn,wn.locale=an,wn.localeData=on,wn.max=Ne,wn.min=Oe,wn.parsingFlags=function(){return f({},h(this))},wn.set=function(t,e){if("object"==typeof t)for(var n=function(t){var e=[];for(var n in t)e.push({unit:n,priority:W[n]});return e.sort((function(t,e){return t.priority-e.priority})),e}(t=N(t)),r=0;r<n.length;r++)this[n[r].unit](t[n[r].unit]);else if(H(this[t=O(t)]))return this[t](e);return this},wn.startOf=function(t){var e;if(void 0===(t=O(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?hn:_n;switch(t){case"year":e=n(this.year(),0,1);break;case"quarter":e=n(this.year(),this.month()-this.month()%3,1);break;case"month":e=n(this.year(),this.month(),1);break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=n(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=fn(e+(this._isUTC?0:this.utcOffset()*dn),cn);break;case"minute":e=this._d.valueOf(),e-=fn(e,dn);break;case"second":e=this._d.valueOf(),e-=fn(e,un)}return this._d.setTime(e),a.updateOffset(this,!0),this},wn.subtract=nn,wn.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},wn.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},wn.toDate=function(){return new Date(this.valueOf())},wn.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,n=e?this.clone().utc():this;return n.year()<0||n.year()>9999?q(n,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):H(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",q(n,"Z")):q(n,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},wn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t="moment",e="";this.isLocal()||(t=0===this.utcOffset()?"moment.utc":"moment.parseZone",e="Z");var n="["+t+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=e+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},wn.toJSON=function(){return this.isValid()?this.toISOString():null},wn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},wn.unix=function(){return Math.floor(this.valueOf()/1e3)},wn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},wn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},wn.year=St,wn.isLeapYear=function(){return Tt(this.year())},wn.weekYear=function(t){return pn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},wn.isoWeekYear=function(t){return pn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},wn.quarter=wn.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},wn.month=Ft,wn.daysInMonth=function(){return Pt(this.year(),this.month())},wn.week=wn.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},wn.isoWeek=wn.isoWeeks=function(t){var e=Bt(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},wn.weeksInYear=function(){var t=this.localeData()._week;return Vt(this.year(),t.dow,t.doy)},wn.isoWeeksInYear=function(){return Vt(this.year(),1,4)},wn.date=Mn,wn.day=wn.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}(t,this.localeData()),this.add(t-e,"d")):e},wn.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},wn.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=function(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7},wn.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},wn.hour=wn.hours=ue,wn.minute=wn.minutes=gn,wn.second=wn.seconds=vn,wn.millisecond=wn.milliseconds=bn,wn.utcOffset=function(t,e,n){var r,i=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=Je(ot,t)))return this}else Math.abs(t)<16&&!n&&(t*=60);return!this._isUTC&&e&&(r=Ge(this)),this._offset=t,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==t&&(!e||this._changeInProgress?tn(this,Ze(t-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Ge(this)},wn.utc=function(t){return this.utcOffset(0,t)},wn.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Ge(this),"m")),this},wn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=Je(st,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},wn.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Ee(t).utcOffset():0,(this.utcOffset()-t)%60==0)},wn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},wn.isLocal=function(){return!!this.isValid()&&!this._isUTC},wn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},wn.isUtc=Be,wn.isUTC=Be,wn.zoneAbbr=function(){return this._isUTC?"UTC":""},wn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},wn.dates=D("dates accessor is deprecated. Use date instead.",Mn),wn.months=D("months accessor is deprecated. Use month instead",Ft),wn.years=D("years accessor is deprecated. Use year instead",St),wn.zone=D("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()})),wn.isDSTShifted=D("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var t={};if(M(t,this),(t=Ae(t))._a){var e=t._isUTC?_(t._a):Ee(t._a);this._isDSTShifted=this.isValid()&&w(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var Dn=A.prototype;function Tn(t,e,n,r){var a=pe(),i=_().set(r,e);return a[n](i,t)}function xn(t,e,n){if(u(t)&&(e=t,t=void 0),t=t||"",null!=e)return Tn(t,e,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=Tn(t,r,n,"month");return a}function Sn(t,e,n,r){"boolean"==typeof t?(u(e)&&(n=e,e=void 0),e=e||""):(n=e=t,t=!1,u(e)&&(n=e,e=void 0),e=e||"");var a,i=pe(),s=t?i._week.dow:0;if(null!=n)return Tn(e,(n+s)%7,r,"day");var o=[];for(a=0;a<7;a++)o[a]=Tn(e,(a+s)%7,r,"day");return o}Dn.calendar=function(t,e,n){var r=this._calendar[t]||this._calendar.sameElse;return H(r)?r.call(e,n):r},Dn.longDateFormat=function(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,(function(t){return t.slice(1)})),this._longDateFormat[t])},Dn.invalidDate=function(){return this._invalidDate},Dn.ordinal=function(t){return this._ordinal.replace("%d",t)},Dn.preparse=kn,Dn.postformat=kn,Dn.relativeTime=function(t,e,n,r){var a=this._relativeTime[n];return H(a)?a(t,e,n,r):a.replace(/%d/i,t)},Dn.pastFuture=function(t,e){var n=this._relativeTime[t>0?"future":"past"];return H(n)?n(e):n.replace(/%s/i,e)},Dn.set=function(t){var e,n;for(n in t)H(e=t[n])?this[n]=e:this["_"+n]=e;this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Dn.months=function(t,e){return t?i(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||Et).test(e)?"format":"standalone"][t.month()]:i(this._months)?this._months:this._months.standalone},Dn.monthsShort=function(t,e){return t?i(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[Et.test(e)?"format":"standalone"][t.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Dn.monthsParse=function(t,e,n){var r,a,i;if(this._monthsParseExact)return Wt.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}},Dn.monthsRegex=function(t){return this._monthsParseExact?(l(this,"_monthsRegex")||Ut.call(this),t?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=Rt),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},Dn.monthsShortRegex=function(t){return this._monthsParseExact?(l(this,"_monthsRegex")||Ut.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=Ct),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},Dn.week=function(t){return Bt(t,this._week.dow,this._week.doy).week},Dn.firstDayOfYear=function(){return this._week.doy},Dn.firstDayOfWeek=function(){return this._week.dow},Dn.weekdays=function(t,e){var n=i(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?$t(n,this._week.dow):t?n[t.day()]:n},Dn.weekdaysMin=function(t){return!0===t?$t(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin},Dn.weekdaysShort=function(t){return!0===t?$t(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort},Dn.weekdaysParse=function(t,e,n){var r,a,i;if(this._weekdaysParseExact)return Qt.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[r].test(t))return r;if(n&&"ddd"===e&&this._shortWeekdaysParse[r].test(t))return r;if(n&&"dd"===e&&this._minWeekdaysParse[r].test(t))return r;if(!n&&this._weekdaysParse[r].test(t))return r}},Dn.weekdaysRegex=function(t){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||re.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=te),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},Dn.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||re.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=ee),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Dn.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||re.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=ne),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Dn.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},Dn.meridiem=function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},he("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1===b(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}}),a.lang=D("moment.lang is deprecated. Use moment.locale instead.",he),a.langData=D("moment.langData is deprecated. Use moment.localeData instead.",pe);var Hn=Math.abs;function jn(t,e,n,r){var a=Ze(e,n);return t._milliseconds+=r*a._milliseconds,t._days+=r*a._days,t._months+=r*a._months,t._bubble()}function An(t){return t<0?Math.floor(t):Math.ceil(t)}function Pn(t){return 4800*t/146097}function En(t){return 146097*t/4800}function On(t){return function(){return this.as(t)}}var Nn=On("ms"),Wn=On("s"),zn=On("m"),Fn=On("h"),Cn=On("d"),Rn=On("w"),Un=On("M"),In=On("Q"),Jn=On("y");function qn(t){return function(){return this.isValid()?this._data[t]:NaN}}var Gn=qn("milliseconds"),Bn=qn("seconds"),Vn=qn("minutes"),$n=qn("hours"),Zn=qn("days"),Kn=qn("months"),Xn=qn("years"),Qn=Math.round,tr={ss:44,s:45,m:45,h:22,d:26,M:11};function er(t,e,n,r,a){return a.relativeTime(e||1,!!n,t,r)}var nr=Math.abs;function rr(t){return(t>0)-(t<0)||+t}function ar(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n=nr(this._milliseconds)/1e3,r=nr(this._days),a=nr(this._months);t=Y(n/60),e=Y(t/60),n%=60,t%=60;var i=Y(a/12),s=a%=12,o=r,u=e,d=t,c=n?n.toFixed(3).replace(/\.?0+$/,""):"",l=this.asSeconds();if(!l)return"P0D";var f=l<0?"-":"",_=rr(this._months)!==rr(l)?"-":"",h=rr(this._days)!==rr(l)?"-":"",m=rr(this._milliseconds)!==rr(l)?"-":"";return f+"P"+(i?_+i+"Y":"")+(s?_+s+"M":"")+(o?h+o+"D":"")+(u||d||c?"T":"")+(u?m+u+"H":"")+(d?m+d+"M":"")+(c?m+c+"S":"")}var ir=Fe.prototype;return ir.isValid=function(){return this._isValid},ir.abs=function(){var t=this._data;return this._milliseconds=Hn(this._milliseconds),this._days=Hn(this._days),this._months=Hn(this._months),t.milliseconds=Hn(t.milliseconds),t.seconds=Hn(t.seconds),t.minutes=Hn(t.minutes),t.hours=Hn(t.hours),t.months=Hn(t.months),t.years=Hn(t.years),this},ir.add=function(t,e){return jn(this,t,e,1)},ir.subtract=function(t,e){return jn(this,t,e,-1)},ir.as=function(t){if(!this.isValid())return NaN;var e,n,r=this._milliseconds;if("month"===(t=O(t))||"quarter"===t||"year"===t)switch(e=this._days+r/864e5,n=this._months+Pn(e),t){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(e=this._days+Math.round(En(this._months)),t){case"week":return e/7+r/6048e5;case"day":return e+r/864e5;case"hour":return 24*e+r/36e5;case"minute":return 1440*e+r/6e4;case"second":return 86400*e+r/1e3;case"millisecond":return Math.floor(864e5*e)+r;default:throw new Error("Unknown unit "+t)}},ir.asMilliseconds=Nn,ir.asSeconds=Wn,ir.asMinutes=zn,ir.asHours=Fn,ir.asDays=Cn,ir.asWeeks=Rn,ir.asMonths=Un,ir.asQuarters=In,ir.asYears=Jn,ir.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*b(this._months/12):NaN},ir._bubble=function(){var t,e,n,r,a,i=this._milliseconds,s=this._days,o=this._months,u=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*An(En(o)+s),s=0,o=0),u.milliseconds=i%1e3,t=Y(i/1e3),u.seconds=t%60,e=Y(t/60),u.minutes=e%60,n=Y(e/60),u.hours=n%24,s+=Y(n/24),a=Y(Pn(s)),o+=a,s-=An(En(a)),r=Y(o/12),o%=12,u.days=s,u.months=o,u.years=r,this},ir.clone=function(){return Ze(this)},ir.get=function(t){return t=O(t),this.isValid()?this[t+"s"]():NaN},ir.milliseconds=Gn,ir.seconds=Bn,ir.minutes=Vn,ir.hours=$n,ir.days=Zn,ir.weeks=function(){return Y(this.days()/7)},ir.months=Kn,ir.years=Xn,ir.humanize=function(t){if(!this.isValid())return this.localeData().invalidDate();var e=this.localeData(),n=function(t,e,n){var r=Ze(t).abs(),a=Qn(r.as("s")),i=Qn(r.as("m")),s=Qn(r.as("h")),o=Qn(r.as("d")),u=Qn(r.as("M")),d=Qn(r.as("y")),c=a<=tr.ss&&["s",a]||a<tr.s&&["ss",a]||i<=1&&["m"]||i<tr.m&&["mm",i]||s<=1&&["h"]||s<tr.h&&["hh",s]||o<=1&&["d"]||o<tr.d&&["dd",o]||u<=1&&["M"]||u<tr.M&&["MM",u]||d<=1&&["y"]||["yy",d];return c[2]=e,c[3]=+t>0,c[4]=n,er.apply(null,c)}(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)},ir.toISOString=ar,ir.toString=ar,ir.toJSON=ar,ir.locale=an,ir.localeData=on,ir.toIsoString=D("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ar),ir.lang=sn,J("X",0,0,"unix"),J("x",0,0,"valueOf"),ct("x",it),ct("X",/[+-]?\d+(\.\d{1,3})?/),ht("X",(function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))})),ht("x",(function(t,e,n){n._d=new Date(b(t))})),a.version="2.24.0",e=Ee,a.fn=wn,a.min=function(){return We("isBefore",[].slice.call(arguments,0))},a.max=function(){return We("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=_,a.unix=function(t){return Ee(1e3*t)},a.months=function(t,e){return xn(t,e,"months")},a.isDate=d,a.locale=he,a.invalid=p,a.duration=Ze,a.isMoment=v,a.weekdays=function(t,e,n){return Sn(t,e,n,"weekdays")},a.parseZone=function(){return Ee.apply(null,arguments).parseZone()},a.localeData=pe,a.isDuration=Ce,a.monthsShort=function(t,e){return xn(t,e,"monthsShort")},a.weekdaysMin=function(t,e,n){return Sn(t,e,n,"weekdaysMin")},a.defineLocale=me,a.updateLocale=function(t,e){if(null!=e){var n,r,a=de;null!=(r=_e(t))&&(a=r._config),e=j(a,e),(n=new A(e)).parentLocale=ce[t],ce[t]=n,he(t)}else null!=ce[t]&&(null!=ce[t].parentLocale?ce[t]=ce[t].parentLocale:null!=ce[t]&&delete ce[t]);return ce[t]},a.locales=function(){return T(ce)},a.weekdaysShort=function(t,e,n){return Sn(t,e,n,"weekdaysShort")},a.normalizeUnits=O,a.relativeTimeRounding=function(t){return void 0===t?Qn:"function"==typeof t&&(Qn=t,!0)},a.relativeTimeThreshold=function(t,e){return void 0!==tr[t]&&(void 0===e?tr[t]:(tr[t]=e,"s"===t&&(tr.ss=e-1),!0))},a.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=wn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(139)(t))},function(t,e,n){"use strict";n.r(e);var r=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},a=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return r(e(t),n)}),{left:function(e,n,r,a){for(null==r&&(r=0),null==a&&(a=e.length);r<a;){var i=r+a>>>1;t(e[i],n)<0?r=i+1:a=i}return r},right:function(e,n,r,a){for(null==r&&(r=0),null==a&&(a=e.length);r<a;){var i=r+a>>>1;t(e[i],n)>0?a=i:r=i+1}return r}}};var i=a(r),s=i.right,o=i.left,u=s,d=function(t,e){null==e&&(e=c);for(var n=0,r=t.length-1,a=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(a,a=t[++n]);return i};function c(t,e){return[t,e]}var l=function(t,e,n){var r,a,i,s,o=t.length,u=e.length,d=new Array(o*u);for(null==n&&(n=c),r=i=0;r<o;++r)for(s=t[r],a=0;a<u;++a,++i)d[i]=n(s,e[a]);return d},f=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},_=function(t){return null===t?NaN:+t},h=function(t,e){var n,r,a=t.length,i=0,s=-1,o=0,u=0;if(null==e)for(;++s<a;)isNaN(n=_(t[s]))||(u+=(r=n-o)*(n-(o+=r/++i)));else for(;++s<a;)isNaN(n=_(e(t[s],s,t)))||(u+=(r=n-o)*(n-(o+=r/++i)));if(i>1)return u/(i-1)},m=function(t,e){var n=h(t,e);return n?Math.sqrt(n):n},p=function(t,e){var n,r,a,i=t.length,s=-1;if(null==e){for(;++s<i;)if(null!=(n=t[s])&&n>=n)for(r=a=n;++s<i;)null!=(n=t[s])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++s<i;)if(null!=(n=e(t[s],s,t))&&n>=n)for(r=a=n;++s<i;)null!=(n=e(t[s],s,t))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]},y=Array.prototype,M=y.slice,g=y.map,L=function(t){return function(){return t}},v=function(t){return t},Y=function(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i},b=Math.sqrt(50),w=Math.sqrt(10),k=Math.sqrt(2),D=function(t,e,n){var r,a,i,s,o=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(s=T(t,e,n))||!isFinite(s))return[];if(s>0)for(t=Math.ceil(t/s),e=Math.floor(e/s),i=new Array(a=Math.ceil(e-t+1));++o<a;)i[o]=(t+o)*s;else for(t=Math.floor(t*s),e=Math.ceil(e*s),i=new Array(a=Math.ceil(t-e+1));++o<a;)i[o]=(t-o)/s;return r&&i.reverse(),i};function T(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=b?10:i>=w?5:i>=k?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=b?10:i>=w?5:i>=k?2:1)}function x(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=b?a*=10:i>=w?a*=5:i>=k&&(a*=2),e<t?-a:a}var S=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},H=function(){var t=v,e=p,n=S;function r(r){var a,i,s=r.length,o=new Array(s);for(a=0;a<s;++a)o[a]=t(r[a],a,r);var d=e(o),c=d[0],l=d[1],f=n(o,c,l);Array.isArray(f)||(f=x(c,l,f),f=Y(Math.ceil(c/f)*f,l,f));for(var _=f.length;f[0]<=c;)f.shift(),--_;for(;f[_-1]>l;)f.pop(),--_;var h,m=new Array(_+1);for(a=0;a<=_;++a)(h=m[a]=[]).x0=a>0?f[a-1]:c,h.x1=a<_?f[a]:l;for(a=0;a<s;++a)c<=(i=o[a])&&i<=l&&m[u(f,i,0,_)].push(r[a]);return m}return r.value=function(e){return arguments.length?(t="function"==typeof e?e:L(e),r):t},r.domain=function(t){return arguments.length?(e="function"==typeof t?t:L([t[0],t[1]]),r):e},r.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?L(M.call(t)):L(t),r):n},r},j=function(t,e,n){if(null==n&&(n=_),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,a=(r-1)*e,i=Math.floor(a),s=+n(t[i],i,t);return s+(+n(t[i+1],i+1,t)-s)*(a-i)}},A=function(t,e,n){return t=g.call(t,_).sort(r),Math.ceil((n-e)/(2*(j(t,.75)-j(t,.25))*Math.pow(t.length,-1/3)))},P=function(t,e,n){return Math.ceil((n-e)/(3.5*m(t)*Math.pow(t.length,-1/3)))},E=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},O=function(t,e){var n,r=t.length,a=r,i=-1,s=0;if(null==e)for(;++i<r;)isNaN(n=_(t[i]))?--a:s+=n;else for(;++i<r;)isNaN(n=_(e(t[i],i,t)))?--a:s+=n;if(a)return s/a},N=function(t,e){var n,a=t.length,i=-1,s=[];if(null==e)for(;++i<a;)isNaN(n=_(t[i]))||s.push(n);else for(;++i<a;)isNaN(n=_(e(t[i],i,t)))||s.push(n);return j(s.sort(r),.5)},W=function(t){for(var e,n,r,a=t.length,i=-1,s=0;++i<a;)s+=t[i].length;for(n=new Array(s);--a>=0;)for(e=(r=t[a]).length;--e>=0;)n[--s]=r[e];return n},z=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r},F=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},C=function(t,e){if(n=t.length){var n,a,i=0,s=0,o=t[s];for(null==e&&(e=r);++i<n;)(e(a=t[i],o)<0||0!==e(o,o))&&(o=a,s=i);return 0===e(o,o)?s:void 0}},R=function(t,e,n){for(var r,a,i=(null==n?t.length:n)-(e=null==e?0:+e);i;)a=Math.random()*i--|0,r=t[i+e],t[i+e]=t[a+e],t[a+e]=r;return t},U=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i},I=function(t){if(!(a=t.length))return[];for(var e=-1,n=z(t,J),r=new Array(n);++e<n;)for(var a,i=-1,s=r[e]=new Array(a);++i<a;)s[i]=t[i][e];return r};function J(t){return t.length}var q=function(){return I(arguments)},G=Array.prototype.slice,B=function(t){return t},V=1,$=2,Z=3,K=4,X=1e-6;function Q(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function et(t){return function(e){return+t(e)}}function nt(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function rt(){return!this.__axis}function at(t,e){var n=[],r=null,a=null,i=6,s=6,o=3,u=t===V||t===K?-1:1,d=t===K||t===$?"x":"y",c=t===V||t===Z?Q:tt;function l(l){var f=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,_=null==a?e.tickFormat?e.tickFormat.apply(e,n):B:a,h=Math.max(i,0)+o,m=e.range(),p=+m[0]+.5,y=+m[m.length-1]+.5,M=(e.bandwidth?nt:et)(e.copy()),g=l.selection?l.selection():l,L=g.selectAll(".domain").data([null]),v=g.selectAll(".tick").data(f,e).order(),Y=v.exit(),b=v.enter().append("g").attr("class","tick"),w=v.select("line"),k=v.select("text");L=L.merge(L.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),v=v.merge(b),w=w.merge(b.append("line").attr("stroke","currentColor").attr(d+"2",u*i)),k=k.merge(b.append("text").attr("fill","currentColor").attr(d,u*h).attr("dy",t===V?"0em":t===Z?"0.71em":"0.32em")),l!==g&&(L=L.transition(l),v=v.transition(l),w=w.transition(l),k=k.transition(l),Y=Y.transition(l).attr("opacity",X).attr("transform",(function(t){return isFinite(t=M(t))?c(t):this.getAttribute("transform")})),b.attr("opacity",X).attr("transform",(function(t){var e=this.parentNode.__axis;return c(e&&isFinite(e=e(t))?e:M(t))}))),Y.remove(),L.attr("d",t===K||t==$?s?"M"+u*s+","+p+"H0.5V"+y+"H"+u*s:"M0.5,"+p+"V"+y:s?"M"+p+","+u*s+"V0.5H"+y+"V"+u*s:"M"+p+",0.5H"+y),v.attr("opacity",1).attr("transform",(function(t){return c(M(t))})),w.attr(d+"2",u*i),k.attr(d,u*h).text(_),g.filter(rt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===$?"start":t===K?"end":"middle"),g.each((function(){this.__axis=M}))}return l.scale=function(t){return arguments.length?(e=t,l):e},l.ticks=function(){return n=G.call(arguments),l},l.tickArguments=function(t){return arguments.length?(n=null==t?[]:G.call(t),l):n.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:G.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(a=t,l):a},l.tickSize=function(t){return arguments.length?(i=s=+t,l):i},l.tickSizeInner=function(t){return arguments.length?(i=+t,l):i},l.tickSizeOuter=function(t){return arguments.length?(s=+t,l):s},l.tickPadding=function(t){return arguments.length?(o=+t,l):o},l}function it(t){return at(V,t)}function st(t){return at($,t)}function ot(t){return at(Z,t)}function ut(t){return at(K,t)}var dt={value:function(){}};function ct(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new lt(r)}function lt(t){this._=t}function ft(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function _t(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function ht(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=dt,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}lt.prototype=ct.prototype={constructor:lt,on:function(t,e){var n,r=this._,a=ft(t+"",r),i=-1,s=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<s;)if(n=(t=a[i]).type)r[n]=ht(r[n],t.name,e);else if(null==e)for(n in r)r[n]=ht(r[n],t.name,null);return this}for(;++i<s;)if((n=(t=a[i]).type)&&(n=_t(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new lt(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var mt=ct,pt="http://www.w3.org/1999/xhtml",yt={svg:"http://www.w3.org/2000/svg",xhtml:pt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Mt=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),yt.hasOwnProperty(e)?{space:yt[e],local:t}:t};function gt(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===pt&&e.documentElement.namespaceURI===pt?e.createElement(t):e.createElementNS(n,t)}}function Lt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var vt=function(t){var e=Mt(t);return(e.local?Lt:gt)(e)};function Yt(){}var bt=function(t){return null==t?Yt:function(){return this.querySelector(t)}};function wt(){return[]}var kt=function(t){return null==t?wt:function(){return this.querySelectorAll(t)}},Dt=function(t){return function(){return this.matches(t)}},Tt=function(t){return new Array(t.length)};function xt(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}xt.prototype={constructor:xt,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var St="$";function Ht(t,e,n,r,a,i){for(var s,o=0,u=e.length,d=i.length;o<d;++o)(s=e[o])?(s.__data__=i[o],r[o]=s):n[o]=new xt(t,i[o]);for(;o<u;++o)(s=e[o])&&(a[o]=s)}function jt(t,e,n,r,a,i,s){var o,u,d,c={},l=e.length,f=i.length,_=new Array(l);for(o=0;o<l;++o)(u=e[o])&&(_[o]=d=St+s.call(u,u.__data__,o,e),d in c?a[o]=u:c[d]=u);for(o=0;o<f;++o)(u=c[d=St+s.call(t,i[o],o,i)])?(r[o]=u,u.__data__=i[o],c[d]=null):n[o]=new xt(t,i[o]);for(o=0;o<l;++o)(u=e[o])&&c[_[o]]===u&&(a[o]=u)}function At(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Pt(t){return function(){this.removeAttribute(t)}}function Et(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ot(t,e){return function(){this.setAttribute(t,e)}}function Nt(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Wt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function zt(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var Ft=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Ct(t){return function(){this.style.removeProperty(t)}}function Rt(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Ut(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function It(t,e){return t.style.getPropertyValue(e)||Ft(t).getComputedStyle(t,null).getPropertyValue(e)}function Jt(t){return function(){delete this[t]}}function qt(t,e){return function(){this[t]=e}}function Gt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Bt(t){return t.trim().split(/^|\s+/)}function Vt(t){return t.classList||new $t(t)}function $t(t){this._node=t,this._names=Bt(t.getAttribute("class")||"")}function Zt(t,e){for(var n=Vt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function Kt(t,e){for(var n=Vt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Xt(t){return function(){Zt(this,t)}}function Qt(t){return function(){Kt(this,t)}}function te(t,e){return function(){(e.apply(this,arguments)?Zt:Kt)(this,t)}}$t.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function ee(){this.textContent=""}function ne(t){return function(){this.textContent=t}}function re(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function ae(){this.innerHTML=""}function ie(t){return function(){this.innerHTML=t}}function se(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function oe(){this.nextSibling&&this.parentNode.appendChild(this)}function ue(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function de(){return null}function ce(){var t=this.parentNode;t&&t.removeChild(this)}function le(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function fe(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var _e={},he=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(_e={mouseenter:"mouseover",mouseleave:"mouseout"}));function me(t,e,n){return t=pe(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function pe(t,e,n){return function(r){var a=he;he=r;try{t.call(this,this.__data__,e,n)}finally{he=a}}}function ye(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Me(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function ge(t,e,n){var r=_e.hasOwnProperty(t.type)?me:pe;return function(a,i,s){var o,u=this.__on,d=r(e,i,s);if(u)for(var c=0,l=u.length;c<l;++c)if((o=u[c]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=d,o.capture=n),void(o.value=e);this.addEventListener(t.type,d,n),o={type:t.type,name:t.name,value:e,listener:d,capture:n},u?u.push(o):this.__on=[o]}}function Le(t,e,n,r){var a=he;t.sourceEvent=he,he=t;try{return e.apply(n,r)}finally{he=a}}function ve(t,e,n){var r=Ft(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Ye(t,e){return function(){return ve(this,t,e)}}function be(t,e){return function(){return ve(this,t,e.apply(this,arguments))}}var we=[null];function ke(t,e){this._groups=t,this._parents=e}function De(){return new ke([[document.documentElement]],we)}ke.prototype=De.prototype={constructor:ke,select:function(t){"function"!=typeof t&&(t=bt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,s,o=e[a],u=o.length,d=r[a]=new Array(u),c=0;c<u;++c)(i=o[c])&&(s=t.call(i,i.__data__,c,o))&&("__data__"in i&&(s.__data__=i.__data__),d[c]=s);return new ke(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=kt(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var s,o=e[i],u=o.length,d=0;d<u;++d)(s=o[d])&&(r.push(t.call(s,s.__data__,d,o)),a.push(s));return new ke(r,a)},filter:function(t){"function"!=typeof t&&(t=Dt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,s=e[a],o=s.length,u=r[a]=[],d=0;d<o;++d)(i=s[d])&&t.call(i,i.__data__,d,s)&&u.push(i);return new ke(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),c=-1,this.each((function(t){h[++c]=t})),h;var n,r=e?jt:Ht,a=this._parents,i=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var s=i.length,o=new Array(s),u=new Array(s),d=new Array(s),c=0;c<s;++c){var l=a[c],f=i[c],_=f.length,h=t.call(l,l&&l.__data__,c,a),m=h.length,p=u[c]=new Array(m),y=o[c]=new Array(m);r(l,f,p,y,d[c]=new Array(_),h,e);for(var M,g,L=0,v=0;L<m;++L)if(M=p[L]){for(L>=v&&(v=L+1);!(g=y[v])&&++v<m;);M._next=g||null}}return(o=new ke(o,a))._enter=u,o._exit=d,o},enter:function(){return new ke(this._enter||this._groups.map(Tt),this._parents)},exit:function(){return new ke(this._exit||this._groups.map(Tt),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),s=new Array(r),o=0;o<i;++o)for(var u,d=e[o],c=n[o],l=d.length,f=s[o]=new Array(l),_=0;_<l;++_)(u=d[_]||c[_])&&(f[_]=u);for(;o<r;++o)s[o]=e[o];return new ke(s,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,s=a[i];--i>=0;)(r=a[i])&&(s&&4^r.compareDocumentPosition(s)&&s.parentNode.insertBefore(r,s),s=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=At);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var s,o=n[i],u=o.length,d=a[i]=new Array(u),c=0;c<u;++c)(s=o[c])&&(d[c]=s);d.sort(e)}return new ke(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var s=r[a];if(s)return s}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],s=0,o=i.length;s<o;++s)(a=i[s])&&t.call(a,a.__data__,s,i);return this},attr:function(t,e){var n=Mt(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Et:Pt:"function"==typeof e?n.local?zt:Wt:n.local?Nt:Ot)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Ct:"function"==typeof e?Ut:Rt)(t,e,null==n?"":n)):It(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Jt:"function"==typeof e?Gt:qt)(t,e)):this.node()[t]},classed:function(t,e){var n=Bt(t+"");if(arguments.length<2){for(var r=Vt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?te:e?Xt:Qt)(n,e))},text:function(t){return arguments.length?this.each(null==t?ee:("function"==typeof t?re:ne)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?ae:("function"==typeof t?se:ie)(t)):this.node().innerHTML},raise:function(){return this.each(oe)},lower:function(){return this.each(ue)},append:function(t){var e="function"==typeof t?t:vt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:vt(t),r=null==e?de:"function"==typeof e?e:bt(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ce)},clone:function(t){return this.select(t?fe:le)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=ye(t+""),s=i.length;if(!(arguments.length<2)){for(o=e?ge:Me,null==n&&(n=!1),r=0;r<s;++r)this.each(o(i[r],e,n));return this}var o=this.node().__on;if(o)for(var u,d=0,c=o.length;d<c;++d)for(r=0,u=o[d];r<s;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?be:Ye)(t,e))}};var Te=De,xe=function(t){return"string"==typeof t?new ke([[document.querySelector(t)]],[document.documentElement]):new ke([[t]],we)},Se=function(t){return xe(vt(t).call(document.documentElement))},He=0;function je(){return new Ae}function Ae(){this._="@"+(++He).toString(36)}Ae.prototype=je.prototype={constructor:Ae,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Pe=function(){for(var t,e=he;t=e.sourceEvent;)e=t;return e},Ee=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]},Oe=function(t){var e=Pe();return e.changedTouches&&(e=e.changedTouches[0]),Ee(t,e)},Ne=function(t){return"string"==typeof t?new ke([document.querySelectorAll(t)],[document.documentElement]):new ke([null==t?[]:t],we)},We=function(t,e,n){arguments.length<3&&(n=e,e=Pe().changedTouches);for(var r,a=0,i=e?e.length:0;a<i;++a)if((r=e[a]).identifier===n)return Ee(t,r);return null},ze=function(t,e){null==e&&(e=Pe().touches);for(var n=0,r=e?e.length:0,a=new Array(r);n<r;++n)a[n]=Ee(t,e[n]);return a};function Fe(){he.stopImmediatePropagation()}var Ce=function(){he.preventDefault(),he.stopImmediatePropagation()},Re=function(t){var e=t.document.documentElement,n=xe(t).on("dragstart.drag",Ce,!0);"onselectstart"in e?n.on("selectstart.drag",Ce,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")};function Ue(t,e){var n=t.document.documentElement,r=xe(t).on("dragstart.drag",null);e&&(r.on("click.drag",Ce,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var Ie=function(t){return function(){return t}};function Je(t,e,n,r,a,i,s,o,u,d){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=a,this.x=i,this.y=s,this.dx=o,this.dy=u,this._=d}function qe(){return!he.ctrlKey&&!he.button}function Ge(){return this.parentNode}function Be(t){return null==t?{x:he.x,y:he.y}:t}function Ve(){return navigator.maxTouchPoints||"ontouchstart"in this}Je.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var $e=function(){var t,e,n,r,a=qe,i=Ge,s=Be,o=Ve,u={},d=mt("start","drag","end"),c=0,l=0;function f(t){t.on("mousedown.drag",_).filter(o).on("touchstart.drag",p).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",M).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function _(){if(!r&&a.apply(this,arguments)){var s=g("mouse",i.apply(this,arguments),Oe,this,arguments);s&&(xe(he.view).on("mousemove.drag",h,!0).on("mouseup.drag",m,!0),Re(he.view),Fe(),n=!1,t=he.clientX,e=he.clientY,s("start"))}}function h(){if(Ce(),!n){var r=he.clientX-t,a=he.clientY-e;n=r*r+a*a>l}u.mouse("drag")}function m(){xe(he.view).on("mousemove.drag mouseup.drag",null),Ue(he.view,n),Ce(),u.mouse("end")}function p(){if(a.apply(this,arguments)){var t,e,n=he.changedTouches,r=i.apply(this,arguments),s=n.length;for(t=0;t<s;++t)(e=g(n[t].identifier,r,We,this,arguments))&&(Fe(),e("start"))}}function y(){var t,e,n=he.changedTouches,r=n.length;for(t=0;t<r;++t)(e=u[n[t].identifier])&&(Ce(),e("drag"))}function M(){var t,e,n=he.changedTouches,a=n.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),t=0;t<a;++t)(e=u[n[t].identifier])&&(Fe(),e("end"))}function g(t,e,n,r,a){var i,o,l,_=n(e,t),h=d.copy();if(Le(new Je(f,"beforestart",i,t,c,_[0],_[1],0,0,h),(function(){return null!=(he.subject=i=s.apply(r,a))&&(o=i.x-_[0]||0,l=i.y-_[1]||0,!0)})))return function s(d){var m,p=_;switch(d){case"start":u[t]=s,m=c++;break;case"end":delete u[t],--c;case"drag":_=n(e,t),m=c}Le(new Je(f,d,i,t,m,_[0]+o,_[1]+l,_[0]-p[0],_[1]-p[1],h),h.apply,h,[d,r,a])}}return f.filter=function(t){return arguments.length?(a="function"==typeof t?t:Ie(!!t),f):a},f.container=function(t){return arguments.length?(i="function"==typeof t?t:Ie(t),f):i},f.subject=function(t){return arguments.length?(s="function"==typeof t?t:Ie(t),f):s},f.touchable=function(t){return arguments.length?(o="function"==typeof t?t:Ie(!!t),f):o},f.on=function(){var t=d.on.apply(d,arguments);return t===d?f:t},f.clickDistance=function(t){return arguments.length?(l=(t=+t)*t,f):Math.sqrt(l)},f},Ze=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function Ke(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Xe(){}var Qe="\\s*([+-]?\\d+)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",en="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nn=/^#([0-9a-f]{3})$/,rn=/^#([0-9a-f]{6})$/,an=new RegExp("^rgb\\("+[Qe,Qe,Qe]+"\\)$"),sn=new RegExp("^rgb\\("+[en,en,en]+"\\)$"),on=new RegExp("^rgba\\("+[Qe,Qe,Qe,tn]+"\\)$"),un=new RegExp("^rgba\\("+[en,en,en,tn]+"\\)$"),dn=new RegExp("^hsl\\("+[tn,en,en]+"\\)$"),cn=new RegExp("^hsla\\("+[tn,en,en,tn]+"\\)$"),ln={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fn(){return this.rgb().formatHex()}function _n(){return this.rgb().formatRgb()}function hn(t){var e;return t=(t+"").trim().toLowerCase(),(e=nn.exec(t))?new gn((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=rn.exec(t))?mn(parseInt(e[1],16)):(e=an.exec(t))?new gn(e[1],e[2],e[3],1):(e=sn.exec(t))?new gn(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=on.exec(t))?pn(e[1],e[2],e[3],e[4]):(e=un.exec(t))?pn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=dn.exec(t))?bn(e[1],e[2]/100,e[3]/100,1):(e=cn.exec(t))?bn(e[1],e[2]/100,e[3]/100,e[4]):ln.hasOwnProperty(t)?mn(ln[t]):"transparent"===t?new gn(NaN,NaN,NaN,0):null}function mn(t){return new gn(t>>16&255,t>>8&255,255&t,1)}function pn(t,e,n,r){return r<=0&&(t=e=n=NaN),new gn(t,e,n,r)}function yn(t){return t instanceof Xe||(t=hn(t)),t?new gn((t=t.rgb()).r,t.g,t.b,t.opacity):new gn}function Mn(t,e,n,r){return 1===arguments.length?yn(t):new gn(t,e,n,null==r?1:r)}function gn(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ln(){return"#"+Yn(this.r)+Yn(this.g)+Yn(this.b)}function vn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Yn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function bn(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Dn(t,e,n,r)}function wn(t){if(t instanceof Dn)return new Dn(t.h,t.s,t.l,t.opacity);if(t instanceof Xe||(t=hn(t)),!t)return new Dn;if(t instanceof Dn)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),s=NaN,o=i-a,u=(i+a)/2;return o?(s=e===i?(n-r)/o+6*(n<r):n===i?(r-e)/o+2:(e-n)/o+4,o/=u<.5?i+a:2-i-a,s*=60):o=u>0&&u<1?0:s,new Dn(s,o,u,t.opacity)}function kn(t,e,n,r){return 1===arguments.length?wn(t):new Dn(t,e,n,null==r?1:r)}function Dn(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Tn(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Ze(Xe,hn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:fn,formatHex:fn,formatHsl:function(){return wn(this).formatHsl()},formatRgb:_n,toString:_n}),Ze(gn,Mn,Ke(Xe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new gn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new gn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Ln,formatHex:Ln,formatRgb:vn,toString:vn})),Ze(Dn,kn,Ke(Xe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Dn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Dn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new gn(Tn(t>=240?t-240:t+120,a,r),Tn(t,a,r),Tn(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var xn=Math.PI/180,Sn=180/Math.PI,Hn=.96422,jn=1,An=.82521,Pn=4/29,En=6/29,On=3*En*En,Nn=En*En*En;function Wn(t){if(t instanceof Cn)return new Cn(t.l,t.a,t.b,t.opacity);if(t instanceof Vn)return $n(t);t instanceof gn||(t=yn(t));var e,n,r=Jn(t.r),a=Jn(t.g),i=Jn(t.b),s=Rn((.2225045*r+.7168786*a+.0606169*i)/jn);return r===a&&a===i?e=n=s:(e=Rn((.4360747*r+.3850649*a+.1430804*i)/Hn),n=Rn((.0139322*r+.0971045*a+.7141733*i)/An)),new Cn(116*s-16,500*(e-s),200*(s-n),t.opacity)}function zn(t,e){return new Cn(t,0,0,null==e?1:e)}function Fn(t,e,n,r){return 1===arguments.length?Wn(t):new Cn(t,e,n,null==r?1:r)}function Cn(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Rn(t){return t>Nn?Math.pow(t,1/3):t/On+Pn}function Un(t){return t>En?t*t*t:On*(t-Pn)}function In(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Jn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function qn(t){if(t instanceof Vn)return new Vn(t.h,t.c,t.l,t.opacity);if(t instanceof Cn||(t=Wn(t)),0===t.a&&0===t.b)return new Vn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Sn;return new Vn(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Gn(t,e,n,r){return 1===arguments.length?qn(t):new Vn(n,e,t,null==r?1:r)}function Bn(t,e,n,r){return 1===arguments.length?qn(t):new Vn(t,e,n,null==r?1:r)}function Vn(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function $n(t){if(isNaN(t.h))return new Cn(t.l,0,0,t.opacity);var e=t.h*xn;return new Cn(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Ze(Cn,Fn,Ke(Xe,{brighter:function(t){return new Cn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Cn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new gn(In(3.1338561*(e=Hn*Un(e))-1.6168667*(t=jn*Un(t))-.4906146*(n=An*Un(n))),In(-.9787684*e+1.9161415*t+.033454*n),In(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Ze(Vn,Bn,Ke(Xe,{brighter:function(t){return new Vn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Vn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return $n(this).rgb()}}));var Zn=-.29227,Kn=-.90649,Xn=1.97294,Qn=Xn*Kn,tr=1.78277*Xn,er=1.78277*Zn- -.14861*Kn;function nr(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof rr)return new rr(t.h,t.s,t.l,t.opacity);t instanceof gn||(t=yn(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(er*r+Qn*e-tr*n)/(er+Qn-tr),i=r-a,s=(Xn*(n-a)-Zn*i)/Kn,o=Math.sqrt(s*s+i*i)/(Xn*a*(1-a)),u=o?Math.atan2(s,i)*Sn-120:NaN;return new rr(u<0?u+360:u,o,a,t.opacity)}(t):new rr(t,e,n,null==r?1:r)}function rr(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function ar(t,e,n,r,a){var i=t*t,s=i*t;return((1-3*t+3*i-s)*e+(4-6*i+3*s)*n+(1+3*t+3*i-3*s)*r+s*a)/6}Ze(rr,nr,Ke(Xe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new rr(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new rr(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*xn,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new gn(255*(e+n*(-.14861*r+1.78277*a)),255*(e+n*(Zn*r+Kn*a)),255*(e+n*(Xn*r)),this.opacity)}}));var ir=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],s=r>0?t[r-1]:2*a-i,o=r<e-1?t[r+2]:2*i-a;return ar((n-r/e)*e,s,a,i,o)}},sr=function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],s=t[(r+1)%e],o=t[(r+2)%e];return ar((n-r/e)*e,a,i,s,o)}},or=function(t){return function(){return t}};function ur(t,e){return function(n){return t+n*e}}function dr(t,e){var n=e-t;return n?ur(t,n>180||n<-180?n-360*Math.round(n/360):n):or(isNaN(t)?e:t)}function cr(t){return 1==(t=+t)?lr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):or(isNaN(e)?n:e)}}function lr(t,e){var n=e-t;return n?ur(t,n):or(isNaN(t)?e:t)}var fr=function t(e){var n=cr(e);function r(t,e){var r=n((t=Mn(t)).r,(e=Mn(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),s=lr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=s(e),t+""}}return r.gamma=t,r}(1);function _r(t){return function(e){var n,r,a=e.length,i=new Array(a),s=new Array(a),o=new Array(a);for(n=0;n<a;++n)r=Mn(e[n]),i[n]=r.r||0,s[n]=r.g||0,o[n]=r.b||0;return i=t(i),s=t(s),o=t(o),r.opacity=1,function(t){return r.r=i(t),r.g=s(t),r.b=o(t),r+""}}}var hr=_r(ir),mr=_r(sr),pr=function(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),s=new Array(r);for(n=0;n<a;++n)i[n]=Tr(t[n],e[n]);for(;n<r;++n)s[n]=e[n];return function(t){for(n=0;n<a;++n)s[n]=i[n](t);return s}},yr=function(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}},Mr=function(t,e){return e-=t=+t,function(n){return t+e*n}},gr=function(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Tr(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}},Lr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,vr=new RegExp(Lr.source,"g");var Yr,br,wr,kr,Dr=function(t,e){var n,r,a,i=Lr.lastIndex=vr.lastIndex=0,s=-1,o=[],u=[];for(t+="",e+="";(n=Lr.exec(t))&&(r=vr.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),o[s]?o[s]+=a:o[++s]=a),(n=n[0])===(r=r[0])?o[s]?o[s]+=r:o[++s]=r:(o[++s]=null,u.push({i:s,x:Mr(n,r)})),i=vr.lastIndex;return i<e.length&&(a=e.slice(i),o[s]?o[s]+=a:o[++s]=a),o.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)o[(n=u[r]).i]=n.x(t);return o.join("")})},Tr=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?or(e):("number"===r?Mr:"string"===r?(n=hn(e))?(e=n,fr):Dr:e instanceof hn?fr:e instanceof Date?yr:Array.isArray(e)?pr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?gr:Mr)(t,e)},xr=function(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}},Sr=function(t,e){var n=dr(+t,+e);return function(t){var e=n(t);return e-360*Math.floor(e/360)}},Hr=function(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}},jr=180/Math.PI,Ar={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Pr=function(t,e,n,r,a,i){var s,o,u;return(s=Math.sqrt(t*t+e*e))&&(t/=s,e/=s),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(o=Math.sqrt(n*n+r*r))&&(n/=o,r/=o,u/=o),t*r<e*n&&(t=-t,e=-e,u=-u,s=-s),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*jr,skewX:Math.atan(u)*jr,scaleX:s,scaleY:o}};function Er(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,s){var o=[],u=[];return i=t(i),s=t(s),function(t,r,a,i,s,o){if(t!==a||r!==i){var u=s.push("translate(",null,e,null,n);o.push({i:u-4,x:Mr(t,a)},{i:u-2,x:Mr(r,i)})}else(a||i)&&s.push("translate("+a+e+i+n)}(i.translateX,i.translateY,s.translateX,s.translateY,o,u),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:Mr(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,s.rotate,o,u),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:Mr(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,s.skewX,o,u),function(t,e,n,r,i,s){if(t!==n||e!==r){var o=i.push(a(i)+"scale(",null,",",null,")");s.push({i:o-4,x:Mr(t,n)},{i:o-2,x:Mr(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,s.scaleX,s.scaleY,o,u),i=s=null,function(t){for(var e,n=-1,r=u.length;++n<r;)o[(e=u[n]).i]=e.x(t);return o.join("")}}}var Or=Er((function(t){return"none"===t?Ar:(Yr||(Yr=document.createElement("DIV"),br=document.documentElement,wr=document.defaultView),Yr.style.transform=t,t=wr.getComputedStyle(br.appendChild(Yr),null).getPropertyValue("transform"),br.removeChild(Yr),t=t.slice(7,-1).split(","),Pr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),Nr=Er((function(t){return null==t?Ar:(kr||(kr=document.createElementNS("http://www.w3.org/2000/svg","g")),kr.setAttribute("transform",t),(t=kr.transform.baseVal.consolidate())?(t=t.matrix,Pr(t.a,t.b,t.c,t.d,t.e,t.f)):Ar)}),", ",")",")"),Wr=Math.SQRT2;function zr(t){return((t=Math.exp(t))+1/t)/2}var Fr=function(t,e){var n,r,a=t[0],i=t[1],s=t[2],o=e[0],u=e[1],d=e[2],c=o-a,l=u-i,f=c*c+l*l;if(f<1e-12)r=Math.log(d/s)/Wr,n=function(t){return[a+t*c,i+t*l,s*Math.exp(Wr*t*r)]};else{var _=Math.sqrt(f),h=(d*d-s*s+4*f)/(2*s*2*_),m=(d*d-s*s-4*f)/(2*d*2*_),p=Math.log(Math.sqrt(h*h+1)-h),y=Math.log(Math.sqrt(m*m+1)-m);r=(y-p)/Wr,n=function(t){var e,n=t*r,o=zr(p),u=s/(2*_)*(o*(e=Wr*n+p,((e=Math.exp(2*e))-1)/(e+1))-function(t){return((t=Math.exp(t))-1/t)/2}(p));return[a+u*c,i+u*l,s*o/zr(Wr*n+p)]}}return n.duration=1e3*r,n};function Cr(t){return function(e,n){var r=t((e=kn(e)).h,(n=kn(n)).h),a=lr(e.s,n.s),i=lr(e.l,n.l),s=lr(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=a(t),e.l=i(t),e.opacity=s(t),e+""}}}var Rr=Cr(dr),Ur=Cr(lr);function Ir(t,e){var n=lr((t=Fn(t)).l,(e=Fn(e)).l),r=lr(t.a,e.a),a=lr(t.b,e.b),i=lr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}function Jr(t){return function(e,n){var r=t((e=Bn(e)).h,(n=Bn(n)).h),a=lr(e.c,n.c),i=lr(e.l,n.l),s=lr(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=a(t),e.l=i(t),e.opacity=s(t),e+""}}}var qr=Jr(dr),Gr=Jr(lr);function Br(t){return function e(n){function r(e,r){var a=t((e=nr(e)).h,(r=nr(r)).h),i=lr(e.s,r.s),s=lr(e.l,r.l),o=lr(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=s(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,r.gamma=e,r}(1)}var Vr=Br(dr),$r=Br(lr);function Zr(t,e){for(var n=0,r=e.length-1,a=e[0],i=new Array(r<0?0:r);n<r;)i[n]=t(a,a=e[++n]);return function(t){var e=Math.max(0,Math.min(r-1,Math.floor(t*=r)));return i[e](t-e)}}var Kr,Xr,Qr=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},ta=0,ea=0,na=0,ra=1e3,aa=0,ia=0,sa=0,oa="object"==typeof performance&&performance.now?performance:Date,ua="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function da(){return ia||(ua(ca),ia=oa.now()+sa)}function ca(){ia=0}function la(){this._call=this._time=this._next=null}function fa(t,e,n){var r=new la;return r.restart(t,e,n),r}function _a(){da(),++ta;for(var t,e=Kr;e;)(t=ia-e._time)>=0&&e._call.call(null,t),e=e._next;--ta}function ha(){ia=(aa=oa.now())+sa,ta=ea=0;try{_a()}finally{ta=0,function(){var t,e,n=Kr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Kr=e);Xr=t,pa(r)}(),ia=0}}function ma(){var t=oa.now(),e=t-aa;e>ra&&(sa-=e,aa=t)}function pa(t){ta||(ea&&(ea=clearTimeout(ea)),t-ia>24?(t<1/0&&(ea=setTimeout(ha,t-oa.now()-sa)),na&&(na=clearInterval(na))):(na||(aa=oa.now(),na=setInterval(ma,ra)),ta=1,ua(ha)))}la.prototype=fa.prototype={constructor:la,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?da():+n)+(null==e?0:+e),this._next||Xr===this||(Xr?Xr._next=this:Kr=this,Xr=this),this._call=t,this._time=n,pa()},stop:function(){this._call&&(this._call=null,this._time=1/0,pa())}};var ya=function(t,e,n){var r=new la;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},Ma=function(t,e,n){var r=new la,a=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?da():+n,r.restart((function i(s){s+=a,r.restart(i,a+=e,n),t(s)}),e,n),r)},ga=mt("start","end","cancel","interrupt"),La=[],va=0,Ya=1,ba=2,wa=3,ka=4,Da=5,Ta=6,xa=function(t,e,n,r,a,i){var s=t.__transition;if(s){if(n in s)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(u){var d,c,l,f;if(n.state!==Ya)return o();for(d in a)if((f=a[d]).name===n.name){if(f.state===wa)return ya(i);f.state===ka?(f.state=Ta,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete a[d]):+d<e&&(f.state=Ta,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete a[d])}if(ya((function(){n.state===wa&&(n.state=ka,n.timer.restart(s,n.delay,n.time),s(u))})),n.state=ba,n.on.call("start",t,t.__data__,n.index,n.group),n.state===ba){for(n.state=wa,r=new Array(l=n.tween.length),d=0,c=-1;d<l;++d)(f=n.tween[d].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function s(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=Da,1),i=-1,s=r.length;++i<s;)r[i].call(t,a);n.state===Da&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var r in n.state=Ta,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=fa((function(t){n.state=Ya,n.timer.restart(i,n.delay,n.time),n.delay<=t&&i(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:a,on:ga,tween:La,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:va})};function Sa(t,e){var n=ja(t,e);if(n.state>va)throw new Error("too late; already scheduled");return n}function Ha(t,e){var n=ja(t,e);if(n.state>wa)throw new Error("too late; already running");return n}function ja(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var Aa=function(t,e){var n,r,a,i=t.__transition,s=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>ba&&n.state<Da,n.state=Ta,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):s=!1;s&&delete t.__transition}};function Pa(t,e){var n,r;return function(){var a=Ha(this,t),i=a.tween;if(i!==n)for(var s=0,o=(r=n=i).length;s<o;++s)if(r[s].name===e){(r=r.slice()).splice(s,1);break}a.tween=r}}function Ea(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Ha(this,t),s=i.tween;if(s!==r){a=(r=s).slice();for(var o={name:e,value:n},u=0,d=a.length;u<d;++u)if(a[u].name===e){a[u]=o;break}u===d&&a.push(o)}i.tween=a}}function Oa(t,e,n){var r=t._id;return t.each((function(){var t=Ha(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return ja(t,r).value[e]}}var Na=function(t,e){var n;return("number"==typeof e?Mr:e instanceof hn?fr:(n=hn(e))?(e=n,fr):Dr)(t,e)};function Wa(t){return function(){this.removeAttribute(t)}}function za(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Fa(t,e,n){var r,a,i=n+"";return function(){var s=this.getAttribute(t);return s===i?null:s===r?a:a=e(r=s,n)}}function Ca(t,e,n){var r,a,i=n+"";return function(){var s=this.getAttributeNS(t.space,t.local);return s===i?null:s===r?a:a=e(r=s,n)}}function Ra(t,e,n){var r,a,i;return function(){var s,o,u=n(this);if(null!=u)return(s=this.getAttribute(t))===(o=u+"")?null:s===r&&o===a?i:(a=o,i=e(r=s,u));this.removeAttribute(t)}}function Ua(t,e,n){var r,a,i;return function(){var s,o,u=n(this);if(null!=u)return(s=this.getAttributeNS(t.space,t.local))===(o=u+"")?null:s===r&&o===a?i:(a=o,i=e(r=s,u));this.removeAttributeNS(t.space,t.local)}}function Ia(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,a)),n}return a._value=e,a}function Ja(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,a)),n}return a._value=e,a}function qa(t,e){return function(){Sa(this,t).delay=+e.apply(this,arguments)}}function Ga(t,e){return e=+e,function(){Sa(this,t).delay=e}}function Ba(t,e){return function(){Ha(this,t).duration=+e.apply(this,arguments)}}function Va(t,e){return e=+e,function(){Ha(this,t).duration=e}}function $a(t,e){if("function"!=typeof e)throw new Error;return function(){Ha(this,t).ease=e}}function Za(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Sa:Ha;return function(){var s=i(this,t),o=s.on;o!==r&&(a=(r=o).copy()).on(e,n),s.on=a}}var Ka=Te.prototype.constructor;function Xa(t){return function(){this.style.removeProperty(t)}}function Qa(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&function(t,e,n){return function(r){this.style.setProperty(t,e(r),n)}}(t,i,n)),r}return i._value=e,i}var ti=0;function ei(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function ni(t){return Te().transition(t)}function ri(){return++ti}var ai=Te.prototype;function ii(t){return+t}function si(t){return t*t}function oi(t){return t*(2-t)}function ui(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function di(t){return t*t*t}function ci(t){return--t*t*t+1}function li(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}ei.prototype=ni.prototype={constructor:ei,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=bt(t));for(var r=this._groups,a=r.length,i=new Array(a),s=0;s<a;++s)for(var o,u,d=r[s],c=d.length,l=i[s]=new Array(c),f=0;f<c;++f)(o=d[f])&&(u=t.call(o,o.__data__,f,d))&&("__data__"in o&&(u.__data__=o.__data__),l[f]=u,xa(l[f],e,n,f,l,ja(o,n)));return new ei(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=kt(t));for(var r=this._groups,a=r.length,i=[],s=[],o=0;o<a;++o)for(var u,d=r[o],c=d.length,l=0;l<c;++l)if(u=d[l]){for(var f,_=t.call(u,u.__data__,l,d),h=ja(u,n),m=0,p=_.length;m<p;++m)(f=_[m])&&xa(f,e,n,m,_,h);i.push(_),s.push(u)}return new ei(i,s,e,n)},filter:function(t){"function"!=typeof t&&(t=Dt(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,s=e[a],o=s.length,u=r[a]=[],d=0;d<o;++d)(i=s[d])&&t.call(i,i.__data__,d,s)&&u.push(i);return new ei(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),s=new Array(r),o=0;o<i;++o)for(var u,d=e[o],c=n[o],l=d.length,f=s[o]=new Array(l),_=0;_<l;++_)(u=d[_]||c[_])&&(f[_]=u);for(;o<r;++o)s[o]=e[o];return new ei(s,this._parents,this._name,this._id)},selection:function(){return new Ka(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ri(),r=this._groups,a=r.length,i=0;i<a;++i)for(var s,o=r[i],u=o.length,d=0;d<u;++d)if(s=o[d]){var c=ja(s,e);xa(s,t,n,d,o,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ei(r,this._parents,t,n)},call:ai.call,nodes:ai.nodes,node:ai.node,size:ai.size,empty:ai.empty,each:ai.each,on:function(t,e){var n=this._id;return arguments.length<2?ja(this.node(),n).on.on(t):this.each(Za(n,t,e))},attr:function(t,e){var n=Mt(t),r="transform"===n?Nr:Na;return this.attrTween(t,"function"==typeof e?(n.local?Ua:Ra)(n,r,Oa(this,"attr."+t,e)):null==e?(n.local?za:Wa)(n):(n.local?Ca:Fa)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Mt(t);return this.tween(n,(r.local?Ia:Ja)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Or:Na;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=It(this,t),s=(this.style.removeProperty(t),It(this,t));return i===s?null:i===n&&s===r?a:a=e(n=i,r=s)}}(t,r)).on("end.style."+t,Xa(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var s=It(this,t),o=n(this),u=o+"";return null==o&&(this.style.removeProperty(t),u=o=It(this,t)),s===u?null:s===r&&u===a?i:(a=u,i=e(r=s,o))}}(t,r,Oa(this,"style."+t,e))).each(function(t,e){var n,r,a,i,s="style."+e,o="end."+s;return function(){var u=Ha(this,t),d=u.on,c=null==u.value[s]?i||(i=Xa(e)):void 0;d===n&&a===c||(r=(n=d).copy()).on(o,a=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var s=It(this,t);return s===i?null:s===r?a:a=e(r=s,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Qa(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Oa(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=ja(this.node(),n).tween,i=0,s=a.length;i<s;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?Pa:Ea)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?qa:Ga)(e,t)):ja(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Ba:Va)(e,t)):ja(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each($a(e,t)):ja(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,s){var o={value:s},u={value:function(){0==--a&&i()}};n.each((function(){var n=Ha(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(o),e._.interrupt.push(o),e._.end.push(u)),n.on=e}))}))}};var fi=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),_i=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),hi=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),mi=Math.PI,pi=mi/2;function yi(t){return 1-Math.cos(t*pi)}function Mi(t){return Math.sin(t*pi)}function gi(t){return(1-Math.cos(mi*t))/2}function Li(t){return Math.pow(2,10*t-10)}function vi(t){return 1-Math.pow(2,-10*t)}function Yi(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function bi(t){return 1-Math.sqrt(1-t*t)}function wi(t){return Math.sqrt(1- --t*t)}function ki(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var Di=4/11,Ti=6/11,xi=8/11,Si=.75,Hi=9/11,ji=10/11,Ai=.9375,Pi=21/22,Ei=63/64,Oi=1/Di/Di;function Ni(t){return 1-Wi(1-t)}function Wi(t){return(t=+t)<Di?Oi*t*t:t<xi?Oi*(t-=Ti)*t+Si:t<ji?Oi*(t-=Hi)*t+Ai:Oi*(t-=Pi)*t+Ei}function zi(t){return((t*=2)<=1?1-Wi(1-t):Wi(t-1)+1)/2}var Fi=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),Ci=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),Ri=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),Ui=2*Math.PI,Ii=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Ui);function a(t){return e*Math.pow(2,10*--t)*Math.sin((r-t)/n)}return a.amplitude=function(e){return t(e,n*Ui)},a.period=function(n){return t(e,n)},a}(1,.3),Ji=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Ui);function a(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/n)}return a.amplitude=function(e){return t(e,n*Ui)},a.period=function(n){return t(e,n)},a}(1,.3),qi=function t(e,n){var r=Math.asin(1/(e=Math.max(1,e)))*(n/=Ui);function a(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((r-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((r+t)/n))/2}return a.amplitude=function(e){return t(e,n*Ui)},a.period=function(n){return t(e,n)},a}(1,.3),Gi={time:null,delay:0,duration:250,ease:li};function Bi(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Gi.time=da(),Gi;return n}Te.prototype.interrupt=function(t){return this.each((function(){Aa(this,t)}))},Te.prototype.transition=function(t){var e,n;t instanceof ei?(e=t._id,t=t._name):(e=ri(),(n=Gi).time=da(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var s,o=r[i],u=o.length,d=0;d<u;++d)(s=o[d])&&xa(s,t,e,d,o,n||Bi(s,e));return new ei(r,this._parents,t,e)};var Vi=[null],$i=function(t,e){var n,r,a=t.__transition;if(a)for(r in e=null==e?null:e+"",a)if((n=a[r]).state>Ya&&n.name===e)return new ei([[t]],Vi,e,+r);return null},Zi=function(t){return function(){return t}},Ki=function(t,e,n){this.target=t,this.type=e,this.selection=n};function Xi(){he.stopImmediatePropagation()}var Qi=function(){he.preventDefault(),he.stopImmediatePropagation()},ts={name:"drag"},es={name:"space"},ns={name:"handle"},rs={name:"center"};function as(t){return[+t[0],+t[1]]}function is(t){return[as(t[0]),as(t[1])]}var ss={name:"x",handles:["w","e"].map(hs),input:function(t,e){return null==t?null:[[+t[0],e[0][1]],[+t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},os={name:"y",handles:["n","s"].map(hs),input:function(t,e){return null==t?null:[[e[0][0],+t[0]],[e[1][0],+t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},us={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(hs),input:function(t){return null==t?null:is(t)},output:function(t){return t}},ds={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},cs={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},ls={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},fs={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},_s={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function hs(t){return{type:t}}function ms(){return!he.ctrlKey&&!he.button}function ps(){var t=this.ownerSVGElement||this;return t.hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function ys(){return navigator.maxTouchPoints||"ontouchstart"in this}function Ms(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function gs(t){var e=t.__brush;return e?e.dim.output(e.selection):null}function Ls(){return bs(ss)}function vs(){return bs(os)}var Ys=function(){return bs(us)};function bs(t){var e,n=ps,r=ms,a=ys,i=!0,s=mt(u,"start","brush","end"),o=6;function u(e){var n=e.property("__brush",m).selectAll(".overlay").data([hs("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",ds.overlay).merge(n).each((function(){var t=Ms(this).extent;xe(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),e.selectAll(".selection").data([hs("selection")]).enter().append("rect").attr("class","selection").attr("cursor",ds.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=e.selectAll(".handle").data(t.handles,(function(t){return t.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return ds[t.type]})),e.each(d).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(a).on("touchstart.brush",f).on("touchmove.brush",_).on("touchend.brush touchcancel.brush",h).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){var t=xe(this),e=Ms(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-o/2:e[0][0]-o/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-o/2:e[0][1]-o/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+o:o})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+o:o}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,e,n){return!n&&t.__brush.emitter||new l(t,e)}function l(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function f(){if((!e||he.touches)&&r.apply(this,arguments)){var n,a,s,o,u,l,f,_,h,m,p,y,M=this,g=he.target.__data__.type,L="selection"===(i&&he.metaKey?g="overlay":g)?ts:i&&he.altKey?rs:ns,v=t===os?null:fs[g],Y=t===ss?null:_s[g],b=Ms(M),w=b.extent,k=b.selection,D=w[0][0],T=w[0][1],x=w[1][0],S=w[1][1],H=0,j=0,A=v&&Y&&i&&he.shiftKey,P=he.touches?(y=he.changedTouches[0].identifier,function(t){return We(t,he.touches,y)}):Oe,E=P(M),O=E,N=c(M,arguments,!0).beforestart();"overlay"===g?(k&&(h=!0),b.selection=k=[[n=t===os?D:E[0],s=t===ss?T:E[1]],[u=t===os?x:n,f=t===ss?S:s]]):(n=k[0][0],s=k[0][1],u=k[1][0],f=k[1][1]),a=n,o=s,l=u,_=f;var W=xe(M).attr("pointer-events","none"),z=W.selectAll(".overlay").attr("cursor",ds[g]);if(he.touches)N.moved=C,N.ended=U;else{var F=xe(he.view).on("mousemove.brush",C,!0).on("mouseup.brush",U,!0);i&&F.on("keydown.brush",(function(){switch(he.keyCode){case 16:A=v&&Y;break;case 18:L===ns&&(v&&(u=l-H*v,n=a+H*v),Y&&(f=_-j*Y,s=o+j*Y),L=rs,R());break;case 32:L!==ns&&L!==rs||(v<0?u=l-H:v>0&&(n=a-H),Y<0?f=_-j:Y>0&&(s=o-j),L=es,z.attr("cursor",ds.selection),R());break;default:return}Qi()}),!0).on("keyup.brush",(function(){switch(he.keyCode){case 16:A&&(m=p=A=!1,R());break;case 18:L===rs&&(v<0?u=l:v>0&&(n=a),Y<0?f=_:Y>0&&(s=o),L=ns,R());break;case 32:L===es&&(he.altKey?(v&&(u=l-H*v,n=a+H*v),Y&&(f=_-j*Y,s=o+j*Y),L=rs):(v<0?u=l:v>0&&(n=a),Y<0?f=_:Y>0&&(s=o),L=ns),z.attr("cursor",ds[g]),R());break;default:return}Qi()}),!0),Re(he.view)}Xi(),Aa(M),d.call(M),N.start()}function C(){var t=P(M);!A||m||p||(Math.abs(t[0]-O[0])>Math.abs(t[1]-O[1])?p=!0:m=!0),O=t,h=!0,Qi(),R()}function R(){var t;switch(H=O[0]-E[0],j=O[1]-E[1],L){case es:case ts:v&&(H=Math.max(D-n,Math.min(x-u,H)),a=n+H,l=u+H),Y&&(j=Math.max(T-s,Math.min(S-f,j)),o=s+j,_=f+j);break;case ns:v<0?(H=Math.max(D-n,Math.min(x-n,H)),a=n+H,l=u):v>0&&(H=Math.max(D-u,Math.min(x-u,H)),a=n,l=u+H),Y<0?(j=Math.max(T-s,Math.min(S-s,j)),o=s+j,_=f):Y>0&&(j=Math.max(T-f,Math.min(S-f,j)),o=s,_=f+j);break;case rs:v&&(a=Math.max(D,Math.min(x,n-H*v)),l=Math.max(D,Math.min(x,u+H*v))),Y&&(o=Math.max(T,Math.min(S,s-j*Y)),_=Math.max(T,Math.min(S,f+j*Y)))}l<a&&(v*=-1,t=n,n=u,u=t,t=a,a=l,l=t,g in cs&&z.attr("cursor",ds[g=cs[g]])),_<o&&(Y*=-1,t=s,s=f,f=t,t=o,o=_,_=t,g in ls&&z.attr("cursor",ds[g=ls[g]])),b.selection&&(k=b.selection),m&&(a=k[0][0],l=k[1][0]),p&&(o=k[0][1],_=k[1][1]),k[0][0]===a&&k[0][1]===o&&k[1][0]===l&&k[1][1]===_||(b.selection=[[a,o],[l,_]],d.call(M),N.brush())}function U(){if(Xi(),he.touches){if(he.touches.length)return;e&&clearTimeout(e),e=setTimeout((function(){e=null}),500)}else Ue(he.view,h),F.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);W.attr("pointer-events","all"),z.attr("cursor",ds.overlay),b.selection&&(k=b.selection),function(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}(k)&&(b.selection=null,d.call(M)),N.end()}}function _(){c(this,arguments).moved()}function h(){c(this,arguments).ended()}function m(){var e=this.__brush||{selection:null};return e.extent=is(n.apply(this,arguments)),e.dim=t,e}return u.move=function(e,n){e.selection?e.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var e=this,r=e.__brush,a=c(e,arguments),i=r.selection,s=t.input("function"==typeof n?n.apply(this,arguments):n,r.extent),o=Tr(i,s);function u(t){r.selection=1===t&&null===s?null:o(t),d.call(e),a.brush()}return null!==i&&null!==s?u:u(1)})):e.each((function(){var e=this,r=arguments,a=e.__brush,i=t.input("function"==typeof n?n.apply(e,r):n,a.extent),s=c(e,r).beforestart();Aa(e),a.selection=null===i?null:i,d.call(e),s.start().brush().end()}))},u.clear=function(t){u.move(t,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(e){Le(new Ki(u,e,t.output(this.state.selection)),s.apply,s,[e,this.that,this.args])}},u.extent=function(t){return arguments.length?(n="function"==typeof t?t:Zi(is(t)),u):n},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:Zi(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.keyModifiers=function(t){return arguments.length?(i=!!t,u):i},u.on=function(){var t=s.on.apply(s,arguments);return t===s?u:t},u}var ws=Math.cos,ks=Math.sin,Ds=Math.PI,Ts=Ds/2,xs=2*Ds,Ss=Math.max;function Hs(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}var js=function(){var t=0,e=null,n=null,r=null;function a(a){var i,s,o,u,d,c,l=a.length,f=[],_=Y(l),h=[],m=[],p=m.groups=new Array(l),y=new Array(l*l);for(i=0,d=-1;++d<l;){for(s=0,c=-1;++c<l;)s+=a[d][c];f.push(s),h.push(Y(l)),i+=s}for(e&&_.sort((function(t,n){return e(f[t],f[n])})),n&&h.forEach((function(t,e){t.sort((function(t,r){return n(a[e][t],a[e][r])}))})),u=(i=Ss(0,xs-t*l)/i)?t:xs/l,s=0,d=-1;++d<l;){for(o=s,c=-1;++c<l;){var M=_[d],g=h[M][c],L=a[M][g],v=s,b=s+=L*i;y[g*l+M]={index:M,subindex:g,startAngle:v,endAngle:b,value:L}}p[M]={index:M,startAngle:o,endAngle:s,value:f[M]},s+=u}for(d=-1;++d<l;)for(c=d-1;++c<l;){var w=y[c*l+d],k=y[d*l+c];(w.value||k.value)&&m.push(w.value<k.value?{source:k,target:w}:{source:w,target:k})}return r?m.sort(r):m}return a.padAngle=function(e){return arguments.length?(t=Ss(0,e),a):t},a.sortGroups=function(t){return arguments.length?(e=t,a):e},a.sortSubgroups=function(t){return arguments.length?(n=t,a):n},a.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Hs(t))._=t,a):r&&r._},a},As=Array.prototype.slice,Ps=function(t){return function(){return t}},Es=Math.PI,Os=2*Es,Ns=Os-1e-6;function Ws(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function zs(){return new Ws}Ws.prototype=zs.prototype={constructor:Ws,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,s=this._y1,o=n-t,u=r-e,d=i-t,c=s-e,l=d*d+c*c;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(c*o-u*d)>1e-6&&a){var f=n-i,_=r-s,h=o*o+u*u,m=f*f+_*_,p=Math.sqrt(h),y=Math.sqrt(l),M=a*Math.tan((Es-Math.acos((h+l-m)/(2*p*y)))/2),g=M/y,L=M/p;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*d)+","+(e+g*c)),this._+="A"+a+","+a+",0,0,"+ +(c*f>d*_)+","+(this._x1=t+L*o)+","+(this._y1=e+L*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var s=(n=+n)*Math.cos(r),o=n*Math.sin(r),u=t+s,d=e+o,c=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+d:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-d)>1e-6)&&(this._+="L"+u+","+d),n&&(l<0&&(l=l%Os+Os),l>Ns?this._+="A"+n+","+n+",0,1,"+c+","+(t-s)+","+(e-o)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=d):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=Es)+","+c+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Fs=zs;function Cs(t){return t.source}function Rs(t){return t.target}function Us(t){return t.radius}function Is(t){return t.startAngle}function Js(t){return t.endAngle}var qs=function(){var t=Cs,e=Rs,n=Us,r=Is,a=Js,i=null;function s(){var s,o=As.call(arguments),u=t.apply(this,o),d=e.apply(this,o),c=+n.apply(this,(o[0]=u,o)),l=r.apply(this,o)-Ts,f=a.apply(this,o)-Ts,_=c*ws(l),h=c*ks(l),m=+n.apply(this,(o[0]=d,o)),p=r.apply(this,o)-Ts,y=a.apply(this,o)-Ts;if(i||(i=s=Fs()),i.moveTo(_,h),i.arc(0,0,c,l,f),l===p&&f===y||(i.quadraticCurveTo(0,0,m*ws(p),m*ks(p)),i.arc(0,0,m,p,y)),i.quadraticCurveTo(0,0,_,h),i.closePath(),s)return i=null,s+""||null}return s.radius=function(t){return arguments.length?(n="function"==typeof t?t:Ps(+t),s):n},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Ps(+t),s):r},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Ps(+t),s):a},s.source=function(e){return arguments.length?(t=e,s):t},s.target=function(t){return arguments.length?(e=t,s):e},s.context=function(t){return arguments.length?(i=null==t?null:t,s):i},s};function Gs(){}function Bs(t,e){var n=new Gs;if(t instanceof Gs)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var s in t)n.set(s,t[s]);return n}Gs.prototype=Bs.prototype={constructor:Gs,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var Vs=Bs,$s=function(){var t,e,n,r=[],a=[];function i(n,a,s,o){if(a>=r.length)return null!=t&&n.sort(t),null!=e?e(n):n;for(var u,d,c,l=-1,f=n.length,_=r[a++],h=Vs(),m=s();++l<f;)(c=h.get(u=_(d=n[l])+""))?c.push(d):h.set(u,[d]);return h.each((function(t,e){o(m,e,i(t,a,s,o))})),m}return n={object:function(t){return i(t,0,Zs,Ks)},map:function(t){return i(t,0,Xs,Qs)},entries:function(t){return function t(n,i){if(++i>r.length)return n;var s,o=a[i-1];return null!=e&&i>=r.length?s=n.entries():(s=[],n.each((function(e,n){s.push({key:n,values:t(e,i)})}))),null!=o?s.sort((function(t,e){return o(t.key,e.key)})):s}(i(t,0,Xs,Qs),0)},key:function(t){return r.push(t),n},sortKeys:function(t){return a[r.length-1]=t,n},sortValues:function(e){return t=e,n},rollup:function(t){return e=t,n}}};function Zs(){return{}}function Ks(t,e,n){t[e]=n}function Xs(){return Vs()}function Qs(t,e,n){t.set(e,n)}function to(){}var eo=Vs.prototype;function no(t,e){var n=new to;if(t instanceof to)t.each((function(t){n.add(t)}));else if(t){var r=-1,a=t.length;if(null==e)for(;++r<a;)n.add(t[r]);else for(;++r<a;)n.add(e(t[r],r,t))}return n}to.prototype=no.prototype={constructor:to,has:eo.has,add:function(t){return this["$"+(t+="")]=t,this},remove:eo.remove,clear:eo.clear,values:eo.keys,size:eo.size,empty:eo.empty,each:eo.each};var ro=no,ao=function(t){var e=[];for(var n in t)e.push(n);return e},io=function(t){var e=[];for(var n in t)e.push(t[n]);return e},so=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},oo=Array.prototype.slice,uo=function(t,e){return t-e},co=function(t){for(var e=0,n=t.length,r=t[n-1][1]*t[0][0]-t[n-1][0]*t[0][1];++e<n;)r+=t[e-1][1]*t[e][0]-t[e-1][0]*t[e][1];return r},lo=function(t){return function(){return t}},fo=function(t,e){for(var n,r=-1,a=e.length;++r<a;)if(n=_o(t,e[r]))return n;return 0};function _o(t,e){for(var n=e[0],r=e[1],a=-1,i=0,s=t.length,o=s-1;i<s;o=i++){var u=t[i],d=u[0],c=u[1],l=t[o],f=l[0],_=l[1];if(ho(u,l,e))return 0;c>r!=_>r&&n<(f-d)*(r-c)/(_-c)+d&&(a=-a)}return a}function ho(t,e,n){var r,a,i,s;return function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])==(n[0]-t[0])*(e[1]-t[1])}(t,e,n)&&(a=t[r=+(t[0]===e[0])],i=n[r],s=e[r],a<=i&&i<=s||s<=i&&i<=a)}var mo=function(){},po=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],yo=function(){var t=1,e=1,n=S,r=o;function a(t){var e=n(t);if(Array.isArray(e))e=e.slice().sort(uo);else{var r=p(t),a=r[0],s=r[1];e=x(a,s,e),e=Y(Math.floor(a/e)*e,Math.floor(s/e)*e,e)}return e.map((function(e){return i(t,e)}))}function i(n,a){var i=[],o=[];return function(n,r,a){var i,o,u,d,c,l,f=new Array,_=new Array;i=o=-1,d=n[0]>=r,po[d<<1].forEach(h);for(;++i<t-1;)u=d,d=n[i+1]>=r,po[u|d<<1].forEach(h);po[d<<0].forEach(h);for(;++o<e-1;){for(i=-1,d=n[o*t+t]>=r,c=n[o*t]>=r,po[d<<1|c<<2].forEach(h);++i<t-1;)u=d,d=n[o*t+t+i+1]>=r,l=c,c=n[o*t+i+1]>=r,po[u|d<<1|c<<2|l<<3].forEach(h);po[d|c<<3].forEach(h)}i=-1,c=n[o*t]>=r,po[c<<2].forEach(h);for(;++i<t-1;)l=c,c=n[o*t+i+1]>=r,po[c<<2|l<<3].forEach(h);function h(t){var e,n,r=[t[0][0]+i,t[0][1]+o],u=[t[1][0]+i,t[1][1]+o],d=s(r),c=s(u);(e=_[d])?(n=f[c])?(delete _[e.end],delete f[n.start],e===n?(e.ring.push(u),a(e.ring)):f[e.start]=_[n.end]={start:e.start,end:n.end,ring:e.ring.concat(n.ring)}):(delete _[e.end],e.ring.push(u),_[e.end=c]=e):(e=f[c])?(n=_[d])?(delete f[e.start],delete _[n.end],e===n?(e.ring.push(u),a(e.ring)):f[n.start]=_[e.end]={start:n.start,end:e.end,ring:n.ring.concat(e.ring)}):(delete f[e.start],e.ring.unshift(r),f[e.start=d]=e):f[d]=_[c]={start:d,end:c,ring:[r,u]}}po[c<<3].forEach(h)}(n,a,(function(t){r(t,n,a),co(t)>0?i.push([t]):o.push(t)})),o.forEach((function(t){for(var e,n=0,r=i.length;n<r;++n)if(-1!==fo((e=i[n])[0],t))return void e.push(t)})),{type:"MultiPolygon",value:a,coordinates:i}}function s(e){return 2*e[0]+e[1]*(t+1)*4}function o(n,r,a){n.forEach((function(n){var i,s=n[0],o=n[1],u=0|s,d=0|o,c=r[d*t+u];s>0&&s<t&&u===s&&(i=r[d*t+u-1],n[0]=s+(a-i)/(c-i)-.5),o>0&&o<e&&d===o&&(i=r[(d-1)*t+u],n[1]=o+(a-i)/(c-i)-.5)}))}return a.contour=i,a.size=function(n){if(!arguments.length)return[t,e];var r=Math.ceil(n[0]),i=Math.ceil(n[1]);if(!(r>0&&i>0))throw new Error("invalid size");return t=r,e=i,a},a.thresholds=function(t){return arguments.length?(n="function"==typeof t?t:Array.isArray(t)?lo(oo.call(t)):lo(t),a):n},a.smooth=function(t){return arguments.length?(r=t?o:mo,a):r===o},a};function Mo(t,e,n){for(var r=t.width,a=t.height,i=1+(n<<1),s=0;s<a;++s)for(var o=0,u=0;o<r+n;++o)o<r&&(u+=t.data[o+s*r]),o>=n&&(o>=i&&(u-=t.data[o-i+s*r]),e.data[o-n+s*r]=u/Math.min(o+1,r-1+i-o,i))}function go(t,e,n){for(var r=t.width,a=t.height,i=1+(n<<1),s=0;s<r;++s)for(var o=0,u=0;o<a+n;++o)o<a&&(u+=t.data[s+o*r]),o>=n&&(o>=i&&(u-=t.data[s+(o-i)*r]),e.data[s+(o-n)*r]=u/Math.min(o+1,a-1+i-o,i))}function Lo(t){return t[0]}function vo(t){return t[1]}function Yo(){return 1}var bo=function(){var t=Lo,e=vo,n=Yo,r=960,a=500,i=20,s=2,o=3*i,u=r+2*o>>s,d=a+2*o>>s,c=lo(20);function l(r){var a=new Float32Array(u*d),l=new Float32Array(u*d);r.forEach((function(r,i,c){var l=+t(r,i,c)+o>>s,f=+e(r,i,c)+o>>s,_=+n(r,i,c);l>=0&&l<u&&f>=0&&f<d&&(a[l+f*u]+=_)})),Mo({width:u,height:d,data:a},{width:u,height:d,data:l},i>>s),go({width:u,height:d,data:l},{width:u,height:d,data:a},i>>s),Mo({width:u,height:d,data:a},{width:u,height:d,data:l},i>>s),go({width:u,height:d,data:l},{width:u,height:d,data:a},i>>s),Mo({width:u,height:d,data:a},{width:u,height:d,data:l},i>>s),go({width:u,height:d,data:l},{width:u,height:d,data:a},i>>s);var _=c(a);if(!Array.isArray(_)){var h=E(a);_=x(0,h,_),(_=Y(0,Math.floor(h/_)*_,_)).shift()}return yo().thresholds(_).size([u,d])(a).map(f)}function f(t){return t.value*=Math.pow(2,-2*s),t.coordinates.forEach(_),t}function _(t){t.forEach(h)}function h(t){t.forEach(m)}function m(t){t[0]=t[0]*Math.pow(2,s)-o,t[1]=t[1]*Math.pow(2,s)-o}function p(){return u=r+2*(o=3*i)>>s,d=a+2*o>>s,l}return l.x=function(e){return arguments.length?(t="function"==typeof e?e:lo(+e),l):t},l.y=function(t){return arguments.length?(e="function"==typeof t?t:lo(+t),l):e},l.weight=function(t){return arguments.length?(n="function"==typeof t?t:lo(+t),l):n},l.size=function(t){if(!arguments.length)return[r,a];var e=Math.ceil(t[0]),n=Math.ceil(t[1]);if(!(e>=0||e>=0))throw new Error("invalid size");return r=e,a=n,p()},l.cellSize=function(t){if(!arguments.length)return 1<<s;if(!((t=+t)>=1))throw new Error("invalid cell size");return s=Math.floor(Math.log(t)/Math.LN2),p()},l.thresholds=function(t){return arguments.length?(c="function"==typeof t?t:Array.isArray(t)?lo(oo.call(t)):lo(t),l):c},l.bandwidth=function(t){if(!arguments.length)return Math.sqrt(i*(i+1));if(!((t=+t)>=0))throw new Error("invalid bandwidth");return i=Math.round((Math.sqrt(4*t*t+1)-1)/2),p()},l},wo={},ko={},Do=34,To=10,xo=13;function So(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function Ho(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function jo(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function Ao(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),a=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+jo(-e,6):e>9999?"+"+jo(e,6):jo(e,4))+"-"+jo(t.getUTCMonth()+1,2)+"-"+jo(t.getUTCDate(),2)+(i?"T"+jo(n,2)+":"+jo(r,2)+":"+jo(a,2)+"."+jo(i,3)+"Z":a?"T"+jo(n,2)+":"+jo(r,2)+":"+jo(a,2)+"Z":r||n?"T"+jo(n,2)+":"+jo(r,2)+"Z":"")}var Po=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,a=[],i=t.length,s=0,o=0,u=i<=0,d=!1;function c(){if(u)return ko;if(d)return d=!1,wo;var e,r,a=s;if(t.charCodeAt(a)===Do){for(;s++<i&&t.charCodeAt(s)!==Do||t.charCodeAt(++s)===Do;);return(e=s)>=i?u=!0:(r=t.charCodeAt(s++))===To?d=!0:r===xo&&(d=!0,t.charCodeAt(s)===To&&++s),t.slice(a+1,e-1).replace(/""/g,'"')}for(;s<i;){if((r=t.charCodeAt(e=s++))===To)d=!0;else if(r===xo)d=!0,t.charCodeAt(s)===To&&++s;else if(r!==n)continue;return t.slice(a,e)}return u=!0,t.slice(a,i)}for(t.charCodeAt(i-1)===To&&--i,t.charCodeAt(i-1)===xo&&--i;(r=c())!==ko;){for(var l=[];r!==wo&&r!==ko;)l.push(r),r=c();e&&null==(l=e(l,o++))||a.push(l)}return a}function a(e,n){return e.map((function(e){return n.map((function(t){return s(e[t])})).join(t)}))}function i(e){return e.map(s).join(t)}function s(t){return null==t?"":t instanceof Date?Ao(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,a,i=r(t,(function(t,r){if(n)return n(t,r-1);a=t,n=e?function(t,e){var n=So(t);return function(r,a){return e(n(r),a,t)}}(t,e):So(t)}));return i.columns=a||[],i},parseRows:r,format:function(e,n){return null==n&&(n=Ho(e)),[n.map(s).join(t)].concat(a(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Ho(t)),a(t,e).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},Eo=Po(","),Oo=Eo.parse,No=Eo.parseRows,Wo=Eo.format,zo=Eo.formatBody,Fo=Eo.formatRows,Co=Po("\t"),Ro=Co.parse,Uo=Co.parseRows,Io=Co.format,Jo=Co.formatBody,qo=Co.formatRows;function Go(t){for(var e in t){var n,r=t[e].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(n=+r)){if(!/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(r))continue;r=new Date(r)}else r=n;else r=null;t[e]=r}return t}function Bo(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.blob()}var Vo=function(t,e){return fetch(t,e).then(Bo)};function $o(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.arrayBuffer()}var Zo=function(t,e){return fetch(t,e).then($o)};function Ko(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Xo=function(t,e){return fetch(t,e).then(Ko)};function Qo(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Xo(e,n).then((function(e){return t(e,r)}))}}function tu(t,e,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var a=Po(t);return Xo(e,n).then((function(t){return a.parse(t,r)}))}var eu=Qo(Oo),nu=Qo(Ro),ru=function(t,e){return new Promise((function(n,r){var a=new Image;for(var i in e)a[i]=e[i];a.onerror=r,a.onload=function(){n(a)},a.src=t}))};function au(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var iu=function(t,e){return fetch(t,e).then(au)};function su(t){return function(e,n){return Xo(e,n).then((function(e){return(new DOMParser).parseFromString(e,t)}))}}var ou=su("application/xml"),uu=su("text/html"),du=su("image/svg+xml"),cu=function(t,e){var n;function r(){var r,a,i=n.length,s=0,o=0;for(r=0;r<i;++r)s+=(a=n[r]).x,o+=a.y;for(s=s/i-t,o=o/i-e,r=0;r<i;++r)(a=n[r]).x-=s,a.y-=o}return null==t&&(t=0),null==e&&(e=0),r.initialize=function(t){n=t},r.x=function(e){return arguments.length?(t=+e,r):t},r.y=function(t){return arguments.length?(e=+t,r):e},r},lu=function(t){return function(){return t}},fu=function(){return 1e-6*(Math.random()-.5)};function _u(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var a,i,s,o,u,d,c,l,f,_=t._root,h={data:r},m=t._x0,p=t._y0,y=t._x1,M=t._y1;if(!_)return t._root=h,t;for(;_.length;)if((d=e>=(i=(m+y)/2))?m=i:y=i,(c=n>=(s=(p+M)/2))?p=s:M=s,a=_,!(_=_[l=c<<1|d]))return a[l]=h,t;if(o=+t._x.call(null,_.data),u=+t._y.call(null,_.data),e===o&&n===u)return h.next=_,a?a[l]=h:t._root=h,t;do{a=a?a[l]=new Array(4):t._root=new Array(4),(d=e>=(i=(m+y)/2))?m=i:y=i,(c=n>=(s=(p+M)/2))?p=s:M=s}while((l=c<<1|d)==(f=(u>=s)<<1|o>=i));return a[f]=_,a[l]=h,t}var hu=function(t,e,n,r,a){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=a};function mu(t){return t[0]}function pu(t){return t[1]}function yu(t,e,n){var r=new Mu(null==e?mu:e,null==n?pu:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Mu(t,e,n,r,a,i){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=a,this._y1=i,this._root=void 0}function gu(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var Lu=yu.prototype=Mu.prototype;function vu(t){return t.x+t.vx}function Yu(t){return t.y+t.vy}Lu.copy=function(){var t,e,n=new Mu(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=gu(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var a=0;a<4;++a)(e=r.source[a])&&(e.length?t.push({source:e,target:r.target[a]=new Array(4)}):r.target[a]=gu(e));return n},Lu.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return _u(this.cover(e,n),e,n,t)},Lu.addAll=function(t){var e,n,r,a,i=t.length,s=new Array(i),o=new Array(i),u=1/0,d=1/0,c=-1/0,l=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(a=+this._y.call(null,e))||(s[n]=r,o[n]=a,r<u&&(u=r),r>c&&(c=r),a<d&&(d=a),a>l&&(l=a));if(u>c||d>l)return this;for(this.cover(u,d).cover(c,l),n=0;n<i;++n)_u(this,s[n],o[n],t[n]);return this},Lu.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,a=this._x1,i=this._y1;if(isNaN(n))a=(n=Math.floor(t))+1,i=(r=Math.floor(e))+1;else{for(var s,o,u=a-n,d=this._root;n>t||t>=a||r>e||e>=i;)switch(o=(e<r)<<1|t<n,(s=new Array(4))[o]=d,d=s,u*=2,o){case 0:a=n+u,i=r+u;break;case 1:n=a-u,i=r+u;break;case 2:a=n+u,r=i-u;break;case 3:n=a-u,r=i-u}this._root&&this._root.length&&(this._root=d)}return this._x0=n,this._y0=r,this._x1=a,this._y1=i,this},Lu.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Lu.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Lu.find=function(t,e,n){var r,a,i,s,o,u,d,c=this._x0,l=this._y0,f=this._x1,_=this._y1,h=[],m=this._root;for(m&&h.push(new hu(m,c,l,f,_)),null==n?n=1/0:(c=t-n,l=e-n,f=t+n,_=e+n,n*=n);u=h.pop();)if(!(!(m=u.node)||(a=u.x0)>f||(i=u.y0)>_||(s=u.x1)<c||(o=u.y1)<l))if(m.length){var p=(a+s)/2,y=(i+o)/2;h.push(new hu(m[3],p,y,s,o),new hu(m[2],a,y,p,o),new hu(m[1],p,i,s,y),new hu(m[0],a,i,p,y)),(d=(e>=y)<<1|t>=p)&&(u=h[h.length-1],h[h.length-1]=h[h.length-1-d],h[h.length-1-d]=u)}else{var M=t-+this._x.call(null,m.data),g=e-+this._y.call(null,m.data),L=M*M+g*g;if(L<n){var v=Math.sqrt(n=L);c=t-v,l=e-v,f=t+v,_=e+v,r=m.data}}return r},Lu.remove=function(t){if(isNaN(i=+this._x.call(null,t))||isNaN(s=+this._y.call(null,t)))return this;var e,n,r,a,i,s,o,u,d,c,l,f,_=this._root,h=this._x0,m=this._y0,p=this._x1,y=this._y1;if(!_)return this;if(_.length)for(;;){if((d=i>=(o=(h+p)/2))?h=o:p=o,(c=s>=(u=(m+y)/2))?m=u:y=u,e=_,!(_=_[l=c<<1|d]))return this;if(!_.length)break;(e[l+1&3]||e[l+2&3]||e[l+3&3])&&(n=e,f=l)}for(;_.data!==t;)if(r=_,!(_=_.next))return this;return(a=_.next)&&delete _.next,r?(a?r.next=a:delete r.next,this):e?(a?e[l]=a:delete e[l],(_=e[0]||e[1]||e[2]||e[3])&&_===(e[3]||e[2]||e[1]||e[0])&&!_.length&&(n?n[f]=_:this._root=_),this):(this._root=a,this)},Lu.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Lu.root=function(){return this._root},Lu.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Lu.visit=function(t){var e,n,r,a,i,s,o=[],u=this._root;for(u&&o.push(new hu(u,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(u=e.node,r=e.x0,a=e.y0,i=e.x1,s=e.y1)&&u.length){var d=(r+i)/2,c=(a+s)/2;(n=u[3])&&o.push(new hu(n,d,c,i,s)),(n=u[2])&&o.push(new hu(n,r,c,d,s)),(n=u[1])&&o.push(new hu(n,d,a,i,c)),(n=u[0])&&o.push(new hu(n,r,a,d,c))}return this},Lu.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new hu(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var a=e.node;if(a.length){var i,s=e.x0,o=e.y0,u=e.x1,d=e.y1,c=(s+u)/2,l=(o+d)/2;(i=a[0])&&n.push(new hu(i,s,o,c,l)),(i=a[1])&&n.push(new hu(i,c,o,u,l)),(i=a[2])&&n.push(new hu(i,s,l,c,d)),(i=a[3])&&n.push(new hu(i,c,l,u,d))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Lu.x=function(t){return arguments.length?(this._x=t,this):this._x},Lu.y=function(t){return arguments.length?(this._y=t,this):this._y};var bu=function(t){var e,n,r=1,a=1;function i(){for(var t,i,o,u,d,c,l,f=e.length,_=0;_<a;++_)for(i=yu(e,vu,Yu).visitAfter(s),t=0;t<f;++t)o=e[t],c=n[o.index],l=c*c,u=o.x+o.vx,d=o.y+o.vy,i.visit(h);function h(t,e,n,a,i){var s=t.data,f=t.r,_=c+f;if(!s)return e>u+_||a<u-_||n>d+_||i<d-_;if(s.index>o.index){var h=u-s.x-s.vx,m=d-s.y-s.vy,p=h*h+m*m;p<_*_&&(0===h&&(p+=(h=fu())*h),0===m&&(p+=(m=fu())*m),p=(_-(p=Math.sqrt(p)))/p*r,o.vx+=(h*=p)*(_=(f*=f)/(l+f)),o.vy+=(m*=p)*_,s.vx-=h*(_=1-_),s.vy-=m*_)}}}function s(t){if(t.data)return t.r=n[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function o(){if(e){var r,a,i=e.length;for(n=new Array(i),r=0;r<i;++r)a=e[r],n[a.index]=+t(a,r,e)}}return"function"!=typeof t&&(t=lu(null==t?1:+t)),i.initialize=function(t){e=t,o()},i.iterations=function(t){return arguments.length?(a=+t,i):a},i.strength=function(t){return arguments.length?(r=+t,i):r},i.radius=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),o(),i):t},i};function wu(t){return t.index}function ku(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}var Du=function(t){var e,n,r,a,i,s=wu,o=function(t){return 1/Math.min(a[t.source.index],a[t.target.index])},u=lu(30),d=1;function c(r){for(var a=0,s=t.length;a<d;++a)for(var o,u,c,l,f,_,h,m=0;m<s;++m)u=(o=t[m]).source,l=(c=o.target).x+c.vx-u.x-u.vx||fu(),f=c.y+c.vy-u.y-u.vy||fu(),l*=_=((_=Math.sqrt(l*l+f*f))-n[m])/_*r*e[m],f*=_,c.vx-=l*(h=i[m]),c.vy-=f*h,u.vx+=l*(h=1-h),u.vy+=f*h}function l(){if(r){var o,u,d=r.length,c=t.length,l=Vs(r,s);for(o=0,a=new Array(d);o<c;++o)(u=t[o]).index=o,"object"!=typeof u.source&&(u.source=ku(l,u.source)),"object"!=typeof u.target&&(u.target=ku(l,u.target)),a[u.source.index]=(a[u.source.index]||0)+1,a[u.target.index]=(a[u.target.index]||0)+1;for(o=0,i=new Array(c);o<c;++o)u=t[o],i[o]=a[u.source.index]/(a[u.source.index]+a[u.target.index]);e=new Array(c),f(),n=new Array(c),_()}}function f(){if(r)for(var n=0,a=t.length;n<a;++n)e[n]=+o(t[n],n,t)}function _(){if(r)for(var e=0,a=t.length;e<a;++e)n[e]=+u(t[e],e,t)}return null==t&&(t=[]),c.initialize=function(t){r=t,l()},c.links=function(e){return arguments.length?(t=e,l(),c):t},c.id=function(t){return arguments.length?(s=t,c):s},c.iterations=function(t){return arguments.length?(d=+t,c):d},c.strength=function(t){return arguments.length?(o="function"==typeof t?t:lu(+t),f(),c):o},c.distance=function(t){return arguments.length?(u="function"==typeof t?t:lu(+t),_(),c):u},c};function Tu(t){return t.x}function xu(t){return t.y}var Su=10,Hu=Math.PI*(3-Math.sqrt(5)),ju=function(t){var e,n=1,r=.001,a=1-Math.pow(r,1/300),i=0,s=.6,o=Vs(),u=fa(c),d=mt("tick","end");function c(){l(),d.call("tick",e),n<r&&(u.stop(),d.call("end",e))}function l(r){var u,d,c=t.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(n+=(i-n)*a,o.each((function(t){t(n)})),u=0;u<c;++u)null==(d=t[u]).fx?d.x+=d.vx*=s:(d.x=d.fx,d.vx=0),null==d.fy?d.y+=d.vy*=s:(d.y=d.fy,d.vy=0);return e}function f(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,null!=e.fx&&(e.x=e.fx),null!=e.fy&&(e.y=e.fy),isNaN(e.x)||isNaN(e.y)){var a=Su*Math.sqrt(n),i=n*Hu;e.x=a*Math.cos(i),e.y=a*Math.sin(i)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function _(e){return e.initialize&&e.initialize(t),e}return null==t&&(t=[]),f(),e={tick:l,restart:function(){return u.restart(c),e},stop:function(){return u.stop(),e},nodes:function(n){return arguments.length?(t=n,f(),o.each(_),e):t},alpha:function(t){return arguments.length?(n=+t,e):n},alphaMin:function(t){return arguments.length?(r=+t,e):r},alphaDecay:function(t){return arguments.length?(a=+t,e):+a},alphaTarget:function(t){return arguments.length?(i=+t,e):i},velocityDecay:function(t){return arguments.length?(s=1-t,e):1-s},force:function(t,n){return arguments.length>1?(null==n?o.remove(t):o.set(t,_(n)),e):o.get(t)},find:function(e,n,r){var a,i,s,o,u,d=0,c=t.length;for(null==r?r=1/0:r*=r,d=0;d<c;++d)(s=(a=e-(o=t[d]).x)*a+(i=n-o.y)*i)<r&&(u=o,r=s);return u},on:function(t,n){return arguments.length>1?(d.on(t,n),e):d.on(t)}}},Au=function(){var t,e,n,r,a=lu(-30),i=1,s=1/0,o=.81;function u(r){var a,i=t.length,s=yu(t,Tu,xu).visitAfter(c);for(n=r,a=0;a<i;++a)e=t[a],s.visit(l)}function d(){if(t){var e,n,i=t.length;for(r=new Array(i),e=0;e<i;++e)n=t[e],r[n.index]=+a(n,e,t)}}function c(t){var e,n,a,i,s,o=0,u=0;if(t.length){for(a=i=s=0;s<4;++s)(e=t[s])&&(n=Math.abs(e.value))&&(o+=e.value,u+=n,a+=n*e.x,i+=n*e.y);t.x=a/u,t.y=i/u}else{(e=t).x=e.data.x,e.y=e.data.y;do{o+=r[e.data.index]}while(e=e.next)}t.value=o}function l(t,a,u,d){if(!t.value)return!0;var c=t.x-e.x,l=t.y-e.y,f=d-a,_=c*c+l*l;if(f*f/o<_)return _<s&&(0===c&&(_+=(c=fu())*c),0===l&&(_+=(l=fu())*l),_<i&&(_=Math.sqrt(i*_)),e.vx+=c*t.value*n/_,e.vy+=l*t.value*n/_),!0;if(!(t.length||_>=s)){(t.data!==e||t.next)&&(0===c&&(_+=(c=fu())*c),0===l&&(_+=(l=fu())*l),_<i&&(_=Math.sqrt(i*_)));do{t.data!==e&&(f=r[t.data.index]*n/_,e.vx+=c*f,e.vy+=l*f)}while(t=t.next)}}return u.initialize=function(e){t=e,d()},u.strength=function(t){return arguments.length?(a="function"==typeof t?t:lu(+t),d(),u):a},u.distanceMin=function(t){return arguments.length?(i=t*t,u):Math.sqrt(i)},u.distanceMax=function(t){return arguments.length?(s=t*t,u):Math.sqrt(s)},u.theta=function(t){return arguments.length?(o=t*t,u):Math.sqrt(o)},u},Pu=function(t,e,n){var r,a,i,s=lu(.1);function o(t){for(var s=0,o=r.length;s<o;++s){var u=r[s],d=u.x-e||1e-6,c=u.y-n||1e-6,l=Math.sqrt(d*d+c*c),f=(i[s]-l)*a[s]*t/l;u.vx+=d*f,u.vy+=c*f}}function u(){if(r){var e,n=r.length;for(a=new Array(n),i=new Array(n),e=0;e<n;++e)i[e]=+t(r[e],e,r),a[e]=isNaN(i[e])?0:+s(r[e],e,r)}}return"function"!=typeof t&&(t=lu(+t)),null==e&&(e=0),null==n&&(n=0),o.initialize=function(t){r=t,u()},o.strength=function(t){return arguments.length?(s="function"==typeof t?t:lu(+t),u(),o):s},o.radius=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),u(),o):t},o.x=function(t){return arguments.length?(e=+t,o):e},o.y=function(t){return arguments.length?(n=+t,o):n},o},Eu=function(t){var e,n,r,a=lu(.1);function i(t){for(var a,i=0,s=e.length;i<s;++i)(a=e[i]).vx+=(r[i]-a.x)*n[i]*t}function s(){if(e){var i,s=e.length;for(n=new Array(s),r=new Array(s),i=0;i<s;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+a(e[i],i,e)}}return"function"!=typeof t&&(t=lu(null==t?0:+t)),i.initialize=function(t){e=t,s()},i.strength=function(t){return arguments.length?(a="function"==typeof t?t:lu(+t),s(),i):a},i.x=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),s(),i):t},i},Ou=function(t){var e,n,r,a=lu(.1);function i(t){for(var a,i=0,s=e.length;i<s;++i)(a=e[i]).vy+=(r[i]-a.y)*n[i]*t}function s(){if(e){var i,s=e.length;for(n=new Array(s),r=new Array(s),i=0;i<s;++i)n[i]=isNaN(r[i]=+t(e[i],i,e))?0:+a(e[i],i,e)}}return"function"!=typeof t&&(t=lu(null==t?0:+t)),i.initialize=function(t){e=t,s()},i.strength=function(t){return arguments.length?(a="function"==typeof t?t:lu(+t),s(),i):a},i.y=function(e){return arguments.length?(t="function"==typeof e?e:lu(+e),s(),i):t},i},Nu=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Wu=function(t){return(t=Nu(Math.abs(t)))?t[1]:NaN},zu=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Fu(t){if(!(e=zu.exec(t)))throw new Error("invalid format: "+t);var e;return new Cu({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function Cu(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}Fu.prototype=Cu.prototype,Cu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ru,Uu,Iu,Ju,qu=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(a>0){if(!+t[r])break t;a=0}}return a>0?t.slice(0,a)+t.slice(e+1):t},Gu=function(t,e){var n=Nu(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},Bu={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Gu(100*t,e)},r:Gu,s:function(t,e){var n=Nu(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(Ru=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,s=r.length;return i===s?r:i>s?r+new Array(i-s+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Nu(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Vu=function(t){return t},$u=Array.prototype.map,Zu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Ku=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Vu:(e=$u.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],s=0,o=e[0],u=0;a>0&&o>0&&(u+o+1>r&&(o=Math.max(1,r-u)),i.push(t.substring(a-=o,a+o)),!((u+=o+1)>r));)o=e[s=(s+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",s=void 0===t.decimal?".":t.decimal+"",o=void 0===t.numerals?Vu:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}($u.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",d=void 0===t.minus?"-":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function l(t){var e=(t=Fu(t)).fill,n=t.align,l=t.sign,f=t.symbol,_=t.zero,h=t.width,m=t.comma,p=t.precision,y=t.trim,M=t.type;"n"===M?(m=!0,M="g"):Bu[M]||(void 0===p&&(p=12),y=!0,M="g"),(_||"0"===e&&"="===n)&&(_=!0,e="0",n="=");var g="$"===f?a:"#"===f&&/[boxX]/.test(M)?"0"+M.toLowerCase():"",L="$"===f?i:/[%p]/.test(M)?u:"",v=Bu[M],Y=/[defgprs%]/.test(M);function b(t){var a,i,u,f=g,b=L;if("c"===M)b=v(t)+b,t="";else{var w=(t=+t)<0;if(t=isNaN(t)?c:v(Math.abs(t),p),y&&(t=qu(t)),w&&0==+t&&(w=!1),f=(w?"("===l?l:d:"-"===l||"("===l?"":l)+f,b=("s"===M?Zu[8+Ru/3]:"")+b+(w&&"("===l?")":""),Y)for(a=-1,i=t.length;++a<i;)if(48>(u=t.charCodeAt(a))||u>57){b=(46===u?s+t.slice(a+1):t.slice(a))+b,t=t.slice(0,a);break}}m&&!_&&(t=r(t,1/0));var k=f.length+t.length+b.length,D=k<h?new Array(h-k+1).join(e):"";switch(m&&_&&(t=r(D+t,D.length?h-b.length:1/0),D=""),n){case"<":t=f+t+b+D;break;case"=":t=f+D+t+b;break;case"^":t=D.slice(0,k=D.length>>1)+f+t+b+D.slice(k);break;default:t=D+f+t+b}return o(t)}return p=void 0===p?6:/[gprs]/.test(M)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),b.toString=function(){return t+""},b}return{format:l,formatPrefix:function(t,e){var n=l(((t=Fu(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Wu(e)/3))),a=Math.pow(10,-r),i=Zu[8+r/3];return function(t){return n(a*t)+i}}}};function Xu(t){return Uu=Ku(t),Iu=Uu.format,Ju=Uu.formatPrefix,Uu}Xu({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var Qu=function(t){return Math.max(0,-Wu(Math.abs(t)))},td=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Wu(e)/3)))-Wu(Math.abs(t)))},ed=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Wu(e)-Wu(t))+1},nd=function(){return new rd};function rd(){this.reset()}rd.prototype={constructor:rd,reset:function(){this.s=this.t=0},add:function(t){id(ad,t,this.t),id(this,ad.s,this.s),this.s?this.t+=ad.t:this.s=ad.t},valueOf:function(){return this.s}};var ad=new rd;function id(t,e,n){var r=t.s=e+n,a=r-e,i=r-a;t.t=e-i+(n-a)}var sd=1e-6,od=1e-12,ud=Math.PI,dd=ud/2,cd=ud/4,ld=2*ud,fd=180/ud,_d=ud/180,hd=Math.abs,md=Math.atan,pd=Math.atan2,yd=Math.cos,Md=Math.ceil,gd=Math.exp,Ld=(Math.floor,Math.log),vd=Math.pow,Yd=Math.sin,bd=Math.sign||function(t){return t>0?1:t<0?-1:0},wd=Math.sqrt,kd=Math.tan;function Dd(t){return t>1?0:t<-1?ud:Math.acos(t)}function Td(t){return t>1?dd:t<-1?-dd:Math.asin(t)}function xd(t){return(t=Yd(t/2))*t}function Sd(){}function Hd(t,e){t&&Ad.hasOwnProperty(t.type)&&Ad[t.type](t,e)}var jd={Feature:function(t,e){Hd(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,a=n.length;++r<a;)Hd(n[r].geometry,e)}},Ad={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Pd(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)Pd(n[r],e,0)},Polygon:function(t,e){Ed(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)Ed(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,a=n.length;++r<a;)Hd(n[r],e)}};function Pd(t,e,n){var r,a=-1,i=t.length-n;for(e.lineStart();++a<i;)r=t[a],e.point(r[0],r[1],r[2]);e.lineEnd()}function Ed(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Pd(t[n],e,1);e.polygonEnd()}var Od,Nd,Wd,zd,Fd,Cd=function(t,e){t&&jd.hasOwnProperty(t.type)?jd[t.type](t,e):Hd(t,e)},Rd=nd(),Ud=nd(),Id={point:Sd,lineStart:Sd,lineEnd:Sd,polygonStart:function(){Rd.reset(),Id.lineStart=Jd,Id.lineEnd=qd},polygonEnd:function(){var t=+Rd;Ud.add(t<0?ld+t:t),this.lineStart=this.lineEnd=this.point=Sd},sphere:function(){Ud.add(ld)}};function Jd(){Id.point=Gd}function qd(){Bd(Od,Nd)}function Gd(t,e){Id.point=Bd,Od=t,Nd=e,Wd=t*=_d,zd=yd(e=(e*=_d)/2+cd),Fd=Yd(e)}function Bd(t,e){var n=(t*=_d)-Wd,r=n>=0?1:-1,a=r*n,i=yd(e=(e*=_d)/2+cd),s=Yd(e),o=Fd*s,u=zd*i+o*yd(a),d=o*r*Yd(a);Rd.add(pd(d,u)),Wd=t,zd=i,Fd=s}var Vd=function(t){return Ud.reset(),Cd(t,Id),2*Ud};function $d(t){return[pd(t[1],t[0]),Td(t[2])]}function Zd(t){var e=t[0],n=t[1],r=yd(n);return[r*yd(e),r*Yd(e),Yd(n)]}function Kd(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Xd(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Qd(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function tc(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function ec(t){var e=wd(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}var nc,rc,ac,ic,sc,oc,uc,dc,cc,lc,fc=nd(),_c={point:hc,lineStart:pc,lineEnd:yc,polygonStart:function(){_c.point=Mc,_c.lineStart=gc,_c.lineEnd=Lc,fc.reset(),Id.polygonStart()},polygonEnd:function(){Id.polygonEnd(),_c.point=hc,_c.lineStart=pc,_c.lineEnd=yc,Rd<0?(nc=-(ac=180),rc=-(ic=90)):fc>sd?ic=90:fc<-sd&&(rc=-90),lc[0]=nc,lc[1]=ac},sphere:function(){nc=-(ac=180),rc=-(ic=90)}};function hc(t,e){cc.push(lc=[nc=t,ac=t]),e<rc&&(rc=e),e>ic&&(ic=e)}function mc(t,e){var n=Zd([t*_d,e*_d]);if(dc){var r=Xd(dc,n),a=Xd([r[1],-r[0],0],r);ec(a),a=$d(a);var i,s=t-sc,o=s>0?1:-1,u=a[0]*fd*o,d=hd(s)>180;d^(o*sc<u&&u<o*t)?(i=a[1]*fd)>ic&&(ic=i):d^(o*sc<(u=(u+360)%360-180)&&u<o*t)?(i=-a[1]*fd)<rc&&(rc=i):(e<rc&&(rc=e),e>ic&&(ic=e)),d?t<sc?vc(nc,t)>vc(nc,ac)&&(ac=t):vc(t,ac)>vc(nc,ac)&&(nc=t):ac>=nc?(t<nc&&(nc=t),t>ac&&(ac=t)):t>sc?vc(nc,t)>vc(nc,ac)&&(ac=t):vc(t,ac)>vc(nc,ac)&&(nc=t)}else cc.push(lc=[nc=t,ac=t]);e<rc&&(rc=e),e>ic&&(ic=e),dc=n,sc=t}function pc(){_c.point=mc}function yc(){lc[0]=nc,lc[1]=ac,_c.point=hc,dc=null}function Mc(t,e){if(dc){var n=t-sc;fc.add(hd(n)>180?n+(n>0?360:-360):n)}else oc=t,uc=e;Id.point(t,e),mc(t,e)}function gc(){Id.lineStart()}function Lc(){Mc(oc,uc),Id.lineEnd(),hd(fc)>sd&&(nc=-(ac=180)),lc[0]=nc,lc[1]=ac,dc=null}function vc(t,e){return(e-=t)<0?e+360:e}function Yc(t,e){return t[0]-e[0]}function bc(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}var wc,kc,Dc,Tc,xc,Sc,Hc,jc,Ac,Pc,Ec,Oc,Nc,Wc,zc,Fc,Cc=function(t){var e,n,r,a,i,s,o;if(ic=ac=-(nc=rc=1/0),cc=[],Cd(t,_c),n=cc.length){for(cc.sort(Yc),e=1,i=[r=cc[0]];e<n;++e)bc(r,(a=cc[e])[0])||bc(r,a[1])?(vc(r[0],a[1])>vc(r[0],r[1])&&(r[1]=a[1]),vc(a[0],r[1])>vc(r[0],r[1])&&(r[0]=a[0])):i.push(r=a);for(s=-1/0,e=0,r=i[n=i.length-1];e<=n;r=a,++e)a=i[e],(o=vc(r[1],a[0]))>s&&(s=o,nc=a[0],ac=r[1])}return cc=lc=null,nc===1/0||rc===1/0?[[NaN,NaN],[NaN,NaN]]:[[nc,rc],[ac,ic]]},Rc={sphere:Sd,point:Uc,lineStart:Jc,lineEnd:Bc,polygonStart:function(){Rc.lineStart=Vc,Rc.lineEnd=$c},polygonEnd:function(){Rc.lineStart=Jc,Rc.lineEnd=Bc}};function Uc(t,e){t*=_d;var n=yd(e*=_d);Ic(n*yd(t),n*Yd(t),Yd(e))}function Ic(t,e,n){Dc+=(t-Dc)/++wc,Tc+=(e-Tc)/wc,xc+=(n-xc)/wc}function Jc(){Rc.point=qc}function qc(t,e){t*=_d;var n=yd(e*=_d);Wc=n*yd(t),zc=n*Yd(t),Fc=Yd(e),Rc.point=Gc,Ic(Wc,zc,Fc)}function Gc(t,e){t*=_d;var n=yd(e*=_d),r=n*yd(t),a=n*Yd(t),i=Yd(e),s=pd(wd((s=zc*i-Fc*a)*s+(s=Fc*r-Wc*i)*s+(s=Wc*a-zc*r)*s),Wc*r+zc*a+Fc*i);kc+=s,Sc+=s*(Wc+(Wc=r)),Hc+=s*(zc+(zc=a)),jc+=s*(Fc+(Fc=i)),Ic(Wc,zc,Fc)}function Bc(){Rc.point=Uc}function Vc(){Rc.point=Zc}function $c(){Kc(Oc,Nc),Rc.point=Uc}function Zc(t,e){Oc=t,Nc=e,t*=_d,e*=_d,Rc.point=Kc;var n=yd(e);Wc=n*yd(t),zc=n*Yd(t),Fc=Yd(e),Ic(Wc,zc,Fc)}function Kc(t,e){t*=_d;var n=yd(e*=_d),r=n*yd(t),a=n*Yd(t),i=Yd(e),s=zc*i-Fc*a,o=Fc*r-Wc*i,u=Wc*a-zc*r,d=wd(s*s+o*o+u*u),c=Td(d),l=d&&-c/d;Ac+=l*s,Pc+=l*o,Ec+=l*u,kc+=c,Sc+=c*(Wc+(Wc=r)),Hc+=c*(zc+(zc=a)),jc+=c*(Fc+(Fc=i)),Ic(Wc,zc,Fc)}var Xc=function(t){wc=kc=Dc=Tc=xc=Sc=Hc=jc=Ac=Pc=Ec=0,Cd(t,Rc);var e=Ac,n=Pc,r=Ec,a=e*e+n*n+r*r;return a<od&&(e=Sc,n=Hc,r=jc,kc<sd&&(e=Dc,n=Tc,r=xc),(a=e*e+n*n+r*r)<od)?[NaN,NaN]:[pd(n,e)*fd,Td(r/wd(a))*fd]},Qc=function(t){return function(){return t}},tl=function(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n};function el(t,e){return[hd(t)>ud?t+Math.round(-t/ld)*ld:t,e]}function nl(t,e,n){return(t%=ld)?e||n?tl(al(t),il(e,n)):al(t):e||n?il(e,n):el}function rl(t){return function(e,n){return[(e+=t)>ud?e-ld:e<-ud?e+ld:e,n]}}function al(t){var e=rl(t);return e.invert=rl(-t),e}function il(t,e){var n=yd(t),r=Yd(t),a=yd(e),i=Yd(e);function s(t,e){var s=yd(e),o=yd(t)*s,u=Yd(t)*s,d=Yd(e),c=d*n+o*r;return[pd(u*a-c*i,o*n-d*r),Td(c*a+u*i)]}return s.invert=function(t,e){var s=yd(e),o=yd(t)*s,u=Yd(t)*s,d=Yd(e),c=d*a-u*i;return[pd(u*a+d*i,o*n+c*r),Td(c*n-o*r)]},s}el.invert=el;var sl=function(t){function e(e){return(e=t(e[0]*_d,e[1]*_d))[0]*=fd,e[1]*=fd,e}return t=nl(t[0]*_d,t[1]*_d,t.length>2?t[2]*_d:0),e.invert=function(e){return(e=t.invert(e[0]*_d,e[1]*_d))[0]*=fd,e[1]*=fd,e},e};function ol(t,e,n,r,a,i){if(n){var s=yd(e),o=Yd(e),u=r*n;null==a?(a=e+r*ld,i=e-u/2):(a=ul(s,a),i=ul(s,i),(r>0?a<i:a>i)&&(a+=r*ld));for(var d,c=a;r>0?c>i:c<i;c-=u)d=$d([s,-o*yd(c),-o*Yd(c)]),t.point(d[0],d[1])}}function ul(t,e){(e=Zd(e))[0]-=t,ec(e);var n=Dd(-e[1]);return((-e[2]<0?-n:n)+ld-sd)%ld}var dl=function(){var t,e,n=Qc([0,0]),r=Qc(90),a=Qc(6),i={point:function(n,r){t.push(n=e(n,r)),n[0]*=fd,n[1]*=fd}};function s(){var s=n.apply(this,arguments),o=r.apply(this,arguments)*_d,u=a.apply(this,arguments)*_d;return t=[],e=nl(-s[0]*_d,-s[1]*_d,0).invert,ol(i,o,u,1),s={type:"Polygon",coordinates:[t]},t=e=null,s}return s.center=function(t){return arguments.length?(n="function"==typeof t?t:Qc([+t[0],+t[1]]),s):n},s.radius=function(t){return arguments.length?(r="function"==typeof t?t:Qc(+t),s):r},s.precision=function(t){return arguments.length?(a="function"==typeof t?t:Qc(+t),s):a},s},cl=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Sd,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},ll=function(t,e){return hd(t[0]-e[0])<sd&&hd(t[1]-e[1])<sd};function fl(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var _l=function(t,e,n,r,a){var i,s,o=[],u=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],s=t[e];if(ll(r,s)){for(a.lineStart(),i=0;i<e;++i)a.point((r=t[i])[0],r[1]);a.lineEnd()}else o.push(n=new fl(r,t,null,!0)),u.push(n.o=new fl(r,null,n,!1)),o.push(n=new fl(s,t,null,!1)),u.push(n.o=new fl(s,null,n,!0))}})),o.length){for(u.sort(e),hl(o),hl(u),i=0,s=u.length;i<s;++i)u[i].e=n=!n;for(var d,c,l=o[0];;){for(var f=l,_=!0;f.v;)if((f=f.n)===l)return;d=f.z,a.lineStart();do{if(f.v=f.o.v=!0,f.e){if(_)for(i=0,s=d.length;i<s;++i)a.point((c=d[i])[0],c[1]);else r(f.x,f.n.x,1,a);f=f.n}else{if(_)for(d=f.p.z,i=d.length-1;i>=0;--i)a.point((c=d[i])[0],c[1]);else r(f.x,f.p.x,-1,a);f=f.p}d=(f=f.o).z,_=!_}while(!f.v);a.lineEnd()}}};function hl(t){if(e=t.length){for(var e,n,r=0,a=t[0];++r<e;)a.n=n=t[r],n.p=a,a=n;a.n=n=t[0],n.p=a}}var ml=nd();function pl(t){return hd(t[0])<=ud?t[0]:bd(t[0])*((hd(t[0])+ud)%ld-ud)}var yl=function(t,e){var n=pl(e),r=e[1],a=Yd(r),i=[Yd(n),-yd(n),0],s=0,o=0;ml.reset(),1===a?r=dd+sd:-1===a&&(r=-dd-sd);for(var u=0,d=t.length;u<d;++u)if(l=(c=t[u]).length)for(var c,l,f=c[l-1],_=pl(f),h=f[1]/2+cd,m=Yd(h),p=yd(h),y=0;y<l;++y,_=g,m=v,p=Y,f=M){var M=c[y],g=pl(M),L=M[1]/2+cd,v=Yd(L),Y=yd(L),b=g-_,w=b>=0?1:-1,k=w*b,D=k>ud,T=m*v;if(ml.add(pd(T*w*Yd(k),p*Y+T*yd(k))),s+=D?b+w*ld:b,D^_>=n^g>=n){var x=Xd(Zd(f),Zd(M));ec(x);var S=Xd(i,x);ec(S);var H=(D^b>=0?-1:1)*Td(S[2]);(r>H||r===H&&(x[0]||x[1]))&&(o+=D^b>=0?1:-1)}}return(s<-sd||s<sd&&ml<-sd)^1&o},Ml=function(t,e,n,r){return function(a){var i,s,o,u=e(a),d=cl(),c=e(d),l=!1,f={point:_,lineStart:m,lineEnd:p,polygonStart:function(){f.point=y,f.lineStart=M,f.lineEnd=g,s=[],i=[]},polygonEnd:function(){f.point=_,f.lineStart=m,f.lineEnd=p,s=W(s);var t=yl(i,r);s.length?(l||(a.polygonStart(),l=!0),_l(s,Ll,t,n,a)):t&&(l||(a.polygonStart(),l=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),l&&(a.polygonEnd(),l=!1),s=i=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function _(e,n){t(e,n)&&a.point(e,n)}function h(t,e){u.point(t,e)}function m(){f.point=h,u.lineStart()}function p(){f.point=_,u.lineEnd()}function y(t,e){o.push([t,e]),c.point(t,e)}function M(){c.lineStart(),o=[]}function g(){y(o[0][0],o[0][1]),c.lineEnd();var t,e,n,r,u=c.clean(),f=d.result(),_=f.length;if(o.pop(),i.push(o),o=null,_)if(1&u){if((e=(n=f[0]).length-1)>0){for(l||(a.polygonStart(),l=!0),a.lineStart(),t=0;t<e;++t)a.point((r=n[t])[0],r[1]);a.lineEnd()}}else _>1&&2&u&&f.push(f.pop().concat(f.shift())),s.push(f.filter(gl))}return f}};function gl(t){return t.length>1}function Ll(t,e){return((t=t.x)[0]<0?t[1]-dd-sd:dd-t[1])-((e=e.x)[0]<0?e[1]-dd-sd:dd-e[1])}var vl=Ml((function(){return!0}),(function(t){var e,n=NaN,r=NaN,a=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(i,s){var o=i>0?ud:-ud,u=hd(i-n);hd(u-ud)<sd?(t.point(n,r=(r+s)/2>0?dd:-dd),t.point(a,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(i,r),e=0):a!==o&&u>=ud&&(hd(n-a)<sd&&(n-=a*sd),hd(i-o)<sd&&(i-=o*sd),r=function(t,e,n,r){var a,i,s=Yd(t-n);return hd(s)>sd?md((Yd(e)*(i=yd(r))*Yd(n)-Yd(r)*(a=yd(e))*Yd(t))/(a*i*s)):(e+r)/2}(n,r,i,s),t.point(a,r),t.lineEnd(),t.lineStart(),t.point(o,r),e=0),t.point(n=i,r=s),a=o},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var a;if(null==t)a=n*dd,r.point(-ud,a),r.point(0,a),r.point(ud,a),r.point(ud,0),r.point(ud,-a),r.point(0,-a),r.point(-ud,-a),r.point(-ud,0),r.point(-ud,a);else if(hd(t[0]-e[0])>sd){var i=t[0]<e[0]?ud:-ud;a=n*i/2,r.point(-i,a),r.point(0,a),r.point(i,a)}else r.point(e[0],e[1])}),[-ud,-dd]);var Yl=function(t){var e=yd(t),n=6*_d,r=e>0,a=hd(e)>sd;function i(t,n){return yd(t)*yd(n)>e}function s(t,n,r){var a=[1,0,0],i=Xd(Zd(t),Zd(n)),s=Kd(i,i),o=i[0],u=s-o*o;if(!u)return!r&&t;var d=e*s/u,c=-e*o/u,l=Xd(a,i),f=tc(a,d);Qd(f,tc(i,c));var _=l,h=Kd(f,_),m=Kd(_,_),p=h*h-m*(Kd(f,f)-1);if(!(p<0)){var y=wd(p),M=tc(_,(-h-y)/m);if(Qd(M,f),M=$d(M),!r)return M;var g,L=t[0],v=n[0],Y=t[1],b=n[1];v<L&&(g=L,L=v,v=g);var w=v-L,k=hd(w-ud)<sd;if(!k&&b<Y&&(g=Y,Y=b,b=g),k||w<sd?k?Y+b>0^M[1]<(hd(M[0]-L)<sd?Y:b):Y<=M[1]&&M[1]<=b:w>ud^(L<=M[0]&&M[0]<=v)){var D=tc(_,(-h+y)/m);return Qd(D,f),[M,$d(D)]}}}function o(e,n){var a=r?t:ud-t,i=0;return e<-a?i|=1:e>a&&(i|=2),n<-a?i|=4:n>a&&(i|=8),i}return Ml(i,(function(t){var e,n,u,d,c;return{lineStart:function(){d=u=!1,c=1},point:function(l,f){var _,h=[l,f],m=i(l,f),p=r?m?0:o(l,f):m?o(l+(l<0?ud:-ud),f):0;if(!e&&(d=u=m)&&t.lineStart(),m!==u&&(!(_=s(e,h))||ll(e,_)||ll(h,_))&&(h[0]+=sd,h[1]+=sd,m=i(h[0],h[1])),m!==u)c=0,m?(t.lineStart(),_=s(h,e),t.point(_[0],_[1])):(_=s(e,h),t.point(_[0],_[1]),t.lineEnd()),e=_;else if(a&&e&&r^m){var y;p&n||!(y=s(h,e,!0))||(c=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!m||e&&ll(e,h)||t.point(h[0],h[1]),e=h,u=m,n=p},lineEnd:function(){u&&t.lineEnd(),e=null},clean:function(){return c|(d&&u)<<1}}}),(function(e,r,a,i){ol(i,t,n,a,e,r)}),r?[0,-t]:[-ud,t-ud])},bl=function(t,e,n,r,a,i){var s,o=t[0],u=t[1],d=0,c=1,l=e[0]-o,f=e[1]-u;if(s=n-o,l||!(s>0)){if(s/=l,l<0){if(s<d)return;s<c&&(c=s)}else if(l>0){if(s>c)return;s>d&&(d=s)}if(s=a-o,l||!(s<0)){if(s/=l,l<0){if(s>c)return;s>d&&(d=s)}else if(l>0){if(s<d)return;s<c&&(c=s)}if(s=r-u,f||!(s>0)){if(s/=f,f<0){if(s<d)return;s<c&&(c=s)}else if(f>0){if(s>c)return;s>d&&(d=s)}if(s=i-u,f||!(s<0)){if(s/=f,f<0){if(s>c)return;s>d&&(d=s)}else if(f>0){if(s<d)return;s<c&&(c=s)}return d>0&&(t[0]=o+d*l,t[1]=u+d*f),c<1&&(e[0]=o+c*l,e[1]=u+c*f),!0}}}}},wl=1e9,kl=-wl;function Dl(t,e,n,r){function a(a,i){return t<=a&&a<=n&&e<=i&&i<=r}function i(a,i,o,d){var c=0,l=0;if(null==a||(c=s(a,o))!==(l=s(i,o))||u(a,i)<0^o>0)do{d.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+o+4)%4)!==l);else d.point(i[0],i[1])}function s(r,a){return hd(r[0]-t)<sd?a>0?0:3:hd(r[0]-n)<sd?a>0?2:1:hd(r[1]-e)<sd?a>0?1:0:a>0?3:2}function o(t,e){return u(t.x,e.x)}function u(t,e){var n=s(t,1),r=s(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(s){var u,d,c,l,f,_,h,m,p,y,M,g=s,L=cl(),v={point:Y,lineStart:function(){v.point=b,d&&d.push(c=[]);y=!0,p=!1,h=m=NaN},lineEnd:function(){u&&(b(l,f),_&&p&&L.rejoin(),u.push(L.result()));v.point=Y,p&&g.lineEnd()},polygonStart:function(){g=L,u=[],d=[],M=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,a=d.length;n<a;++n)for(var i,s,o=d[n],u=1,c=o.length,l=o[0],f=l[0],_=l[1];u<c;++u)i=f,s=_,l=o[u],f=l[0],_=l[1],s<=r?_>r&&(f-i)*(r-s)>(_-s)*(t-i)&&++e:_<=r&&(f-i)*(r-s)<(_-s)*(t-i)&&--e;return e}(),n=M&&e,a=(u=W(u)).length;(n||a)&&(s.polygonStart(),n&&(s.lineStart(),i(null,null,1,s),s.lineEnd()),a&&_l(u,o,e,i,s),s.polygonEnd());g=s,u=d=c=null}};function Y(t,e){a(t,e)&&g.point(t,e)}function b(i,s){var o=a(i,s);if(d&&c.push([i,s]),y)l=i,f=s,_=o,y=!1,o&&(g.lineStart(),g.point(i,s));else if(o&&p)g.point(i,s);else{var u=[h=Math.max(kl,Math.min(wl,h)),m=Math.max(kl,Math.min(wl,m))],L=[i=Math.max(kl,Math.min(wl,i)),s=Math.max(kl,Math.min(wl,s))];bl(u,L,t,e,n,r)?(p||(g.lineStart(),g.point(u[0],u[1])),g.point(L[0],L[1]),o||g.lineEnd(),M=!1):o&&(g.lineStart(),g.point(i,s),M=!1)}h=i,m=s,p=o}return v}}var Tl,xl,Sl,Hl=function(){var t,e,n,r=0,a=0,i=960,s=500;return n={stream:function(n){return t&&e===n?t:t=Dl(r,a,i,s)(e=n)},extent:function(o){return arguments.length?(r=+o[0][0],a=+o[0][1],i=+o[1][0],s=+o[1][1],t=e=null,n):[[r,a],[i,s]]}}},jl=nd(),Al={sphere:Sd,point:Sd,lineStart:function(){Al.point=El,Al.lineEnd=Pl},lineEnd:Sd,polygonStart:Sd,polygonEnd:Sd};function Pl(){Al.point=Al.lineEnd=Sd}function El(t,e){Tl=t*=_d,xl=Yd(e*=_d),Sl=yd(e),Al.point=Ol}function Ol(t,e){t*=_d;var n=Yd(e*=_d),r=yd(e),a=hd(t-Tl),i=yd(a),s=r*Yd(a),o=Sl*n-xl*r*i,u=xl*n+Sl*r*i;jl.add(pd(wd(s*s+o*o),u)),Tl=t,xl=n,Sl=r}var Nl=function(t){return jl.reset(),Cd(t,Al),+jl},Wl=[null,null],zl={type:"LineString",coordinates:Wl},Fl=function(t,e){return Wl[0]=t,Wl[1]=e,Nl(zl)},Cl={Feature:function(t,e){return Ul(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,a=n.length;++r<a;)if(Ul(n[r].geometry,e))return!0;return!1}},Rl={Sphere:function(){return!0},Point:function(t,e){return Il(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(Il(n[r],e))return!0;return!1},LineString:function(t,e){return Jl(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(Jl(n[r],e))return!0;return!1},Polygon:function(t,e){return ql(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(ql(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,a=n.length;++r<a;)if(Ul(n[r],e))return!0;return!1}};function Ul(t,e){return!(!t||!Rl.hasOwnProperty(t.type))&&Rl[t.type](t,e)}function Il(t,e){return 0===Fl(t,e)}function Jl(t,e){for(var n,r,a,i=0,s=t.length;i<s;i++){if(0===(r=Fl(t[i],e)))return!0;if(i>0&&(a=Fl(t[i],t[i-1]))>0&&n<=a&&r<=a&&(n+r-a)*(1-Math.pow((n-r)/a,2))<od*a)return!0;n=r}return!1}function ql(t,e){return!!yl(t.map(Gl),Bl(e))}function Gl(t){return(t=t.map(Bl)).pop(),t}function Bl(t){return[t[0]*_d,t[1]*_d]}var Vl=function(t,e){return(t&&Cl.hasOwnProperty(t.type)?Cl[t.type]:Ul)(t,e)};function $l(t,e,n){var r=Y(t,e-sd,n).concat(e);return function(t){return r.map((function(e){return[t,e]}))}}function Zl(t,e,n){var r=Y(t,e-sd,n).concat(e);return function(t){return r.map((function(e){return[e,t]}))}}function Kl(){var t,e,n,r,a,i,s,o,u,d,c,l,f=10,_=f,h=90,m=360,p=2.5;function y(){return{type:"MultiLineString",coordinates:M()}}function M(){return Y(Md(r/h)*h,n,h).map(c).concat(Y(Md(o/m)*m,s,m).map(l)).concat(Y(Md(e/f)*f,t,f).filter((function(t){return hd(t%h)>sd})).map(u)).concat(Y(Md(i/_)*_,a,_).filter((function(t){return hd(t%m)>sd})).map(d))}return y.lines=function(){return M().map((function(t){return{type:"LineString",coordinates:t}}))},y.outline=function(){return{type:"Polygon",coordinates:[c(r).concat(l(s).slice(1),c(n).reverse().slice(1),l(o).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],n=+t[1][0],o=+t[0][1],s=+t[1][1],r>n&&(t=r,r=n,n=t),o>s&&(t=o,o=s,s=t),y.precision(p)):[[r,o],[n,s]]},y.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],i=+n[0][1],a=+n[1][1],e>t&&(n=e,e=t,t=n),i>a&&(n=i,i=a,a=n),y.precision(p)):[[e,i],[t,a]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(h=+t[0],m=+t[1],y):[h,m]},y.stepMinor=function(t){return arguments.length?(f=+t[0],_=+t[1],y):[f,_]},y.precision=function(f){return arguments.length?(p=+f,u=$l(i,a,90),d=Zl(e,t,p),c=$l(o,s,90),l=Zl(r,n,p),y):p},y.extentMajor([[-180,-90+sd],[180,90-sd]]).extentMinor([[-180,-80-sd],[180,80+sd]])}function Xl(){return Kl()()}var Ql,tf,ef,nf,rf=function(t,e){var n=t[0]*_d,r=t[1]*_d,a=e[0]*_d,i=e[1]*_d,s=yd(r),o=Yd(r),u=yd(i),d=Yd(i),c=s*yd(n),l=s*Yd(n),f=u*yd(a),_=u*Yd(a),h=2*Td(wd(xd(i-r)+s*u*xd(a-n))),m=Yd(h),p=h?function(t){var e=Yd(t*=h)/m,n=Yd(h-t)/m,r=n*c+e*f,a=n*l+e*_,i=n*o+e*d;return[pd(a,r)*fd,pd(i,wd(r*r+a*a))*fd]}:function(){return[n*fd,r*fd]};return p.distance=h,p},af=function(t){return t},sf=nd(),of=nd(),uf={point:Sd,lineStart:Sd,lineEnd:Sd,polygonStart:function(){uf.lineStart=df,uf.lineEnd=ff},polygonEnd:function(){uf.lineStart=uf.lineEnd=uf.point=Sd,sf.add(hd(of)),of.reset()},result:function(){var t=sf/2;return sf.reset(),t}};function df(){uf.point=cf}function cf(t,e){uf.point=lf,Ql=ef=t,tf=nf=e}function lf(t,e){of.add(nf*t-ef*e),ef=t,nf=e}function ff(){lf(Ql,tf)}var _f=uf,hf=1/0,mf=hf,pf=-hf,yf=pf;var Mf,gf,Lf,vf,Yf={point:function(t,e){t<hf&&(hf=t);t>pf&&(pf=t);e<mf&&(mf=e);e>yf&&(yf=e)},lineStart:Sd,lineEnd:Sd,polygonStart:Sd,polygonEnd:Sd,result:function(){var t=[[hf,mf],[pf,yf]];return pf=yf=-(mf=hf=1/0),t}},bf=0,wf=0,kf=0,Df=0,Tf=0,xf=0,Sf=0,Hf=0,jf=0,Af={point:Pf,lineStart:Ef,lineEnd:Wf,polygonStart:function(){Af.lineStart=zf,Af.lineEnd=Ff},polygonEnd:function(){Af.point=Pf,Af.lineStart=Ef,Af.lineEnd=Wf},result:function(){var t=jf?[Sf/jf,Hf/jf]:xf?[Df/xf,Tf/xf]:kf?[bf/kf,wf/kf]:[NaN,NaN];return bf=wf=kf=Df=Tf=xf=Sf=Hf=jf=0,t}};function Pf(t,e){bf+=t,wf+=e,++kf}function Ef(){Af.point=Of}function Of(t,e){Af.point=Nf,Pf(Lf=t,vf=e)}function Nf(t,e){var n=t-Lf,r=e-vf,a=wd(n*n+r*r);Df+=a*(Lf+t)/2,Tf+=a*(vf+e)/2,xf+=a,Pf(Lf=t,vf=e)}function Wf(){Af.point=Pf}function zf(){Af.point=Cf}function Ff(){Rf(Mf,gf)}function Cf(t,e){Af.point=Rf,Pf(Mf=Lf=t,gf=vf=e)}function Rf(t,e){var n=t-Lf,r=e-vf,a=wd(n*n+r*r);Df+=a*(Lf+t)/2,Tf+=a*(vf+e)/2,xf+=a,Sf+=(a=vf*t-Lf*e)*(Lf+t),Hf+=a*(vf+e),jf+=3*a,Pf(Lf=t,vf=e)}var Uf=Af;function If(t){this._context=t}If.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,ld)}},result:Sd};var Jf,qf,Gf,Bf,Vf,$f=nd(),Zf={point:Sd,lineStart:function(){Zf.point=Kf},lineEnd:function(){Jf&&Xf(qf,Gf),Zf.point=Sd},polygonStart:function(){Jf=!0},polygonEnd:function(){Jf=null},result:function(){var t=+$f;return $f.reset(),t}};function Kf(t,e){Zf.point=Xf,qf=Bf=t,Gf=Vf=e}function Xf(t,e){Bf-=t,Vf-=e,$f.add(wd(Bf*Bf+Vf*Vf)),Bf=t,Vf=e}var Qf=Zf;function t_(){this._string=[]}function e_(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}t_.prototype={_radius:4.5,_circle:e_(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=e_(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var n_=function(t,e){var n,r,a=4.5;function i(t){return t&&("function"==typeof a&&r.pointRadius(+a.apply(this,arguments)),Cd(t,n(r))),r.result()}return i.area=function(t){return Cd(t,n(_f)),_f.result()},i.measure=function(t){return Cd(t,n(Qf)),Qf.result()},i.bounds=function(t){return Cd(t,n(Yf)),Yf.result()},i.centroid=function(t){return Cd(t,n(Uf)),Uf.result()},i.projection=function(e){return arguments.length?(n=null==e?(t=null,af):(t=e).stream,i):t},i.context=function(t){return arguments.length?(r=null==t?(e=null,new t_):new If(e=t),"function"!=typeof a&&r.pointRadius(a),i):e},i.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(r.pointRadius(+t),+t),i):a},i.projection(t).context(e)},r_=function(t){return{stream:a_(t)}};function a_(t){return function(e){var n=new i_;for(var r in t)n[r]=t[r];return n.stream=e,n}}function i_(){}function s_(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Cd(n,t.stream(Yf)),e(Yf.result()),null!=r&&t.clipExtent(r),t}function o_(t,e,n){return s_(t,(function(n){var r=e[1][0]-e[0][0],a=e[1][1]-e[0][1],i=Math.min(r/(n[1][0]-n[0][0]),a/(n[1][1]-n[0][1])),s=+e[0][0]+(r-i*(n[1][0]+n[0][0]))/2,o=+e[0][1]+(a-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([s,o])}),n)}function u_(t,e,n){return o_(t,[[0,0],e],n)}function d_(t,e,n){return s_(t,(function(n){var r=+e,a=r/(n[1][0]-n[0][0]),i=(r-a*(n[1][0]+n[0][0]))/2,s=-a*n[0][1];t.scale(150*a).translate([i,s])}),n)}function c_(t,e,n){return s_(t,(function(n){var r=+e,a=r/(n[1][1]-n[0][1]),i=-a*n[0][0],s=(r-a*(n[1][1]+n[0][1]))/2;t.scale(150*a).translate([i,s])}),n)}i_.prototype={constructor:i_,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var l_=16,f_=yd(30*_d),__=function(t,e){return+e?function(t,e){function n(r,a,i,s,o,u,d,c,l,f,_,h,m,p){var y=d-r,M=c-a,g=y*y+M*M;if(g>4*e&&m--){var L=s+f,v=o+_,Y=u+h,b=wd(L*L+v*v+Y*Y),w=Td(Y/=b),k=hd(hd(Y)-1)<sd||hd(i-l)<sd?(i+l)/2:pd(v,L),D=t(k,w),T=D[0],x=D[1],S=T-r,H=x-a,j=M*S-y*H;(j*j/g>e||hd((y*S+M*H)/g-.5)>.3||s*f+o*_+u*h<f_)&&(n(r,a,i,s,o,u,T,x,k,L/=b,v/=b,Y,m,p),p.point(T,x),n(T,x,k,L,v,Y,d,c,l,f,_,h,m,p))}}return function(e){var r,a,i,s,o,u,d,c,l,f,_,h,m={point:p,lineStart:y,lineEnd:g,polygonStart:function(){e.polygonStart(),m.lineStart=L},polygonEnd:function(){e.polygonEnd(),m.lineStart=y}};function p(n,r){n=t(n,r),e.point(n[0],n[1])}function y(){c=NaN,m.point=M,e.lineStart()}function M(r,a){var i=Zd([r,a]),s=t(r,a);n(c,l,d,f,_,h,c=s[0],l=s[1],d=r,f=i[0],_=i[1],h=i[2],l_,e),e.point(c,l)}function g(){m.point=p,e.lineEnd()}function L(){y(),m.point=v,m.lineEnd=Y}function v(t,e){M(r=t,e),a=c,i=l,s=f,o=_,u=h,m.point=M}function Y(){n(c,l,d,f,_,h,a,i,r,s,o,u,l_,e),m.lineEnd=g,g()}return m}}(t,e):function(t){return a_({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)};var h_=a_({point:function(t,e){this.stream.point(t*_d,e*_d)}});function m_(t,e,n){function r(r,a){return[e+t*r,n-t*a]}return r.invert=function(r,a){return[(r-e)/t,(n-a)/t]},r}function p_(t,e,n,r){var a=yd(r),i=Yd(r),s=a*t,o=i*t,u=a/t,d=i/t,c=(i*n-a*e)/t,l=(i*e+a*n)/t;function f(t,r){return[s*t-o*r+e,n-o*t-s*r]}return f.invert=function(t,e){return[u*t-d*e+c,l-d*t-u*e]},f}function y_(t){return M_((function(){return t}))()}function M_(t){var e,n,r,a,i,s,o,u,d,c,l=150,f=480,_=250,h=0,m=0,p=0,y=0,M=0,g=0,L=null,v=vl,Y=null,b=af,w=.5;function k(t){return u(t[0]*_d,t[1]*_d)}function D(t){return(t=u.invert(t[0],t[1]))&&[t[0]*fd,t[1]*fd]}function T(){var t=p_(l,0,0,g).apply(null,e(h,m)),r=(g?p_:m_)(l,f-t[0],_-t[1],g);return n=nl(p,y,M),o=tl(e,r),u=tl(n,o),s=__(o,w),x()}function x(){return d=c=null,k}return k.stream=function(t){return d&&c===t?d:d=h_(function(t){return a_({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(n)(v(s(b(c=t)))))},k.preclip=function(t){return arguments.length?(v=t,L=void 0,x()):v},k.postclip=function(t){return arguments.length?(b=t,Y=r=a=i=null,x()):b},k.clipAngle=function(t){return arguments.length?(v=+t?Yl(L=t*_d):(L=null,vl),x()):L*fd},k.clipExtent=function(t){return arguments.length?(b=null==t?(Y=r=a=i=null,af):Dl(Y=+t[0][0],r=+t[0][1],a=+t[1][0],i=+t[1][1]),x()):null==Y?null:[[Y,r],[a,i]]},k.scale=function(t){return arguments.length?(l=+t,T()):l},k.translate=function(t){return arguments.length?(f=+t[0],_=+t[1],T()):[f,_]},k.center=function(t){return arguments.length?(h=t[0]%360*_d,m=t[1]%360*_d,T()):[h*fd,m*fd]},k.rotate=function(t){return arguments.length?(p=t[0]%360*_d,y=t[1]%360*_d,M=t.length>2?t[2]%360*_d:0,T()):[p*fd,y*fd,M*fd]},k.angle=function(t){return arguments.length?(g=t%360*_d,T()):g*fd},k.precision=function(t){return arguments.length?(s=__(o,w=t*t),x()):wd(w)},k.fitExtent=function(t,e){return o_(k,t,e)},k.fitSize=function(t,e){return u_(k,t,e)},k.fitWidth=function(t,e){return d_(k,t,e)},k.fitHeight=function(t,e){return c_(k,t,e)},function(){return e=t.apply(this,arguments),k.invert=e.invert&&D,T()}}function g_(t){var e=0,n=ud/3,r=M_(t),a=r(e,n);return a.parallels=function(t){return arguments.length?r(e=t[0]*_d,n=t[1]*_d):[e*fd,n*fd]},a}function L_(t,e){var n=Yd(t),r=(n+Yd(e))/2;if(hd(r)<sd)return function(t){var e=yd(t);function n(t,n){return[t*e,Yd(n)/e]}return n.invert=function(t,n){return[t/e,Td(n*e)]},n}(t);var a=1+n*(2*r-n),i=wd(a)/r;function s(t,e){var n=wd(a-2*r*Yd(e))/r;return[n*Yd(t*=r),i-n*yd(t)]}return s.invert=function(t,e){var n=i-e;return[pd(t,hd(n))/r*bd(n),Td((a-(t*t+n*n)*r*r)/(2*r))]},s}var v_=function(){return g_(L_).scale(155.424).center([0,33.6442])},Y_=function(){return v_().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var b_=function(){var t,e,n,r,a,i,s=Y_(),o=v_().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=v_().rotate([157,0]).center([-3,19.9]).parallels([8,18]),d={point:function(t,e){i=[t,e]}};function c(t){var e=t[0],s=t[1];return i=null,n.point(e,s),i||(r.point(e,s),i)||(a.point(e,s),i)}function l(){return t=e=null,c}return c.invert=function(t){var e=s.scale(),n=s.translate(),r=(t[0]-n[0])/e,a=(t[1]-n[1])/e;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?o:a>=.166&&a<.234&&r>=-.214&&r<-.115?u:s).invert(t)},c.stream=function(n){return t&&e===n?t:(r=[s.stream(e=n),o.stream(n),u.stream(n)],a=r.length,t={point:function(t,e){for(var n=-1;++n<a;)r[n].point(t,e)},sphere:function(){for(var t=-1;++t<a;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<a;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<a;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<a;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<a;)r[t].polygonEnd()}});var r,a},c.precision=function(t){return arguments.length?(s.precision(t),o.precision(t),u.precision(t),l()):s.precision()},c.scale=function(t){return arguments.length?(s.scale(t),o.scale(.35*t),u.scale(t),c.translate(s.translate())):s.scale()},c.translate=function(t){if(!arguments.length)return s.translate();var e=s.scale(),i=+t[0],c=+t[1];return n=s.translate(t).clipExtent([[i-.455*e,c-.238*e],[i+.455*e,c+.238*e]]).stream(d),r=o.translate([i-.307*e,c+.201*e]).clipExtent([[i-.425*e+sd,c+.12*e+sd],[i-.214*e-sd,c+.234*e-sd]]).stream(d),a=u.translate([i-.205*e,c+.212*e]).clipExtent([[i-.214*e+sd,c+.166*e+sd],[i-.115*e-sd,c+.234*e-sd]]).stream(d),l()},c.fitExtent=function(t,e){return o_(c,t,e)},c.fitSize=function(t,e){return u_(c,t,e)},c.fitWidth=function(t,e){return d_(c,t,e)},c.fitHeight=function(t,e){return c_(c,t,e)},c.scale(1070)};function w_(t){return function(e,n){var r=yd(e),a=yd(n),i=t(r*a);return[i*a*Yd(e),i*Yd(n)]}}function k_(t){return function(e,n){var r=wd(e*e+n*n),a=t(r),i=Yd(a),s=yd(a);return[pd(e*i,r*s),Td(r&&n*i/r)]}}var D_=w_((function(t){return wd(2/(1+t))}));D_.invert=k_((function(t){return 2*Td(t/2)}));var T_=function(){return y_(D_).scale(124.75).clipAngle(179.999)},x_=w_((function(t){return(t=Dd(t))&&t/Yd(t)}));x_.invert=k_((function(t){return t}));var S_=function(){return y_(x_).scale(79.4188).clipAngle(179.999)};function H_(t,e){return[t,Ld(kd((dd+e)/2))]}H_.invert=function(t,e){return[t,2*md(gd(e))-dd]};var j_=function(){return A_(H_).scale(961/ld)};function A_(t){var e,n,r,a=y_(t),i=a.center,s=a.scale,o=a.translate,u=a.clipExtent,d=null;function c(){var i=ud*s(),o=a(sl(a.rotate()).invert([0,0]));return u(null==d?[[o[0]-i,o[1]-i],[o[0]+i,o[1]+i]]:t===H_?[[Math.max(o[0]-i,d),e],[Math.min(o[0]+i,n),r]]:[[d,Math.max(o[1]-i,e)],[n,Math.min(o[1]+i,r)]])}return a.scale=function(t){return arguments.length?(s(t),c()):s()},a.translate=function(t){return arguments.length?(o(t),c()):o()},a.center=function(t){return arguments.length?(i(t),c()):i()},a.clipExtent=function(t){return arguments.length?(null==t?d=e=n=r=null:(d=+t[0][0],e=+t[0][1],n=+t[1][0],r=+t[1][1]),c()):null==d?null:[[d,e],[n,r]]},c()}function P_(t){return kd((dd+t)/2)}function E_(t,e){var n=yd(t),r=t===e?Yd(t):Ld(n/yd(e))/Ld(P_(e)/P_(t)),a=n*vd(P_(t),r)/r;if(!r)return H_;function i(t,e){a>0?e<-dd+sd&&(e=-dd+sd):e>dd-sd&&(e=dd-sd);var n=a/vd(P_(e),r);return[n*Yd(r*t),a-n*yd(r*t)]}return i.invert=function(t,e){var n=a-e,i=bd(r)*wd(t*t+n*n);return[pd(t,hd(n))/r*bd(n),2*md(vd(a/i,1/r))-dd]},i}var O_=function(){return g_(E_).scale(109.5).parallels([30,30])};function N_(t,e){return[t,e]}N_.invert=N_;var W_=function(){return y_(N_).scale(152.63)};function z_(t,e){var n=yd(t),r=t===e?Yd(t):(n-yd(e))/(e-t),a=n/r+t;if(hd(r)<sd)return N_;function i(t,e){var n=a-e,i=r*t;return[n*Yd(i),a-n*yd(i)]}return i.invert=function(t,e){var n=a-e;return[pd(t,hd(n))/r*bd(n),a-bd(r)*wd(t*t+n*n)]},i}var F_=function(){return g_(z_).scale(131.154).center([0,13.9389])},C_=1.340264,R_=-.081106,U_=893e-6,I_=.003796,J_=wd(3)/2;function q_(t,e){var n=Td(J_*Yd(e)),r=n*n,a=r*r*r;return[t*yd(n)/(J_*(C_+3*R_*r+a*(7*U_+9*I_*r))),n*(C_+R_*r+a*(U_+I_*r))]}q_.invert=function(t,e){for(var n,r=e,a=r*r,i=a*a*a,s=0;s<12&&(i=(a=(r-=n=(r*(C_+R_*a+i*(U_+I_*a))-e)/(C_+3*R_*a+i*(7*U_+9*I_*a)))*r)*a*a,!(hd(n)<od));++s);return[J_*t*(C_+3*R_*a+i*(7*U_+9*I_*a))/yd(r),Td(Yd(r)/J_)]};var G_=function(){return y_(q_).scale(177.158)};function B_(t,e){var n=yd(e),r=yd(t)*n;return[n*Yd(t)/r,Yd(e)/r]}B_.invert=k_(md);var V_=function(){return y_(B_).scale(144.049).clipAngle(60)};function $_(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?af:a_({point:function(a,i){this.stream.point(a*t+n,i*e+r)}})}var Z_=function(){var t,e,n,r,a,i,s=1,o=0,u=0,d=1,c=1,l=af,f=null,_=af;function h(){return r=a=null,i}return i={stream:function(t){return r&&a===t?r:r=l(_(a=t))},postclip:function(r){return arguments.length?(_=r,f=t=e=n=null,h()):_},clipExtent:function(r){return arguments.length?(_=null==r?(f=t=e=n=null,af):Dl(f=+r[0][0],t=+r[0][1],e=+r[1][0],n=+r[1][1]),h()):null==f?null:[[f,t],[e,n]]},scale:function(t){return arguments.length?(l=$_((s=+t)*d,s*c,o,u),h()):s},translate:function(t){return arguments.length?(l=$_(s*d,s*c,o=+t[0],u=+t[1]),h()):[o,u]},reflectX:function(t){return arguments.length?(l=$_(s*(d=t?-1:1),s*c,o,u),h()):d<0},reflectY:function(t){return arguments.length?(l=$_(s*d,s*(c=t?-1:1),o,u),h()):c<0},fitExtent:function(t,e){return o_(i,t,e)},fitSize:function(t,e){return u_(i,t,e)},fitWidth:function(t,e){return d_(i,t,e)},fitHeight:function(t,e){return c_(i,t,e)}}};function K_(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}K_.invert=function(t,e){var n,r=e,a=25;do{var i=r*r,s=i*i;r-=n=(r*(1.007226+i*(.015085+s*(.028874*i-.044475-.005916*s)))-e)/(1.007226+i*(.045255+s*(.259866*i-.311325-.005916*11*s)))}while(hd(n)>sd&&--a>0);return[t/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};var X_=function(){return y_(K_).scale(175.295)};function Q_(t,e){return[yd(e)*Yd(t),Yd(e)]}Q_.invert=k_(Td);var th=function(){return y_(Q_).scale(249.5).clipAngle(90+sd)};function eh(t,e){var n=yd(e),r=1+yd(t)*n;return[n*Yd(t)/r,Yd(e)/r]}eh.invert=k_((function(t){return 2*md(t)}));var nh=function(){return y_(eh).scale(250).clipAngle(142)};function rh(t,e){return[Ld(kd((dd+e)/2)),-t]}rh.invert=function(t,e){return[-e,2*md(gd(t))-dd]};var ah=function(){var t=A_(rh),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)};function ih(t,e){return t.parent===e.parent?1:2}function sh(t,e){return t+e.x}function oh(t,e){return Math.max(t,e.y)}var uh=function(){var t=ih,e=1,n=1,r=!1;function a(a){var i,s=0;a.eachAfter((function(e){var n=e.children;n?(e.x=function(t){return t.reduce(sh,0)/t.length}(n),e.y=function(t){return 1+t.reduce(oh,0)}(n)):(e.x=i?s+=t(e,i):0,e.y=0,i=e)}));var o=function(t){for(var e;e=t.children;)t=e[0];return t}(a),u=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(a),d=o.x-t(o,u)/2,c=u.x+t(u,o)/2;return a.eachAfter(r?function(t){t.x=(t.x-a.x)*e,t.y=(a.y-t.y)*n}:function(t){t.x=(t.x-d)/(c-d)*e,t.y=(1-(a.y?t.y/a.y:1))*n})}return a.separation=function(e){return arguments.length?(t=e,a):t},a.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],a):r?null:[e,n]},a.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],a):r?[e,n]:null},a};function dh(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ch(t,e){var n,r,a,i,s,o=new hh(t),u=+t.value&&(o.value=t.value),d=[o];for(null==e&&(e=lh);n=d.pop();)if(u&&(n.value=+n.data.value),(a=e(n.data))&&(s=a.length))for(n.children=new Array(s),i=s-1;i>=0;--i)d.push(r=n.children[i]=new hh(a[i])),r.parent=n,r.depth=n.depth+1;return o.eachBefore(_h)}function lh(t){return t.children}function fh(t){t.data=t.data.data}function _h(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function hh(t){this.data=t,this.depth=this.height=0,this.parent=null}hh.prototype=ch.prototype={constructor:hh,count:function(){return this.eachAfter(dh)},each:function(t){var e,n,r,a,i=this,s=[i];do{for(e=s.reverse(),s=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)s.push(n[r])}while(s.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],s=[];a=i.pop();)if(s.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=s.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;t=n.pop(),e=r.pop();for(;t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ch(this).eachBefore(fh)}};var mh=Array.prototype.slice;var ph=function(t){for(var e,n,r=0,a=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(mh.call(t))).length,i=[];r<a;)e=t[r],n&&gh(n,e)?++r:(n=vh(i=yh(i,e)),r=0);return n};function yh(t,e){var n,r;if(Lh(e,t))return[e];for(n=0;n<t.length;++n)if(Mh(e,t[n])&&Lh(Yh(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(Mh(Yh(t[n],t[r]),e)&&Mh(Yh(t[n],e),t[r])&&Mh(Yh(t[r],e),t[n])&&Lh(bh(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}function Mh(t,e){var n=t.r-e.r,r=e.x-t.x,a=e.y-t.y;return n<0||n*n<r*r+a*a}function gh(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,a=e.y-t.y;return n>0&&n*n>r*r+a*a}function Lh(t,e){for(var n=0;n<e.length;++n)if(!gh(t,e[n]))return!1;return!0}function vh(t){switch(t.length){case 1:return{x:(e=t[0]).x,y:e.y,r:e.r};case 2:return Yh(t[0],t[1]);case 3:return bh(t[0],t[1],t[2])}var e}function Yh(t,e){var n=t.x,r=t.y,a=t.r,i=e.x,s=e.y,o=e.r,u=i-n,d=s-r,c=o-a,l=Math.sqrt(u*u+d*d);return{x:(n+i+u/l*c)/2,y:(r+s+d/l*c)/2,r:(l+a+o)/2}}function bh(t,e,n){var r=t.x,a=t.y,i=t.r,s=e.x,o=e.y,u=e.r,d=n.x,c=n.y,l=n.r,f=r-s,_=r-d,h=a-o,m=a-c,p=u-i,y=l-i,M=r*r+a*a-i*i,g=M-s*s-o*o+u*u,L=M-d*d-c*c+l*l,v=_*h-f*m,Y=(h*L-m*g)/(2*v)-r,b=(m*p-h*y)/v,w=(_*g-f*L)/(2*v)-a,k=(f*y-_*p)/v,D=b*b+k*k-1,T=2*(i+Y*b+w*k),x=Y*Y+w*w-i*i,S=-(D?(T+Math.sqrt(T*T-4*D*x))/(2*D):x/T);return{x:r+Y+b*S,y:a+w+k*S,r:S}}function wh(t,e,n){var r,a,i,s,o=t.x-e.x,u=t.y-e.y,d=o*o+u*u;d?(a=e.r+n.r,a*=a,s=t.r+n.r,a>(s*=s)?(r=(d+s-a)/(2*d),i=Math.sqrt(Math.max(0,s/d-r*r)),n.x=t.x-r*o-i*u,n.y=t.y-r*u+i*o):(r=(d+a-s)/(2*d),i=Math.sqrt(Math.max(0,a/d-r*r)),n.x=e.x+r*o-i*u,n.y=e.y+r*u+i*o)):(n.x=e.x+n.r,n.y=e.y)}function kh(t,e){var n=t.r+e.r-1e-6,r=e.x-t.x,a=e.y-t.y;return n>0&&n*n>r*r+a*a}function Dh(t){var e=t._,n=t.next._,r=e.r+n.r,a=(e.x*n.r+n.x*e.r)/r,i=(e.y*n.r+n.y*e.r)/r;return a*a+i*i}function Th(t){this._=t,this.next=null,this.previous=null}function xh(t){if(!(a=t.length))return 0;var e,n,r,a,i,s,o,u,d,c,l;if((e=t[0]).x=0,e.y=0,!(a>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(a>2))return e.r+n.r;wh(n,e,r=t[2]),e=new Th(e),n=new Th(n),r=new Th(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(o=3;o<a;++o){wh(e._,n._,r=t[o]),r=new Th(r),u=n.next,d=e.previous,c=n._.r,l=e._.r;do{if(c<=l){if(kh(u._,r._)){n=u,e.next=n,n.previous=e,--o;continue t}c+=u._.r,u=u.next}else{if(kh(d._,r._)){(e=d).next=n,n.previous=e,--o;continue t}l+=d._.r,d=d.previous}}while(u!==d.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,i=Dh(e);(r=r.next)!==n;)(s=Dh(r))<i&&(e=r,i=s);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=ph(e),o=0;o<a;++o)(e=t[o]).x-=r.x,e.y-=r.y;return r.r}var Sh=function(t){return xh(t),t};function Hh(t){return null==t?null:jh(t)}function jh(t){if("function"!=typeof t)throw new Error;return t}function Ah(){return 0}var Ph=function(t){return function(){return t}};function Eh(t){return Math.sqrt(t.value)}var Oh=function(){var t=null,e=1,n=1,r=Ah;function a(a){return a.x=e/2,a.y=n/2,t?a.eachBefore(Nh(t)).eachAfter(Wh(r,.5)).eachBefore(zh(1)):a.eachBefore(Nh(Eh)).eachAfter(Wh(Ah,1)).eachAfter(Wh(r,a.r/Math.min(e,n))).eachBefore(zh(Math.min(e,n)/(2*a.r))),a}return a.radius=function(e){return arguments.length?(t=Hh(e),a):t},a.size=function(t){return arguments.length?(e=+t[0],n=+t[1],a):[e,n]},a.padding=function(t){return arguments.length?(r="function"==typeof t?t:Ph(+t),a):r},a};function Nh(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Wh(t,e){return function(n){if(r=n.children){var r,a,i,s=r.length,o=t(n)*e||0;if(o)for(a=0;a<s;++a)r[a].r+=o;if(i=xh(r),o)for(a=0;a<s;++a)r[a].r-=o;n.r=i+o}}}function zh(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}var Fh=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},Ch=function(t,e,n,r,a){for(var i,s=t.children,o=-1,u=s.length,d=t.value&&(r-e)/t.value;++o<u;)(i=s[o]).y0=n,i.y1=a,i.x0=e,i.x1=e+=i.value*d},Rh=function(){var t=1,e=1,n=0,r=!1;function a(a){var i=a.height+1;return a.x0=a.y0=n,a.x1=t,a.y1=e/i,a.eachBefore(function(t,e){return function(r){r.children&&Ch(r,r.x0,t*(r.depth+1)/e,r.x1,t*(r.depth+2)/e);var a=r.x0,i=r.y0,s=r.x1-n,o=r.y1-n;s<a&&(a=s=(a+s)/2),o<i&&(i=o=(i+o)/2),r.x0=a,r.y0=i,r.x1=s,r.y1=o}}(e,i)),r&&a.eachBefore(Fh),a}return a.round=function(t){return arguments.length?(r=!!t,a):r},a.size=function(n){return arguments.length?(t=+n[0],e=+n[1],a):[t,e]},a.padding=function(t){return arguments.length?(n=+t,a):n},a},Uh="$",Ih={depth:-1},Jh={};function qh(t){return t.id}function Gh(t){return t.parentId}var Bh=function(){var t=qh,e=Gh;function n(n){var r,a,i,s,o,u,d,c=n.length,l=new Array(c),f={};for(a=0;a<c;++a)r=n[a],o=l[a]=new hh(r),null!=(u=t(r,a,n))&&(u+="")&&(f[d=Uh+(o.id=u)]=d in f?Jh:o);for(a=0;a<c;++a)if(o=l[a],null!=(u=e(n[a],a,n))&&(u+="")){if(!(s=f[Uh+u]))throw new Error("missing: "+u);if(s===Jh)throw new Error("ambiguous: "+u);s.children?s.children.push(o):s.children=[o],o.parent=s}else{if(i)throw new Error("multiple roots");i=o}if(!i)throw new Error("no root");if(i.parent=Ih,i.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(_h),i.parent=null,c>0)throw new Error("cycle");return i}return n.id=function(e){return arguments.length?(t=jh(e),n):t},n.parentId=function(t){return arguments.length?(e=jh(t),n):e},n};function Vh(t,e){return t.parent===e.parent?1:2}function $h(t){var e=t.children;return e?e[0]:t.t}function Zh(t){var e=t.children;return e?e[e.length-1]:t.t}function Kh(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Xh(t,e,n){return t.a.parent===e.parent?t.a:n}function Qh(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}Qh.prototype=Object.create(hh.prototype);var tm=function(){var t=Vh,e=1,n=1,r=null;function a(a){var u=function(t){for(var e,n,r,a,i,s=new Qh(t,0),o=[s];e=o.pop();)if(r=e._.children)for(e.children=new Array(i=r.length),a=i-1;a>=0;--a)o.push(n=e.children[a]=new Qh(r[a],a)),n.parent=e;return(s.parent=new Qh(null,0)).children=[s],s}(a);if(u.eachAfter(i),u.parent.m=-u.z,u.eachBefore(s),r)a.eachBefore(o);else{var d=a,c=a,l=a;a.eachBefore((function(t){t.x<d.x&&(d=t),t.x>c.x&&(c=t),t.depth>l.depth&&(l=t)}));var f=d===c?1:t(d,c)/2,_=f-d.x,h=e/(c.x+f+_),m=n/(l.depth||1);a.eachBefore((function(t){t.x=(t.x+_)*h,t.y=t.depth*m}))}return a}function i(e){var n=e.children,r=e.parent.children,a=e.i?r[e.i-1]:null;if(n){!function(t){for(var e,n=0,r=0,a=t.children,i=a.length;--i>=0;)(e=a[i]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(e);var i=(n[0].z+n[n.length-1].z)/2;a?(e.z=a.z+t(e._,a._),e.m=e.z-i):e.z=i}else a&&(e.z=a.z+t(e._,a._));e.parent.A=function(e,n,r){if(n){for(var a,i=e,s=e,o=n,u=i.parent.children[0],d=i.m,c=s.m,l=o.m,f=u.m;o=Zh(o),i=$h(i),o&&i;)u=$h(u),(s=Zh(s)).a=e,(a=o.z+l-i.z-d+t(o._,i._))>0&&(Kh(Xh(o,e,r),e,a),d+=a,c+=a),l+=o.m,d+=i.m,f+=u.m,c+=s.m;o&&!Zh(s)&&(s.t=o,s.m+=l-c),i&&!$h(u)&&(u.t=i,u.m+=d-f,r=e)}return r}(e,a,e.parent.A||r[0])}function s(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function o(t){t.x*=e,t.y=t.depth*n}return a.separation=function(e){return arguments.length?(t=e,a):t},a.size=function(t){return arguments.length?(r=!1,e=+t[0],n=+t[1],a):r?null:[e,n]},a.nodeSize=function(t){return arguments.length?(r=!0,e=+t[0],n=+t[1],a):r?[e,n]:null},a},em=function(t,e,n,r,a){for(var i,s=t.children,o=-1,u=s.length,d=t.value&&(a-n)/t.value;++o<u;)(i=s[o]).x0=e,i.x1=r,i.y0=n,i.y1=n+=i.value*d},nm=(1+Math.sqrt(5))/2;function rm(t,e,n,r,a,i){for(var s,o,u,d,c,l,f,_,h,m,p,y=[],M=e.children,g=0,L=0,v=M.length,Y=e.value;g<v;){u=a-n,d=i-r;do{c=M[L++].value}while(!c&&L<v);for(l=f=c,p=c*c*(m=Math.max(d/u,u/d)/(Y*t)),h=Math.max(f/p,p/l);L<v;++L){if(c+=o=M[L].value,o<l&&(l=o),o>f&&(f=o),p=c*c*m,(_=Math.max(f/p,p/l))>h){c-=o;break}h=_}y.push(s={value:c,dice:u<d,children:M.slice(g,L)}),s.dice?Ch(s,n,r,a,Y?r+=d*c/Y:i):em(s,n,r,Y?n+=u*c/Y:a,i),Y-=c,g=L}return y}var am=function t(e){function n(t,n,r,a,i){rm(e,t,n,r,a,i)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(nm),im=function(){var t=am,e=!1,n=1,r=1,a=[0],i=Ah,s=Ah,o=Ah,u=Ah,d=Ah;function c(t){return t.x0=t.y0=0,t.x1=n,t.y1=r,t.eachBefore(l),a=[0],e&&t.eachBefore(Fh),t}function l(e){var n=a[e.depth],r=e.x0+n,c=e.y0+n,l=e.x1-n,f=e.y1-n;l<r&&(r=l=(r+l)/2),f<c&&(c=f=(c+f)/2),e.x0=r,e.y0=c,e.x1=l,e.y1=f,e.children&&(n=a[e.depth+1]=i(e)/2,r+=d(e)-n,c+=s(e)-n,(l-=o(e)-n)<r&&(r=l=(r+l)/2),(f-=u(e)-n)<c&&(c=f=(c+f)/2),t(e,r,c,l,f))}return c.round=function(t){return arguments.length?(e=!!t,c):e},c.size=function(t){return arguments.length?(n=+t[0],r=+t[1],c):[n,r]},c.tile=function(e){return arguments.length?(t=jh(e),c):t},c.padding=function(t){return arguments.length?c.paddingInner(t).paddingOuter(t):c.paddingInner()},c.paddingInner=function(t){return arguments.length?(i="function"==typeof t?t:Ph(+t),c):i},c.paddingOuter=function(t){return arguments.length?c.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):c.paddingTop()},c.paddingTop=function(t){return arguments.length?(s="function"==typeof t?t:Ph(+t),c):s},c.paddingRight=function(t){return arguments.length?(o="function"==typeof t?t:Ph(+t),c):o},c.paddingBottom=function(t){return arguments.length?(u="function"==typeof t?t:Ph(+t),c):u},c.paddingLeft=function(t){return arguments.length?(d="function"==typeof t?t:Ph(+t),c):d},c},sm=function(t,e,n,r,a){var i,s,o=t.children,u=o.length,d=new Array(u+1);for(d[0]=s=i=0;i<u;++i)d[i+1]=s+=o[i].value;!function t(e,n,r,a,i,s,u){if(e>=n-1){var c=o[e];return c.x0=a,c.y0=i,c.x1=s,void(c.y1=u)}var l=d[e],f=r/2+l,_=e+1,h=n-1;for(;_<h;){var m=_+h>>>1;d[m]<f?_=m+1:h=m}f-d[_-1]<d[_]-f&&e+1<_&&--_;var p=d[_]-l,y=r-p;if(s-a>u-i){var M=(a*y+s*p)/r;t(e,_,p,a,i,M,u),t(_,n,y,M,i,s,u)}else{var g=(i*y+u*p)/r;t(e,_,p,a,i,s,g),t(_,n,y,a,g,s,u)}}(0,u,t.value,e,n,r,a)},om=function(t,e,n,r,a){(1&t.depth?em:Ch)(t,e,n,r,a)},um=function t(e){function n(t,n,r,a,i){if((s=t._squarify)&&s.ratio===e)for(var s,o,u,d,c,l=-1,f=s.length,_=t.value;++l<f;){for(u=(o=s[l]).children,d=o.value=0,c=u.length;d<c;++d)o.value+=u[d].value;o.dice?Ch(o,n,r,a,r+=(i-r)*o.value/_):em(o,n,r,n+=(a-n)*o.value/_,i),_-=o.value}else t._squarify=s=rm(e,t,n,r,a,i),s.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(nm),dm=function(t){for(var e,n=-1,r=t.length,a=t[r-1],i=0;++n<r;)e=a,a=t[n],i+=e[1]*a[0]-e[0]*a[1];return i/2},cm=function(t){for(var e,n,r=-1,a=t.length,i=0,s=0,o=t[a-1],u=0;++r<a;)e=o,o=t[r],u+=n=e[0]*o[1]-o[0]*e[1],i+=(e[0]+o[0])*n,s+=(e[1]+o[1])*n;return[i/(u*=3),s/u]},lm=function(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])};function fm(t,e){return t[0]-e[0]||t[1]-e[1]}function _m(t){for(var e=t.length,n=[0,1],r=2,a=2;a<e;++a){for(;r>1&&lm(t[n[r-2]],t[n[r-1]],t[a])<=0;)--r;n[r++]=a}return n.slice(0,r)}var hm=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),a=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(fm),e=0;e<n;++e)a[e]=[r[e][0],-r[e][1]];var i=_m(r),s=_m(a),o=s[0]===i[0],u=s[s.length-1]===i[i.length-1],d=[];for(e=i.length-1;e>=0;--e)d.push(t[r[i[e]][2]]);for(e=+o;e<s.length-u;++e)d.push(t[r[s[e]][2]]);return d},mm=function(t,e){for(var n,r,a=t.length,i=t[a-1],s=e[0],o=e[1],u=i[0],d=i[1],c=!1,l=0;l<a;++l)n=(i=t[l])[0],(r=i[1])>o!=d>o&&s<(u-n)*(o-r)/(d-r)+n&&(c=!c),u=n,d=r;return c},pm=function(t){for(var e,n,r=-1,a=t.length,i=t[a-1],s=i[0],o=i[1],u=0;++r<a;)e=s,n=o,e-=s=(i=t[r])[0],n-=o=i[1],u+=Math.sqrt(e*e+n*n);return u},ym=function(){return Math.random()},Mm=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(ym),gm=function t(e){function n(t,n){var r,a;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,a=r*r+i*i}while(!a||a>1);return t+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=t,n}(ym),Lm=function t(e){function n(){var t=gm.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(ym),vm=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(ym),Ym=function t(e){function n(t){var n=vm.source(e)(t);return function(){return n()/t}}return n.source=t,n}(ym),bm=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(ym);function wm(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function km(t,e){switch(arguments.length){case 0:break;case 1:this.interpolator(t);break;default:this.interpolator(e).domain(t)}return this}var Dm=Array.prototype,Tm=Dm.map,xm=Dm.slice,Sm={name:"implicit"};function Hm(){var t=Vs(),e=[],n=[],r=Sm;function a(a){var i=a+"",s=t.get(i);if(!s){if(r!==Sm)return r;t.set(i,s=e.push(a))}return n[(s-1)%n.length]}return a.domain=function(n){if(!arguments.length)return e.slice();e=[],t=Vs();for(var r,i,s=-1,o=n.length;++s<o;)t.has(i=(r=n[s])+"")||t.set(i,e.push(r));return a},a.range=function(t){return arguments.length?(n=xm.call(t),a):n.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return Hm(e,n).unknown(r)},wm.apply(a,arguments),a}function jm(){var t,e,n=Hm().unknown(void 0),r=n.domain,a=n.range,i=[0,1],s=!1,o=0,u=0,d=.5;function c(){var n=r().length,c=i[1]<i[0],l=i[c-0],f=i[1-c];t=(f-l)/Math.max(1,n-o+2*u),s&&(t=Math.floor(t)),l+=(f-l-t*(n-o))*d,e=t*(1-o),s&&(l=Math.round(l),e=Math.round(e));var _=Y(n).map((function(e){return l+t*e}));return a(c?_.reverse():_)}return delete n.unknown,n.domain=function(t){return arguments.length?(r(t),c()):r()},n.range=function(t){return arguments.length?(i=[+t[0],+t[1]],c()):i.slice()},n.rangeRound=function(t){return i=[+t[0],+t[1]],s=!0,c()},n.bandwidth=function(){return e},n.step=function(){return t},n.round=function(t){return arguments.length?(s=!!t,c()):s},n.padding=function(t){return arguments.length?(o=Math.min(1,u=+t),c()):o},n.paddingInner=function(t){return arguments.length?(o=Math.min(1,t),c()):o},n.paddingOuter=function(t){return arguments.length?(u=+t,c()):u},n.align=function(t){return arguments.length?(d=Math.max(0,Math.min(1,t)),c()):d},n.copy=function(){return jm(r(),i).round(s).paddingInner(o).paddingOuter(u).align(d)},wm.apply(c(),arguments)}function Am(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(jm.apply(null,arguments).paddingInner(1))}var Pm=function(t){return function(){return t}},Em=function(t){return+t},Om=[0,1];function Nm(t){return t}function Wm(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:Pm(isNaN(e)?NaN:.5)}function zm(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function Fm(t,e,n){var r=t[0],a=t[1],i=e[0],s=e[1];return a<r?(r=Wm(a,r),i=n(s,i)):(r=Wm(r,a),i=n(i,s)),function(t){return i(r(t))}}function Cm(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),i=new Array(r),s=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<r;)a[s]=Wm(t[s],t[s+1]),i[s]=n(e[s],e[s+1]);return function(e){var n=u(t,e,1,r)-1;return i[n](a[n](e))}}function Rm(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Um(){var t,e,n,r,a,i,s=Om,o=Om,u=Tr,d=Nm;function c(){return r=Math.min(s.length,o.length)>2?Cm:Fm,a=i=null,l}function l(e){return isNaN(e=+e)?n:(a||(a=r(s.map(t),o,u)))(t(d(e)))}return l.invert=function(n){return d(e((i||(i=r(o,s.map(t),Mr)))(n)))},l.domain=function(t){return arguments.length?(s=Tm.call(t,Em),d===Nm||(d=zm(s)),c()):s.slice()},l.range=function(t){return arguments.length?(o=xm.call(t),c()):o.slice()},l.rangeRound=function(t){return o=xm.call(t),u=Hr,c()},l.clamp=function(t){return arguments.length?(d=t?zm(s):Nm,l):d!==Nm},l.interpolate=function(t){return arguments.length?(u=t,c()):u},l.unknown=function(t){return arguments.length?(n=t,l):n},function(n,r){return t=n,e=r,c()}}function Im(t,e){return Um()(t,e)}var Jm=function(t,e,n,r){var a,i=x(t,e,n);switch((r=Fu(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=td(i,s))||(r.precision=a),Ju(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=ed(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=Qu(i))||(r.precision=a-2*("%"===r.type))}return Iu(r)};function qm(t){var e=t.domain;return t.ticks=function(t){var n=e();return D(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Jm(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a=e(),i=0,s=a.length-1,o=a[i],u=a[s];return u<o&&(r=o,o=u,u=r,r=i,i=s,s=r),(r=T(o,u,n))>0?r=T(o=Math.floor(o/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=T(o=Math.ceil(o*r)/r,u=Math.floor(u*r)/r,n)),r>0?(a[i]=Math.floor(o/r)*r,a[s]=Math.ceil(u/r)*r,e(a)):r<0&&(a[i]=Math.ceil(o*r)/r,a[s]=Math.floor(u*r)/r,e(a)),t},t}function Gm(){var t=Im(Nm,Nm);return t.copy=function(){return Rm(t,Gm())},wm.apply(t,arguments),qm(t)}function Bm(t){var e;function n(t){return isNaN(t=+t)?e:t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=Tm.call(e,Em),n):t.slice()},n.unknown=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Bm(t).unknown(e)},t=arguments.length?Tm.call(t,Em):[0,1],qm(n)}var Vm=function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],s=t[a];return s<i&&(n=r,r=a,a=n,n=i,i=s,s=n),t[r]=e.floor(i),t[a]=e.ceil(s),t};function $m(t){return Math.log(t)}function Zm(t){return Math.exp(t)}function Km(t){return-Math.log(-t)}function Xm(t){return-Math.exp(-t)}function Qm(t){return isFinite(t)?+("1e"+t):t<0?0:t}function tp(t){return function(e){return-t(-e)}}function ep(t){var e,n,r=t($m,Zm),a=r.domain,i=10;function s(){return e=function(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}(i),n=function(t){return 10===t?Qm:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}(i),a()[0]<0?(e=tp(e),n=tp(n),t(Km,Xm)):t($m,Zm),r}return r.base=function(t){return arguments.length?(i=+t,s()):i},r.domain=function(t){return arguments.length?(a(t),s()):a()},r.ticks=function(t){var r,s=a(),o=s[0],u=s[s.length-1];(r=u<o)&&(f=o,o=u,u=f);var d,c,l,f=e(o),_=e(u),h=null==t?10:+t,m=[];if(!(i%1)&&_-f<h){if(f=Math.round(f)-1,_=Math.round(_)+1,o>0){for(;f<_;++f)for(c=1,d=n(f);c<i;++c)if(!((l=d*c)<o)){if(l>u)break;m.push(l)}}else for(;f<_;++f)for(c=i-1,d=n(f);c>=1;--c)if(!((l=d*c)<o)){if(l>u)break;m.push(l)}}else m=D(f,_,Math.min(_-f,h)).map(n);return r?m.reverse():m},r.tickFormat=function(t,a){if(null==a&&(a=10===i?".0e":","),"function"!=typeof a&&(a=Iu(a)),t===1/0)return a;null==t&&(t=10);var s=Math.max(1,i*t/r.ticks().length);return function(t){var r=t/n(Math.round(e(t)));return r*i<i-.5&&(r*=i),r<=s?a(t):""}},r.nice=function(){return a(Vm(a(),{floor:function(t){return n(Math.floor(e(t)))},ceil:function(t){return n(Math.ceil(e(t)))}}))},r}function np(){var t=ep(Um()).domain([1,10]);return t.copy=function(){return Rm(t,np()).base(t.base())},wm.apply(t,arguments),t}function rp(t){return function(e){return Math.sign(e)*Math.log1p(Math.abs(e/t))}}function ap(t){return function(e){return Math.sign(e)*Math.expm1(Math.abs(e))*t}}function ip(t){var e=1,n=t(rp(e),ap(e));return n.constant=function(n){return arguments.length?t(rp(e=+n),ap(e)):e},qm(n)}function sp(){var t=ip(Um());return t.copy=function(){return Rm(t,sp()).constant(t.constant())},wm.apply(t,arguments)}function op(t){return function(e){return e<0?-Math.pow(-e,t):Math.pow(e,t)}}function up(t){return t<0?-Math.sqrt(-t):Math.sqrt(t)}function dp(t){return t<0?-t*t:t*t}function cp(t){var e=t(Nm,Nm),n=1;function r(){return 1===n?t(Nm,Nm):.5===n?t(up,dp):t(op(n),op(1/n))}return e.exponent=function(t){return arguments.length?(n=+t,r()):n},qm(e)}function lp(){var t=cp(Um());return t.copy=function(){return Rm(t,lp()).exponent(t.exponent())},wm.apply(t,arguments),t}function fp(){return lp.apply(null,arguments).exponent(.5)}function _p(){var t,e=[],n=[],a=[];function i(){var t=0,r=Math.max(1,n.length);for(a=new Array(r-1);++t<r;)a[t-1]=j(e,t/r);return s}function s(e){return isNaN(e=+e)?t:n[u(a,e)]}return s.invertExtent=function(t){var r=n.indexOf(t);return r<0?[NaN,NaN]:[r>0?a[r-1]:e[0],r<a.length?a[r]:e[e.length-1]]},s.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var n,a=0,s=t.length;a<s;++a)null==(n=t[a])||isNaN(n=+n)||e.push(n);return e.sort(r),i()},s.range=function(t){return arguments.length?(n=xm.call(t),i()):n.slice()},s.unknown=function(e){return arguments.length?(t=e,s):t},s.quantiles=function(){return a.slice()},s.copy=function(){return _p().domain(e).range(n).unknown(t)},wm.apply(s,arguments)}function hp(){var t,e=0,n=1,r=1,a=[.5],i=[0,1];function s(e){return e<=e?i[u(a,e,0,r)]:t}function o(){var t=-1;for(a=new Array(r);++t<r;)a[t]=((t+1)*n-(t-r)*e)/(r+1);return s}return s.domain=function(t){return arguments.length?(e=+t[0],n=+t[1],o()):[e,n]},s.range=function(t){return arguments.length?(r=(i=xm.call(t)).length-1,o()):i.slice()},s.invertExtent=function(t){var s=i.indexOf(t);return s<0?[NaN,NaN]:s<1?[e,a[0]]:s>=r?[a[r-1],n]:[a[s-1],a[s]]},s.unknown=function(e){return arguments.length?(t=e,s):s},s.thresholds=function(){return a.slice()},s.copy=function(){return hp().domain([e,n]).range(i).unknown(t)},wm.apply(qm(s),arguments)}function mp(){var t,e=[.5],n=[0,1],r=1;function a(a){return a<=a?n[u(e,a,0,r)]:t}return a.domain=function(t){return arguments.length?(e=xm.call(t),r=Math.min(e.length,n.length-1),a):e.slice()},a.range=function(t){return arguments.length?(n=xm.call(t),r=Math.min(e.length,n.length-1),a):n.slice()},a.invertExtent=function(t){var r=n.indexOf(t);return[e[r-1],e[r]]},a.unknown=function(e){return arguments.length?(t=e,a):t},a.copy=function(){return mp().domain(e).range(n).unknown(t)},wm.apply(a,arguments)}var pp=new Date,yp=new Date;function Mp(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var s,o=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return o;do{o.push(s=new Date(+n)),e(n,i),t(n)}while(s<n&&n<r);return o},a.filter=function(n){return Mp((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return pp.setTime(+e),yp.setTime(+r),t(pp),t(yp),Math.floor(n(pp,yp))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var gp=Mp((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));gp.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Mp((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):gp:null};var Lp=gp,vp=gp.range,Yp=6e4,bp=6048e5,wp=Mp((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),kp=wp,Dp=wp.range,Tp=Mp((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+e*Yp)}),(function(t,e){return(e-t)/Yp}),(function(t){return t.getMinutes()})),xp=Tp,Sp=Tp.range,Hp=Mp((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Yp)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),jp=Hp,Ap=Hp.range,Pp=Mp((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Yp)/864e5}),(function(t){return t.getDate()-1})),Ep=Pp,Op=Pp.range;function Np(t){return Mp((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Yp)/bp}))}var Wp=Np(0),zp=Np(1),Fp=Np(2),Cp=Np(3),Rp=Np(4),Up=Np(5),Ip=Np(6),Jp=Wp.range,qp=zp.range,Gp=Fp.range,Bp=Cp.range,Vp=Rp.range,$p=Up.range,Zp=Ip.range,Kp=Mp((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Xp=Kp,Qp=Kp.range,ty=Mp((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ty.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mp((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var ey=ty,ny=ty.range,ry=Mp((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*Yp)}),(function(t,e){return(e-t)/Yp}),(function(t){return t.getUTCMinutes()})),ay=ry,iy=ry.range,sy=Mp((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()})),oy=sy,uy=sy.range,dy=Mp((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1})),cy=dy,ly=dy.range;function fy(t){return Mp((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/bp}))}var _y=fy(0),hy=fy(1),my=fy(2),py=fy(3),yy=fy(4),My=fy(5),gy=fy(6),Ly=_y.range,vy=hy.range,Yy=my.range,by=py.range,wy=yy.range,ky=My.range,Dy=gy.range,Ty=Mp((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),xy=Ty,Sy=Ty.range,Hy=Mp((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));Hy.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Mp((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var jy=Hy,Ay=Hy.range;function Py(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ey(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Oy(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Ny(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,s=t.shortDays,o=t.months,u=t.shortMonths,d=Vy(a),c=$y(a),l=Vy(i),f=$y(i),_=Vy(s),h=$y(s),m=Vy(o),p=$y(o),y=Vy(u),M=$y(u),g={a:function(t){return s[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:mM,e:mM,f:LM,H:pM,I:yM,j:MM,L:gM,m:vM,M:YM,p:function(t){return a[+(t.getHours()>=12)]},Q:ZM,s:KM,S:bM,u:wM,U:kM,V:DM,w:TM,W:xM,x:null,X:null,y:SM,Y:HM,Z:jM,"%":$M},L={a:function(t){return s[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:AM,e:AM,f:WM,H:PM,I:EM,j:OM,L:NM,m:zM,M:FM,p:function(t){return a[+(t.getUTCHours()>=12)]},Q:ZM,s:KM,S:CM,u:RM,U:UM,V:IM,w:JM,W:qM,x:null,X:null,y:GM,Y:BM,Z:VM,"%":$M},v={a:function(t,e,n){var r=_.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=M[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=p[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return w(t,e,n,r)},d:iM,e:iM,f:lM,H:oM,I:oM,j:sM,L:cM,m:aM,M:uM,p:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.p=c[r[0].toLowerCase()],n+r[0].length):-1},Q:_M,s:hM,S:dM,u:Ky,U:Xy,V:Qy,w:Zy,W:tM,x:function(t,e,r){return w(t,n,e,r)},X:function(t,e,n){return w(t,r,e,n)},y:nM,Y:eM,Z:rM,"%":fM};function Y(t,e){return function(n){var r,a,i,s=[],o=-1,u=0,d=t.length;for(n instanceof Date||(n=new Date(+n));++o<d;)37===t.charCodeAt(o)&&(s.push(t.slice(u,o)),null!=(a=Uy[r=t.charAt(++o)])?r=t.charAt(++o):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),s.push(r),u=o+1);return s.push(t.slice(u,o)),s.join("")}}function b(t,e){return function(n){var r,a,i=Oy(1900);if(w(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Ey(Oy(i.y))).getUTCDay(),r=a>4||0===a?hy.ceil(r):hy(r),r=cy.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=e(Oy(i.y))).getDay(),r=a>4||0===a?zp.ceil(r):zp(r),r=Ep.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Ey(Oy(i.y)).getUTCDay():e(Oy(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Ey(i)):e(i)}}function w(t,e,n,r){for(var a,i,s=0,o=e.length,u=n.length;s<o;){if(r>=u)return-1;if(37===(a=e.charCodeAt(s++))){if(a=e.charAt(s++),!(i=v[a in Uy?e.charAt(s++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return g.x=Y(n,g),g.X=Y(r,g),g.c=Y(e,g),L.x=Y(n,L),L.X=Y(r,L),L.c=Y(e,L),{format:function(t){var e=Y(t+="",g);return e.toString=function(){return t},e},parse:function(t){var e=b(t+="",Py);return e.toString=function(){return t},e},utcFormat:function(t){var e=Y(t+="",L);return e.toString=function(){return t},e},utcParse:function(t){var e=b(t,Ey);return e.toString=function(){return t},e}}}var Wy,zy,Fy,Cy,Ry,Uy={"-":"",_:" ",0:"0"},Iy=/^\s*\d+/,Jy=/^%/,qy=/[\\^$*+?|[\]().{}]/g;function Gy(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function By(t){return t.replace(qy,"\\$&")}function Vy(t){return new RegExp("^(?:"+t.map(By).join("|")+")","i")}function $y(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Zy(t,e,n){var r=Iy.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ky(t,e,n){var r=Iy.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Xy(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Qy(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function tM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function eM(t,e,n){var r=Iy.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function nM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function rM(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function aM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function iM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function sM(t,e,n){var r=Iy.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function oM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function uM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function dM(t,e,n){var r=Iy.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function cM(t,e,n){var r=Iy.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function lM(t,e,n){var r=Iy.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function fM(t,e,n){var r=Jy.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function _M(t,e,n){var r=Iy.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function hM(t,e,n){var r=Iy.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function mM(t,e){return Gy(t.getDate(),e,2)}function pM(t,e){return Gy(t.getHours(),e,2)}function yM(t,e){return Gy(t.getHours()%12||12,e,2)}function MM(t,e){return Gy(1+Ep.count(ey(t),t),e,3)}function gM(t,e){return Gy(t.getMilliseconds(),e,3)}function LM(t,e){return gM(t,e)+"000"}function vM(t,e){return Gy(t.getMonth()+1,e,2)}function YM(t,e){return Gy(t.getMinutes(),e,2)}function bM(t,e){return Gy(t.getSeconds(),e,2)}function wM(t){var e=t.getDay();return 0===e?7:e}function kM(t,e){return Gy(Wp.count(ey(t),t),e,2)}function DM(t,e){var n=t.getDay();return t=n>=4||0===n?Rp(t):Rp.ceil(t),Gy(Rp.count(ey(t),t)+(4===ey(t).getDay()),e,2)}function TM(t){return t.getDay()}function xM(t,e){return Gy(zp.count(ey(t),t),e,2)}function SM(t,e){return Gy(t.getFullYear()%100,e,2)}function HM(t,e){return Gy(t.getFullYear()%1e4,e,4)}function jM(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Gy(e/60|0,"0",2)+Gy(e%60,"0",2)}function AM(t,e){return Gy(t.getUTCDate(),e,2)}function PM(t,e){return Gy(t.getUTCHours(),e,2)}function EM(t,e){return Gy(t.getUTCHours()%12||12,e,2)}function OM(t,e){return Gy(1+cy.count(jy(t),t),e,3)}function NM(t,e){return Gy(t.getUTCMilliseconds(),e,3)}function WM(t,e){return NM(t,e)+"000"}function zM(t,e){return Gy(t.getUTCMonth()+1,e,2)}function FM(t,e){return Gy(t.getUTCMinutes(),e,2)}function CM(t,e){return Gy(t.getUTCSeconds(),e,2)}function RM(t){var e=t.getUTCDay();return 0===e?7:e}function UM(t,e){return Gy(_y.count(jy(t),t),e,2)}function IM(t,e){var n=t.getUTCDay();return t=n>=4||0===n?yy(t):yy.ceil(t),Gy(yy.count(jy(t),t)+(4===jy(t).getUTCDay()),e,2)}function JM(t){return t.getUTCDay()}function qM(t,e){return Gy(hy.count(jy(t),t),e,2)}function GM(t,e){return Gy(t.getUTCFullYear()%100,e,2)}function BM(t,e){return Gy(t.getUTCFullYear()%1e4,e,4)}function VM(){return"+0000"}function $M(){return"%"}function ZM(t){return+t}function KM(t){return Math.floor(+t/1e3)}function XM(t){return Wy=Ny(t),zy=Wy.format,Fy=Wy.parse,Cy=Wy.utcFormat,Ry=Wy.utcParse,Wy}XM({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var QM=Date.prototype.toISOString?function(t){return t.toISOString()}:Cy("%Y-%m-%dT%H:%M:%S.%LZ");var tg=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:Ry("%Y-%m-%dT%H:%M:%S.%LZ"),eg=1e3,ng=60*eg,rg=60*ng,ag=24*rg,ig=7*ag,sg=30*ag,og=365*ag;function ug(t){return new Date(t)}function dg(t){return t instanceof Date?+t:+new Date(+t)}function cg(t,e,n,r,i,s,o,u,d){var c=Im(Nm,Nm),l=c.invert,f=c.domain,_=d(".%L"),h=d(":%S"),m=d("%I:%M"),p=d("%I %p"),y=d("%a %d"),M=d("%b %d"),g=d("%B"),L=d("%Y"),v=[[o,1,eg],[o,5,5*eg],[o,15,15*eg],[o,30,30*eg],[s,1,ng],[s,5,5*ng],[s,15,15*ng],[s,30,30*ng],[i,1,rg],[i,3,3*rg],[i,6,6*rg],[i,12,12*rg],[r,1,ag],[r,2,2*ag],[n,1,ig],[e,1,sg],[e,3,3*sg],[t,1,og]];function Y(a){return(o(a)<a?_:s(a)<a?h:i(a)<a?m:r(a)<a?p:e(a)<a?n(a)<a?y:M:t(a)<a?g:L)(a)}function b(e,n,r,i){if(null==e&&(e=10),"number"==typeof e){var s=Math.abs(r-n)/e,o=a((function(t){return t[2]})).right(v,s);o===v.length?(i=x(n/og,r/og,e),e=t):o?(i=(o=v[s/v[o-1][2]<v[o][2]/s?o-1:o])[1],e=o[0]):(i=Math.max(x(n,r,e),1),e=u)}return null==i?e:e.every(i)}return c.invert=function(t){return new Date(l(t))},c.domain=function(t){return arguments.length?f(Tm.call(t,dg)):f().map(ug)},c.ticks=function(t,e){var n,r=f(),a=r[0],i=r[r.length-1],s=i<a;return s&&(n=a,a=i,i=n),n=(n=b(t,a,i,e))?n.range(a,i+1):[],s?n.reverse():n},c.tickFormat=function(t,e){return null==e?Y:d(e)},c.nice=function(t,e){var n=f();return(t=b(t,n[0],n[n.length-1],e))?f(Vm(n,t)):c},c.copy=function(){return Rm(c,cg(t,e,n,r,i,s,o,u,d))},c}var lg=function(){return wm.apply(cg(ey,Xp,Wp,Ep,jp,xp,kp,Lp,zy).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},fg=function(){return wm.apply(cg(jy,xy,_y,cy,oy,ay,kp,Lp,Cy).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function _g(){var t,e,n,r,a,i=0,s=1,o=Nm,u=!1;function d(e){return isNaN(e=+e)?a:o(0===n?.5:(e=(r(e)-t)*n,u?Math.max(0,Math.min(1,e)):e))}return d.domain=function(a){return arguments.length?(t=r(i=+a[0]),e=r(s=+a[1]),n=t===e?0:1/(e-t),d):[i,s]},d.clamp=function(t){return arguments.length?(u=!!t,d):u},d.interpolator=function(t){return arguments.length?(o=t,d):o},d.unknown=function(t){return arguments.length?(a=t,d):a},function(a){return r=a,t=a(i),e=a(s),n=t===e?0:1/(e-t),d}}function hg(t,e){return e.domain(t.domain()).interpolator(t.interpolator()).clamp(t.clamp()).unknown(t.unknown())}function mg(){var t=qm(_g()(Nm));return t.copy=function(){return hg(t,mg())},km.apply(t,arguments)}function pg(){var t=ep(_g()).domain([1,10]);return t.copy=function(){return hg(t,pg()).base(t.base())},km.apply(t,arguments)}function yg(){var t=ip(_g());return t.copy=function(){return hg(t,yg()).constant(t.constant())},km.apply(t,arguments)}function Mg(){var t=cp(_g());return t.copy=function(){return hg(t,Mg()).exponent(t.exponent())},km.apply(t,arguments)}function gg(){return Mg.apply(null,arguments).exponent(.5)}function Lg(){var t=[],e=Nm;function n(n){if(!isNaN(n=+n))return e((u(t,n)-1)/(t.length-1))}return n.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var a,i=0,s=e.length;i<s;++i)null==(a=e[i])||isNaN(a=+a)||t.push(a);return t.sort(r),n},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return Lg(e).domain(t)},km.apply(n,arguments)}function vg(){var t,e,n,r,a,i,s,o=0,u=.5,d=1,c=Nm,l=!1;function f(t){return isNaN(t=+t)?s:(t=.5+((t=+i(t))-e)*(t<e?r:a),c(l?Math.max(0,Math.min(1,t)):t))}return f.domain=function(s){return arguments.length?(t=i(o=+s[0]),e=i(u=+s[1]),n=i(d=+s[2]),r=t===e?0:.5/(e-t),a=e===n?0:.5/(n-e),f):[o,u,d]},f.clamp=function(t){return arguments.length?(l=!!t,f):l},f.interpolator=function(t){return arguments.length?(c=t,f):c},f.unknown=function(t){return arguments.length?(s=t,f):s},function(s){return i=s,t=s(o),e=s(u),n=s(d),r=t===e?0:.5/(e-t),a=e===n?0:.5/(n-e),f}}function Yg(){var t=qm(vg()(Nm));return t.copy=function(){return hg(t,Yg())},km.apply(t,arguments)}function bg(){var t=ep(vg()).domain([.1,1,10]);return t.copy=function(){return hg(t,bg()).base(t.base())},km.apply(t,arguments)}function wg(){var t=ip(vg());return t.copy=function(){return hg(t,wg()).constant(t.constant())},km.apply(t,arguments)}function kg(){var t=cp(vg());return t.copy=function(){return hg(t,kg()).exponent(t.exponent())},km.apply(t,arguments)}function Dg(){return kg.apply(null,arguments).exponent(.5)}var Tg=function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n},xg=Tg("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Sg=Tg("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),Hg=Tg("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jg=Tg("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),Ag=Tg("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),Pg=Tg("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),Eg=Tg("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),Og=Tg("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),Ng=Tg("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),Wg=Tg("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),zg=function(t){return hr(t[t.length-1])},Fg=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(Tg),Cg=zg(Fg),Rg=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(Tg),Ug=zg(Rg),Ig=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(Tg),Jg=zg(Ig),qg=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(Tg),Gg=zg(qg),Bg=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(Tg),Vg=zg(Bg),$g=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(Tg),Zg=zg($g),Kg=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(Tg),Xg=zg(Kg),Qg=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(Tg),tL=zg(Qg),eL=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(Tg),nL=zg(eL),rL=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(Tg),aL=zg(rL),iL=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(Tg),sL=zg(iL),oL=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(Tg),uL=zg(oL),dL=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(Tg),cL=zg(dL),lL=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(Tg),fL=zg(lL),_L=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(Tg),hL=zg(_L),mL=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(Tg),pL=zg(mL),yL=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(Tg),ML=zg(yL),gL=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(Tg),LL=zg(gL),vL=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(Tg),YL=zg(vL),bL=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(Tg),wL=zg(bL),kL=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(Tg),DL=zg(kL),TL=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(Tg),xL=zg(TL),SL=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(Tg),HL=zg(SL),jL=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(Tg),AL=zg(jL),PL=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(Tg),EL=zg(PL),OL=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(Tg),NL=zg(OL),WL=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(Tg),zL=zg(WL),FL=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-t*(35.34-t*(2381.73-t*(6402.7-t*(7024.72-2710.57*t)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+t*(170.73+t*(52.82-t*(131.46-t*(176.58-67.37*t)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+t*(442.36-t*(2482.43-t*(6167.24-t*(6614.94-2475.67*t)))))))+")"},CL=$r(nr(300,.5,0),nr(-240,.5,1)),RL=$r(nr(-100,.75,.35),nr(80,1.5,.8)),UL=$r(nr(260,.75,.35),nr(80,1.5,.8)),IL=nr(),JL=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return IL.h=360*t-100,IL.s=1.5-1.5*e,IL.l=.8-.9*e,IL+""},qL=Mn(),GL=Math.PI/3,BL=2*Math.PI/3,VL=function(t){var e;return t=(.5-t)*Math.PI,qL.r=255*(e=Math.sin(t))*e,qL.g=255*(e=Math.sin(t+GL))*e,qL.b=255*(e=Math.sin(t+BL))*e,qL+""},$L=function(t){return t=Math.max(0,Math.min(1,t)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+t*(1172.33-t*(10793.56-t*(33300.12-t*(38394.49-14825.05*t)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+t*(557.33+t*(1225.33-t*(3574.96-t*(1073.77+707.56*t)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+t*(3211.1-t*(15327.97-t*(27814-t*(22569.18-6838.66*t)))))))+")"};function ZL(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}var KL=ZL(Tg("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),XL=ZL(Tg("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),QL=ZL(Tg("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),tv=ZL(Tg("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),ev=function(t){return function(){return t}},nv=Math.abs,rv=Math.atan2,av=Math.cos,iv=Math.max,sv=Math.min,ov=Math.sin,uv=Math.sqrt,dv=1e-12,cv=Math.PI,lv=cv/2,fv=2*cv;function _v(t){return t>=1?lv:t<=-1?-lv:Math.asin(t)}function hv(t){return t.innerRadius}function mv(t){return t.outerRadius}function pv(t){return t.startAngle}function yv(t){return t.endAngle}function Mv(t){return t&&t.padAngle}function gv(t,e,n,r,a,i,s){var o=t-n,u=e-r,d=(s?i:-i)/uv(o*o+u*u),c=d*u,l=-d*o,f=t+c,_=e+l,h=n+c,m=r+l,p=(f+h)/2,y=(_+m)/2,M=h-f,g=m-_,L=M*M+g*g,v=a-i,Y=f*m-h*_,b=(g<0?-1:1)*uv(iv(0,v*v*L-Y*Y)),w=(Y*g-M*b)/L,k=(-Y*M-g*b)/L,D=(Y*g+M*b)/L,T=(-Y*M+g*b)/L,x=w-p,S=k-y,H=D-p,j=T-y;return x*x+S*S>H*H+j*j&&(w=D,k=T),{cx:w,cy:k,x01:-c,y01:-l,x11:w*(a/v-1),y11:k*(a/v-1)}}var Lv=function(){var t=hv,e=mv,n=ev(0),r=null,a=pv,i=yv,s=Mv,o=null;function u(){var u,d,c,l=+t.apply(this,arguments),f=+e.apply(this,arguments),_=a.apply(this,arguments)-lv,h=i.apply(this,arguments)-lv,m=nv(h-_),p=h>_;if(o||(o=u=Fs()),f<l&&(d=f,f=l,l=d),f>dv)if(m>fv-dv)o.moveTo(f*av(_),f*ov(_)),o.arc(0,0,f,_,h,!p),l>dv&&(o.moveTo(l*av(h),l*ov(h)),o.arc(0,0,l,h,_,p));else{var y,M,g=_,L=h,v=_,Y=h,b=m,w=m,k=s.apply(this,arguments)/2,D=k>dv&&(r?+r.apply(this,arguments):uv(l*l+f*f)),T=sv(nv(f-l)/2,+n.apply(this,arguments)),x=T,S=T;if(D>dv){var H=_v(D/l*ov(k)),j=_v(D/f*ov(k));(b-=2*H)>dv?(v+=H*=p?1:-1,Y-=H):(b=0,v=Y=(_+h)/2),(w-=2*j)>dv?(g+=j*=p?1:-1,L-=j):(w=0,g=L=(_+h)/2)}var A=f*av(g),P=f*ov(g),E=l*av(Y),O=l*ov(Y);if(T>dv){var N,W=f*av(L),z=f*ov(L),F=l*av(v),C=l*ov(v);if(m<cv&&(N=function(t,e,n,r,a,i,s,o){var u=n-t,d=r-e,c=s-a,l=o-i,f=l*u-c*d;if(!(f*f<dv))return[t+(f=(c*(e-i)-l*(t-a))/f)*u,e+f*d]}(A,P,F,C,W,z,E,O))){var R=A-N[0],U=P-N[1],I=W-N[0],J=z-N[1],q=1/ov(((c=(R*I+U*J)/(uv(R*R+U*U)*uv(I*I+J*J)))>1?0:c<-1?cv:Math.acos(c))/2),G=uv(N[0]*N[0]+N[1]*N[1]);x=sv(T,(l-G)/(q-1)),S=sv(T,(f-G)/(q+1))}}w>dv?S>dv?(y=gv(F,C,A,P,f,S,p),M=gv(W,z,E,O,f,S,p),o.moveTo(y.cx+y.x01,y.cy+y.y01),S<T?o.arc(y.cx,y.cy,S,rv(y.y01,y.x01),rv(M.y01,M.x01),!p):(o.arc(y.cx,y.cy,S,rv(y.y01,y.x01),rv(y.y11,y.x11),!p),o.arc(0,0,f,rv(y.cy+y.y11,y.cx+y.x11),rv(M.cy+M.y11,M.cx+M.x11),!p),o.arc(M.cx,M.cy,S,rv(M.y11,M.x11),rv(M.y01,M.x01),!p))):(o.moveTo(A,P),o.arc(0,0,f,g,L,!p)):o.moveTo(A,P),l>dv&&b>dv?x>dv?(y=gv(E,O,W,z,l,-x,p),M=gv(A,P,F,C,l,-x,p),o.lineTo(y.cx+y.x01,y.cy+y.y01),x<T?o.arc(y.cx,y.cy,x,rv(y.y01,y.x01),rv(M.y01,M.x01),!p):(o.arc(y.cx,y.cy,x,rv(y.y01,y.x01),rv(y.y11,y.x11),!p),o.arc(0,0,l,rv(y.cy+y.y11,y.cx+y.x11),rv(M.cy+M.y11,M.cx+M.x11),p),o.arc(M.cx,M.cy,x,rv(M.y11,M.x11),rv(M.y01,M.x01),!p))):o.arc(0,0,l,Y,v,p):o.lineTo(E,O)}else o.moveTo(0,0);if(o.closePath(),u)return o=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-cv/2;return[av(r)*n,ov(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:ev(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:ev(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ev(+t),u):r},u.startAngle=function(t){return arguments.length?(a="function"==typeof t?t:ev(+t),u):a},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:ev(+t),u):i},u.padAngle=function(t){return arguments.length?(s="function"==typeof t?t:ev(+t),u):s},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function vv(t){this._context=t}vv.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Yv=function(t){return new vv(t)};function bv(t){return t[0]}function wv(t){return t[1]}var kv=function(){var t=bv,e=wv,n=ev(!0),r=null,a=Yv,i=null;function s(s){var o,u,d,c=s.length,l=!1;for(null==r&&(i=a(d=Fs())),o=0;o<=c;++o)!(o<c&&n(u=s[o],o,s))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+t(u,o,s),+e(u,o,s));if(d)return i=null,d+""||null}return s.x=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:ev(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:ev(!!t),s):n},s.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),s):a},s.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),s):r},s},Dv=function(){var t=bv,e=null,n=ev(0),r=wv,a=ev(!0),i=null,s=Yv,o=null;function u(u){var d,c,l,f,_,h=u.length,m=!1,p=new Array(h),y=new Array(h);for(null==i&&(o=s(_=Fs())),d=0;d<=h;++d){if(!(d<h&&a(f=u[d],d,u))===m)if(m=!m)c=d,o.areaStart(),o.lineStart();else{for(o.lineEnd(),o.lineStart(),l=d-1;l>=c;--l)o.point(p[l],y[l]);o.lineEnd(),o.areaEnd()}m&&(p[d]=+t(f,d,u),y[d]=+n(f,d,u),o.point(e?+e(f,d,u):p[d],r?+r(f,d,u):y[d]))}if(_)return o=null,_+""||null}function d(){return kv().defined(a).curve(s).context(i)}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:ev(+n),e=null,u):t},u.x0=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),u):t},u.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:ev(+t),u):e},u.y=function(t){return arguments.length?(n="function"==typeof t?t:ev(+t),r=null,u):n},u.y0=function(t){return arguments.length?(n="function"==typeof t?t:ev(+t),u):n},u.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:ev(+t),u):r},u.lineX0=u.lineY0=function(){return d().x(t).y(n)},u.lineY1=function(){return d().x(t).y(r)},u.lineX1=function(){return d().x(e).y(n)},u.defined=function(t){return arguments.length?(a="function"==typeof t?t:ev(!!t),u):a},u.curve=function(t){return arguments.length?(s=t,null!=i&&(o=s(i)),u):s},u.context=function(t){return arguments.length?(null==t?i=o=null:o=s(i=t),u):i},u},Tv=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},xv=function(t){return t},Sv=function(){var t=xv,e=Tv,n=null,r=ev(0),a=ev(fv),i=ev(0);function s(s){var o,u,d,c,l,f=s.length,_=0,h=new Array(f),m=new Array(f),p=+r.apply(this,arguments),y=Math.min(fv,Math.max(-fv,a.apply(this,arguments)-p)),M=Math.min(Math.abs(y)/f,i.apply(this,arguments)),g=M*(y<0?-1:1);for(o=0;o<f;++o)(l=m[h[o]=o]=+t(s[o],o,s))>0&&(_+=l);for(null!=e?h.sort((function(t,n){return e(m[t],m[n])})):null!=n&&h.sort((function(t,e){return n(s[t],s[e])})),o=0,d=_?(y-f*g)/_:0;o<f;++o,p=c)u=h[o],c=p+((l=m[u])>0?l*d:0)+g,m[u]={data:s[u],index:o,value:l,startAngle:p,endAngle:c,padAngle:M};return m}return s.value=function(e){return arguments.length?(t="function"==typeof e?e:ev(+e),s):t},s.sortValues=function(t){return arguments.length?(e=t,n=null,s):e},s.sort=function(t){return arguments.length?(n=t,e=null,s):n},s.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:ev(+t),s):r},s.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:ev(+t),s):a},s.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:ev(+t),s):i},s},Hv=Av(Yv);function jv(t){this._curve=t}function Av(t){function e(e){return new jv(t(e))}return e._curve=t,e}function Pv(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(Av(t)):e()._curve},t}jv.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var Ev=function(){return Pv(kv().curve(Hv))},Ov=function(){var t=Dv().curve(Hv),e=t.curve,n=t.lineX0,r=t.lineX1,a=t.lineY0,i=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return Pv(n())},delete t.lineX0,t.lineEndAngle=function(){return Pv(r())},delete t.lineX1,t.lineInnerRadius=function(){return Pv(a())},delete t.lineY0,t.lineOuterRadius=function(){return Pv(i())},delete t.lineY1,t.curve=function(t){return arguments.length?e(Av(t)):e()._curve},t},Nv=function(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]},Wv=Array.prototype.slice;function zv(t){return t.source}function Fv(t){return t.target}function Cv(t){var e=zv,n=Fv,r=bv,a=wv,i=null;function s(){var s,o=Wv.call(arguments),u=e.apply(this,o),d=n.apply(this,o);if(i||(i=s=Fs()),t(i,+r.apply(this,(o[0]=u,o)),+a.apply(this,o),+r.apply(this,(o[0]=d,o)),+a.apply(this,o)),s)return i=null,s+""||null}return s.source=function(t){return arguments.length?(e=t,s):e},s.target=function(t){return arguments.length?(n=t,s):n},s.x=function(t){return arguments.length?(r="function"==typeof t?t:ev(+t),s):r},s.y=function(t){return arguments.length?(a="function"==typeof t?t:ev(+t),s):a},s.context=function(t){return arguments.length?(i=null==t?null:t,s):i},s}function Rv(t,e,n,r,a){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,a,r,a)}function Uv(t,e,n,r,a){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+a)/2,r,n,r,a)}function Iv(t,e,n,r,a){var i=Nv(e,n),s=Nv(e,n=(n+a)/2),o=Nv(r,n),u=Nv(r,a);t.moveTo(i[0],i[1]),t.bezierCurveTo(s[0],s[1],o[0],o[1],u[0],u[1])}function Jv(){return Cv(Rv)}function qv(){return Cv(Uv)}function Gv(){var t=Cv(Iv);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Bv={draw:function(t,e){var n=Math.sqrt(e/cv);t.moveTo(n,0),t.arc(0,0,n,0,fv)}},Vv={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},$v=Math.sqrt(1/3),Zv=2*$v,Kv={draw:function(t,e){var n=Math.sqrt(e/Zv),r=n*$v;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},Xv=Math.sin(cv/10)/Math.sin(7*cv/10),Qv=Math.sin(fv/10)*Xv,tY=-Math.cos(fv/10)*Xv,eY={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=Qv*n,a=tY*n;t.moveTo(0,-n),t.lineTo(r,a);for(var i=1;i<5;++i){var s=fv*i/5,o=Math.cos(s),u=Math.sin(s);t.lineTo(u*n,-o*n),t.lineTo(o*r-u*a,u*r+o*a)}t.closePath()}},nY={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},rY=Math.sqrt(3),aY={draw:function(t,e){var n=-Math.sqrt(e/(3*rY));t.moveTo(0,2*n),t.lineTo(-rY*n,-n),t.lineTo(rY*n,-n),t.closePath()}},iY=Math.sqrt(3)/2,sY=1/Math.sqrt(12),oY=3*(sY/2+1),uY={draw:function(t,e){var n=Math.sqrt(e/oY),r=n/2,a=n*sY,i=r,s=n*sY+n,o=-i,u=s;t.moveTo(r,a),t.lineTo(i,s),t.lineTo(o,u),t.lineTo(-.5*r-iY*a,iY*r+-.5*a),t.lineTo(-.5*i-iY*s,iY*i+-.5*s),t.lineTo(-.5*o-iY*u,iY*o+-.5*u),t.lineTo(-.5*r+iY*a,-.5*a-iY*r),t.lineTo(-.5*i+iY*s,-.5*s-iY*i),t.lineTo(-.5*o+iY*u,-.5*u-iY*o),t.closePath()}},dY=[Bv,Vv,Kv,nY,eY,aY,uY],cY=function(){var t=ev(Bv),e=ev(64),n=null;function r(){var r;if(n||(n=r=Fs()),t.apply(this,arguments).draw(n,+e.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(e){return arguments.length?(t="function"==typeof e?e:ev(e),r):t},r.size=function(t){return arguments.length?(e="function"==typeof t?t:ev(+t),r):e},r.context=function(t){return arguments.length?(n=null==t?null:t,r):n},r},lY=function(){};function fY(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function _Y(t){this._context=t}_Y.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:fY(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:fY(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var hY=function(t){return new _Y(t)};function mY(t){this._context=t}mY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:fY(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var pY=function(t){return new mY(t)};function yY(t){this._context=t}yY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:fY(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};var MY=function(t){return new yY(t)};function gY(t,e){this._basis=new _Y(t),this._beta=e}gY.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,a=t[0],i=e[0],s=t[n]-a,o=e[n]-i,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*t[u]+(1-this._beta)*(a+r*s),this._beta*e[u]+(1-this._beta)*(i+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var LY=function t(e){function n(t){return 1===e?new _Y(t):new gY(t,e)}return n.beta=function(e){return t(+e)},n}(.85);function vY(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function YY(t,e){this._context=t,this._k=(1-e)/6}YY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:vY(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:vY(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var bY=function t(e){function n(t){return new YY(t,e)}return n.tension=function(e){return t(+e)},n}(0);function wY(t,e){this._context=t,this._k=(1-e)/6}wY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:vY(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var kY=function t(e){function n(t){return new wY(t,e)}return n.tension=function(e){return t(+e)},n}(0);function DY(t,e){this._context=t,this._k=(1-e)/6}DY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:vY(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var TY=function t(e){function n(t){return new DY(t,e)}return n.tension=function(e){return t(+e)},n}(0);function xY(t,e,n){var r=t._x1,a=t._y1,i=t._x2,s=t._y2;if(t._l01_a>dv){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,u=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/u,a=(a*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/u}if(t._l23_a>dv){var d=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);i=(i*d+t._x1*t._l23_2a-e*t._l12_2a)/c,s=(s*d+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,a,i,s,t._x2,t._y2)}function SY(t,e){this._context=t,this._alpha=e}SY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:xY(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var HY=function t(e){function n(t){return e?new SY(t,e):new YY(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function jY(t,e){this._context=t,this._alpha=e}jY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:xY(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var AY=function t(e){function n(t){return e?new jY(t,e):new wY(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function PY(t,e){this._context=t,this._alpha=e}PY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:xY(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var EY=function t(e){function n(t){return e?new PY(t,e):new DY(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);function OY(t){this._context=t}OY.prototype={areaStart:lY,areaEnd:lY,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};var NY=function(t){return new OY(t)};function WY(t){return t<0?-1:1}function zY(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),s=(n-t._y1)/(a||r<0&&-0),o=(i*a+s*r)/(r+a);return(WY(i)+WY(s))*Math.min(Math.abs(i),Math.abs(s),.5*Math.abs(o))||0}function FY(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function CY(t,e,n){var r=t._x0,a=t._y0,i=t._x1,s=t._y1,o=(i-r)/3;t._context.bezierCurveTo(r+o,a+o*e,i-o,s-o*n,i,s)}function RY(t){this._context=t}function UY(t){this._context=new IY(t)}function IY(t){this._context=t}function JY(t){return new RY(t)}function qY(t){return new UY(t)}function GY(t){this._context=t}function BY(t){var e,n,r=t.length-1,a=new Array(r),i=new Array(r),s=new Array(r);for(a[0]=0,i[0]=2,s[0]=t[0]+2*t[1],e=1;e<r-1;++e)a[e]=1,i[e]=4,s[e]=4*t[e]+2*t[e+1];for(a[r-1]=2,i[r-1]=7,s[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=a[e]/i[e-1],i[e]-=n,s[e]-=n*s[e-1];for(a[r-1]=s[r-1]/i[r-1],e=r-2;e>=0;--e)a[e]=(s[e]-a[e+1])/i[e];for(i[r-1]=(t[r]+a[r-1])/2,e=0;e<r-1;++e)i[e]=2*t[e+1]-a[e+1];return[a,i]}RY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:CY(this,this._t0,FY(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,CY(this,FY(this,n=zY(this,t,e)),n);break;default:CY(this,this._t0,n=zY(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(UY.prototype=Object.create(RY.prototype)).point=function(t,e){RY.prototype.point.call(this,e,t)},IY.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}},GY.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=BY(t),a=BY(e),i=0,s=1;s<n;++i,++s)this._context.bezierCurveTo(r[0][i],a[0][i],r[1][i],a[1][i],t[s],e[s]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var VY=function(t){return new GY(t)};function $Y(t,e){this._context=t,this._t=e}$Y.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};var ZY=function(t){return new $Y(t,.5)};function KY(t){return new $Y(t,0)}function XY(t){return new $Y(t,1)}var QY=function(t,e){if((a=t.length)>1)for(var n,r,a,i=1,s=t[e[0]],o=s.length;i<a;++i)for(r=s,s=t[e[i]],n=0;n<o;++n)s[n][1]+=s[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},tb=function(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n};function eb(t,e){return t[e]}var nb=function(){var t=ev([]),e=tb,n=QY,r=eb;function a(a){var i,s,o=t.apply(this,arguments),u=a.length,d=o.length,c=new Array(d);for(i=0;i<d;++i){for(var l,f=o[i],_=c[i]=new Array(u),h=0;h<u;++h)_[h]=l=[0,+r(a[h],f,h,a)],l.data=a[h];_.key=f}for(i=0,s=e(c);i<d;++i)c[s[i]].index=i;return n(c,s),c}return a.keys=function(e){return arguments.length?(t="function"==typeof e?e:ev(Wv.call(e)),a):t},a.value=function(t){return arguments.length?(r="function"==typeof t?t:ev(+t),a):r},a.order=function(t){return arguments.length?(e=null==t?tb:"function"==typeof t?t:ev(Wv.call(t)),a):e},a.offset=function(t){return arguments.length?(n=null==t?QY:t,a):n},a},rb=function(t,e){if((r=t.length)>0){for(var n,r,a,i=0,s=t[0].length;i<s;++i){for(a=n=0;n<r;++n)a+=t[n][i][1]||0;if(a)for(n=0;n<r;++n)t[n][i][1]/=a}QY(t,e)}},ab=function(t,e){if((o=t.length)>0)for(var n,r,a,i,s,o,u=0,d=t[e[0]].length;u<d;++u)for(i=s=0,n=0;n<o;++n)(a=(r=t[e[n]][u])[1]-r[0])>=0?(r[0]=i,r[1]=i+=a):a<0?(r[1]=s,r[0]=s+=a):r[0]=i},ib=function(t,e){if((n=t.length)>0){for(var n,r=0,a=t[e[0]],i=a.length;r<i;++r){for(var s=0,o=0;s<n;++s)o+=t[s][r][1]||0;a[r][1]+=a[r][0]=-o/2}QY(t,e)}},sb=function(t,e){if((a=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,a,i=0,s=1;s<r;++s){for(var o=0,u=0,d=0;o<a;++o){for(var c=t[e[o]],l=c[s][1]||0,f=(l-(c[s-1][1]||0))/2,_=0;_<o;++_){var h=t[e[_]];f+=(h[s][1]||0)-(h[s-1][1]||0)}u+=l,d+=f*l}n[s-1][1]+=n[s-1][0]=i,u&&(i-=d/u)}n[s-1][1]+=n[s-1][0]=i,QY(t,e)}},ob=function(t){var e=t.map(ub);return tb(t).sort((function(t,n){return e[t]-e[n]}))};function ub(t){for(var e,n=-1,r=0,a=t.length,i=-1/0;++n<a;)(e=+t[n][1])>i&&(i=e,r=n);return r}var db=function(t){var e=t.map(cb);return tb(t).sort((function(t,n){return e[t]-e[n]}))};function cb(t){for(var e,n=0,r=-1,a=t.length;++r<a;)(e=+t[r][1])&&(n+=e);return n}var lb=function(t){return db(t).reverse()},fb=function(t){var e,n,r=t.length,a=t.map(cb),i=ob(t),s=0,o=0,u=[],d=[];for(e=0;e<r;++e)n=i[e],s<o?(s+=a[n],u.push(n)):(o+=a[n],d.push(n));return d.reverse().concat(u)},_b=function(t){return tb(t).reverse()},hb=function(t){return function(){return t}};function mb(t){return t[0]}function pb(t){return t[1]}function yb(){this._=null}function Mb(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function gb(t,e){var n=e,r=e.R,a=n.U;a?a.L===n?a.L=r:a.R=r:t._=r,r.U=a,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Lb(t,e){var n=e,r=e.L,a=n.U;a?a.L===n?a.L=r:a.R=r:t._=r,r.U=a,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function vb(t){for(;t.L;)t=t.L;return t}yb.prototype={constructor:yb,insert:function(t,e){var n,r,a;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=vb(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(a=r.R)&&a.C?(n.C=a.C=!1,r.C=!0,t=r):(t===n.R&&(gb(this,n),n=(t=n).U),n.C=!1,r.C=!0,Lb(this,r)):(a=r.L)&&a.C?(n.C=a.C=!1,r.C=!0,t=r):(t===n.L&&(Lb(this,n),n=(t=n).U),n.C=!1,r.C=!0,gb(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,a=t.U,i=t.L,s=t.R;if(n=i?s?vb(s):i:s,a?a.L===t?a.L=n:a.R=n:this._=n,i&&s?(r=n.C,n.C=t.C,n.L=i,i.U=n,n!==s?(a=n.U,n.U=t.U,t=n.R,a.L=t,n.R=s,s.U=n):(n.U=a,a=n,t=n.R)):(r=t.C,t=n),t&&(t.U=a),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===a.L){if((e=a.R).C&&(e.C=!1,a.C=!0,gb(this,a),e=a.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Lb(this,e),e=a.R),e.C=a.C,a.C=e.R.C=!1,gb(this,a),t=this._;break}}else if((e=a.L).C&&(e.C=!1,a.C=!0,Lb(this,a),e=a.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,gb(this,e),e=a.L),e.C=a.C,a.C=e.L.C=!1,Lb(this,a),t=this._;break}e.C=!0,t=a,a=a.U}while(!t.C);t&&(t.C=!1)}}};var Yb=yb;function bb(t,e,n,r){var a=[null,null],i=Bb.push(a)-1;return a.left=t,a.right=e,n&&kb(a,t,e,n),r&&kb(a,e,t,r),qb[t.index].halfedges.push(i),qb[e.index].halfedges.push(i),a}function wb(t,e,n){var r=[e,n];return r.left=t,r}function kb(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function Db(t,e,n,r,a){var i,s=t[0],o=t[1],u=s[0],d=s[1],c=0,l=1,f=o[0]-u,_=o[1]-d;if(i=e-u,f||!(i>0)){if(i/=f,f<0){if(i<c)return;i<l&&(l=i)}else if(f>0){if(i>l)return;i>c&&(c=i)}if(i=r-u,f||!(i<0)){if(i/=f,f<0){if(i>l)return;i>c&&(c=i)}else if(f>0){if(i<c)return;i<l&&(l=i)}if(i=n-d,_||!(i>0)){if(i/=_,_<0){if(i<c)return;i<l&&(l=i)}else if(_>0){if(i>l)return;i>c&&(c=i)}if(i=a-d,_||!(i<0)){if(i/=_,_<0){if(i>l)return;i>c&&(c=i)}else if(_>0){if(i<c)return;i<l&&(l=i)}return!(c>0||l<1)||(c>0&&(t[0]=[u+c*f,d+c*_]),l<1&&(t[1]=[u+l*f,d+l*_]),!0)}}}}}function Tb(t,e,n,r,a){var i=t[1];if(i)return!0;var s,o,u=t[0],d=t.left,c=t.right,l=d[0],f=d[1],_=c[0],h=c[1],m=(l+_)/2,p=(f+h)/2;if(h===f){if(m<e||m>=r)return;if(l>_){if(u){if(u[1]>=a)return}else u=[m,n];i=[m,a]}else{if(u){if(u[1]<n)return}else u=[m,a];i=[m,n]}}else if(o=p-(s=(l-_)/(h-f))*m,s<-1||s>1)if(l>_){if(u){if(u[1]>=a)return}else u=[(n-o)/s,n];i=[(a-o)/s,a]}else{if(u){if(u[1]<n)return}else u=[(a-o)/s,a];i=[(n-o)/s,n]}else if(f<h){if(u){if(u[0]>=r)return}else u=[e,s*e+o];i=[r,s*r+o]}else{if(u){if(u[0]<e)return}else u=[r,s*r+o];i=[e,s*e+o]}return t[0]=u,t[1]=i,!0}function xb(t,e){var n=t.site,r=e.left,a=e.right;return n===a&&(a=r,r=n),a?Math.atan2(a[1]-r[1],a[0]-r[0]):(n===r?(r=e[1],a=e[0]):(r=e[0],a=e[1]),Math.atan2(r[0]-a[0],a[1]-r[1]))}function Sb(t,e){return e[+(e.left!==t.site)]}function Hb(t,e){return e[+(e.left===t.site)]}var jb,Ab=[];function Pb(){Mb(this),this.x=this.y=this.arc=this.site=this.cy=null}function Eb(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,a=t.site,i=n.site;if(r!==i){var s=a[0],o=a[1],u=r[0]-s,d=r[1]-o,c=i[0]-s,l=i[1]-o,f=2*(u*l-d*c);if(!(f>=-$b)){var _=u*u+d*d,h=c*c+l*l,m=(l*_-d*h)/f,p=(u*h-c*_)/f,y=Ab.pop()||new Pb;y.arc=t,y.site=a,y.x=m+s,y.y=(y.cy=p+o)+Math.sqrt(m*m+p*p),t.circle=y;for(var M=null,g=Gb._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){M=g.P;break}g=g.L}else{if(!g.R){M=g;break}g=g.R}Gb.insert(M,y),M||(jb=y)}}}}function Ob(t){var e=t.circle;e&&(e.P||(jb=e.N),Gb.remove(e),Ab.push(e),Mb(e),t.circle=null)}var Nb=[];function Wb(){Mb(this),this.edge=this.site=this.circle=null}function zb(t){var e=Nb.pop()||new Wb;return e.site=t,e}function Fb(t){Ob(t),Jb.remove(t),Nb.push(t),Mb(t)}function Cb(t){var e=t.circle,n=e.x,r=e.cy,a=[n,r],i=t.P,s=t.N,o=[t];Fb(t);for(var u=i;u.circle&&Math.abs(n-u.circle.x)<Vb&&Math.abs(r-u.circle.cy)<Vb;)i=u.P,o.unshift(u),Fb(u),u=i;o.unshift(u),Ob(u);for(var d=s;d.circle&&Math.abs(n-d.circle.x)<Vb&&Math.abs(r-d.circle.cy)<Vb;)s=d.N,o.push(d),Fb(d),d=s;o.push(d),Ob(d);var c,l=o.length;for(c=1;c<l;++c)d=o[c],u=o[c-1],kb(d.edge,u.site,d.site,a);u=o[0],(d=o[l-1]).edge=bb(u.site,d.site,null,a),Eb(u),Eb(d)}function Rb(t){for(var e,n,r,a,i=t[0],s=t[1],o=Jb._;o;)if((r=Ub(o,s)-i)>Vb)o=o.L;else{if(!((a=i-Ib(o,s))>Vb)){r>-Vb?(e=o.P,n=o):a>-Vb?(e=o,n=o.N):e=n=o;break}if(!o.R){e=o;break}o=o.R}!function(t){qb[t.index]={site:t,halfedges:[]}}(t);var u=zb(t);if(Jb.insert(e,u),e||n){if(e===n)return Ob(e),n=zb(e.site),Jb.insert(u,n),u.edge=n.edge=bb(e.site,u.site),Eb(e),void Eb(n);if(n){Ob(e),Ob(n);var d=e.site,c=d[0],l=d[1],f=t[0]-c,_=t[1]-l,h=n.site,m=h[0]-c,p=h[1]-l,y=2*(f*p-_*m),M=f*f+_*_,g=m*m+p*p,L=[(p*M-_*g)/y+c,(f*g-m*M)/y+l];kb(n.edge,d,h,L),u.edge=bb(d,t,null,L),n.edge=bb(t,h,null,L),Eb(e),Eb(n)}else u.edge=bb(e.site,u.site)}}function Ub(t,e){var n=t.site,r=n[0],a=n[1],i=a-e;if(!i)return r;var s=t.P;if(!s)return-1/0;var o=(n=s.site)[0],u=n[1],d=u-e;if(!d)return o;var c=o-r,l=1/i-1/d,f=c/d;return l?(-f+Math.sqrt(f*f-2*l*(c*c/(-2*d)-u+d/2+a-i/2)))/l+r:(r+o)/2}function Ib(t,e){var n=t.N;if(n)return Ub(n,e);var r=t.site;return r[1]===e?r[0]:1/0}var Jb,qb,Gb,Bb,Vb=1e-6,$b=1e-12;function Zb(t,e){return e[1]-t[1]||e[0]-t[0]}function Kb(t,e){var n,r,a,i=t.sort(Zb).pop();for(Bb=[],qb=new Array(t.length),Jb=new Yb,Gb=new Yb;;)if(a=jb,i&&(!a||i[1]<a.y||i[1]===a.y&&i[0]<a.x))i[0]===n&&i[1]===r||(Rb(i),n=i[0],r=i[1]),i=t.pop();else{if(!a)break;Cb(a.arc)}if(function(){for(var t,e,n,r,a=0,i=qb.length;a<i;++a)if((t=qb[a])&&(r=(e=t.halfedges).length)){var s=new Array(r),o=new Array(r);for(n=0;n<r;++n)s[n]=n,o[n]=xb(t,Bb[e[n]]);for(s.sort((function(t,e){return o[e]-o[t]})),n=0;n<r;++n)o[n]=e[s[n]];for(n=0;n<r;++n)e[n]=o[n]}}(),e){var s=+e[0][0],o=+e[0][1],u=+e[1][0],d=+e[1][1];!function(t,e,n,r){for(var a,i=Bb.length;i--;)Tb(a=Bb[i],t,e,n,r)&&Db(a,t,e,n,r)&&(Math.abs(a[0][0]-a[1][0])>Vb||Math.abs(a[0][1]-a[1][1])>Vb)||delete Bb[i]}(s,o,u,d),function(t,e,n,r){var a,i,s,o,u,d,c,l,f,_,h,m,p=qb.length,y=!0;for(a=0;a<p;++a)if(i=qb[a]){for(s=i.site,o=(u=i.halfedges).length;o--;)Bb[u[o]]||u.splice(o,1);for(o=0,d=u.length;o<d;)h=(_=Hb(i,Bb[u[o]]))[0],m=_[1],l=(c=Sb(i,Bb[u[++o%d]]))[0],f=c[1],(Math.abs(h-l)>Vb||Math.abs(m-f)>Vb)&&(u.splice(o,0,Bb.push(wb(s,_,Math.abs(h-t)<Vb&&r-m>Vb?[t,Math.abs(l-t)<Vb?f:r]:Math.abs(m-r)<Vb&&n-h>Vb?[Math.abs(f-r)<Vb?l:n,r]:Math.abs(h-n)<Vb&&m-e>Vb?[n,Math.abs(l-n)<Vb?f:e]:Math.abs(m-e)<Vb&&h-t>Vb?[Math.abs(f-e)<Vb?l:t,e]:null))-1),++d);d&&(y=!1)}if(y){var M,g,L,v=1/0;for(a=0,y=null;a<p;++a)(i=qb[a])&&(L=(M=(s=i.site)[0]-t)*M+(g=s[1]-e)*g)<v&&(v=L,y=i);if(y){var Y=[t,e],b=[t,r],w=[n,r],k=[n,e];y.halfedges.push(Bb.push(wb(s=y.site,Y,b))-1,Bb.push(wb(s,b,w))-1,Bb.push(wb(s,w,k))-1,Bb.push(wb(s,k,Y))-1)}}for(a=0;a<p;++a)(i=qb[a])&&(i.halfedges.length||delete qb[a])}(s,o,u,d)}this.edges=Bb,this.cells=qb,Jb=Gb=Bb=qb=null}Kb.prototype={constructor:Kb,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return Sb(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(i=(a=n.halfedges).length)for(var a,i,s,o,u,d,c=n.site,l=-1,f=e[a[i-1]],_=f.left===c?f.right:f.left;++l<i;)s=_,_=(f=e[a[l]]).left===c?f.right:f.left,s&&_&&r<s.index&&r<_.index&&(u=s,d=_,((o=c)[0]-d[0])*(u[1]-o[1])-(o[0]-u[0])*(d[1]-o[1])<0)&&t.push([c.data,s.data,_.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,a,i=this,s=i._found||0,o=i.cells.length;!(a=i.cells[s]);)if(++s>=o)return null;var u=t-a.site[0],d=e-a.site[1],c=u*u+d*d;do{a=i.cells[r=s],s=null,a.halfedges.forEach((function(n){var r=i.edges[n],o=r.left;if(o!==a.site&&o||(o=r.right)){var u=t-o[0],d=e-o[1],l=u*u+d*d;l<c&&(c=l,s=o.index)}}))}while(null!==s);return i._found=r,null==n||c<=n*n?a.site:null}};var Xb=function(){var t=mb,e=pb,n=null;function r(r){return new Kb(r.map((function(n,a){var i=[Math.round(t(n,a,r)/Vb)*Vb,Math.round(e(n,a,r)/Vb)*Vb];return i.index=a,i.data=n,i})),n)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(e){return arguments.length?(t="function"==typeof e?e:hb(+e),r):t},r.y=function(t){return arguments.length?(e="function"==typeof t?t:hb(+t),r):e},r.extent=function(t){return arguments.length?(n=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(t){return arguments.length?(n=null==t?null:[[0,0],[+t[0],+t[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},Qb=function(t){return function(){return t}};function tw(t,e,n){this.target=t,this.type=e,this.transform=n}function ew(t,e,n){this.k=t,this.x=e,this.y=n}ew.prototype={constructor:ew,scale:function(t){return 1===t?this:new ew(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new ew(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var nw=new ew(1,0,0);function rw(t){for(;!t.__zoom;)if(!(t=t.parentNode))return nw;return t.__zoom}function aw(){he.stopImmediatePropagation()}rw.prototype=ew.prototype;var iw=function(){he.preventDefault(),he.stopImmediatePropagation()};function sw(){return!he.ctrlKey&&!he.button}function ow(){var t=this;return t instanceof SVGElement?(t=t.ownerSVGElement||t).hasAttribute("viewBox")?[[(t=t.viewBox.baseVal).x,t.y],[t.x+t.width,t.y+t.height]]:[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]:[[0,0],[t.clientWidth,t.clientHeight]]}function uw(){return this.__zoom||nw}function dw(){return-he.deltaY*(1===he.deltaMode?.05:he.deltaMode?1:.002)}function cw(){return navigator.maxTouchPoints||"ontouchstart"in this}function lw(t,e,n){var r=t.invertX(e[0][0])-n[0][0],a=t.invertX(e[1][0])-n[1][0],i=t.invertY(e[0][1])-n[0][1],s=t.invertY(e[1][1])-n[1][1];return t.translate(a>r?(r+a)/2:Math.min(0,r)||Math.max(0,a),s>i?(i+s)/2:Math.min(0,i)||Math.max(0,s))}var fw=function(){var t,e,n=sw,r=ow,a=lw,i=dw,s=cw,o=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],d=250,c=Fr,l=mt("start","zoom","end"),f=500,_=150,h=0;function m(t){t.property("__zoom",uw).on("wheel.zoom",Y).on("mousedown.zoom",b).on("dblclick.zoom",w).filter(s).on("touchstart.zoom",k).on("touchmove.zoom",D).on("touchend.zoom touchcancel.zoom",T).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(t,e){return(e=Math.max(o[0],Math.min(o[1],e)))===t.k?t:new ew(e,t.x,t.y)}function y(t,e,n){var r=e[0]-n[0]*t.k,a=e[1]-n[1]*t.k;return r===t.x&&a===t.y?t:new ew(t.k,r,a)}function M(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function g(t,e,n){t.on("start.zoom",(function(){L(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){L(this,arguments).end()})).tween("zoom",(function(){var t=this,a=arguments,i=L(t,a),s=r.apply(t,a),o=null==n?M(s):"function"==typeof n?n.apply(t,a):n,u=Math.max(s[1][0]-s[0][0],s[1][1]-s[0][1]),d=t.__zoom,l="function"==typeof e?e.apply(t,a):e,f=c(d.invert(o).concat(u/d.k),l.invert(o).concat(u/l.k));return function(t){if(1===t)t=l;else{var e=f(t),n=u/e[2];t=new ew(n,o[0]-e[0]*n,o[1]-e[1]*n)}i.zoom(null,t)}}))}function L(t,e,n){return!n&&t.__zooming||new v(t,e)}function v(t,e){this.that=t,this.args=e,this.active=0,this.extent=r.apply(t,e),this.taps=0}function Y(){if(n.apply(this,arguments)){var t=L(this,arguments),e=this.__zoom,r=Math.max(o[0],Math.min(o[1],e.k*Math.pow(2,i.apply(this,arguments)))),s=Oe(this);if(t.wheel)t.mouse[0][0]===s[0]&&t.mouse[0][1]===s[1]||(t.mouse[1]=e.invert(t.mouse[0]=s)),clearTimeout(t.wheel);else{if(e.k===r)return;t.mouse=[s,e.invert(s)],Aa(this),t.start()}iw(),t.wheel=setTimeout((function(){t.wheel=null,t.end()}),_),t.zoom("mouse",a(y(p(e,r),t.mouse[0],t.mouse[1]),t.extent,u))}}function b(){if(!e&&n.apply(this,arguments)){var t=L(this,arguments,!0),r=xe(he.view).on("mousemove.zoom",(function(){if(iw(),!t.moved){var e=he.clientX-s,n=he.clientY-o;t.moved=e*e+n*n>h}t.zoom("mouse",a(y(t.that.__zoom,t.mouse[0]=Oe(t.that),t.mouse[1]),t.extent,u))}),!0).on("mouseup.zoom",(function(){r.on("mousemove.zoom mouseup.zoom",null),Ue(he.view,t.moved),iw(),t.end()}),!0),i=Oe(this),s=he.clientX,o=he.clientY;Re(he.view),aw(),t.mouse=[i,this.__zoom.invert(i)],Aa(this),t.start()}}function w(){if(n.apply(this,arguments)){var t=this.__zoom,e=Oe(this),i=t.invert(e),s=t.k*(he.shiftKey?.5:2),o=a(y(p(t,s),e,i),r.apply(this,arguments),u);iw(),d>0?xe(this).transition().duration(d).call(g,o,e):xe(this).call(m.transform,o)}}function k(){if(n.apply(this,arguments)){var e,r,a,i,s=he.touches,o=s.length,u=L(this,arguments,he.changedTouches.length===o);for(aw(),r=0;r<o;++r)a=s[r],i=[i=We(this,s,a.identifier),this.__zoom.invert(i),a.identifier],u.touch0?u.touch1||u.touch0[2]===i[2]||(u.touch1=i,u.taps=0):(u.touch0=i,e=!0,u.taps=1+!!t);t&&(t=clearTimeout(t)),e&&(u.taps<2&&(t=setTimeout((function(){t=null}),f)),Aa(this),u.start())}}function D(){if(this.__zooming){var e,n,r,i,s=L(this,arguments),o=he.changedTouches,d=o.length;for(iw(),t&&(t=clearTimeout(t)),s.taps=0,e=0;e<d;++e)n=o[e],r=We(this,o,n.identifier),s.touch0&&s.touch0[2]===n.identifier?s.touch0[0]=r:s.touch1&&s.touch1[2]===n.identifier&&(s.touch1[0]=r);if(n=s.that.__zoom,s.touch1){var c=s.touch0[0],l=s.touch0[1],f=s.touch1[0],_=s.touch1[1],h=(h=f[0]-c[0])*h+(h=f[1]-c[1])*h,m=(m=_[0]-l[0])*m+(m=_[1]-l[1])*m;n=p(n,Math.sqrt(h/m)),r=[(c[0]+f[0])/2,(c[1]+f[1])/2],i=[(l[0]+_[0])/2,(l[1]+_[1])/2]}else{if(!s.touch0)return;r=s.touch0[0],i=s.touch0[1]}s.zoom("touch",a(y(n,r,i),s.extent,u))}}function T(){if(this.__zooming){var t,n,r=L(this,arguments),a=he.changedTouches,i=a.length;for(aw(),e&&clearTimeout(e),e=setTimeout((function(){e=null}),f),t=0;t<i;++t)n=a[t],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var s=xe(this).on("dblclick.zoom");s&&s.apply(this,arguments)}}}return m.transform=function(t,e,n){var r=t.selection?t.selection():t;r.property("__zoom",uw),t!==r?g(t,e,n):r.interrupt().each((function(){L(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},m.scaleBy=function(t,e,n){m.scaleTo(t,(function(){var t=this.__zoom.k,n="function"==typeof e?e.apply(this,arguments):e;return t*n}),n)},m.scaleTo=function(t,e,n){m.transform(t,(function(){var t=r.apply(this,arguments),i=this.__zoom,s=null==n?M(t):"function"==typeof n?n.apply(this,arguments):n,o=i.invert(s),d="function"==typeof e?e.apply(this,arguments):e;return a(y(p(i,d),s,o),t,u)}),n)},m.translateBy=function(t,e,n){m.transform(t,(function(){return a(this.__zoom.translate("function"==typeof e?e.apply(this,arguments):e,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),u)}))},m.translateTo=function(t,e,n,i){m.transform(t,(function(){var t=r.apply(this,arguments),s=this.__zoom,o=null==i?M(t):"function"==typeof i?i.apply(this,arguments):i;return a(nw.translate(o[0],o[1]).scale(s.k).translate("function"==typeof e?-e.apply(this,arguments):-e,"function"==typeof n?-n.apply(this,arguments):-n),t,u)}),i)},v.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(t){Le(new tw(m,t,this.that.__zoom),l.apply,l,[t,this.that,this.args])}},m.wheelDelta=function(t){return arguments.length?(i="function"==typeof t?t:Qb(+t),m):i},m.filter=function(t){return arguments.length?(n="function"==typeof t?t:Qb(!!t),m):n},m.touchable=function(t){return arguments.length?(s="function"==typeof t?t:Qb(!!t),m):s},m.extent=function(t){return arguments.length?(r="function"==typeof t?t:Qb([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),m):r},m.scaleExtent=function(t){return arguments.length?(o[0]=+t[0],o[1]=+t[1],m):[o[0],o[1]]},m.translateExtent=function(t){return arguments.length?(u[0][0]=+t[0][0],u[1][0]=+t[1][0],u[0][1]=+t[0][1],u[1][1]=+t[1][1],m):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},m.constrain=function(t){return arguments.length?(a=t,m):a},m.duration=function(t){return arguments.length?(d=+t,m):d},m.interpolate=function(t){return arguments.length?(c=t,m):c},m.on=function(){var t=l.on.apply(l,arguments);return t===l?m:t},m.clickDistance=function(t){return arguments.length?(h=(t=+t)*t,m):Math.sqrt(h)},m};n.d(e,"version",(function(){return"5.12.0"})),n.d(e,"bisect",(function(){return u})),n.d(e,"bisectRight",(function(){return s})),n.d(e,"bisectLeft",(function(){return o})),n.d(e,"ascending",(function(){return r})),n.d(e,"bisector",(function(){return a})),n.d(e,"cross",(function(){return l})),n.d(e,"descending",(function(){return f})),n.d(e,"deviation",(function(){return m})),n.d(e,"extent",(function(){return p})),n.d(e,"histogram",(function(){return H})),n.d(e,"thresholdFreedmanDiaconis",(function(){return A})),n.d(e,"thresholdScott",(function(){return P})),n.d(e,"thresholdSturges",(function(){return S})),n.d(e,"max",(function(){return E})),n.d(e,"mean",(function(){return O})),n.d(e,"median",(function(){return N})),n.d(e,"merge",(function(){return W})),n.d(e,"min",(function(){return z})),n.d(e,"pairs",(function(){return d})),n.d(e,"permute",(function(){return F})),n.d(e,"quantile",(function(){return j})),n.d(e,"range",(function(){return Y})),n.d(e,"scan",(function(){return C})),n.d(e,"shuffle",(function(){return R})),n.d(e,"sum",(function(){return U})),n.d(e,"ticks",(function(){return D})),n.d(e,"tickIncrement",(function(){return T})),n.d(e,"tickStep",(function(){return x})),n.d(e,"transpose",(function(){return I})),n.d(e,"variance",(function(){return h})),n.d(e,"zip",(function(){return q})),n.d(e,"axisTop",(function(){return it})),n.d(e,"axisRight",(function(){return st})),n.d(e,"axisBottom",(function(){return ot})),n.d(e,"axisLeft",(function(){return ut})),n.d(e,"brush",(function(){return Ys})),n.d(e,"brushX",(function(){return Ls})),n.d(e,"brushY",(function(){return vs})),n.d(e,"brushSelection",(function(){return gs})),n.d(e,"chord",(function(){return js})),n.d(e,"ribbon",(function(){return qs})),n.d(e,"nest",(function(){return $s})),n.d(e,"set",(function(){return ro})),n.d(e,"map",(function(){return Vs})),n.d(e,"keys",(function(){return ao})),n.d(e,"values",(function(){return io})),n.d(e,"entries",(function(){return so})),n.d(e,"color",(function(){return hn})),n.d(e,"rgb",(function(){return Mn})),n.d(e,"hsl",(function(){return kn})),n.d(e,"lab",(function(){return Fn})),n.d(e,"hcl",(function(){return Bn})),n.d(e,"lch",(function(){return Gn})),n.d(e,"gray",(function(){return zn})),n.d(e,"cubehelix",(function(){return nr})),n.d(e,"contours",(function(){return yo})),n.d(e,"contourDensity",(function(){return bo})),n.d(e,"dispatch",(function(){return mt})),n.d(e,"drag",(function(){return $e})),n.d(e,"dragDisable",(function(){return Re})),n.d(e,"dragEnable",(function(){return Ue})),n.d(e,"dsvFormat",(function(){return Po})),n.d(e,"csvParse",(function(){return Oo})),n.d(e,"csvParseRows",(function(){return No})),n.d(e,"csvFormat",(function(){return Wo})),n.d(e,"csvFormatBody",(function(){return zo})),n.d(e,"csvFormatRows",(function(){return Fo})),n.d(e,"tsvParse",(function(){return Ro})),n.d(e,"tsvParseRows",(function(){return Uo})),n.d(e,"tsvFormat",(function(){return Io})),n.d(e,"tsvFormatBody",(function(){return Jo})),n.d(e,"tsvFormatRows",(function(){return qo})),n.d(e,"autoType",(function(){return Go})),n.d(e,"easeLinear",(function(){return ii})),n.d(e,"easeQuad",(function(){return ui})),n.d(e,"easeQuadIn",(function(){return si})),n.d(e,"easeQuadOut",(function(){return oi})),n.d(e,"easeQuadInOut",(function(){return ui})),n.d(e,"easeCubic",(function(){return li})),n.d(e,"easeCubicIn",(function(){return di})),n.d(e,"easeCubicOut",(function(){return ci})),n.d(e,"easeCubicInOut",(function(){return li})),n.d(e,"easePoly",(function(){return hi})),n.d(e,"easePolyIn",(function(){return fi})),n.d(e,"easePolyOut",(function(){return _i})),n.d(e,"easePolyInOut",(function(){return hi})),n.d(e,"easeSin",(function(){return gi})),n.d(e,"easeSinIn",(function(){return yi})),n.d(e,"easeSinOut",(function(){return Mi})),n.d(e,"easeSinInOut",(function(){return gi})),n.d(e,"easeExp",(function(){return Yi})),n.d(e,"easeExpIn",(function(){return Li})),n.d(e,"easeExpOut",(function(){return vi})),n.d(e,"easeExpInOut",(function(){return Yi})),n.d(e,"easeCircle",(function(){return ki})),n.d(e,"easeCircleIn",(function(){return bi})),n.d(e,"easeCircleOut",(function(){return wi})),n.d(e,"easeCircleInOut",(function(){return ki})),n.d(e,"easeBounce",(function(){return Wi})),n.d(e,"easeBounceIn",(function(){return Ni})),n.d(e,"easeBounceOut",(function(){return Wi})),n.d(e,"easeBounceInOut",(function(){return zi})),n.d(e,"easeBack",(function(){return Ri})),n.d(e,"easeBackIn",(function(){return Fi})),n.d(e,"easeBackOut",(function(){return Ci})),n.d(e,"easeBackInOut",(function(){return Ri})),n.d(e,"easeElastic",(function(){return Ji})),n.d(e,"easeElasticIn",(function(){return Ii})),n.d(e,"easeElasticOut",(function(){return Ji})),n.d(e,"easeElasticInOut",(function(){return qi})),n.d(e,"blob",(function(){return Vo})),n.d(e,"buffer",(function(){return Zo})),n.d(e,"dsv",(function(){return tu})),n.d(e,"csv",(function(){return eu})),n.d(e,"tsv",(function(){return nu})),n.d(e,"image",(function(){return ru})),n.d(e,"json",(function(){return iu})),n.d(e,"text",(function(){return Xo})),n.d(e,"xml",(function(){return ou})),n.d(e,"html",(function(){return uu})),n.d(e,"svg",(function(){return du})),n.d(e,"forceCenter",(function(){return cu})),n.d(e,"forceCollide",(function(){return bu})),n.d(e,"forceLink",(function(){return Du})),n.d(e,"forceManyBody",(function(){return Au})),n.d(e,"forceRadial",(function(){return Pu})),n.d(e,"forceSimulation",(function(){return ju})),n.d(e,"forceX",(function(){return Eu})),n.d(e,"forceY",(function(){return Ou})),n.d(e,"formatDefaultLocale",(function(){return Xu})),n.d(e,"format",(function(){return Iu})),n.d(e,"formatPrefix",(function(){return Ju})),n.d(e,"formatLocale",(function(){return Ku})),n.d(e,"formatSpecifier",(function(){return Fu})),n.d(e,"FormatSpecifier",(function(){return Cu})),n.d(e,"precisionFixed",(function(){return Qu})),n.d(e,"precisionPrefix",(function(){return td})),n.d(e,"precisionRound",(function(){return ed})),n.d(e,"geoArea",(function(){return Vd})),n.d(e,"geoBounds",(function(){return Cc})),n.d(e,"geoCentroid",(function(){return Xc})),n.d(e,"geoCircle",(function(){return dl})),n.d(e,"geoClipAntimeridian",(function(){return vl})),n.d(e,"geoClipCircle",(function(){return Yl})),n.d(e,"geoClipExtent",(function(){return Hl})),n.d(e,"geoClipRectangle",(function(){return Dl})),n.d(e,"geoContains",(function(){return Vl})),n.d(e,"geoDistance",(function(){return Fl})),n.d(e,"geoGraticule",(function(){return Kl})),n.d(e,"geoGraticule10",(function(){return Xl})),n.d(e,"geoInterpolate",(function(){return rf})),n.d(e,"geoLength",(function(){return Nl})),n.d(e,"geoPath",(function(){return n_})),n.d(e,"geoAlbers",(function(){return Y_})),n.d(e,"geoAlbersUsa",(function(){return b_})),n.d(e,"geoAzimuthalEqualArea",(function(){return T_})),n.d(e,"geoAzimuthalEqualAreaRaw",(function(){return D_})),n.d(e,"geoAzimuthalEquidistant",(function(){return S_})),n.d(e,"geoAzimuthalEquidistantRaw",(function(){return x_})),n.d(e,"geoConicConformal",(function(){return O_})),n.d(e,"geoConicConformalRaw",(function(){return E_})),n.d(e,"geoConicEqualArea",(function(){return v_})),n.d(e,"geoConicEqualAreaRaw",(function(){return L_})),n.d(e,"geoConicEquidistant",(function(){return F_})),n.d(e,"geoConicEquidistantRaw",(function(){return z_})),n.d(e,"geoEqualEarth",(function(){return G_})),n.d(e,"geoEqualEarthRaw",(function(){return q_})),n.d(e,"geoEquirectangular",(function(){return W_})),n.d(e,"geoEquirectangularRaw",(function(){return N_})),n.d(e,"geoGnomonic",(function(){return V_})),n.d(e,"geoGnomonicRaw",(function(){return B_})),n.d(e,"geoIdentity",(function(){return Z_})),n.d(e,"geoProjection",(function(){return y_})),n.d(e,"geoProjectionMutator",(function(){return M_})),n.d(e,"geoMercator",(function(){return j_})),n.d(e,"geoMercatorRaw",(function(){return H_})),n.d(e,"geoNaturalEarth1",(function(){return X_})),n.d(e,"geoNaturalEarth1Raw",(function(){return K_})),n.d(e,"geoOrthographic",(function(){return th})),n.d(e,"geoOrthographicRaw",(function(){return Q_})),n.d(e,"geoStereographic",(function(){return nh})),n.d(e,"geoStereographicRaw",(function(){return eh})),n.d(e,"geoTransverseMercator",(function(){return ah})),n.d(e,"geoTransverseMercatorRaw",(function(){return rh})),n.d(e,"geoRotation",(function(){return sl})),n.d(e,"geoStream",(function(){return Cd})),n.d(e,"geoTransform",(function(){return r_})),n.d(e,"cluster",(function(){return uh})),n.d(e,"hierarchy",(function(){return ch})),n.d(e,"pack",(function(){return Oh})),n.d(e,"packSiblings",(function(){return Sh})),n.d(e,"packEnclose",(function(){return ph})),n.d(e,"partition",(function(){return Rh})),n.d(e,"stratify",(function(){return Bh})),n.d(e,"tree",(function(){return tm})),n.d(e,"treemap",(function(){return im})),n.d(e,"treemapBinary",(function(){return sm})),n.d(e,"treemapDice",(function(){return Ch})),n.d(e,"treemapSlice",(function(){return em})),n.d(e,"treemapSliceDice",(function(){return om})),n.d(e,"treemapSquarify",(function(){return am})),n.d(e,"treemapResquarify",(function(){return um})),n.d(e,"interpolate",(function(){return Tr})),n.d(e,"interpolateArray",(function(){return pr})),n.d(e,"interpolateBasis",(function(){return ir})),n.d(e,"interpolateBasisClosed",(function(){return sr})),n.d(e,"interpolateDate",(function(){return yr})),n.d(e,"interpolateDiscrete",(function(){return xr})),n.d(e,"interpolateHue",(function(){return Sr})),n.d(e,"interpolateNumber",(function(){return Mr})),n.d(e,"interpolateObject",(function(){return gr})),n.d(e,"interpolateRound",(function(){return Hr})),n.d(e,"interpolateString",(function(){return Dr})),n.d(e,"interpolateTransformCss",(function(){return Or})),n.d(e,"interpolateTransformSvg",(function(){return Nr})),n.d(e,"interpolateZoom",(function(){return Fr})),n.d(e,"interpolateRgb",(function(){return fr})),n.d(e,"interpolateRgbBasis",(function(){return hr})),n.d(e,"interpolateRgbBasisClosed",(function(){return mr})),n.d(e,"interpolateHsl",(function(){return Rr})),n.d(e,"interpolateHslLong",(function(){return Ur})),n.d(e,"interpolateLab",(function(){return Ir})),n.d(e,"interpolateHcl",(function(){return qr})),n.d(e,"interpolateHclLong",(function(){return Gr})),n.d(e,"interpolateCubehelix",(function(){return Vr})),n.d(e,"interpolateCubehelixLong",(function(){return $r})),n.d(e,"piecewise",(function(){return Zr})),n.d(e,"quantize",(function(){return Qr})),n.d(e,"path",(function(){return Fs})),n.d(e,"polygonArea",(function(){return dm})),n.d(e,"polygonCentroid",(function(){return cm})),n.d(e,"polygonHull",(function(){return hm})),n.d(e,"polygonContains",(function(){return mm})),n.d(e,"polygonLength",(function(){return pm})),n.d(e,"quadtree",(function(){return yu})),n.d(e,"randomUniform",(function(){return Mm})),n.d(e,"randomNormal",(function(){return gm})),n.d(e,"randomLogNormal",(function(){return Lm})),n.d(e,"randomBates",(function(){return Ym})),n.d(e,"randomIrwinHall",(function(){return vm})),n.d(e,"randomExponential",(function(){return bm})),n.d(e,"scaleBand",(function(){return jm})),n.d(e,"scalePoint",(function(){return Am})),n.d(e,"scaleIdentity",(function(){return Bm})),n.d(e,"scaleLinear",(function(){return Gm})),n.d(e,"scaleLog",(function(){return np})),n.d(e,"scaleSymlog",(function(){return sp})),n.d(e,"scaleOrdinal",(function(){return Hm})),n.d(e,"scaleImplicit",(function(){return Sm})),n.d(e,"scalePow",(function(){return lp})),n.d(e,"scaleSqrt",(function(){return fp})),n.d(e,"scaleQuantile",(function(){return _p})),n.d(e,"scaleQuantize",(function(){return hp})),n.d(e,"scaleThreshold",(function(){return mp})),n.d(e,"scaleTime",(function(){return lg})),n.d(e,"scaleUtc",(function(){return fg})),n.d(e,"scaleSequential",(function(){return mg})),n.d(e,"scaleSequentialLog",(function(){return pg})),n.d(e,"scaleSequentialPow",(function(){return Mg})),n.d(e,"scaleSequentialSqrt",(function(){return gg})),n.d(e,"scaleSequentialSymlog",(function(){return yg})),n.d(e,"scaleSequentialQuantile",(function(){return Lg})),n.d(e,"scaleDiverging",(function(){return Yg})),n.d(e,"scaleDivergingLog",(function(){return bg})),n.d(e,"scaleDivergingPow",(function(){return kg})),n.d(e,"scaleDivergingSqrt",(function(){return Dg})),n.d(e,"scaleDivergingSymlog",(function(){return wg})),n.d(e,"tickFormat",(function(){return Jm})),n.d(e,"schemeCategory10",(function(){return xg})),n.d(e,"schemeAccent",(function(){return Sg})),n.d(e,"schemeDark2",(function(){return Hg})),n.d(e,"schemePaired",(function(){return jg})),n.d(e,"schemePastel1",(function(){return Ag})),n.d(e,"schemePastel2",(function(){return Pg})),n.d(e,"schemeSet1",(function(){return Eg})),n.d(e,"schemeSet2",(function(){return Og})),n.d(e,"schemeSet3",(function(){return Ng})),n.d(e,"schemeTableau10",(function(){return Wg})),n.d(e,"interpolateBrBG",(function(){return Cg})),n.d(e,"schemeBrBG",(function(){return Fg})),n.d(e,"interpolatePRGn",(function(){return Ug})),n.d(e,"schemePRGn",(function(){return Rg})),n.d(e,"interpolatePiYG",(function(){return Jg})),n.d(e,"schemePiYG",(function(){return Ig})),n.d(e,"interpolatePuOr",(function(){return Gg})),n.d(e,"schemePuOr",(function(){return qg})),n.d(e,"interpolateRdBu",(function(){return Vg})),n.d(e,"schemeRdBu",(function(){return Bg})),n.d(e,"interpolateRdGy",(function(){return Zg})),n.d(e,"schemeRdGy",(function(){return $g})),n.d(e,"interpolateRdYlBu",(function(){return Xg})),n.d(e,"schemeRdYlBu",(function(){return Kg})),n.d(e,"interpolateRdYlGn",(function(){return tL})),n.d(e,"schemeRdYlGn",(function(){return Qg})),n.d(e,"interpolateSpectral",(function(){return nL})),n.d(e,"schemeSpectral",(function(){return eL})),n.d(e,"interpolateBuGn",(function(){return aL})),n.d(e,"schemeBuGn",(function(){return rL})),n.d(e,"interpolateBuPu",(function(){return sL})),n.d(e,"schemeBuPu",(function(){return iL})),n.d(e,"interpolateGnBu",(function(){return uL})),n.d(e,"schemeGnBu",(function(){return oL})),n.d(e,"interpolateOrRd",(function(){return cL})),n.d(e,"schemeOrRd",(function(){return dL})),n.d(e,"interpolatePuBuGn",(function(){return fL})),n.d(e,"schemePuBuGn",(function(){return lL})),n.d(e,"interpolatePuBu",(function(){return hL})),n.d(e,"schemePuBu",(function(){return _L})),n.d(e,"interpolatePuRd",(function(){return pL})),n.d(e,"schemePuRd",(function(){return mL})),n.d(e,"interpolateRdPu",(function(){return ML})),n.d(e,"schemeRdPu",(function(){return yL})),n.d(e,"interpolateYlGnBu",(function(){return LL})),n.d(e,"schemeYlGnBu",(function(){return gL})),n.d(e,"interpolateYlGn",(function(){return YL})),n.d(e,"schemeYlGn",(function(){return vL})),n.d(e,"interpolateYlOrBr",(function(){return wL})),n.d(e,"schemeYlOrBr",(function(){return bL})),n.d(e,"interpolateYlOrRd",(function(){return DL})),n.d(e,"schemeYlOrRd",(function(){return kL})),n.d(e,"interpolateBlues",(function(){return xL})),n.d(e,"schemeBlues",(function(){return TL})),n.d(e,"interpolateGreens",(function(){return HL})),n.d(e,"schemeGreens",(function(){return SL})),n.d(e,"interpolateGreys",(function(){return AL})),n.d(e,"schemeGreys",(function(){return jL})),n.d(e,"interpolatePurples",(function(){return EL})),n.d(e,"schemePurples",(function(){return PL})),n.d(e,"interpolateReds",(function(){return NL})),n.d(e,"schemeReds",(function(){return OL})),n.d(e,"interpolateOranges",(function(){return zL})),n.d(e,"schemeOranges",(function(){return WL})),n.d(e,"interpolateCividis",(function(){return FL})),n.d(e,"interpolateCubehelixDefault",(function(){return CL})),n.d(e,"interpolateRainbow",(function(){return JL})),n.d(e,"interpolateWarm",(function(){return RL})),n.d(e,"interpolateCool",(function(){return UL})),n.d(e,"interpolateSinebow",(function(){return VL})),n.d(e,"interpolateTurbo",(function(){return $L})),n.d(e,"interpolateViridis",(function(){return KL})),n.d(e,"interpolateMagma",(function(){return XL})),n.d(e,"interpolateInferno",(function(){return QL})),n.d(e,"interpolatePlasma",(function(){return tv})),n.d(e,"create",(function(){return Se})),n.d(e,"creator",(function(){return vt})),n.d(e,"local",(function(){return je})),n.d(e,"matcher",(function(){return Dt})),n.d(e,"mouse",(function(){return Oe})),n.d(e,"namespace",(function(){return Mt})),n.d(e,"namespaces",(function(){return yt})),n.d(e,"clientPoint",(function(){return Ee})),n.d(e,"select",(function(){return xe})),n.d(e,"selectAll",(function(){return Ne})),n.d(e,"selection",(function(){return Te})),n.d(e,"selector",(function(){return bt})),n.d(e,"selectorAll",(function(){return kt})),n.d(e,"style",(function(){return It})),n.d(e,"touch",(function(){return We})),n.d(e,"touches",(function(){return ze})),n.d(e,"window",(function(){return Ft})),n.d(e,"event",(function(){return he})),n.d(e,"customEvent",(function(){return Le})),n.d(e,"arc",(function(){return Lv})),n.d(e,"area",(function(){return Dv})),n.d(e,"line",(function(){return kv})),n.d(e,"pie",(function(){return Sv})),n.d(e,"areaRadial",(function(){return Ov})),n.d(e,"radialArea",(function(){return Ov})),n.d(e,"lineRadial",(function(){return Ev})),n.d(e,"radialLine",(function(){return Ev})),n.d(e,"pointRadial",(function(){return Nv})),n.d(e,"linkHorizontal",(function(){return Jv})),n.d(e,"linkVertical",(function(){return qv})),n.d(e,"linkRadial",(function(){return Gv})),n.d(e,"symbol",(function(){return cY})),n.d(e,"symbols",(function(){return dY})),n.d(e,"symbolCircle",(function(){return Bv})),n.d(e,"symbolCross",(function(){return Vv})),n.d(e,"symbolDiamond",(function(){return Kv})),n.d(e,"symbolSquare",(function(){return nY})),n.d(e,"symbolStar",(function(){return eY})),n.d(e,"symbolTriangle",(function(){return aY})),n.d(e,"symbolWye",(function(){return uY})),n.d(e,"curveBasisClosed",(function(){return pY})),n.d(e,"curveBasisOpen",(function(){return MY})),n.d(e,"curveBasis",(function(){return hY})),n.d(e,"curveBundle",(function(){return LY})),n.d(e,"curveCardinalClosed",(function(){return kY})),n.d(e,"curveCardinalOpen",(function(){return TY})),n.d(e,"curveCardinal",(function(){return bY})),n.d(e,"curveCatmullRomClosed",(function(){return AY})),n.d(e,"curveCatmullRomOpen",(function(){return EY})),n.d(e,"curveCatmullRom",(function(){return HY})),n.d(e,"curveLinearClosed",(function(){return NY})),n.d(e,"curveLinear",(function(){return Yv})),n.d(e,"curveMonotoneX",(function(){return JY})),n.d(e,"curveMonotoneY",(function(){return qY})),n.d(e,"curveNatural",(function(){return VY})),n.d(e,"curveStep",(function(){return ZY})),n.d(e,"curveStepAfter",(function(){return XY})),n.d(e,"curveStepBefore",(function(){return KY})),n.d(e,"stack",(function(){return nb})),n.d(e,"stackOffsetExpand",(function(){return rb})),n.d(e,"stackOffsetDiverging",(function(){return ab})),n.d(e,"stackOffsetNone",(function(){return QY})),n.d(e,"stackOffsetSilhouette",(function(){return ib})),n.d(e,"stackOffsetWiggle",(function(){return sb})),n.d(e,"stackOrderAppearance",(function(){return ob})),n.d(e,"stackOrderAscending",(function(){return db})),n.d(e,"stackOrderDescending",(function(){return lb})),n.d(e,"stackOrderInsideOut",(function(){return fb})),n.d(e,"stackOrderNone",(function(){return tb})),n.d(e,"stackOrderReverse",(function(){return _b})),n.d(e,"timeInterval",(function(){return Mp})),n.d(e,"timeMillisecond",(function(){return Lp})),n.d(e,"timeMilliseconds",(function(){return vp})),n.d(e,"utcMillisecond",(function(){return Lp})),n.d(e,"utcMilliseconds",(function(){return vp})),n.d(e,"timeSecond",(function(){return kp})),n.d(e,"timeSeconds",(function(){return Dp})),n.d(e,"utcSecond",(function(){return kp})),n.d(e,"utcSeconds",(function(){return Dp})),n.d(e,"timeMinute",(function(){return xp})),n.d(e,"timeMinutes",(function(){return Sp})),n.d(e,"timeHour",(function(){return jp})),n.d(e,"timeHours",(function(){return Ap})),n.d(e,"timeDay",(function(){return Ep})),n.d(e,"timeDays",(function(){return Op})),n.d(e,"timeWeek",(function(){return Wp})),n.d(e,"timeWeeks",(function(){return Jp})),n.d(e,"timeSunday",(function(){return Wp})),n.d(e,"timeSundays",(function(){return Jp})),n.d(e,"timeMonday",(function(){return zp})),n.d(e,"timeMondays",(function(){return qp})),n.d(e,"timeTuesday",(function(){return Fp})),n.d(e,"timeTuesdays",(function(){return Gp})),n.d(e,"timeWednesday",(function(){return Cp})),n.d(e,"timeWednesdays",(function(){return Bp})),n.d(e,"timeThursday",(function(){return Rp})),n.d(e,"timeThursdays",(function(){return Vp})),n.d(e,"timeFriday",(function(){return Up})),n.d(e,"timeFridays",(function(){return $p})),n.d(e,"timeSaturday",(function(){return Ip})),n.d(e,"timeSaturdays",(function(){return Zp})),n.d(e,"timeMonth",(function(){return Xp})),n.d(e,"timeMonths",(function(){return Qp})),n.d(e,"timeYear",(function(){return ey})),n.d(e,"timeYears",(function(){return ny})),n.d(e,"utcMinute",(function(){return ay})),n.d(e,"utcMinutes",(function(){return iy})),n.d(e,"utcHour",(function(){return oy})),n.d(e,"utcHours",(function(){return uy})),n.d(e,"utcDay",(function(){return cy})),n.d(e,"utcDays",(function(){return ly})),n.d(e,"utcWeek",(function(){return _y})),n.d(e,"utcWeeks",(function(){return Ly})),n.d(e,"utcSunday",(function(){return _y})),n.d(e,"utcSundays",(function(){return Ly})),n.d(e,"utcMonday",(function(){return hy})),n.d(e,"utcMondays",(function(){return vy})),n.d(e,"utcTuesday",(function(){return my})),n.d(e,"utcTuesdays",(function(){return Yy})),n.d(e,"utcWednesday",(function(){return py})),n.d(e,"utcWednesdays",(function(){return by})),n.d(e,"utcThursday",(function(){return yy})),n.d(e,"utcThursdays",(function(){return wy})),n.d(e,"utcFriday",(function(){return My})),n.d(e,"utcFridays",(function(){return ky})),n.d(e,"utcSaturday",(function(){return gy})),n.d(e,"utcSaturdays",(function(){return Dy})),n.d(e,"utcMonth",(function(){return xy})),n.d(e,"utcMonths",(function(){return Sy})),n.d(e,"utcYear",(function(){return jy})),n.d(e,"utcYears",(function(){return Ay})),n.d(e,"timeFormatDefaultLocale",(function(){return XM})),n.d(e,"timeFormat",(function(){return zy})),n.d(e,"timeParse",(function(){return Fy})),n.d(e,"utcFormat",(function(){return Cy})),n.d(e,"utcParse",(function(){return Ry})),n.d(e,"timeFormatLocale",(function(){return Ny})),n.d(e,"isoFormat",(function(){return QM})),n.d(e,"isoParse",(function(){return tg})),n.d(e,"now",(function(){return da})),n.d(e,"timer",(function(){return fa})),n.d(e,"timerFlush",(function(){return _a})),n.d(e,"timeout",(function(){return ya})),n.d(e,"interval",(function(){return Ma})),n.d(e,"transition",(function(){return ni})),n.d(e,"active",(function(){return $i})),n.d(e,"interrupt",(function(){return Aa})),n.d(e,"voronoi",(function(){return Xb})),n.d(e,"zoom",(function(){return fw})),n.d(e,"zoomTransform",(function(){return rw})),n.d(e,"zoomIdentity",(function(){return nw}))},function(t,e,n){!function(t){"use strict";t.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(t){return/^nm$/i.test(t)},meridiem:function(t,e,n){return t<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(t){return function(e,n,i,s){var o=r(e),u=a[t][r(e)];return 2===o&&(u=u[n?0:1]),u.replace(/%d/i,e)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,n){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(t){return function(e,a,i,s){var o=n(e),u=r[t][n(e)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,e)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,n){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};t.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,n){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};t.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(t){return/^(gündüz|axşam)$/.test(t)},meridiem:function(t,e,n){return t<4?"gecə":t<12?"səhər":t<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(t){if(0===t)return t+"-ıncı";var n=t%10;return t+(e[n]||e[t%100-n]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r,a;return"m"===n?e?"хвіліна":"хвіліну":"h"===n?e?"гадзіна":"гадзіну":t+" "+(r=+t,a={ss:e?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:e?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:e?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}t.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:e,mm:e,h:e,hh:e,d:"дзень",dd:e,M:"месяц",MM:e,y:"год",yy:e},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(t){return/^(дня|вечара)$/.test(t)},meridiem:function(t,e,n){return t<4?"ночы":t<12?"раніцы":t<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t%10!=2&&t%10!=3||t%100==12||t%100==13?t+"-ы":t+"-і";case"D":return t+"-га";default:return t}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,n=t%100;return 0===t?t+"-ев":0===n?t+"-ен":n>10&&n<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};t.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(t){return t.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(t,e){return 12===t&&(t=0),"রাত"===e&&t>=4||"দুপুর"===e&&t<5||"বিকাল"===e?t+12:t},meridiem:function(t,e,n){return t<4?"রাত":t<10?"সকাল":t<17?"দুপুর":t<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};t.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(t){return t.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(t,e){return 12===t&&(t=0),"མཚན་མོ"===e&&t>=4||"ཉིན་གུང"===e&&t<5||"དགོང་དག"===e?t+12:t},meridiem:function(t,e,n){return t<4?"མཚན་མོ":t<10?"ཞོགས་ཀས":t<17?"ཉིན་གུང":t<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){return t+" "+function(t,e){return 2===e?function(t){var e={m:"v",b:"v",d:"z"};return void 0===e[t.charAt(0)]?t:e[t.charAt(0)]+t.substring(1)}(t):t}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],t)}t.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:e,h:"un eur",hh:"%d eur",d:"un devezh",dd:e,M:"ur miz",MM:e,y:"ur bloaz",yy:function(t){switch(function t(e){return e>9?t(e%10):e}(t)){case 1:case 3:case 4:case 5:case 9:return t+" bloaz";default:return t+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(t){return t+(1===t?"añ":"vet")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r=t+" ";switch(n){case"ss":return r+=1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi";case"m":return e?"jedna minuta":"jedne minute";case"mm":return r+=1===t?"minuta":2===t||3===t||4===t?"minute":"minuta";case"h":return e?"jedan sat":"jednog sata";case"hh":return r+=1===t?"sat":2===t||3===t||4===t?"sata":"sati";case"dd":return r+=1===t?"dan":"dana";case"MM":return r+=1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci";case"yy":return r+=1===t?"godina":2===t||3===t||4===t?"godine":"godina"}}t.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:e,m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(t,e){var n=1===t?"r":2===t?"n":3===t?"r":4===t?"t":"è";return"w"!==e&&"W"!==e||(n="a"),t+n},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(t){return t>1&&t<5&&1!=~~(t/10)}function s(t,e,n,r){var a=t+" ";switch(n){case"s":return e||r?"pár sekund":"pár sekundami";case"ss":return e||r?a+(i(t)?"sekundy":"sekund"):a+"sekundami";case"m":return e?"minuta":r?"minutu":"minutou";case"mm":return e||r?a+(i(t)?"minuty":"minut"):a+"minutami";case"h":return e?"hodina":r?"hodinu":"hodinou";case"hh":return e||r?a+(i(t)?"hodiny":"hodin"):a+"hodinami";case"d":return e||r?"den":"dnem";case"dd":return e||r?a+(i(t)?"dny":"dní"):a+"dny";case"M":return e||r?"měsíc":"měsícem";case"MM":return e||r?a+(i(t)?"měsíce":"měsíců"):a+"měsíci";case"y":return e||r?"rok":"rokem";case"yy":return e||r?a+(i(t)?"roky":"let"):a+"lety"}}t.defineLocale("cs",{months:e,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(t){return t+(/сехет$/i.exec(t)?"рен":/ҫул$/i.exec(t)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(t){var e="";return t>20?e=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(e=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),t+e},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[n][0]:a[n][1]}t.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[n][0]:a[n][1]}t.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[n][0]:a[n][1]}t.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];t.defineLocale("dv",{months:e,monthsShort:e,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(t){return"މފ"===t},meridiem:function(t,e,n){return t<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(t,e){return t?"string"==typeof e&&/D/.test(e.substring(0,e.indexOf("MMMM")))?this._monthsGenitiveEl[t.month()]:this._monthsNominativeEl[t.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(t,e,n){return t>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(t){return"μ"===(t+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(t,e){var n,r=this._calendarEl[t],a=e&&e.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(e)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(t){return"p"===t.charAt(0).toLowerCase()},meridiem:function(t,e,n){return t>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[t+"sekundi",t+"sekundit"],m:["ühe minuti","üks minut"],mm:[t+" minuti",t+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[t+" tunni",t+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[t+" kuu",t+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[t+" aasta",t+" aastat"]};return e?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}t.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:"%d päeva",M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};t.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(t){return/بعد از ظهر/.test(t)},meridiem:function(t,e,n){return t<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(t){return t.replace(/[۰-۹]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",e[7],e[8],e[9]];function r(t,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return s=function(t,r){return t<10?r?n[t]:e[t]:t}(t,i)+" "+s}t.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(t,e){switch(e){case"D":return t+(1===t?"er":"");default:case"M":case"Q":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(t,e){switch(e){default:case"M":case"Q":case"D":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(t,e){switch(e){default:case"M":case"Q":case"D":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");t.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){return t+(1===t?"d":t%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){return t+(1===t?"d":t%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(t){return 0===t.indexOf("un")?"n"+t:"en "+t},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={s:["thodde secondanim","thodde second"],ss:[t+" secondanim",t+" second"],m:["eka mintan","ek minute"],mm:[t+" mintanim",t+" mintam"],h:["eka voran","ek vor"],hh:[t+" voranim",t+" voram"],d:["eka disan","ek dis"],dd:[t+" disanim",t+" dis"],M:["eka mhoinean","ek mhoino"],MM:[t+" mhoineanim",t+" mhoine"],y:["eka vorsan","ek voros"],yy:[t+" vorsanim",t+" vorsam"]};return e?a[n][0]:a[n][1]}t.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(t,e){switch(e){case"D":return t+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return t}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(t,e){return 12===t&&(t=0),"rati"===e?t<4?t:t+12:"sokalli"===e?t:"donparam"===e?t>12?t:t+12:"sanje"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"rati":t<12?"sokalli":t<16?"donparam":t<20?"sanje":"rati"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};t.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(t){return t.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(t,e){return 12===t&&(t=0),"રાત"===e?t<4?t:t+12:"સવાર"===e?t:"બપોર"===e?t>=10?t:t+12:"સાંજ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"રાત":t<10?"સવાર":t<17?"બપોર":t<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(t){return 2===t?"שעתיים":t+" שעות"},d:"יום",dd:function(t){return 2===t?"יומיים":t+" ימים"},M:"חודש",MM:function(t){return 2===t?"חודשיים":t+" חודשים"},y:"שנה",yy:function(t){return 2===t?"שנתיים":t%10==0&&10!==t?t+" שנה":t+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(t){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(t)},meridiem:function(t,e,n){return t<5?"לפנות בוקר":t<10?"בבוקר":t<12?n?'לפנה"צ':"לפני הצהריים":t<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};t.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात"===e?t<4?t:t+12:"सुबह"===e?t:"दोपहर"===e?t>=10?t:t+12:"शाम"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"रात":t<10?"सुबह":t<17?"दोपहर":t<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r=t+" ";switch(n){case"ss":return r+=1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi";case"m":return e?"jedna minuta":"jedne minute";case"mm":return r+=1===t?"minuta":2===t||3===t||4===t?"minute":"minuta";case"h":return e?"jedan sat":"jednog sata";case"hh":return r+=1===t?"sat":2===t||3===t||4===t?"sata":"sati";case"dd":return r+=1===t?"dan":"dana";case"MM":return r+=1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci";case"yy":return r+=1===t?"godina":2===t||3===t||4===t?"godine":"godina"}}t.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:e,m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(t,e,n,r){var a=t;switch(n){case"s":return r||e?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||e)?" másodperc":" másodperce";case"m":return"egy"+(r||e?" perc":" perce");case"mm":return a+(r||e?" perc":" perce");case"h":return"egy"+(r||e?" óra":" órája");case"hh":return a+(r||e?" óra":" órája");case"d":return"egy"+(r||e?" nap":" napja");case"dd":return a+(r||e?" nap":" napja");case"M":return"egy"+(r||e?" hónap":" hónapja");case"MM":return a+(r||e?" hónap":" hónapja");case"y":return"egy"+(r||e?" év":" éve");case"yy":return a+(r||e?" év":" éve")}return""}function r(t){return(t?"":"[múlt] ")+"["+e[this.day()]+"] LT[-kor]"}t.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(t){return"u"===t.charAt(1).toLowerCase()},meridiem:function(t,e,n){return t<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(t){return/^(ցերեկվա|երեկոյան)$/.test(t)},meridiem:function(t){return t<4?"գիշերվա":t<12?"առավոտվա":t<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(t,e){switch(e){case"DDD":case"w":case"W":case"DDDo":return 1===t?t+"-ին":t+"-րդ";default:return t}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"siang"===e?t>=11?t:t+12:"sore"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"pagi":t<15?"siang":t<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t){return t%100==11||t%10!=1}function n(t,n,r,a){var i=t+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return e(t)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return e(t)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return e(t)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return e(t)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return e(t)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return e(t)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}t.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(t){return(/^[0-9].+$/.test(t)?"tra":"in")+" "+t},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(t){return(/^[0-9].+$/.test(t)?"tra":"in")+" "+t},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(t){return"午後"===t},meridiem:function(t,e,n){return t<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(t){return t.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(t){return this.week()<t.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";default:return t}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(t,e){return 12===t&&(t=0),"enjing"===e?t:"siyang"===e?t>=11?t:t+12:"sonten"===e||"ndalu"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"enjing":t<15?"siyang":t<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(t){return/(წამი|წუთი|საათი|წელი)/.test(t)?t.replace(/ი$/,"ში"):t+"ში"},past:function(t){return/(წამი|წუთი|საათი|დღე|თვე)/.test(t)?t.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(t)?t.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(t){return 0===t?t:1===t?t+"-ლი":t<20||t<=100&&t%20==0||t%100==0?"მე-"+t:t+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};t.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};t.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(t){return"ល្ងាច"===t},meridiem:function(t,e,n){return t<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(t){return t.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};t.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(t){return t.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ರಾತ್ರಿ"===e?t<4?t:t+12:"ಬೆಳಿಗ್ಗೆ"===e?t:"ಮಧ್ಯಾಹ್ನ"===e?t>=10?t:t+12:"ಸಂಜೆ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"ರಾತ್ರಿ":t<10?"ಬೆಳಿಗ್ಗೆ":t<17?"ಮಧ್ಯಾಹ್ನ":t<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(t){return t+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"일";case"M":return t+"월";case"w":case"W":return t+"주";default:return t}},meridiemParse:/오전|오후/,isPM:function(t){return"오후"===t},meridiem:function(t,e,n){return t<12?"오전":"오후"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];t.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(t){return/ئێواره‌/.test(t)},meridiem:function(t,e,n){return t<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return n[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};t.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return e?a[n][0]:a[n][1]}function n(t){if(t=parseInt(t,10),isNaN(t))return!1;if(t<0)return!0;if(t<10)return 4<=t&&t<=7;if(t<100){var e=t%10;return n(0===e?t/10:e)}if(t<1e4){for(;t>=10;)t/=10;return n(t)}return n(t/=1e3)}t.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(t){return n(t.substr(0,t.indexOf(" ")))?"a "+t:"an "+t},past:function(t){return n(t.substr(0,t.indexOf(" ")))?"viru "+t:"virun "+t},s:"e puer Sekonnen",ss:"%d Sekonnen",m:e,mm:"%d Minutten",h:e,hh:"%d Stonnen",d:e,dd:"%d Deeg",M:e,MM:"%d Méint",y:e,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(t){return"ຕອນແລງ"===t},meridiem:function(t,e,n){return t<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(t){return"ທີ່"+t}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(t,e,n,r){return e?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(t){return t%10==0||t>10&&t<20}function a(t){return e[t].split("_")}function i(t,e,i,s){var o=t+" ";return 1===t?o+n(0,e,i[0],s):e?o+(r(t)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(t)?a(i)[1]:a(i)[2])}t.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(t,e,n,r){return e?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(t){return t+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(t,e,n){return n?e%10==1&&e%100!=11?t[2]:t[3]:e%10==1&&e%100!=11?t[0]:t[1]}function r(t,r,a){return t+" "+n(e[a],t,r)}function a(t,r,a){return n(e[a],t,r)}t.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(t,e){return e?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,n,r){var a=e.words[r];return 1===r.length?n?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mjesec",MM:e.translate,y:"godinu",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,n=t%100;return 0===t?t+"-ев":0===n?t+"-ен":n>10&&n<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(t,e){return 12===t&&(t=0),"രാത്രി"===e&&t>=4||"ഉച്ച കഴിഞ്ഞ്"===e||"വൈകുന്നേരം"===e?t+12:t},meridiem:function(t,e,n){return t<4?"രാത്രി":t<12?"രാവിലെ":t<17?"ഉച്ച കഴിഞ്ഞ്":t<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){switch(n){case"s":return e?"хэдхэн секунд":"хэдхэн секундын";case"ss":return t+(e?" секунд":" секундын");case"m":case"mm":return t+(e?" минут":" минутын");case"h":case"hh":return t+(e?" цаг":" цагийн");case"d":case"dd":return t+(e?" өдөр":" өдрийн");case"M":case"MM":return t+(e?" сар":" сарын");case"y":case"yy":return t+(e?" жил":" жилийн");default:return t}}t.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(t){return"ҮХ"===t},meridiem:function(t,e,n){return t<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+" өдөр";default:return t}}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(t,e,n,r){var a="";if(e)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,t)}t.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात्री"===e?t<4?t:t+12:"सकाळी"===e?t:"दुपारी"===e?t>=10?t:t+12:"सायंकाळी"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"रात्री":t<10?"सकाळी":t<17?"दुपारी":t<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,n){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};t.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(t){return t.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};t.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(t,e){return 12===t&&(t=0),"राति"===e?t<4?t:t+12:"बिहान"===e?t:"दिउँसो"===e?t>=10?t:t+12:"साँझ"===e?t+12:void 0},meridiem:function(t,e,n){return t<3?"राति":t<12?"बिहान":t<16?"दिउँसो":t<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;t.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;t.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,r){return t?/-MMM-/.test(r)?n[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};t.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(t){return t.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ਰਾਤ"===e?t<4?t:t+12:"ਸਵੇਰ"===e?t:"ਦੁਪਹਿਰ"===e?t>=10?t:t+12:"ਸ਼ਾਮ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"ਰਾਤ":t<10?"ਸਵੇਰ":t<17?"ਦੁਪਹਿਰ":t<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(t){return t%10<5&&t%10>1&&~~(t/10)%10!=1}function a(t,e,n){var a=t+" ";switch(n){case"ss":return a+(r(t)?"sekundy":"sekund");case"m":return e?"minuta":"minutę";case"mm":return a+(r(t)?"minuty":"minut");case"h":return e?"godzina":"godzinę";case"hh":return a+(r(t)?"godziny":"godzin");case"MM":return a+(r(t)?"miesiące":"miesięcy");case"yy":return a+(r(t)?"lata":"lat")}}t.defineLocale("pl",{months:function(t,r){return t?""===r?"("+n[t.month()]+"|"+e[t.month()]+")":/D MMMM/.test(r)?n[t.month()]:e[t.month()]:e},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r=" ";return(t%100>=20||t>=100&&t%100==0)&&(r=" de "),t+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}t.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:e,m:"un minut",mm:e,h:"o oră",hh:e,d:"o zi",dd:e,M:"o lună",MM:e,y:"un an",yy:e},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r,a;return"m"===n?e?"минута":"минуту":t+" "+(r=+t,a={ss:e?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:e?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];t.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:e,m:e,mm:e,h:"час",hh:e,d:"день",dd:e,M:"месяц",MM:e,y:"год",yy:e},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(t){return/^(дня|вечера)$/.test(t)},meridiem:function(t,e,n){return t<4?"ночи":t<12?"утра":t<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":return t+"-й";case"D":return t+"-го";case"w":case"W":return t+"-я";default:return t}},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];t.defineLocale("sd",{months:e,monthsShort:e,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(t){return"شام"===t},meridiem:function(t,e,n){return t<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(t){return t+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(t){return"ප.ව."===t||"පස් වරු"===t},meridiem:function(t,e,n){return t>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(t){return t>1&&t<5}function a(t,e,n,a){var i=t+" ";switch(n){case"s":return e||a?"pár sekúnd":"pár sekundami";case"ss":return e||a?i+(r(t)?"sekundy":"sekúnd"):i+"sekundami";case"m":return e?"minúta":a?"minútu":"minútou";case"mm":return e||a?i+(r(t)?"minúty":"minút"):i+"minútami";case"h":return e?"hodina":a?"hodinu":"hodinou";case"hh":return e||a?i+(r(t)?"hodiny":"hodín"):i+"hodinami";case"d":return e||a?"deň":"dňom";case"dd":return e||a?i+(r(t)?"dni":"dní"):i+"dňami";case"M":return e||a?"mesiac":"mesiacom";case"MM":return e||a?i+(r(t)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return e||a?"rok":"rokom";case"yy":return e||a?i+(r(t)?"roky":"rokov"):i+"rokmi"}}t.defineLocale("sk",{months:e,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a=t+" ";switch(n){case"s":return e||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===t?e?"sekundo":"sekundi":2===t?e||r?"sekundi":"sekundah":t<5?e||r?"sekunde":"sekundah":"sekund";case"m":return e?"ena minuta":"eno minuto";case"mm":return a+=1===t?e?"minuta":"minuto":2===t?e||r?"minuti":"minutama":t<5?e||r?"minute":"minutami":e||r?"minut":"minutami";case"h":return e?"ena ura":"eno uro";case"hh":return a+=1===t?e?"ura":"uro":2===t?e||r?"uri":"urama":t<5?e||r?"ure":"urami":e||r?"ur":"urami";case"d":return e||r?"en dan":"enim dnem";case"dd":return a+=1===t?e||r?"dan":"dnem":2===t?e||r?"dni":"dnevoma":e||r?"dni":"dnevi";case"M":return e||r?"en mesec":"enim mesecem";case"MM":return a+=1===t?e||r?"mesec":"mesecem":2===t?e||r?"meseca":"mesecema":t<5?e||r?"mesece":"meseci":e||r?"mesecev":"meseci";case"y":return e||r?"eno leto":"enim letom";case"yy":return a+=1===t?e||r?"leto":"letom":2===t?e||r?"leti":"letoma":t<5?e||r?"leta":"leti":e||r?"let":"leti"}}t.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(t){return"M"===t.charAt(0)},meridiem:function(t,e,n){return t<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,n,r){var a=e.words[r];return 1===r.length?n?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mesec",MM:e.translate,y:"godinu",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,n,r){var a=e.words[r];return 1===r.length?n?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"дан",dd:e.translate,M:"месец",MM:e.translate,y:"годину",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(t,e,n){return t<11?"ekuseni":t<15?"emini":t<19?"entsambama":"ebusuku"},meridiemHour:function(t,e){return 12===t&&(t=0),"ekuseni"===e?t:"emini"===e?t>=11?t:t+12:"entsambama"===e||"ebusuku"===e?0===t?0:t+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"e":1===e?"a":2===e?"a":"e")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};t.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(t){return t+"வது"},preparse:function(t){return t.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(t){return n[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(t,e,n){return t<2?" யாமம்":t<6?" வைகறை":t<10?" காலை":t<14?" நண்பகல்":t<18?" எற்பாடு":t<22?" மாலை":" யாமம்"},meridiemHour:function(t,e){return 12===t&&(t=0),"யாமம்"===e?t<2?t:t+12:"வைகறை"===e||"காலை"===e?t:"நண்பகல்"===e&&t>=10?t:t+12},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(t,e){return 12===t&&(t=0),"రాత్రి"===e?t<4?t:t+12:"ఉదయం"===e?t:"మధ్యాహ్నం"===e?t>=10?t:t+12:"సాయంత్రం"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"రాత్రి":t<10?"ఉదయం":t<17?"మధ్యాహ్నం":t<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};t.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(t,e){return 12===t&&(t=0),"шаб"===e?t<4?t:t+12:"субҳ"===e?t:"рӯз"===e?t>=11?t:t+12:"бегоҳ"===e?t+12:void 0},meridiem:function(t,e,n){return t<4?"шаб":t<11?"субҳ":t<16?"рӯз":t<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(t){return"หลังเที่ยง"===t},meridiem:function(t,e,n){return t<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(t,n,r,a){var i=function(t){var n=Math.floor(t%1e3/100),r=Math.floor(t%100/10),a=t%10,i="";return n>0&&(i+=e[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+e[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+e[a]),""===i?"pagh":i}(t);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}t.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(t){var e=t;return e=-1!==t.indexOf("jaj")?e.slice(0,-3)+"leS":-1!==t.indexOf("jar")?e.slice(0,-3)+"waQ":-1!==t.indexOf("DIS")?e.slice(0,-3)+"nem":e+" pIq"},past:function(t){var e=t;return e=-1!==t.indexOf("jaj")?e.slice(0,-3)+"Hu’":-1!==t.indexOf("jar")?e.slice(0,-3)+"wen":-1!==t.indexOf("DIS")?e.slice(0,-3)+"ben":e+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";var e={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};t.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(t,n){switch(n){case"d":case"D":case"Do":case"DD":return t;default:if(0===t)return t+"'ıncı";var r=t%10;return t+(e[r]||e[t%100-r]||e[t>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[t+" secunds",t+" secunds"],m:["'n míut","'iens míut"],mm:[t+" míuts",t+" míuts"],h:["'n þora","'iensa þora"],hh:[t+" þoras",t+" þoras"],d:["'n ziua","'iensa ziua"],dd:[t+" ziuas",t+" ziuas"],M:["'n mes","'iens mes"],MM:[t+" mesen",t+" mesen"],y:["'n ar","'iens ar"],yy:[t+" ars",t+" ars"]};return r?a[n][0]:e?a[n][0]:a[n][1]}t.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(t){return"d'o"===t.toLowerCase()},meridiem:function(t,e,n){return t>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(t,e){return 12===t&&(t=0),"يېرىم كېچە"===e||"سەھەر"===e||"چۈشتىن بۇرۇن"===e?t:"چۈشتىن كېيىن"===e||"كەچ"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,n){var r=100*t+e;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"-كۈنى";case"w":case"W":return t+"-ھەپتە";default:return t}},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";function e(t,e,n){var r,a;return"m"===n?e?"хвилина":"хвилину":"h"===n?e?"година":"годину":t+" "+(r=+t,a={ss:e?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:e?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:e?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(t){return function(){return t+"о"+(11===this.hours()?"б":"")+"] LT"}}t.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(t,e){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===t?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):t?n[/(\[[ВвУу]\]) ?dddd/.test(e)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(e)?"genitive":"nominative"][t.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:e,m:e,mm:e,h:"годину",hh:e,d:"день",dd:e,M:"місяць",MM:e,y:"рік",yy:e},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(t){return/^(дня|вечора)$/.test(t)},meridiem:function(t,e,n){return t<4?"ночі":t<12?"ранку":t<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t+"-й";case"D":return t+"-го";default:return t}},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";var e=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];t.defineLocale("ur",{months:e,monthsShort:e,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(t){return"شام"===t},meridiem:function(t,e,n){return t<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(t){return/^ch$/i.test(t)},meridiem:function(t,e,n){return t<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"下午"===e||"晚上"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,n){var r=100*t+e;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"周";default:return t}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,n){var r=100*t+e;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(t,e,n){!function(t){"use strict";t.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,n){var r=100*t+e;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(130);var r=n(134),a=n(136),i=n(138);a.Mapa({padreSelector:".mapa"});r.MapaCalor({padreSelector:".mapaCalor",data:[[0,10,0,2,0],[0,8,0,2,0],[0,1,0,2,0],[4,0,0,2,0],[8,0,0,2,0],[1,0,0,2,0],[0,0,0,0,0],[0,0,0,0,1],[0,0,1,0,1],[0,0,1,0,1],[1,0,1,0,5],[2,0,1,0,5],[3,0,1,0,5],[4,0,1,0,8],[0,0,7,0,2],[0,0,1,1,2],[0,0,1,0,2],[0,0,1,1,0],[0,0,1,0,0],[0,0,1,2,0]],labelscol:["WATER","POWER","ROADWAYS","GAS","GARBAGE"],labelsrow:["Weston","Southton","Broadview","West Parton","Old Town","Terrapin Springs","Downtown","Southwest","Scenic Vista","East Parton","Cheddarford","Palace Hills","Safe Town","Easton","Chapparal","Northwest","Oak Willow","Pepper Mill","Wilson Forest","UNKNOWN"],start_color:"#98df8a",end_color:"red"}),i.SelectorTiempo({padreSelector:".selectorTiempo"})},function(t,e,n){var r=n(131);"string"==typeof r&&(r=[[t.i,r,""]]);var a={insert:"head",singleton:!1};n(133)(r,a);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(132)(!1)).push([t.i,"html,\nbody,\n.contenido {\n    height: 100%;\n    margin: 0;\n}\n\n\n.contenido {\n    display: flex;\n    flex-flow: column;\n}\n\n.datos {\n    display: flex;\n    flex-flow: row wrap;\n}\n.datos > * {\n    display: flex;\n    flex: 1 auto;\n}\n\n.contenido > * {\n    flex: 1 100%\n}\n\n.selectorTiempo {\n    max-height: 10em;\n}\n\n@media all and (max-width: 700px) {\n    .datos > * {\n        flex: 1 100%;\n    }\n}\n\n\n\n.background.bar {\n  fill: #ccc;\n}\n.foreground.bar {\n  fill: steelblue;\n}\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||"",r=t[3];if(!r)return n;if(e&&"function"==typeof btoa){var a=(s=r,o=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(u," */")),i=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")}));return[n].concat(i).concat([a]).join("\n")}var s,o,u;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n})).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var s=0;s<t.length;s++){var o=t[s];null!=o[0]&&r[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="(".concat(o[2],") and (").concat(n,")")),e.push(o))}},e}},function(t,e,n){"use strict";var r,a={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},s=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}();function o(t,e){for(var n=[],r={},a=0;a<t.length;a++){var i=t[a],s=e.base?i[0]+e.base:i[0],o={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(o):n.push(r[s]={id:s,parts:[o]})}return n}function u(t,e){for(var n=0;n<t.length;n++){var r=t[n],i=a[r.id],s=0;if(i){for(i.refs++;s<i.parts.length;s++)i.parts[s](r.parts[s]);for(;s<r.parts.length;s++)i.parts.push(p(r.parts[s],e))}else{for(var o=[];s<r.parts.length;s++)o.push(p(r.parts[s],e));a[r.id]={id:r.id,refs:1,parts:o}}}}function d(t){var e=document.createElement("style");if(void 0===t.attributes.nonce){var r=n.nc;r&&(t.attributes.nonce=r)}if(Object.keys(t.attributes).forEach((function(n){e.setAttribute(n,t.attributes[n])})),"function"==typeof t.insert)t.insert(e);else{var a=s(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var c,l=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function f(t,e,n,r){var a=n?"":r.css;if(t.styleSheet)t.styleSheet.cssText=l(e,a);else{var i=document.createTextNode(a),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function _(t,e,n){var r=n.css,a=n.media,i=n.sourceMap;if(a&&t.setAttribute("media",a),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var h=null,m=0;function p(t,e){var n,r,a;if(e.singleton){var i=m++;n=h||(h=d(e)),r=f.bind(null,n,i,!1),a=f.bind(null,n,i,!0)}else n=d(e),r=_.bind(null,n,e),a=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else a()}}t.exports=function(t,e){(e=e||{}).attributes="object"==typeof e.attributes?e.attributes:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=i());var n=o(t,e);return u(n,e),function(t){for(var r=[],i=0;i<n.length;i++){var s=n[i],d=a[s.id];d&&(d.refs--,r.push(d))}t&&u(o(t,e),e);for(var c=0;c<r.length;c++){var l=r[c];if(0===l.refs){for(var f=0;f<l.parts.length;f++)l.parts[f]();delete a[l.id]}}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1);n(135);e.MapaCalor=function(t){var e=50,n=50,a=150,i=150,s=t.data,o=t.padreSelector,u=t.labelscol,d=t.labelsrow,c=t.start_color,l=t.end_color;if(!s)throw new Error("Please pass data");if(!Array.isArray(s)||!s.length||!Array.isArray(s[0]))throw new Error("It should be a 2-D array");var f=r.max(s,(function(t){return r.max(t,(function(t){return t}))})),_=r.min(s,(function(t){return r.min(t,(function(t){return t}))})),h=s.length,m=s[0].length,p=r.select(o).append("svg").attr("width",400+i+n).attr("height",400+e+a).append("g").attr("transform","translate("+i+","+e+")"),y=(p.append("rect").style("stroke","black").style("stroke-width","2px").attr("width",400).attr("height",400),r.scaleBand().domain(r.range(m)).range([0,400])),M=r.scaleBand().domain(r.range(h)).range([0,400]),g=r.scaleLinear().domain([_,f]).range([c,l]),L=p.selectAll(".row").data(s).enter().append("g").attr("class","row").attr("transform",(function(t,e){return"translate(0,"+M(e)+")"})),v=L.selectAll(".cell").data((function(t){return t})).enter().append("g").attr("class","cell").attr("transform",(function(t,e){return"translate("+y(e)+", 0)"}));v.append("rect").attr("width",y.bandwidth()).attr("height",M.bandwidth()).style("stroke-width",0),v.append("text").attr("dy",".32em").attr("x",y.bandwidth()/2).attr("y",M.bandwidth()/2).attr("text-anchor","middle").style("fill",(function(t,e){return t>=f/2?"white":"black"})).text((function(t,e){return t})),L.selectAll(".cell").data((function(t,e){return s[e]})).style("fill",g);var Y=p.append("g").attr("class","labels"),b=Y.selectAll(".column-label").data(u).enter().append("g").attr("class","column-label").attr("transform",(function(t,e){return"translate("+y(e)+",400)"}));b.append("line").style("stroke","black").style("stroke-width","1px").attr("x1",y.bandwidth()/2).attr("x2",y.bandwidth()/2).attr("y1",0).attr("y2",5),b.append("text").attr("x",0).attr("y",M.bandwidth()/2).attr("dy",".82em").attr("text-anchor","end").attr("transform","rotate(-60)").text((function(t,e){return t}));var w=Y.selectAll(".row-label").data(d).enter().append("g").attr("class","row-label").attr("transform",(function(t,e){return"translate(0,"+M(e)+")"}));w.append("line").style("stroke","black").style("stroke-width","1px").attr("x1",0).attr("x2",-5).attr("y1",M.bandwidth()/2).attr("y2",M.bandwidth()/2),w.append("text").attr("x",-8).attr("y",M.bandwidth()/2).attr("dy",".32em").attr("text-anchor","end").text((function(t,e){return t}));var k=r.select("#legend").append("svg").attr("width",100).attr("height",400+e+a),D=k.append("defs").append("svg:linearGradient").attr("id","gradient").attr("x1","100%").attr("y1","0%").attr("x2","100%").attr("y2","100%").attr("spreadMethod","pad");D.append("stop").attr("offset","0%").attr("stop-color",l).attr("stop-opacity",1),D.append("stop").attr("offset","100%").attr("stop-color",c).attr("stop-opacity",1),k.append("rect").attr("width",40).attr("height",400).style("fill","url(#gradient)").attr("transform","translate(0,"+e+")");var T=r.scaleLinear().range([400,0]).domain([_,f]),x=r.axisRight(T);k.append("g").attr("class","y axis").attr("transform","translate(41,"+e+")").call(x)}},function(t,e,n){t.exports=n.p+"2405ee68d39d9768b4f2a838dd42d04c.csv"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),a=n(137);e.Mapa=function(t){var e=r.select(t.padreSelector).append("svg").attr("width","100%").attr("height","100%");r.json(a).then((function(t){!function(t,e){console.log(t);var n=r.geoMercator().fitSize([600,450],t),a=r.geoPath().projection(n);e.selectAll("path").data(t.features).enter().append("path").attr("d",a).attr("fill","white").attr("stroke","black").on("mouseover",(function(){r.select(this).attr("fill","red")})).on("mouseout",(function(t,e){r.select(this).attr("fill","white")}))}(t,e)}))}},function(t,e,n){t.exports=n.p+"dee03cf07e74bf082719be856d6fb496.geojson"},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),a=n(0),i=a("2020-04-06 00:00:00"),s=Array.apply(null,{length:120}).map((function(t,e){return{timestamp:i.add(a.duration(1,"hour")).toDate(),cantidadMsgProblemas:100*e/125}}));e.SelectorTiempo=function(t){var e=r.select(t.padreSelector).append("svg").attr("height","100%").attr("width","100%"),n=r.scaleLinear().range([120,0]).domain([0,100]),i=e.append("g").attr("transform","translate(40, 0)"),o=r.scaleTime().domain([a("2020-04-06 00:00:00").toDate(),a("2020-04-11 00:00:00").toDate()]).rangeRound([0,980]);i.append("g").attr("transform","translate(0, 120)").call(r.axisBottom(o));var u=i.selectAll().data(s).enter().append("rect").attr("x",(function(t){return o(t.timestamp)})).attr("y",(function(t){return n(t.cantidadMsgProblemas)})).attr("height",(function(t){return 120-n(t.cantidadMsgProblemas)})).attr("width",8).style("fill","steelblue").style("stroke","black").style("stoke-width",2),d=r.arc().innerRadius(0).outerRadius(55).startAngle(0).endAngle((function(t,e){return e?Math.PI:-Math.PI})),c=function(t,e){return t.selectAll(".handle--custom").data([{type:"w"},{type:"e"}]).join((function(t){return t.append("path").attr("class","handle--custom").attr("fill","#666").attr("fill-opacity",.8).attr("stroke","#000").attr("stroke-width",1.5).attr("cursor","ew-resize").attr("d",d)})).attr("display",null===e?"none":null).attr("transform",null===e?null:function(t,n){return"translate("+e[n]+",60)"})},l=r.brushX().extent([[10,10],[970,110]]).on("start brush end",(function(){var t=r.event.selection;if(null===t)u.attr("stroke",null);else{var e=t.map(o.invert);u.attr("stroke",(function(t){return e[0]<=t&&t<=e[1]?"red":null}))}r.select(this).call(c,t)}));e.append("g").call(l).call(l.move,[.3,.5].map(o))}},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r={"./af":2,"./af.js":2,"./ar":3,"./ar-dz":4,"./ar-dz.js":4,"./ar-kw":5,"./ar-kw.js":5,"./ar-ly":6,"./ar-ly.js":6,"./ar-ma":7,"./ar-ma.js":7,"./ar-sa":8,"./ar-sa.js":8,"./ar-tn":9,"./ar-tn.js":9,"./ar.js":3,"./az":10,"./az.js":10,"./be":11,"./be.js":11,"./bg":12,"./bg.js":12,"./bm":13,"./bm.js":13,"./bn":14,"./bn.js":14,"./bo":15,"./bo.js":15,"./br":16,"./br.js":16,"./bs":17,"./bs.js":17,"./ca":18,"./ca.js":18,"./cs":19,"./cs.js":19,"./cv":20,"./cv.js":20,"./cy":21,"./cy.js":21,"./da":22,"./da.js":22,"./de":23,"./de-at":24,"./de-at.js":24,"./de-ch":25,"./de-ch.js":25,"./de.js":23,"./dv":26,"./dv.js":26,"./el":27,"./el.js":27,"./en-SG":28,"./en-SG.js":28,"./en-au":29,"./en-au.js":29,"./en-ca":30,"./en-ca.js":30,"./en-gb":31,"./en-gb.js":31,"./en-ie":32,"./en-ie.js":32,"./en-il":33,"./en-il.js":33,"./en-nz":34,"./en-nz.js":34,"./eo":35,"./eo.js":35,"./es":36,"./es-do":37,"./es-do.js":37,"./es-us":38,"./es-us.js":38,"./es.js":36,"./et":39,"./et.js":39,"./eu":40,"./eu.js":40,"./fa":41,"./fa.js":41,"./fi":42,"./fi.js":42,"./fo":43,"./fo.js":43,"./fr":44,"./fr-ca":45,"./fr-ca.js":45,"./fr-ch":46,"./fr-ch.js":46,"./fr.js":44,"./fy":47,"./fy.js":47,"./ga":48,"./ga.js":48,"./gd":49,"./gd.js":49,"./gl":50,"./gl.js":50,"./gom-latn":51,"./gom-latn.js":51,"./gu":52,"./gu.js":52,"./he":53,"./he.js":53,"./hi":54,"./hi.js":54,"./hr":55,"./hr.js":55,"./hu":56,"./hu.js":56,"./hy-am":57,"./hy-am.js":57,"./id":58,"./id.js":58,"./is":59,"./is.js":59,"./it":60,"./it-ch":61,"./it-ch.js":61,"./it.js":60,"./ja":62,"./ja.js":62,"./jv":63,"./jv.js":63,"./ka":64,"./ka.js":64,"./kk":65,"./kk.js":65,"./km":66,"./km.js":66,"./kn":67,"./kn.js":67,"./ko":68,"./ko.js":68,"./ku":69,"./ku.js":69,"./ky":70,"./ky.js":70,"./lb":71,"./lb.js":71,"./lo":72,"./lo.js":72,"./lt":73,"./lt.js":73,"./lv":74,"./lv.js":74,"./me":75,"./me.js":75,"./mi":76,"./mi.js":76,"./mk":77,"./mk.js":77,"./ml":78,"./ml.js":78,"./mn":79,"./mn.js":79,"./mr":80,"./mr.js":80,"./ms":81,"./ms-my":82,"./ms-my.js":82,"./ms.js":81,"./mt":83,"./mt.js":83,"./my":84,"./my.js":84,"./nb":85,"./nb.js":85,"./ne":86,"./ne.js":86,"./nl":87,"./nl-be":88,"./nl-be.js":88,"./nl.js":87,"./nn":89,"./nn.js":89,"./pa-in":90,"./pa-in.js":90,"./pl":91,"./pl.js":91,"./pt":92,"./pt-br":93,"./pt-br.js":93,"./pt.js":92,"./ro":94,"./ro.js":94,"./ru":95,"./ru.js":95,"./sd":96,"./sd.js":96,"./se":97,"./se.js":97,"./si":98,"./si.js":98,"./sk":99,"./sk.js":99,"./sl":100,"./sl.js":100,"./sq":101,"./sq.js":101,"./sr":102,"./sr-cyrl":103,"./sr-cyrl.js":103,"./sr.js":102,"./ss":104,"./ss.js":104,"./sv":105,"./sv.js":105,"./sw":106,"./sw.js":106,"./ta":107,"./ta.js":107,"./te":108,"./te.js":108,"./tet":109,"./tet.js":109,"./tg":110,"./tg.js":110,"./th":111,"./th.js":111,"./tl-ph":112,"./tl-ph.js":112,"./tlh":113,"./tlh.js":113,"./tr":114,"./tr.js":114,"./tzl":115,"./tzl.js":115,"./tzm":116,"./tzm-latn":117,"./tzm-latn.js":117,"./tzm.js":116,"./ug-cn":118,"./ug-cn.js":118,"./uk":119,"./uk.js":119,"./ur":120,"./ur.js":120,"./uz":121,"./uz-latn":122,"./uz-latn.js":122,"./uz.js":121,"./vi":123,"./vi.js":123,"./x-pseudo":124,"./x-pseudo.js":124,"./yo":125,"./yo.js":125,"./zh-cn":126,"./zh-cn.js":126,"./zh-hk":127,"./zh-hk.js":127,"./zh-tw":128,"./zh-tw.js":128};function a(t){var e=i(t);return n(e)}function i(t){if(!n.o(r,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return r[t]}a.keys=function(){return Object.keys(r)},a.resolve=i,t.exports=a,a.id=140}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,