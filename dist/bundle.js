!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=132)}([function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function o(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function d(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function l(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function f(e,t){for(var n in t)l(t,n)&&(e[n]=t[n]);return l(t,"toString")&&(e.toString=t.toString),l(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Et(e,t,n,r,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function m(e){if(null==e._isValid){var t=_(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function p(e){var t=h(NaN);return null!=e?f(_(t),e):_(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=a.momentProperties=[];function g(e,t){var n,r,a;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=_(t)),s(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)s(a=t[r=y[n]])||(e[r]=a);return e}var M=!1;function v(e){g(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===M&&(M=!0,a.updateOffset(this),M=!1)}function b(e){return e instanceof v||null!=e&&null!=e._isAMomentObject}function L(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function Y(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=L(t)),n}function k(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),o=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&Y(e[r])!==Y(t[r]))&&o++;return o+i}function w(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function D(e,t){var n=!0;return f((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){for(var r,i=[],o=0;o<arguments.length;o++){if(r="","object"==typeof arguments[o]){for(var s in r+="\n["+o+"] ",arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[o];i.push(r)}w(e+"\nArguments: "+Array.prototype.slice.call(i).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var x,T={};function S(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),T[e]||(w(t),T[e]=!0)}function H(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function j(e,t){var n,r=f({},e);for(n in t)l(t,n)&&(o(e[n])&&o(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)l(e,n)&&!l(t,n)&&o(e[n])&&(r[n]=f({},r[n]));return r}function A(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,x=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)l(e,t)&&n.push(t);return n};var E={};function P(e,t){var n=e.toLowerCase();E[n]=E[n+"s"]=E[t]=e}function C(e){return"string"==typeof e?E[e]||E[e.toLowerCase()]:void 0}function O(e){var t,n,r={};for(n in e)l(e,n)&&(t=C(n))&&(r[t]=e[n]);return r}var N={};function W(e,t){N[e]=t}function z(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var F=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,R=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,I={},q={};function U(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(q[e]=a),t&&(q[t[0]]=function(){return z(a.apply(this,arguments),t[1],t[2])}),n&&(q[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function B(e,t){return e.isValid()?(t=J(t,e.localeData()),I[t]=I[t]||function(e){var t,n,r,a=e.match(F);for(t=0,n=a.length;t<n;t++)q[a[t]]?a[t]=q[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=H(a[r])?a[r].call(t,e):a[r];return i}}(t),I[t](e)):e.localeData().invalidDate()}function J(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(R.lastIndex=0;n>=0&&R.test(e);)e=e.replace(R,r),R.lastIndex=0,n-=1;return e}var G=/\d/,V=/\d\d/,$=/\d{3}/,X=/\d{4}/,Z=/[+-]?\d{6}/,K=/\d\d?/,Q=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,re=/[+-]?\d{1,6}/,ae=/\d+/,ie=/[+-]?\d+/,oe=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,de={};function ce(e,t,n){de[e]=H(t)?t:function(e,r){return e&&n?n:t}}function le(e,t){return l(de,e)?de[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function _e(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=Y(e)}),n=0;n<e.length;n++)he[e[n]]=r}function me(e,t){_e(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function pe(e,t,n){null!=t&&l(he,e)&&he[e](t,n._a,n,e)}var ye=0,ge=1,Me=2,ve=3,be=4,Le=5,Ye=6,ke=7,we=8;function De(e){return xe(e)?366:365}function xe(e){return e%4==0&&e%100!=0||e%400==0}U("Y",0,0,(function(){var e=this.year();return e<=9999?""+e:"+"+e})),U(0,["YY",2],0,(function(){return this.year()%100})),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),P("year","y"),W("year",1),ce("Y",ie),ce("YY",K,V),ce("YYYY",ne,X),ce("YYYYY",re,Z),ce("YYYYYY",re,Z),_e(["YYYYY","YYYYYY"],ye),_e("YYYY",(function(e,t){t[ye]=2===e.length?a.parseTwoDigitYear(e):Y(e)})),_e("YY",(function(e,t){t[ye]=a.parseTwoDigitYear(e)})),_e("Y",(function(e,t){t[ye]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return Y(e)+(Y(e)>68?1900:2e3)};var Te,Se=He("FullYear",!0);function He(e,t){return function(n){return null!=n?(Ae(this,e,n),a.updateOffset(this,t),this):je(this,e)}}function je(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Ae(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&xe(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ee(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Ee(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?xe(e)?29:28:31-r%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},U("M",["MM",2],"Mo",(function(){return this.month()+1})),U("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),U("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),P("month","M"),W("month",8),ce("M",K),ce("MM",K,V),ce("MMM",(function(e,t){return t.monthsShortRegex(e)})),ce("MMMM",(function(e,t){return t.monthsRegex(e)})),_e(["M","MM"],(function(e,t){t[ge]=Y(e)-1})),_e(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[ge]=a:_(n).invalidMonth=e}));var Pe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ce="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Oe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ne(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Te.call(this._shortMonthsParse,o))?a:null:-1!==(a=Te.call(this._longMonthsParse,o))?a:null:"MMM"===t?-1!==(a=Te.call(this._shortMonthsParse,o))?a:-1!==(a=Te.call(this._longMonthsParse,o))?a:null:-1!==(a=Te.call(this._longMonthsParse,o))?a:-1!==(a=Te.call(this._shortMonthsParse,o))?a:null}function We(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=Y(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ee(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function ze(e){return null!=e?(We(this,e),a.updateOffset(this,!0),this):je(this,"Month")}var Fe=ue,Re=ue;function Ie(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),a[t]=fe(a[t]);for(t=0;t<24;t++)i[t]=fe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function qe(e,t,n,r,a,i,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,i,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,i,o),s}function Ue(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Be(e,t,n){var r=7+t-n;return-(7+Ue(e,0,r).getUTCDay()-t)%7+r-1}function Je(e,t,n,r,a){var i,o,s=1+7*(t-1)+(7+n-r)%7+Be(e,r,a);return s<=0?o=De(i=e-1)+s:s>De(e)?(i=e+1,o=s-De(e)):(i=e,o=s),{year:i,dayOfYear:o}}function Ge(e,t,n){var r,a,i=Be(e.year(),t,n),o=Math.floor((e.dayOfYear()-i-1)/7)+1;return o<1?r=o+Ve(a=e.year()-1,t,n):o>Ve(e.year(),t,n)?(r=o-Ve(e.year(),t,n),a=e.year()+1):(a=e.year(),r=o),{week:r,year:a}}function Ve(e,t,n){var r=Be(e,t,n),a=Be(e+1,t,n);return(De(e)-r+a)/7}function $e(e,t){return e.slice(t,7).concat(e.slice(0,t))}U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),W("week",5),W("isoWeek",5),ce("w",K),ce("ww",K,V),ce("W",K),ce("WW",K,V),me(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=Y(e)})),U("d",0,"do","day"),U("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),U("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),U("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),W("day",11),W("weekday",11),W("isoWeekday",11),ce("d",K),ce("e",K),ce("E",K),ce("dd",(function(e,t){return t.weekdaysMinRegex(e)})),ce("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),ce("dddd",(function(e,t){return t.weekdaysRegex(e)})),me(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:_(n).invalidWeekday=e})),me(["d","e","E"],(function(e,t,n,r){t[r]=Y(e)}));var Xe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Qe(e,t,n){var r,a,i,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Te.call(this._weekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:null:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:"dddd"===t?-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:"ddd"===t?-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:null:-1!==(a=Te.call(this._minWeekdaysParse,o))?a:-1!==(a=Te.call(this._weekdaysParse,o))?a:-1!==(a=Te.call(this._shortWeekdaysParse,o))?a:null}var et=ue,tt=ue,nt=ue;function rt(){function e(e,t){return t.length-e.length}var t,n,r,a,i,o=[],s=[],u=[],d=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),i=this.weekdays(n,""),o.push(r),s.push(a),u.push(i),d.push(r),d.push(a),d.push(i);for(o.sort(e),s.sort(e),u.sort(e),d.sort(e),t=0;t<7;t++)s[t]=fe(s[t]),u[t]=fe(u[t]),d[t]=fe(d[t]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function at(){return this.hours()%12||12}function it(e,t){U(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function ot(e,t){return t._meridiemParse}U("H",["HH",2],0,"hour"),U("h",["hh",2],0,at),U("k",["kk",2],0,(function(){return this.hours()||24})),U("hmm",0,0,(function(){return""+at.apply(this)+z(this.minutes(),2)})),U("hmmss",0,0,(function(){return""+at.apply(this)+z(this.minutes(),2)+z(this.seconds(),2)})),U("Hmm",0,0,(function(){return""+this.hours()+z(this.minutes(),2)})),U("Hmmss",0,0,(function(){return""+this.hours()+z(this.minutes(),2)+z(this.seconds(),2)})),it("a",!0),it("A",!1),P("hour","h"),W("hour",13),ce("a",ot),ce("A",ot),ce("H",K),ce("h",K),ce("k",K),ce("HH",K,V),ce("hh",K,V),ce("kk",K,V),ce("hmm",Q),ce("hmmss",ee),ce("Hmm",Q),ce("Hmmss",ee),_e(["H","HH"],ve),_e(["k","kk"],(function(e,t,n){var r=Y(e);t[ve]=24===r?0:r})),_e(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),_e(["h","hh"],(function(e,t,n){t[ve]=Y(e),_(n).bigHour=!0})),_e("hmm",(function(e,t,n){var r=e.length-2;t[ve]=Y(e.substr(0,r)),t[be]=Y(e.substr(r)),_(n).bigHour=!0})),_e("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[ve]=Y(e.substr(0,r)),t[be]=Y(e.substr(r,2)),t[Le]=Y(e.substr(a)),_(n).bigHour=!0})),_e("Hmm",(function(e,t,n){var r=e.length-2;t[ve]=Y(e.substr(0,r)),t[be]=Y(e.substr(r))})),_e("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[ve]=Y(e.substr(0,r)),t[be]=Y(e.substr(r,2)),t[Le]=Y(e.substr(a))}));var st,ut=He("Hours",!0),dt={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ce,monthsShort:Oe,week:{dow:0,doy:6},weekdays:Xe,weekdaysMin:Ke,weekdaysShort:Ze,meridiemParse:/[ap]\.?m?\.?/i},ct={},lt={};function ft(e){return e?e.toLowerCase().replace("_","-"):e}function ht(t){var r=null;if(!ct[t]&&void 0!==e&&e&&e.exports)try{r=st._abbr,n(141)("./"+t),_t(r)}catch(e){}return ct[t]}function _t(e,t){var n;return e&&((n=s(t)?pt(e):mt(e,t))?st=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),st._abbr}function mt(e,t){if(null!==t){var n,r=dt;if(t.abbr=e,null!=ct[e])S("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ct[e]._config;else if(null!=t.parentLocale)if(null!=ct[t.parentLocale])r=ct[t.parentLocale]._config;else{if(null==(n=ht(t.parentLocale)))return lt[t.parentLocale]||(lt[t.parentLocale]=[]),lt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return ct[e]=new A(j(r,t)),lt[e]&&lt[e].forEach((function(e){mt(e.name,e.config)})),_t(e),ct[e]}return delete ct[e],null}function pt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return st;if(!i(e)){if(t=ht(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=ft(e[i]).split("-")).length,n=(n=ft(e[i+1]))?n.split("-"):null;t>0;){if(r=ht(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&k(a,n,!0)>=t-1)break;t--}i++}return st}(e)}function yt(e){var t,n=e._a;return n&&-2===_(e).overflow&&(t=n[ge]<0||n[ge]>11?ge:n[Me]<1||n[Me]>Ee(n[ye],n[ge])?Me:n[ve]<0||n[ve]>24||24===n[ve]&&(0!==n[be]||0!==n[Le]||0!==n[Ye])?ve:n[be]<0||n[be]>59?be:n[Le]<0||n[Le]>59?Le:n[Ye]<0||n[Ye]>999?Ye:-1,_(e)._overflowDayOfYear&&(t<ye||t>Me)&&(t=Me),_(e)._overflowWeeks&&-1===t&&(t=ke),_(e)._overflowWeekday&&-1===t&&(t=we),_(e).overflow=t),e}function gt(e,t,n){return null!=e?e:null!=t?t:n}function Mt(e){var t,n,r,i,o,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[Me]&&null==e._a[ge]&&function(e){var t,n,r,a,i,o,s,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)i=1,o=4,n=gt(t.GG,e._a[ye],Ge(Pt(),1,4).year),r=gt(t.W,1),((a=gt(t.E,1))<1||a>7)&&(u=!0);else{i=e._locale._week.dow,o=e._locale._week.doy;var d=Ge(Pt(),i,o);n=gt(t.gg,e._a[ye],d.year),r=gt(t.w,d.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i}r<1||r>Ve(n,i,o)?_(e)._overflowWeeks=!0:null!=u?_(e)._overflowWeekday=!0:(s=Je(n,r,a,i,o),e._a[ye]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=gt(e._a[ye],r[ye]),(e._dayOfYear>De(o)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),n=Ue(o,0,e._dayOfYear),e._a[ge]=n.getUTCMonth(),e._a[Me]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[ve]&&0===e._a[be]&&0===e._a[Le]&&0===e._a[Ye]&&(e._nextDay=!0,e._a[ve]=0),e._d=(e._useUTC?Ue:qe).apply(null,s),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[ve]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(_(e).weekdayMismatch=!0)}}var vt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Lt=/Z|[+-]\d\d(?::?\d\d)?/,Yt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],kt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((\-?\d+)/i;function Dt(e){var t,n,r,a,i,o,s=e._i,u=vt.exec(s)||bt.exec(s);if(u){for(_(e).iso=!0,t=0,n=Yt.length;t<n;t++)if(Yt[t][1].exec(u[1])){a=Yt[t][0],r=!1!==Yt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=kt.length;t<n;t++)if(kt[t][1].exec(u[3])){i=(u[2]||" ")+kt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!Lt.exec(u[4]))return void(e._isValid=!1);o="Z"}e._f=a+(i||"")+(o||""),jt(e)}else e._isValid=!1}var xt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Tt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var St={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Ht(e){var t,n,r,a,i,o,s,u=xt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){var d=(t=u[4],n=u[3],r=u[2],a=u[5],i=u[6],o=u[7],s=[Tt(t),Oe.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(i,10)],o&&s.push(parseInt(o,10)),s);if(!function(e,t,n){return!e||Ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(_(n).weekdayMismatch=!0,n._isValid=!1,!1)}(u[1],d,e))return;e._a=d,e._tzm=function(e,t,n){if(e)return St[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(u[8],u[9],u[10]),e._d=Ue.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function jt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],_(e).empty=!0;var t,n,r,i,o,s=""+e._i,u=s.length,d=0;for(r=J(e._f,e._locale).match(F)||[],t=0;t<r.length;t++)i=r[t],(n=(s.match(le(i,e))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&_(e).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),d+=n.length),q[i]?(n?_(e).empty=!1:_(e).unusedTokens.push(i),pe(i,n,e)):e._strict&&!n&&_(e).unusedTokens.push(i);_(e).charsLeftOver=u-d,s.length>0&&_(e).unusedInput.push(s),e._a[ve]<=12&&!0===_(e).bigHour&&e._a[ve]>0&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[ve]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[ve],e._meridiem),Mt(e),yt(e)}else Ht(e);else Dt(e)}function At(e){var t=e._i,n=e._f;return e._locale=e._locale||pt(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),b(t)?new v(yt(t)):(d(t)?e._d=t:i(n)?function(e){var t,n,r,a,i;if(0===e._f.length)return _(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)i=0,t=g({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],jt(t),m(t)&&(i+=_(t).charsLeftOver,i+=10*_(t).unusedTokens.length,_(t).score=i,(null==r||i<r)&&(r=i,n=t));f(e,n||t)}(e):n?jt(e):function(e){var t=e._i;s(t)?e._d=new Date(a.now()):d(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(Dt(e),!1===e._isValid&&(delete e._isValid,Ht(e),!1===e._isValid&&(delete e._isValid,a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=c(t.slice(0),(function(e){return parseInt(e,10)})),Mt(e)):o(t)?function(e){if(!e._d){var t=O(e._i);e._a=c([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Mt(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),m(e)||(e._d=null),e))}function Et(e,t,n,r,a){var s,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(o(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=e,u._f=t,u._strict=r,(s=new v(yt(At(u))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Pt(e,t,n,r){return Et(e,t,n,r,!1)}a.createFromInputFallback=D("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Ct=D("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Pt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()})),Ot=D("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Pt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()}));function Nt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Pt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Wt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function zt(e){var t=O(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,u=t.minute||0,d=t.second||0,c=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Wt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Wt.length;++r)if(e[Wt[r]]){if(n)return!1;parseFloat(e[Wt[r]])!==Y(e[Wt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+c+1e3*d+6e4*u+1e3*s*60*60,this._days=+o+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=pt(),this._bubble()}function Ft(e){return e instanceof zt}function Rt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function It(e,t){U(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+z(~~(e/60),2)+t+z(~~e%60,2)}))}It("Z",":"),It("ZZ",""),ce("Z",se),ce("ZZ",se),_e(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ut(se,e)}));var qt=/([\+\-]|\d\d)/gi;function Ut(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(qt)||["-",0,0],a=60*r[1]+Y(r[2]);return 0===a?0:"+"===r[0]?a:-a}function Bt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(b(e)||d(e)?e.valueOf():Pt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Pt(e).local()}function Jt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Gt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Vt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,$t=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Xt(e,t){var n,r,a,i,o,s,d=e,c=null;return Ft(e)?d={ms:e._milliseconds,d:e._days,M:e._months}:u(e)?(d={},t?d[t]=e:d.milliseconds=e):(c=Vt.exec(e))?(n="-"===c[1]?-1:1,d={y:0,d:Y(c[Me])*n,h:Y(c[ve])*n,m:Y(c[be])*n,s:Y(c[Le])*n,ms:Y(Rt(1e3*c[Ye]))*n}):(c=$t.exec(e))?(n="-"===c[1]?-1:1,d={y:Zt(c[2],n),M:Zt(c[3],n),w:Zt(c[4],n),d:Zt(c[5],n),h:Zt(c[6],n),m:Zt(c[7],n),s:Zt(c[8],n)}):null==d?d={}:"object"==typeof d&&("from"in d||"to"in d)&&(i=Pt(d.from),o=Pt(d.to),a=i.isValid()&&o.isValid()?(o=Bt(o,i),i.isBefore(o)?s=Kt(i,o):((s=Kt(o,i)).milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0},(d={}).ms=a.milliseconds,d.M=a.months),r=new zt(d),Ft(e)&&l(e,"_locale")&&(r._locale=e._locale),r}function Zt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Kt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Qt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(S(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),en(this,Xt(n="string"==typeof n?+n:n,r),e),this}}function en(e,t,n,r){var i=t._milliseconds,o=Rt(t._days),s=Rt(t._months);e.isValid()&&(r=null==r||r,s&&We(e,je(e,"Month")+s*n),o&&Ae(e,"Date",je(e,"Date")+o*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,o||s))}Xt.fn=zt.prototype,Xt.invalid=function(){return Xt(NaN)};var tn=Qt(1,"add"),nn=Qt(-1,"subtract");function rn(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function an(e){var t;return void 0===e?this._locale._abbr:(null!=(t=pt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var on=D("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function sn(){return this._locale}var un=1e3,dn=60*un,cn=60*dn,ln=3506328*cn;function fn(e,t){return(e%t+t)%t}function hn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-ln:new Date(e,t,n).valueOf()}function _n(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-ln:Date.UTC(e,t,n)}function mn(e,t){U(0,[e,e.length],0,t)}function pn(e,t,n,r,a){var i;return null==e?Ge(this,r,a).year:(t>(i=Ve(e,r,a))&&(t=i),yn.call(this,e,t,n,r,a))}function yn(e,t,n,r,a){var i=Je(e,t,n,r,a),o=Ue(i.year,0,i.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}U(0,["gg",2],0,(function(){return this.weekYear()%100})),U(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),mn("gggg","weekYear"),mn("ggggg","weekYear"),mn("GGGG","isoWeekYear"),mn("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),W("weekYear",1),W("isoWeekYear",1),ce("G",ie),ce("g",ie),ce("GG",K,V),ce("gg",K,V),ce("GGGG",ne,X),ce("gggg",ne,X),ce("GGGGG",re,Z),ce("ggggg",re,Z),me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=Y(e)})),me(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),U("Q",0,"Qo","quarter"),P("quarter","Q"),W("quarter",7),ce("Q",G),_e("Q",(function(e,t){t[ge]=3*(Y(e)-1)})),U("D",["DD",2],"Do","date"),P("date","D"),W("date",9),ce("D",K),ce("DD",K,V),ce("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),_e(["D","DD"],Me),_e("Do",(function(e,t){t[Me]=Y(e.match(K)[0])}));var gn=He("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),W("dayOfYear",4),ce("DDD",te),ce("DDDD",$),_e(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=Y(e)})),U("m",["mm",2],0,"minute"),P("minute","m"),W("minute",14),ce("m",K),ce("mm",K,V),_e(["m","mm"],be);var Mn=He("Minutes",!1);U("s",["ss",2],0,"second"),P("second","s"),W("second",15),ce("s",K),ce("ss",K,V),_e(["s","ss"],Le);var vn,bn=He("Seconds",!1);for(U("S",0,0,(function(){return~~(this.millisecond()/100)})),U(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),U(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),U(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),U(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),U(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),U(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),P("millisecond","ms"),W("millisecond",16),ce("S",te,G),ce("SS",te,V),ce("SSS",te,$),vn="SSSS";vn.length<=9;vn+="S")ce(vn,ae);function Ln(e,t){t[Ye]=Y(1e3*("0."+e))}for(vn="S";vn.length<=9;vn+="S")_e(vn,Ln);var Yn=He("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var kn=v.prototype;function wn(e){return e}kn.add=tn,kn.calendar=function(e,t){var n=e||Pt(),r=Bt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",o=t&&(H(t[i])?t[i].call(this,n):t[i]);return this.format(o||this.localeData().calendar(i,this,Pt(n)))},kn.clone=function(){return new v(this)},kn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Bt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=C(t)){case"year":i=rn(this,r)/12;break;case"month":i=rn(this,r);break;case"quarter":i=rn(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:L(i)},kn.endOf=function(e){var t;if(void 0===(e=C(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?_n:hn;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=cn-fn(t+(this._isUTC?0:this.utcOffset()*dn),cn)-1;break;case"minute":t=this._d.valueOf(),t+=dn-fn(t,dn)-1;break;case"second":t=this._d.valueOf(),t+=un-fn(t,un)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},kn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=B(this,e);return this.localeData().postformat(t)},kn.from=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Pt(e).isValid())?Xt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},kn.fromNow=function(e){return this.from(Pt(),e)},kn.to=function(e,t){return this.isValid()&&(b(e)&&e.isValid()||Pt(e).isValid())?Xt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},kn.toNow=function(e){return this.to(Pt(),e)},kn.get=function(e){return H(this[e=C(e)])?this[e]():this},kn.invalidAt=function(){return _(this).overflow},kn.isAfter=function(e,t){var n=b(e)?e:Pt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=C(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},kn.isBefore=function(e,t){var n=b(e)?e:Pt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=C(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},kn.isBetween=function(e,t,n,r){var a=b(e)?e:Pt(e),i=b(t)?t:Pt(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},kn.isSame=function(e,t){var n,r=b(e)?e:Pt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=C(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},kn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},kn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},kn.isValid=function(){return m(this)},kn.lang=on,kn.locale=an,kn.localeData=sn,kn.max=Ot,kn.min=Ct,kn.parsingFlags=function(){return f({},_(this))},kn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:N[n]});return t.sort((function(e,t){return e.priority-t.priority})),t}(e=O(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(H(this[e=C(e)]))return this[e](t);return this},kn.startOf=function(e){var t;if(void 0===(e=C(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?_n:hn;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=fn(t+(this._isUTC?0:this.utcOffset()*dn),cn);break;case"minute":t=this._d.valueOf(),t-=fn(t,dn);break;case"second":t=this._d.valueOf(),t-=fn(t,un)}return this._d.setTime(t),a.updateOffset(this,!0),this},kn.subtract=nn,kn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},kn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},kn.toDate=function(){return new Date(this.valueOf())},kn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?B(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):H(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",B(n,"Z")):B(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},kn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},kn.toJSON=function(){return this.isValid()?this.toISOString():null},kn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},kn.unix=function(){return Math.floor(this.valueOf()/1e3)},kn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},kn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},kn.year=Se,kn.isLeapYear=function(){return xe(this.year())},kn.weekYear=function(e){return pn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},kn.isoWeekYear=function(e){return pn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},kn.quarter=kn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},kn.month=ze,kn.daysInMonth=function(){return Ee(this.year(),this.month())},kn.week=kn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},kn.isoWeek=kn.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},kn.weeksInYear=function(){var e=this.localeData()._week;return Ve(this.year(),e.dow,e.doy)},kn.isoWeeksInYear=function(){return Ve(this.year(),1,4)},kn.date=gn,kn.day=kn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},kn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},kn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},kn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},kn.hour=kn.hours=ut,kn.minute=kn.minutes=Mn,kn.second=kn.seconds=bn,kn.millisecond=kn.milliseconds=Yn,kn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ut(se,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Jt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?en(this,Xt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Jt(this)},kn.utc=function(e){return this.utcOffset(0,e)},kn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Jt(this),"m")),this},kn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ut(oe,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},kn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Pt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},kn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},kn.isLocal=function(){return!!this.isValid()&&!this._isUTC},kn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},kn.isUtc=Gt,kn.isUTC=Gt,kn.zoneAbbr=function(){return this._isUTC?"UTC":""},kn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},kn.dates=D("dates accessor is deprecated. Use date instead.",gn),kn.months=D("months accessor is deprecated. Use month instead",ze),kn.years=D("years accessor is deprecated. Use year instead",Se),kn.zone=D("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),kn.isDSTShifted=D("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(g(e,this),(e=At(e))._a){var t=e._isUTC?h(e._a):Pt(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var Dn=A.prototype;function xn(e,t,n,r){var a=pt(),i=h().set(r,t);return a[n](i,e)}function Tn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return xn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=xn(e,r,n,"month");return a}function Sn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,i=pt(),o=e?i._week.dow:0;if(null!=n)return xn(t,(n+o)%7,r,"day");var s=[];for(a=0;a<7;a++)s[a]=xn(t,(a+o)%7,r,"day");return s}Dn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return H(r)?r.call(t,n):r},Dn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,(function(e){return e.slice(1)})),this._longDateFormat[e])},Dn.invalidDate=function(){return this._invalidDate},Dn.ordinal=function(e){return this._ordinal.replace("%d",e)},Dn.preparse=wn,Dn.postformat=wn,Dn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return H(a)?a(e,t,n,r):a.replace(/%d/i,e)},Dn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return H(n)?n(t):n.replace(/%s/i,t)},Dn.set=function(e){var t,n;for(n in e)H(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},Dn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Pe).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},Dn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Pe.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},Dn.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return Ne.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},Dn.monthsRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||Ie.call(this),e?this._monthsStrictRegex:this._monthsRegex):(l(this,"_monthsRegex")||(this._monthsRegex=Re),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},Dn.monthsShortRegex=function(e){return this._monthsParseExact?(l(this,"_monthsRegex")||Ie.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(l(this,"_monthsShortRegex")||(this._monthsShortRegex=Fe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},Dn.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},Dn.firstDayOfYear=function(){return this._week.doy},Dn.firstDayOfWeek=function(){return this._week.dow},Dn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?$e(n,this._week.dow):e?n[e.day()]:n},Dn.weekdaysMin=function(e){return!0===e?$e(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},Dn.weekdaysShort=function(e){return!0===e?$e(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},Dn.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return Qe.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},Dn.weekdaysRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(l(this,"_weekdaysRegex")||(this._weekdaysRegex=et),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},Dn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(l(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=tt),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},Dn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(l(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(l(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=nt),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},Dn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},Dn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},_t("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===Y(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=D("moment.lang is deprecated. Use moment.locale instead.",_t),a.langData=D("moment.langData is deprecated. Use moment.localeData instead.",pt);var Hn=Math.abs;function jn(e,t,n,r){var a=Xt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function An(e){return e<0?Math.floor(e):Math.ceil(e)}function En(e){return 4800*e/146097}function Pn(e){return 146097*e/4800}function Cn(e){return function(){return this.as(e)}}var On=Cn("ms"),Nn=Cn("s"),Wn=Cn("m"),zn=Cn("h"),Fn=Cn("d"),Rn=Cn("w"),In=Cn("M"),qn=Cn("Q"),Un=Cn("y");function Bn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Jn=Bn("milliseconds"),Gn=Bn("seconds"),Vn=Bn("minutes"),$n=Bn("hours"),Xn=Bn("days"),Zn=Bn("months"),Kn=Bn("years"),Qn=Math.round,er={ss:44,s:45,m:45,h:22,d:26,M:11};function tr(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var nr=Math.abs;function rr(e){return(e>0)-(e<0)||+e}function ar(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=nr(this._milliseconds)/1e3,r=nr(this._days),a=nr(this._months);e=L(n/60),t=L(e/60),n%=60,e%=60;var i=L(a/12),o=a%=12,s=r,u=t,d=e,c=n?n.toFixed(3).replace(/\.?0+$/,""):"",l=this.asSeconds();if(!l)return"P0D";var f=l<0?"-":"",h=rr(this._months)!==rr(l)?"-":"",_=rr(this._days)!==rr(l)?"-":"",m=rr(this._milliseconds)!==rr(l)?"-":"";return f+"P"+(i?h+i+"Y":"")+(o?h+o+"M":"")+(s?_+s+"D":"")+(u||d||c?"T":"")+(u?m+u+"H":"")+(d?m+d+"M":"")+(c?m+c+"S":"")}var ir=zt.prototype;return ir.isValid=function(){return this._isValid},ir.abs=function(){var e=this._data;return this._milliseconds=Hn(this._milliseconds),this._days=Hn(this._days),this._months=Hn(this._months),e.milliseconds=Hn(e.milliseconds),e.seconds=Hn(e.seconds),e.minutes=Hn(e.minutes),e.hours=Hn(e.hours),e.months=Hn(e.months),e.years=Hn(e.years),this},ir.add=function(e,t){return jn(this,e,t,1)},ir.subtract=function(e,t){return jn(this,e,t,-1)},ir.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=C(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+En(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Pn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},ir.asMilliseconds=On,ir.asSeconds=Nn,ir.asMinutes=Wn,ir.asHours=zn,ir.asDays=Fn,ir.asWeeks=Rn,ir.asMonths=In,ir.asQuarters=qn,ir.asYears=Un,ir.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*Y(this._months/12):NaN},ir._bubble=function(){var e,t,n,r,a,i=this._milliseconds,o=this._days,s=this._months,u=this._data;return i>=0&&o>=0&&s>=0||i<=0&&o<=0&&s<=0||(i+=864e5*An(Pn(s)+o),o=0,s=0),u.milliseconds=i%1e3,e=L(i/1e3),u.seconds=e%60,t=L(e/60),u.minutes=t%60,n=L(t/60),u.hours=n%24,o+=L(n/24),a=L(En(o)),s+=a,o-=An(Pn(a)),r=L(s/12),s%=12,u.days=o,u.months=s,u.years=r,this},ir.clone=function(){return Xt(this)},ir.get=function(e){return e=C(e),this.isValid()?this[e+"s"]():NaN},ir.milliseconds=Jn,ir.seconds=Gn,ir.minutes=Vn,ir.hours=$n,ir.days=Xn,ir.weeks=function(){return L(this.days()/7)},ir.months=Zn,ir.years=Kn,ir.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Xt(e).abs(),a=Qn(r.as("s")),i=Qn(r.as("m")),o=Qn(r.as("h")),s=Qn(r.as("d")),u=Qn(r.as("M")),d=Qn(r.as("y")),c=a<=er.ss&&["s",a]||a<er.s&&["ss",a]||i<=1&&["m"]||i<er.m&&["mm",i]||o<=1&&["h"]||o<er.h&&["hh",o]||s<=1&&["d"]||s<er.d&&["dd",s]||u<=1&&["M"]||u<er.M&&["MM",u]||d<=1&&["y"]||["yy",d];return c[2]=t,c[3]=+e>0,c[4]=n,tr.apply(null,c)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},ir.toISOString=ar,ir.toString=ar,ir.toJSON=ar,ir.locale=an,ir.localeData=sn,ir.toIsoString=D("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ar),ir.lang=on,U("X",0,0,"unix"),U("x",0,0,"valueOf"),ce("x",ie),ce("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))})),_e("x",(function(e,t,n){n._d=new Date(Y(e))})),a.version="2.24.0",t=Pt,a.fn=kn,a.min=function(){return Nt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Nt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return Pt(1e3*e)},a.months=function(e,t){return Tn(e,t,"months")},a.isDate=d,a.locale=_t,a.invalid=p,a.duration=Xt,a.isMoment=b,a.weekdays=function(e,t,n){return Sn(e,t,n,"weekdays")},a.parseZone=function(){return Pt.apply(null,arguments).parseZone()},a.localeData=pt,a.isDuration=Ft,a.monthsShort=function(e,t){return Tn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Sn(e,t,n,"weekdaysMin")},a.defineLocale=mt,a.updateLocale=function(e,t){if(null!=t){var n,r,a=dt;null!=(r=ht(e))&&(a=r._config),t=j(a,t),(n=new A(t)).parentLocale=ct[e],ct[e]=n,_t(e)}else null!=ct[e]&&(null!=ct[e].parentLocale?ct[e]=ct[e].parentLocale:null!=ct[e]&&delete ct[e]);return ct[e]},a.locales=function(){return x(ct)},a.weekdaysShort=function(e,t,n){return Sn(e,t,n,"weekdaysShort")},a.normalizeUnits=C,a.relativeTimeRounding=function(e){return void 0===e?Qn:"function"==typeof e&&(Qn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==er[e]&&(void 0===t?er[e]:(er[e]=t,"s"===e&&(er.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=kn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(140)(e))},function(e,t,n){"use strict";n.r(t);var r=function(e,t){return e<t?-1:e>t?1:e>=t?0:NaN},a=function(e){var t;return 1===e.length&&(t=e,e=function(e,n){return r(t(e),n)}),{left:function(t,n,r,a){for(null==r&&(r=0),null==a&&(a=t.length);r<a;){var i=r+a>>>1;e(t[i],n)<0?r=i+1:a=i}return r},right:function(t,n,r,a){for(null==r&&(r=0),null==a&&(a=t.length);r<a;){var i=r+a>>>1;e(t[i],n)>0?a=i:r=i+1}return r}}};var i=a(r),o=i.right,s=i.left,u=o,d=function(e,t){null==t&&(t=c);for(var n=0,r=e.length-1,a=e[0],i=new Array(r<0?0:r);n<r;)i[n]=t(a,a=e[++n]);return i};function c(e,t){return[e,t]}var l=function(e,t,n){var r,a,i,o,s=e.length,u=t.length,d=new Array(s*u);for(null==n&&(n=c),r=i=0;r<s;++r)for(o=e[r],a=0;a<u;++a,++i)d[i]=n(o,t[a]);return d},f=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},h=function(e){return null===e?NaN:+e},_=function(e,t){var n,r,a=e.length,i=0,o=-1,s=0,u=0;if(null==t)for(;++o<a;)isNaN(n=h(e[o]))||(u+=(r=n-s)*(n-(s+=r/++i)));else for(;++o<a;)isNaN(n=h(t(e[o],o,e)))||(u+=(r=n-s)*(n-(s+=r/++i)));if(i>1)return u/(i-1)},m=function(e,t){var n=_(e,t);return n?Math.sqrt(n):n},p=function(e,t){var n,r,a,i=e.length,o=-1;if(null==t){for(;++o<i;)if(null!=(n=e[o])&&n>=n)for(r=a=n;++o<i;)null!=(n=e[o])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++o<i;)if(null!=(n=t(e[o],o,e))&&n>=n)for(r=a=n;++o<i;)null!=(n=t(e[o],o,e))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]},y=Array.prototype,g=y.slice,M=y.map,v=function(e){return function(){return e}},b=function(e){return e},L=function(e,t,n){e=+e,t=+t,n=(a=arguments.length)<2?(t=e,e=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((t-e)/n)),i=new Array(a);++r<a;)i[r]=e+r*n;return i},Y=Math.sqrt(50),k=Math.sqrt(10),w=Math.sqrt(2),D=function(e,t,n){var r,a,i,o,s=-1;if(n=+n,(e=+e)===(t=+t)&&n>0)return[e];if((r=t<e)&&(a=e,e=t,t=a),0===(o=x(e,t,n))||!isFinite(o))return[];if(o>0)for(e=Math.ceil(e/o),t=Math.floor(t/o),i=new Array(a=Math.ceil(t-e+1));++s<a;)i[s]=(e+s)*o;else for(e=Math.floor(e*o),t=Math.ceil(t*o),i=new Array(a=Math.ceil(e-t+1));++s<a;)i[s]=(e-s)/o;return r&&i.reverse(),i};function x(e,t,n){var r=(t-e)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=Y?10:i>=k?5:i>=w?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=Y?10:i>=k?5:i>=w?2:1)}function T(e,t,n){var r=Math.abs(t-e)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=Y?a*=10:i>=k?a*=5:i>=w&&(a*=2),t<e?-a:a}var S=function(e){return Math.ceil(Math.log(e.length)/Math.LN2)+1},H=function(){var e=b,t=p,n=S;function r(r){var a,i,o=r.length,s=new Array(o);for(a=0;a<o;++a)s[a]=e(r[a],a,r);var d=t(s),c=d[0],l=d[1],f=n(s,c,l);Array.isArray(f)||(f=T(c,l,f),f=L(Math.ceil(c/f)*f,l,f));for(var h=f.length;f[0]<=c;)f.shift(),--h;for(;f[h-1]>l;)f.pop(),--h;var _,m=new Array(h+1);for(a=0;a<=h;++a)(_=m[a]=[]).x0=a>0?f[a-1]:c,_.x1=a<h?f[a]:l;for(a=0;a<o;++a)c<=(i=s[a])&&i<=l&&m[u(f,i,0,h)].push(r[a]);return m}return r.value=function(t){return arguments.length?(e="function"==typeof t?t:v(t),r):e},r.domain=function(e){return arguments.length?(t="function"==typeof e?e:v([e[0],e[1]]),r):t},r.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?v(g.call(e)):v(e),r):n},r},j=function(e,t,n){if(null==n&&(n=h),r=e.length){if((t=+t)<=0||r<2)return+n(e[0],0,e);if(t>=1)return+n(e[r-1],r-1,e);var r,a=(r-1)*t,i=Math.floor(a),o=+n(e[i],i,e);return o+(+n(e[i+1],i+1,e)-o)*(a-i)}},A=function(e,t,n){return e=M.call(e,h).sort(r),Math.ceil((n-t)/(2*(j(e,.75)-j(e,.25))*Math.pow(e.length,-1/3)))},E=function(e,t,n){return Math.ceil((n-t)/(3.5*m(e)*Math.pow(e.length,-1/3)))},P=function(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&n>r&&(r=n);return r},C=function(e,t){var n,r=e.length,a=r,i=-1,o=0;if(null==t)for(;++i<r;)isNaN(n=h(e[i]))?--a:o+=n;else for(;++i<r;)isNaN(n=h(t(e[i],i,e)))?--a:o+=n;if(a)return o/a},O=function(e,t){var n,a=e.length,i=-1,o=[];if(null==t)for(;++i<a;)isNaN(n=h(e[i]))||o.push(n);else for(;++i<a;)isNaN(n=h(t(e[i],i,e)))||o.push(n);return j(o.sort(r),.5)},N=function(e){for(var t,n,r,a=e.length,i=-1,o=0;++i<a;)o+=e[i].length;for(n=new Array(o);--a>=0;)for(t=(r=e[a]).length;--t>=0;)n[--o]=r[t];return n},W=function(e,t){var n,r,a=e.length,i=-1;if(null==t){for(;++i<a;)if(null!=(n=e[i])&&n>=n)for(r=n;++i<a;)null!=(n=e[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=t(e[i],i,e))&&n>=n)for(r=n;++i<a;)null!=(n=t(e[i],i,e))&&r>n&&(r=n);return r},z=function(e,t){for(var n=t.length,r=new Array(n);n--;)r[n]=e[t[n]];return r},F=function(e,t){if(n=e.length){var n,a,i=0,o=0,s=e[o];for(null==t&&(t=r);++i<n;)(t(a=e[i],s)<0||0!==t(s,s))&&(s=a,o=i);return 0===t(s,s)?o:void 0}},R=function(e,t,n){for(var r,a,i=(null==n?e.length:n)-(t=null==t?0:+t);i;)a=Math.random()*i--|0,r=e[i+t],e[i+t]=e[a+t],e[a+t]=r;return e},I=function(e,t){var n,r=e.length,a=-1,i=0;if(null==t)for(;++a<r;)(n=+e[a])&&(i+=n);else for(;++a<r;)(n=+t(e[a],a,e))&&(i+=n);return i},q=function(e){if(!(a=e.length))return[];for(var t=-1,n=W(e,U),r=new Array(n);++t<n;)for(var a,i=-1,o=r[t]=new Array(a);++i<a;)o[i]=e[i][t];return r};function U(e){return e.length}var B=function(){return q(arguments)},J=Array.prototype.slice,G=function(e){return e},V=1,$=2,X=3,Z=4,K=1e-6;function Q(e){return"translate("+(e+.5)+",0)"}function ee(e){return"translate(0,"+(e+.5)+")"}function te(e){return function(t){return+e(t)}}function ne(e){var t=Math.max(0,e.bandwidth()-1)/2;return e.round()&&(t=Math.round(t)),function(n){return+e(n)+t}}function re(){return!this.__axis}function ae(e,t){var n=[],r=null,a=null,i=6,o=6,s=3,u=e===V||e===Z?-1:1,d=e===Z||e===$?"x":"y",c=e===V||e===X?Q:ee;function l(l){var f=null==r?t.ticks?t.ticks.apply(t,n):t.domain():r,h=null==a?t.tickFormat?t.tickFormat.apply(t,n):G:a,_=Math.max(i,0)+s,m=t.range(),p=+m[0]+.5,y=+m[m.length-1]+.5,g=(t.bandwidth?ne:te)(t.copy()),M=l.selection?l.selection():l,v=M.selectAll(".domain").data([null]),b=M.selectAll(".tick").data(f,t).order(),L=b.exit(),Y=b.enter().append("g").attr("class","tick"),k=b.select("line"),w=b.select("text");v=v.merge(v.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),b=b.merge(Y),k=k.merge(Y.append("line").attr("stroke","currentColor").attr(d+"2",u*i)),w=w.merge(Y.append("text").attr("fill","currentColor").attr(d,u*_).attr("dy",e===V?"0em":e===X?"0.71em":"0.32em")),l!==M&&(v=v.transition(l),b=b.transition(l),k=k.transition(l),w=w.transition(l),L=L.transition(l).attr("opacity",K).attr("transform",(function(e){return isFinite(e=g(e))?c(e):this.getAttribute("transform")})),Y.attr("opacity",K).attr("transform",(function(e){var t=this.parentNode.__axis;return c(t&&isFinite(t=t(e))?t:g(e))}))),L.remove(),v.attr("d",e===Z||e==$?o?"M"+u*o+","+p+"H0.5V"+y+"H"+u*o:"M0.5,"+p+"V"+y:o?"M"+p+","+u*o+"V0.5H"+y+"V"+u*o:"M"+p+",0.5H"+y),b.attr("opacity",1).attr("transform",(function(e){return c(g(e))})),k.attr(d+"2",u*i),w.attr(d,u*_).text(h),M.filter(re).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",e===$?"start":e===Z?"end":"middle"),M.each((function(){this.__axis=g}))}return l.scale=function(e){return arguments.length?(t=e,l):t},l.ticks=function(){return n=J.call(arguments),l},l.tickArguments=function(e){return arguments.length?(n=null==e?[]:J.call(e),l):n.slice()},l.tickValues=function(e){return arguments.length?(r=null==e?null:J.call(e),l):r&&r.slice()},l.tickFormat=function(e){return arguments.length?(a=e,l):a},l.tickSize=function(e){return arguments.length?(i=o=+e,l):i},l.tickSizeInner=function(e){return arguments.length?(i=+e,l):i},l.tickSizeOuter=function(e){return arguments.length?(o=+e,l):o},l.tickPadding=function(e){return arguments.length?(s=+e,l):s},l}function ie(e){return ae(V,e)}function oe(e){return ae($,e)}function se(e){return ae(X,e)}function ue(e){return ae(Z,e)}var de={value:function(){}};function ce(){for(var e,t=0,n=arguments.length,r={};t<n;++t){if(!(e=arguments[t]+"")||e in r)throw new Error("illegal type: "+e);r[e]=[]}return new le(r)}function le(e){this._=e}function fe(e,t){return e.trim().split(/^|\s+/).map((function(e){var n="",r=e.indexOf(".");if(r>=0&&(n=e.slice(r+1),e=e.slice(0,r)),e&&!t.hasOwnProperty(e))throw new Error("unknown type: "+e);return{type:e,name:n}}))}function he(e,t){for(var n,r=0,a=e.length;r<a;++r)if((n=e[r]).name===t)return n.value}function _e(e,t,n){for(var r=0,a=e.length;r<a;++r)if(e[r].name===t){e[r]=de,e=e.slice(0,r).concat(e.slice(r+1));break}return null!=n&&e.push({name:t,value:n}),e}le.prototype=ce.prototype={constructor:le,on:function(e,t){var n,r=this._,a=fe(e+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=t&&"function"!=typeof t)throw new Error("invalid callback: "+t);for(;++i<o;)if(n=(e=a[i]).type)r[n]=_e(r[n],e.name,t);else if(null==t)for(n in r)r[n]=_e(r[n],e.name,null);return this}for(;++i<o;)if((n=(e=a[i]).type)&&(n=he(r[n],e.name)))return n},copy:function(){var e={},t=this._;for(var n in t)e[n]=t[n].slice();return new le(e)},call:function(e,t){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(i=0,n=(r=this._[e]).length;i<n;++i)r[i].value.apply(t,a)},apply:function(e,t,n){if(!this._.hasOwnProperty(e))throw new Error("unknown type: "+e);for(var r=this._[e],a=0,i=r.length;a<i;++a)r[a].value.apply(t,n)}};var me=ce,pe="http://www.w3.org/1999/xhtml",ye={svg:"http://www.w3.org/2000/svg",xhtml:pe,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},ge=function(e){var t=e+="",n=t.indexOf(":");return n>=0&&"xmlns"!==(t=e.slice(0,n))&&(e=e.slice(n+1)),ye.hasOwnProperty(t)?{space:ye[t],local:e}:e};function Me(e){return function(){var t=this.ownerDocument,n=this.namespaceURI;return n===pe&&t.documentElement.namespaceURI===pe?t.createElement(e):t.createElementNS(n,e)}}function ve(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}var be=function(e){var t=ge(e);return(t.local?ve:Me)(t)};function Le(){}var Ye=function(e){return null==e?Le:function(){return this.querySelector(e)}};function ke(){return[]}var we=function(e){return null==e?ke:function(){return this.querySelectorAll(e)}},De=function(e){return function(){return this.matches(e)}},xe=function(e){return new Array(e.length)};function Te(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}Te.prototype={constructor:Te,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var Se="$";function He(e,t,n,r,a,i){for(var o,s=0,u=t.length,d=i.length;s<d;++s)(o=t[s])?(o.__data__=i[s],r[s]=o):n[s]=new Te(e,i[s]);for(;s<u;++s)(o=t[s])&&(a[s]=o)}function je(e,t,n,r,a,i,o){var s,u,d,c={},l=t.length,f=i.length,h=new Array(l);for(s=0;s<l;++s)(u=t[s])&&(h[s]=d=Se+o.call(u,u.__data__,s,t),d in c?a[s]=u:c[d]=u);for(s=0;s<f;++s)(u=c[d=Se+o.call(e,i[s],s,i)])?(r[s]=u,u.__data__=i[s],c[d]=null):n[s]=new Te(e,i[s]);for(s=0;s<l;++s)(u=t[s])&&c[h[s]]===u&&(a[s]=u)}function Ae(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}function Ee(e){return function(){this.removeAttribute(e)}}function Pe(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Ce(e,t){return function(){this.setAttribute(e,t)}}function Oe(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function Ne(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttribute(e):this.setAttribute(e,n)}}function We(e,t){return function(){var n=t.apply(this,arguments);null==n?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,n)}}var ze=function(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView};function Fe(e){return function(){this.style.removeProperty(e)}}function Re(e,t,n){return function(){this.style.setProperty(e,t,n)}}function Ie(e,t,n){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,n)}}function qe(e,t){return e.style.getPropertyValue(t)||ze(e).getComputedStyle(e,null).getPropertyValue(t)}function Ue(e){return function(){delete this[e]}}function Be(e,t){return function(){this[e]=t}}function Je(e,t){return function(){var n=t.apply(this,arguments);null==n?delete this[e]:this[e]=n}}function Ge(e){return e.trim().split(/^|\s+/)}function Ve(e){return e.classList||new $e(e)}function $e(e){this._node=e,this._names=Ge(e.getAttribute("class")||"")}function Xe(e,t){for(var n=Ve(e),r=-1,a=t.length;++r<a;)n.add(t[r])}function Ze(e,t){for(var n=Ve(e),r=-1,a=t.length;++r<a;)n.remove(t[r])}function Ke(e){return function(){Xe(this,e)}}function Qe(e){return function(){Ze(this,e)}}function et(e,t){return function(){(t.apply(this,arguments)?Xe:Ze)(this,e)}}$e.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute("class",this._names.join(" ")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(e){return this._names.indexOf(e)>=0}};function tt(){this.textContent=""}function nt(e){return function(){this.textContent=e}}function rt(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?"":t}}function at(){this.innerHTML=""}function it(e){return function(){this.innerHTML=e}}function ot(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?"":t}}function st(){this.nextSibling&&this.parentNode.appendChild(this)}function ut(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function dt(){return null}function ct(){var e=this.parentNode;e&&e.removeChild(this)}function lt(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function ft(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ht={},_t=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ht={mouseenter:"mouseover",mouseleave:"mouseout"}));function mt(e,t,n){return e=pt(e,t,n),function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}function pt(e,t,n){return function(r){var a=_t;_t=r;try{e.call(this,this.__data__,t,n)}finally{_t=a}}}function yt(e){return e.trim().split(/^|\s+/).map((function(e){var t="",n=e.indexOf(".");return n>=0&&(t=e.slice(n+1),e=e.slice(0,n)),{type:e,name:t}}))}function gt(e){return function(){var t=this.__on;if(t){for(var n,r=0,a=-1,i=t.length;r<i;++r)n=t[r],e.type&&n.type!==e.type||n.name!==e.name?t[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?t.length=a:delete this.__on}}}function Mt(e,t,n){var r=ht.hasOwnProperty(e.type)?mt:pt;return function(a,i,o){var s,u=this.__on,d=r(t,i,o);if(u)for(var c=0,l=u.length;c<l;++c)if((s=u[c]).type===e.type&&s.name===e.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=d,s.capture=n),void(s.value=t);this.addEventListener(e.type,d,n),s={type:e.type,name:e.name,value:t,listener:d,capture:n},u?u.push(s):this.__on=[s]}}function vt(e,t,n,r){var a=_t;e.sourceEvent=_t,_t=e;try{return t.apply(n,r)}finally{_t=a}}function bt(e,t,n){var r=ze(e),a=r.CustomEvent;"function"==typeof a?a=new a(t,n):(a=r.document.createEvent("Event"),n?(a.initEvent(t,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(t,!1,!1)),e.dispatchEvent(a)}function Lt(e,t){return function(){return bt(this,e,t)}}function Yt(e,t){return function(){return bt(this,e,t.apply(this,arguments))}}var kt=[null];function wt(e,t){this._groups=e,this._parents=t}function Dt(){return new wt([[document.documentElement]],kt)}wt.prototype=Dt.prototype={constructor:wt,select:function(e){"function"!=typeof e&&(e=Ye(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,o,s=t[a],u=s.length,d=r[a]=new Array(u),c=0;c<u;++c)(i=s[c])&&(o=e.call(i,i.__data__,c,s))&&("__data__"in i&&(o.__data__=i.__data__),d[c]=o);return new wt(r,this._parents)},selectAll:function(e){"function"!=typeof e&&(e=we(e));for(var t=this._groups,n=t.length,r=[],a=[],i=0;i<n;++i)for(var o,s=t[i],u=s.length,d=0;d<u;++d)(o=s[d])&&(r.push(e.call(o,o.__data__,d,s)),a.push(o));return new wt(r,a)},filter:function(e){"function"!=typeof e&&(e=De(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,o=t[a],s=o.length,u=r[a]=[],d=0;d<s;++d)(i=o[d])&&e.call(i,i.__data__,d,o)&&u.push(i);return new wt(r,this._parents)},data:function(e,t){if(!e)return _=new Array(this.size()),c=-1,this.each((function(e){_[++c]=e})),_;var n,r=t?je:He,a=this._parents,i=this._groups;"function"!=typeof e&&(n=e,e=function(){return n});for(var o=i.length,s=new Array(o),u=new Array(o),d=new Array(o),c=0;c<o;++c){var l=a[c],f=i[c],h=f.length,_=e.call(l,l&&l.__data__,c,a),m=_.length,p=u[c]=new Array(m),y=s[c]=new Array(m);r(l,f,p,y,d[c]=new Array(h),_,t);for(var g,M,v=0,b=0;v<m;++v)if(g=p[v]){for(v>=b&&(b=v+1);!(M=y[b])&&++b<m;);g._next=M||null}}return(s=new wt(s,a))._enter=u,s._exit=d,s},enter:function(){return new wt(this._enter||this._groups.map(xe),this._parents)},exit:function(){return new wt(this._exit||this._groups.map(xe),this._parents)},join:function(e,t,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof e?e(r):r.append(e+""),null!=t&&(a=t(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(e){for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),o=new Array(r),s=0;s<i;++s)for(var u,d=t[s],c=n[s],l=d.length,f=o[s]=new Array(l),h=0;h<l;++h)(u=d[h]||c[h])&&(f[h]=u);for(;s<r;++s)o[s]=t[s];return new wt(o,this._parents)},order:function(){for(var e=this._groups,t=-1,n=e.length;++t<n;)for(var r,a=e[t],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(e){function t(t,n){return t&&n?e(t.__data__,n.__data__):!t-!n}e||(e=Ae);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,s=n[i],u=s.length,d=a[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(d[c]=o);d.sort(t)}return new wt(a,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){var e=new Array(this.size()),t=-1;return this.each((function(){e[++t]=this})),e},node:function(){for(var e=this._groups,t=0,n=e.length;t<n;++t)for(var r=e[t],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var e=0;return this.each((function(){++e})),e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var a,i=t[n],o=0,s=i.length;o<s;++o)(a=i[o])&&e.call(a,a.__data__,o,i);return this},attr:function(e,t){var n=ge(e);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==t?n.local?Pe:Ee:"function"==typeof t?n.local?We:Ne:n.local?Oe:Ce)(n,t))},style:function(e,t,n){return arguments.length>1?this.each((null==t?Fe:"function"==typeof t?Ie:Re)(e,t,null==n?"":n)):qe(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?Ue:"function"==typeof t?Je:Be)(e,t)):this.node()[e]},classed:function(e,t){var n=Ge(e+"");if(arguments.length<2){for(var r=Ve(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof t?et:t?Ke:Qe)(n,t))},text:function(e){return arguments.length?this.each(null==e?tt:("function"==typeof e?rt:nt)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?at:("function"==typeof e?ot:it)(e)):this.node().innerHTML},raise:function(){return this.each(st)},lower:function(){return this.each(ut)},append:function(e){var t="function"==typeof e?e:be(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var n="function"==typeof e?e:be(e),r=null==t?dt:"function"==typeof t?t:Ye(t);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ct)},clone:function(e){return this.select(e?ft:lt)},datum:function(e){return arguments.length?this.property("__data__",e):this.node().__data__},on:function(e,t,n){var r,a,i=yt(e+""),o=i.length;if(!(arguments.length<2)){for(s=t?Mt:gt,null==n&&(n=!1),r=0;r<o;++r)this.each(s(i[r],t,n));return this}var s=this.node().__on;if(s)for(var u,d=0,c=s.length;d<c;++d)for(r=0,u=s[d];r<o;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(e,t){return this.each(("function"==typeof t?Yt:Lt)(e,t))}};var xt=Dt,Tt=function(e){return"string"==typeof e?new wt([[document.querySelector(e)]],[document.documentElement]):new wt([[e]],kt)},St=function(e){return Tt(be(e).call(document.documentElement))},Ht=0;function jt(){return new At}function At(){this._="@"+(++Ht).toString(36)}At.prototype=jt.prototype={constructor:At,get:function(e){for(var t=this._;!(t in e);)if(!(e=e.parentNode))return;return e[t]},set:function(e,t){return e[this._]=t},remove:function(e){return this._ in e&&delete e[this._]},toString:function(){return this._}};var Et=function(){for(var e,t=_t;e=t.sourceEvent;)t=e;return t},Pt=function(e,t){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]},Ct=function(e){var t=Et();return t.changedTouches&&(t=t.changedTouches[0]),Pt(e,t)},Ot=function(e){return"string"==typeof e?new wt([document.querySelectorAll(e)],[document.documentElement]):new wt([null==e?[]:e],kt)},Nt=function(e,t,n){arguments.length<3&&(n=t,t=Et().changedTouches);for(var r,a=0,i=t?t.length:0;a<i;++a)if((r=t[a]).identifier===n)return Pt(e,r);return null},Wt=function(e,t){null==t&&(t=Et().touches);for(var n=0,r=t?t.length:0,a=new Array(r);n<r;++n)a[n]=Pt(e,t[n]);return a};function zt(){_t.stopImmediatePropagation()}var Ft=function(){_t.preventDefault(),_t.stopImmediatePropagation()},Rt=function(e){var t=e.document.documentElement,n=Tt(e).on("dragstart.drag",Ft,!0);"onselectstart"in t?n.on("selectstart.drag",Ft,!0):(t.__noselect=t.style.MozUserSelect,t.style.MozUserSelect="none")};function It(e,t){var n=e.document.documentElement,r=Tt(e).on("dragstart.drag",null);t&&(r.on("click.drag",Ft,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}var qt=function(e){return function(){return e}};function Ut(e,t,n,r,a,i,o,s,u,d){this.target=e,this.type=t,this.subject=n,this.identifier=r,this.active=a,this.x=i,this.y=o,this.dx=s,this.dy=u,this._=d}function Bt(){return!_t.ctrlKey&&!_t.button}function Jt(){return this.parentNode}function Gt(e){return null==e?{x:_t.x,y:_t.y}:e}function Vt(){return navigator.maxTouchPoints||"ontouchstart"in this}Ut.prototype.on=function(){var e=this._.on.apply(this._,arguments);return e===this._?this:e};var $t=function(){var e,t,n,r,a=Bt,i=Jt,o=Gt,s=Vt,u={},d=me("start","drag","end"),c=0,l=0;function f(e){e.on("mousedown.drag",h).filter(s).on("touchstart.drag",p).on("touchmove.drag",y).on("touchend.drag touchcancel.drag",g).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function h(){if(!r&&a.apply(this,arguments)){var o=M("mouse",i.apply(this,arguments),Ct,this,arguments);o&&(Tt(_t.view).on("mousemove.drag",_,!0).on("mouseup.drag",m,!0),Rt(_t.view),zt(),n=!1,e=_t.clientX,t=_t.clientY,o("start"))}}function _(){if(Ft(),!n){var r=_t.clientX-e,a=_t.clientY-t;n=r*r+a*a>l}u.mouse("drag")}function m(){Tt(_t.view).on("mousemove.drag mouseup.drag",null),It(_t.view,n),Ft(),u.mouse("end")}function p(){if(a.apply(this,arguments)){var e,t,n=_t.changedTouches,r=i.apply(this,arguments),o=n.length;for(e=0;e<o;++e)(t=M(n[e].identifier,r,Nt,this,arguments))&&(zt(),t("start"))}}function y(){var e,t,n=_t.changedTouches,r=n.length;for(e=0;e<r;++e)(t=u[n[e].identifier])&&(Ft(),t("drag"))}function g(){var e,t,n=_t.changedTouches,a=n.length;for(r&&clearTimeout(r),r=setTimeout((function(){r=null}),500),e=0;e<a;++e)(t=u[n[e].identifier])&&(zt(),t("end"))}function M(e,t,n,r,a){var i,s,l,h=n(t,e),_=d.copy();if(vt(new Ut(f,"beforestart",i,e,c,h[0],h[1],0,0,_),(function(){return null!=(_t.subject=i=o.apply(r,a))&&(s=i.x-h[0]||0,l=i.y-h[1]||0,!0)})))return function o(d){var m,p=h;switch(d){case"start":u[e]=o,m=c++;break;case"end":delete u[e],--c;case"drag":h=n(t,e),m=c}vt(new Ut(f,d,i,e,m,h[0]+s,h[1]+l,h[0]-p[0],h[1]-p[1],_),_.apply,_,[d,r,a])}}return f.filter=function(e){return arguments.length?(a="function"==typeof e?e:qt(!!e),f):a},f.container=function(e){return arguments.length?(i="function"==typeof e?e:qt(e),f):i},f.subject=function(e){return arguments.length?(o="function"==typeof e?e:qt(e),f):o},f.touchable=function(e){return arguments.length?(s="function"==typeof e?e:qt(!!e),f):s},f.on=function(){var e=d.on.apply(d,arguments);return e===d?f:e},f.clickDistance=function(e){return arguments.length?(l=(e=+e)*e,f):Math.sqrt(l)},f},Xt=function(e,t,n){e.prototype=t.prototype=n,n.constructor=e};function Zt(e,t){var n=Object.create(e.prototype);for(var r in t)n[r]=t[r];return n}function Kt(){}var Qt="\\s*([+-]?\\d+)\\s*",en="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nn=/^#([0-9a-f]{3})$/,rn=/^#([0-9a-f]{6})$/,an=new RegExp("^rgb\\("+[Qt,Qt,Qt]+"\\)$"),on=new RegExp("^rgb\\("+[tn,tn,tn]+"\\)$"),sn=new RegExp("^rgba\\("+[Qt,Qt,Qt,en]+"\\)$"),un=new RegExp("^rgba\\("+[tn,tn,tn,en]+"\\)$"),dn=new RegExp("^hsl\\("+[en,tn,tn]+"\\)$"),cn=new RegExp("^hsla\\("+[en,tn,tn,en]+"\\)$"),ln={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function fn(){return this.rgb().formatHex()}function hn(){return this.rgb().formatRgb()}function _n(e){var t;return e=(e+"").trim().toLowerCase(),(t=nn.exec(e))?new Mn((t=parseInt(t[1],16))>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):(t=rn.exec(e))?mn(parseInt(t[1],16)):(t=an.exec(e))?new Mn(t[1],t[2],t[3],1):(t=on.exec(e))?new Mn(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=sn.exec(e))?pn(t[1],t[2],t[3],t[4]):(t=un.exec(e))?pn(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=dn.exec(e))?Yn(t[1],t[2]/100,t[3]/100,1):(t=cn.exec(e))?Yn(t[1],t[2]/100,t[3]/100,t[4]):ln.hasOwnProperty(e)?mn(ln[e]):"transparent"===e?new Mn(NaN,NaN,NaN,0):null}function mn(e){return new Mn(e>>16&255,e>>8&255,255&e,1)}function pn(e,t,n,r){return r<=0&&(e=t=n=NaN),new Mn(e,t,n,r)}function yn(e){return e instanceof Kt||(e=_n(e)),e?new Mn((e=e.rgb()).r,e.g,e.b,e.opacity):new Mn}function gn(e,t,n,r){return 1===arguments.length?yn(e):new Mn(e,t,n,null==r?1:r)}function Mn(e,t,n,r){this.r=+e,this.g=+t,this.b=+n,this.opacity=+r}function vn(){return"#"+Ln(this.r)+Ln(this.g)+Ln(this.b)}function bn(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===e?")":", "+e+")")}function Ln(e){return((e=Math.max(0,Math.min(255,Math.round(e)||0)))<16?"0":"")+e.toString(16)}function Yn(e,t,n,r){return r<=0?e=t=n=NaN:n<=0||n>=1?e=t=NaN:t<=0&&(e=NaN),new Dn(e,t,n,r)}function kn(e){if(e instanceof Dn)return new Dn(e.h,e.s,e.l,e.opacity);if(e instanceof Kt||(e=_n(e)),!e)return new Dn;if(e instanceof Dn)return e;var t=(e=e.rgb()).r/255,n=e.g/255,r=e.b/255,a=Math.min(t,n,r),i=Math.max(t,n,r),o=NaN,s=i-a,u=(i+a)/2;return s?(o=t===i?(n-r)/s+6*(n<r):n===i?(r-t)/s+2:(t-n)/s+4,s/=u<.5?i+a:2-i-a,o*=60):s=u>0&&u<1?0:o,new Dn(o,s,u,e.opacity)}function wn(e,t,n,r){return 1===arguments.length?kn(e):new Dn(e,t,n,null==r?1:r)}function Dn(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function xn(e,t,n){return 255*(e<60?t+(n-t)*e/60:e<180?n:e<240?t+(n-t)*(240-e)/60:t)}Xt(Kt,_n,{copy:function(e){return Object.assign(new this.constructor,this,e)},displayable:function(){return this.rgb().displayable()},hex:fn,formatHex:fn,formatHsl:function(){return kn(this).formatHsl()},formatRgb:hn,toString:hn}),Xt(Mn,gn,Zt(Kt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Mn(this.r*e,this.g*e,this.b*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Mn(this.r*e,this.g*e,this.b*e,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:vn,formatHex:vn,formatRgb:bn,toString:bn})),Xt(Dn,wn,Zt(Kt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new Dn(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new Dn(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*t,a=2*n-r;return new Mn(xn(e>=240?e-240:e+120,a,r),xn(e,a,r),xn(e<120?e+240:e-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var e=this.opacity;return(1===(e=isNaN(e)?1:Math.max(0,Math.min(1,e)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===e?")":", "+e+")")}}));var Tn=Math.PI/180,Sn=180/Math.PI,Hn=.96422,jn=1,An=.82521,En=4/29,Pn=6/29,Cn=3*Pn*Pn,On=Pn*Pn*Pn;function Nn(e){if(e instanceof Fn)return new Fn(e.l,e.a,e.b,e.opacity);if(e instanceof Vn)return $n(e);e instanceof Mn||(e=yn(e));var t,n,r=Un(e.r),a=Un(e.g),i=Un(e.b),o=Rn((.2225045*r+.7168786*a+.0606169*i)/jn);return r===a&&a===i?t=n=o:(t=Rn((.4360747*r+.3850649*a+.1430804*i)/Hn),n=Rn((.0139322*r+.0971045*a+.7141733*i)/An)),new Fn(116*o-16,500*(t-o),200*(o-n),e.opacity)}function Wn(e,t){return new Fn(e,0,0,null==t?1:t)}function zn(e,t,n,r){return 1===arguments.length?Nn(e):new Fn(e,t,n,null==r?1:r)}function Fn(e,t,n,r){this.l=+e,this.a=+t,this.b=+n,this.opacity=+r}function Rn(e){return e>On?Math.pow(e,1/3):e/Cn+En}function In(e){return e>Pn?e*e*e:Cn*(e-En)}function qn(e){return 255*(e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055)}function Un(e){return(e/=255)<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4)}function Bn(e){if(e instanceof Vn)return new Vn(e.h,e.c,e.l,e.opacity);if(e instanceof Fn||(e=Nn(e)),0===e.a&&0===e.b)return new Vn(NaN,0<e.l&&e.l<100?0:NaN,e.l,e.opacity);var t=Math.atan2(e.b,e.a)*Sn;return new Vn(t<0?t+360:t,Math.sqrt(e.a*e.a+e.b*e.b),e.l,e.opacity)}function Jn(e,t,n,r){return 1===arguments.length?Bn(e):new Vn(n,t,e,null==r?1:r)}function Gn(e,t,n,r){return 1===arguments.length?Bn(e):new Vn(e,t,n,null==r?1:r)}function Vn(e,t,n,r){this.h=+e,this.c=+t,this.l=+n,this.opacity=+r}function $n(e){if(isNaN(e.h))return new Fn(e.l,0,0,e.opacity);var t=e.h*Tn;return new Fn(e.l,Math.cos(t)*e.c,Math.sin(t)*e.c,e.opacity)}Xt(Fn,zn,Zt(Kt,{brighter:function(e){return new Fn(this.l+18*(null==e?1:e),this.a,this.b,this.opacity)},darker:function(e){return new Fn(this.l-18*(null==e?1:e),this.a,this.b,this.opacity)},rgb:function(){var e=(this.l+16)/116,t=isNaN(this.a)?e:e+this.a/500,n=isNaN(this.b)?e:e-this.b/200;return new Mn(qn(3.1338561*(t=Hn*In(t))-1.6168667*(e=jn*In(e))-.4906146*(n=An*In(n))),qn(-.9787684*t+1.9161415*e+.033454*n),qn(.0719453*t-.2289914*e+1.4052427*n),this.opacity)}})),Xt(Vn,Gn,Zt(Kt,{brighter:function(e){return new Vn(this.h,this.c,this.l+18*(null==e?1:e),this.opacity)},darker:function(e){return new Vn(this.h,this.c,this.l-18*(null==e?1:e),this.opacity)},rgb:function(){return $n(this).rgb()}}));var Xn=-.29227,Zn=-.90649,Kn=1.97294,Qn=Kn*Zn,er=1.78277*Kn,tr=1.78277*Xn- -.14861*Zn;function nr(e,t,n,r){return 1===arguments.length?function(e){if(e instanceof rr)return new rr(e.h,e.s,e.l,e.opacity);e instanceof Mn||(e=yn(e));var t=e.r/255,n=e.g/255,r=e.b/255,a=(tr*r+Qn*t-er*n)/(tr+Qn-er),i=r-a,o=(Kn*(n-a)-Xn*i)/Zn,s=Math.sqrt(o*o+i*i)/(Kn*a*(1-a)),u=s?Math.atan2(o,i)*Sn-120:NaN;return new rr(u<0?u+360:u,s,a,e.opacity)}(e):new rr(e,t,n,null==r?1:r)}function rr(e,t,n,r){this.h=+e,this.s=+t,this.l=+n,this.opacity=+r}function ar(e,t,n,r,a){var i=e*e,o=i*e;return((1-3*e+3*i-o)*t+(4-6*i+3*o)*n+(1+3*e+3*i-3*o)*r+o*a)/6}Xt(rr,nr,Zt(Kt,{brighter:function(e){return e=null==e?1/.7:Math.pow(1/.7,e),new rr(this.h,this.s,this.l*e,this.opacity)},darker:function(e){return e=null==e?.7:Math.pow(.7,e),new rr(this.h,this.s,this.l*e,this.opacity)},rgb:function(){var e=isNaN(this.h)?0:(this.h+120)*Tn,t=+this.l,n=isNaN(this.s)?0:this.s*t*(1-t),r=Math.cos(e),a=Math.sin(e);return new Mn(255*(t+n*(-.14861*r+1.78277*a)),255*(t+n*(Xn*r+Zn*a)),255*(t+n*(Kn*r)),this.opacity)}}));var ir=function(e){var t=e.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,t-1):Math.floor(n*t),a=e[r],i=e[r+1],o=r>0?e[r-1]:2*a-i,s=r<t-1?e[r+2]:2*i-a;return ar((n-r/t)*t,o,a,i,s)}},or=function(e){var t=e.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*t),a=e[(r+t-1)%t],i=e[r%t],o=e[(r+1)%t],s=e[(r+2)%t];return ar((n-r/t)*t,a,i,o,s)}},sr=function(e){return function(){return e}};function ur(e,t){return function(n){return e+n*t}}function dr(e,t){var n=t-e;return n?ur(e,n>180||n<-180?n-360*Math.round(n/360):n):sr(isNaN(e)?t:e)}function cr(e){return 1==(e=+e)?lr:function(t,n){return n-t?function(e,t,n){return e=Math.pow(e,n),t=Math.pow(t,n)-e,n=1/n,function(r){return Math.pow(e+r*t,n)}}(t,n,e):sr(isNaN(t)?n:t)}}function lr(e,t){var n=t-e;return n?ur(e,n):sr(isNaN(e)?t:e)}var fr=function e(t){var n=cr(t);function r(e,t){var r=n((e=gn(e)).r,(t=gn(t)).r),a=n(e.g,t.g),i=n(e.b,t.b),o=lr(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=a(t),e.b=i(t),e.opacity=o(t),e+""}}return r.gamma=e,r}(1);function hr(e){return function(t){var n,r,a=t.length,i=new Array(a),o=new Array(a),s=new Array(a);for(n=0;n<a;++n)r=gn(t[n]),i[n]=r.r||0,o[n]=r.g||0,s[n]=r.b||0;return i=e(i),o=e(o),s=e(s),r.opacity=1,function(e){return r.r=i(e),r.g=o(e),r.b=s(e),r+""}}}var _r=hr(ir),mr=hr(or),pr=function(e,t){var n,r=t?t.length:0,a=e?Math.min(r,e.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=xr(e[n],t[n]);for(;n<r;++n)o[n]=t[n];return function(e){for(n=0;n<a;++n)o[n]=i[n](e);return o}},yr=function(e,t){var n=new Date;return t-=e=+e,function(r){return n.setTime(e+t*r),n}},gr=function(e,t){return t-=e=+e,function(n){return e+t*n}},Mr=function(e,t){var n,r={},a={};for(n in null!==e&&"object"==typeof e||(e={}),null!==t&&"object"==typeof t||(t={}),t)n in e?r[n]=xr(e[n],t[n]):a[n]=t[n];return function(e){for(n in r)a[n]=r[n](e);return a}},vr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,br=new RegExp(vr.source,"g");var Lr,Yr,kr,wr,Dr=function(e,t){var n,r,a,i=vr.lastIndex=br.lastIndex=0,o=-1,s=[],u=[];for(e+="",t+="";(n=vr.exec(e))&&(r=br.exec(t));)(a=r.index)>i&&(a=t.slice(i,a),s[o]?s[o]+=a:s[++o]=a),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,u.push({i:o,x:gr(n,r)})),i=br.lastIndex;return i<t.length&&(a=t.slice(i),s[o]?s[o]+=a:s[++o]=a),s.length<2?u[0]?function(e){return function(t){return e(t)+""}}(u[0].x):function(e){return function(){return e}}(t):(t=u.length,function(e){for(var n,r=0;r<t;++r)s[(n=u[r]).i]=n.x(e);return s.join("")})},xr=function(e,t){var n,r=typeof t;return null==t||"boolean"===r?sr(t):("number"===r?gr:"string"===r?(n=_n(t))?(t=n,fr):Dr:t instanceof _n?fr:t instanceof Date?yr:Array.isArray(t)?pr:"function"!=typeof t.valueOf&&"function"!=typeof t.toString||isNaN(t)?Mr:gr)(e,t)},Tr=function(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}},Sr=function(e,t){var n=dr(+e,+t);return function(e){var t=n(e);return t-360*Math.floor(t/360)}},Hr=function(e,t){return t-=e=+e,function(n){return Math.round(e+t*n)}},jr=180/Math.PI,Ar={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Er=function(e,t,n,r,a,i){var o,s,u;return(o=Math.sqrt(e*e+t*t))&&(e/=o,t/=o),(u=e*n+t*r)&&(n-=e*u,r-=t*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),e*r<t*n&&(e=-e,t=-t,u=-u,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(t,e)*jr,skewX:Math.atan(u)*jr,scaleX:o,scaleY:s}};function Pr(e,t,n,r){function a(e){return e.length?e.pop()+" ":""}return function(i,o){var s=[],u=[];return i=e(i),o=e(o),function(e,r,a,i,o,s){if(e!==a||r!==i){var u=o.push("translate(",null,t,null,n);s.push({i:u-4,x:gr(e,a)},{i:u-2,x:gr(r,i)})}else(a||i)&&o.push("translate("+a+t+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,s,u),function(e,t,n,i){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:gr(e,t)})):t&&n.push(a(n)+"rotate("+t+r)}(i.rotate,o.rotate,s,u),function(e,t,n,i){e!==t?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:gr(e,t)}):t&&n.push(a(n)+"skewX("+t+r)}(i.skewX,o.skewX,s,u),function(e,t,n,r,i,o){if(e!==n||t!==r){var s=i.push(a(i)+"scale(",null,",",null,")");o.push({i:s-4,x:gr(e,n)},{i:s-2,x:gr(t,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,s,u),i=o=null,function(e){for(var t,n=-1,r=u.length;++n<r;)s[(t=u[n]).i]=t.x(e);return s.join("")}}}var Cr=Pr((function(e){return"none"===e?Ar:(Lr||(Lr=document.createElement("DIV"),Yr=document.documentElement,kr=document.defaultView),Lr.style.transform=e,e=kr.getComputedStyle(Yr.appendChild(Lr),null).getPropertyValue("transform"),Yr.removeChild(Lr),e=e.slice(7,-1).split(","),Er(+e[0],+e[1],+e[2],+e[3],+e[4],+e[5]))}),"px, ","px)","deg)"),Or=Pr((function(e){return null==e?Ar:(wr||(wr=document.createElementNS("http://www.w3.org/2000/svg","g")),wr.setAttribute("transform",e),(e=wr.transform.baseVal.consolidate())?(e=e.matrix,Er(e.a,e.b,e.c,e.d,e.e,e.f)):Ar)}),", ",")",")"),Nr=Math.SQRT2;function Wr(e){return((e=Math.exp(e))+1/e)/2}var zr=function(e,t){var n,r,a=e[0],i=e[1],o=e[2],s=t[0],u=t[1],d=t[2],c=s-a,l=u-i,f=c*c+l*l;if(f<1e-12)r=Math.log(d/o)/Nr,n=function(e){return[a+e*c,i+e*l,o*Math.exp(Nr*e*r)]};else{var h=Math.sqrt(f),_=(d*d-o*o+4*f)/(2*o*2*h),m=(d*d-o*o-4*f)/(2*d*2*h),p=Math.log(Math.sqrt(_*_+1)-_),y=Math.log(Math.sqrt(m*m+1)-m);r=(y-p)/Nr,n=function(e){var t,n=e*r,s=Wr(p),u=o/(2*h)*(s*(t=Nr*n+p,((t=Math.exp(2*t))-1)/(t+1))-function(e){return((e=Math.exp(e))-1/e)/2}(p));return[a+u*c,i+u*l,o*s/Wr(Nr*n+p)]}}return n.duration=1e3*r,n};function Fr(e){return function(t,n){var r=e((t=wn(t)).h,(n=wn(n)).h),a=lr(t.s,n.s),i=lr(t.l,n.l),o=lr(t.opacity,n.opacity);return function(e){return t.h=r(e),t.s=a(e),t.l=i(e),t.opacity=o(e),t+""}}}var Rr=Fr(dr),Ir=Fr(lr);function qr(e,t){var n=lr((e=zn(e)).l,(t=zn(t)).l),r=lr(e.a,t.a),a=lr(e.b,t.b),i=lr(e.opacity,t.opacity);return function(t){return e.l=n(t),e.a=r(t),e.b=a(t),e.opacity=i(t),e+""}}function Ur(e){return function(t,n){var r=e((t=Gn(t)).h,(n=Gn(n)).h),a=lr(t.c,n.c),i=lr(t.l,n.l),o=lr(t.opacity,n.opacity);return function(e){return t.h=r(e),t.c=a(e),t.l=i(e),t.opacity=o(e),t+""}}}var Br=Ur(dr),Jr=Ur(lr);function Gr(e){return function t(n){function r(t,r){var a=e((t=nr(t)).h,(r=nr(r)).h),i=lr(t.s,r.s),o=lr(t.l,r.l),s=lr(t.opacity,r.opacity);return function(e){return t.h=a(e),t.s=i(e),t.l=o(Math.pow(e,n)),t.opacity=s(e),t+""}}return n=+n,r.gamma=t,r}(1)}var Vr=Gr(dr),$r=Gr(lr);function Xr(e,t){for(var n=0,r=t.length-1,a=t[0],i=new Array(r<0?0:r);n<r;)i[n]=e(a,a=t[++n]);return function(e){var t=Math.max(0,Math.min(r-1,Math.floor(e*=r)));return i[t](e-t)}}var Zr,Kr,Qr=function(e,t){for(var n=new Array(t),r=0;r<t;++r)n[r]=e(r/(t-1));return n},ea=0,ta=0,na=0,ra=1e3,aa=0,ia=0,oa=0,sa="object"==typeof performance&&performance.now?performance:Date,ua="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function da(){return ia||(ua(ca),ia=sa.now()+oa)}function ca(){ia=0}function la(){this._call=this._time=this._next=null}function fa(e,t,n){var r=new la;return r.restart(e,t,n),r}function ha(){da(),++ea;for(var e,t=Zr;t;)(e=ia-t._time)>=0&&t._call.call(null,e),t=t._next;--ea}function _a(){ia=(aa=sa.now())+oa,ea=ta=0;try{ha()}finally{ea=0,function(){var e,t,n=Zr,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),e=n,n=n._next):(t=n._next,n._next=null,n=e?e._next=t:Zr=t);Kr=e,pa(r)}(),ia=0}}function ma(){var e=sa.now(),t=e-aa;t>ra&&(oa-=t,aa=e)}function pa(e){ea||(ta&&(ta=clearTimeout(ta)),e-ia>24?(e<1/0&&(ta=setTimeout(_a,e-sa.now()-oa)),na&&(na=clearInterval(na))):(na||(aa=sa.now(),na=setInterval(ma,ra)),ea=1,ua(_a)))}la.prototype=fa.prototype={constructor:la,restart:function(e,t,n){if("function"!=typeof e)throw new TypeError("callback is not a function");n=(null==n?da():+n)+(null==t?0:+t),this._next||Kr===this||(Kr?Kr._next=this:Zr=this,Kr=this),this._call=e,this._time=n,pa()},stop:function(){this._call&&(this._call=null,this._time=1/0,pa())}};var ya=function(e,t,n){var r=new la;return t=null==t?0:+t,r.restart((function(n){r.stop(),e(n+t)}),t,n),r},ga=function(e,t,n){var r=new la,a=t;return null==t?(r.restart(e,t,n),r):(t=+t,n=null==n?da():+n,r.restart((function i(o){o+=a,r.restart(i,a+=t,n),e(o)}),t,n),r)},Ma=me("start","end","cancel","interrupt"),va=[],ba=0,La=1,Ya=2,ka=3,wa=4,Da=5,xa=6,Ta=function(e,t,n,r,a,i){var o=e.__transition;if(o){if(n in o)return}else e.__transition={};!function(e,t,n){var r,a=e.__transition;function i(u){var d,c,l,f;if(n.state!==La)return s();for(d in a)if((f=a[d]).name===n.name){if(f.state===ka)return ya(i);f.state===wa?(f.state=xa,f.timer.stop(),f.on.call("interrupt",e,e.__data__,f.index,f.group),delete a[d]):+d<t&&(f.state=xa,f.timer.stop(),f.on.call("cancel",e,e.__data__,f.index,f.group),delete a[d])}if(ya((function(){n.state===ka&&(n.state=wa,n.timer.restart(o,n.delay,n.time),o(u))})),n.state=Ya,n.on.call("start",e,e.__data__,n.index,n.group),n.state===Ya){for(n.state=ka,r=new Array(l=n.tween.length),d=0,c=-1;d<l;++d)(f=n.tween[d].value.call(e,e.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function o(t){for(var a=t<n.duration?n.ease.call(null,t/n.duration):(n.timer.restart(s),n.state=Da,1),i=-1,o=r.length;++i<o;)r[i].call(e,a);n.state===Da&&(n.on.call("end",e,e.__data__,n.index,n.group),s())}function s(){for(var r in n.state=xa,n.timer.stop(),delete a[t],a)return;delete e.__transition}a[t]=n,n.timer=fa((function(e){n.state=La,n.timer.restart(i,n.delay,n.time),n.delay<=e&&i(e-n.delay)}),0,n.time)}(e,n,{name:t,index:r,group:a,on:Ma,tween:va,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:ba})};function Sa(e,t){var n=ja(e,t);if(n.state>ba)throw new Error("too late; already scheduled");return n}function Ha(e,t){var n=ja(e,t);if(n.state>ka)throw new Error("too late; already running");return n}function ja(e,t){var n=e.__transition;if(!n||!(n=n[t]))throw new Error("transition not found");return n}var Aa=function(e,t){var n,r,a,i=e.__transition,o=!0;if(i){for(a in t=null==t?null:t+"",i)(n=i[a]).name===t?(r=n.state>Ya&&n.state<Da,n.state=xa,n.timer.stop(),n.on.call(r?"interrupt":"cancel",e,e.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete e.__transition}};function Ea(e,t){var n,r;return function(){var a=Ha(this,e),i=a.tween;if(i!==n)for(var o=0,s=(r=n=i).length;o<s;++o)if(r[o].name===t){(r=r.slice()).splice(o,1);break}a.tween=r}}function Pa(e,t,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=Ha(this,e),o=i.tween;if(o!==r){a=(r=o).slice();for(var s={name:t,value:n},u=0,d=a.length;u<d;++u)if(a[u].name===t){a[u]=s;break}u===d&&a.push(s)}i.tween=a}}function Ca(e,t,n){var r=e._id;return e.each((function(){var e=Ha(this,r);(e.value||(e.value={}))[t]=n.apply(this,arguments)})),function(e){return ja(e,r).value[t]}}var Oa=function(e,t){var n;return("number"==typeof t?gr:t instanceof _n?fr:(n=_n(t))?(t=n,fr):Dr)(e,t)};function Na(e){return function(){this.removeAttribute(e)}}function Wa(e){return function(){this.removeAttributeNS(e.space,e.local)}}function za(e,t,n){var r,a,i=n+"";return function(){var o=this.getAttribute(e);return o===i?null:o===r?a:a=t(r=o,n)}}function Fa(e,t,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(e.space,e.local);return o===i?null:o===r?a:a=t(r=o,n)}}function Ra(e,t,n){var r,a,i;return function(){var o,s,u=n(this);if(null!=u)return(o=this.getAttribute(e))===(s=u+"")?null:o===r&&s===a?i:(a=s,i=t(r=o,u));this.removeAttribute(e)}}function Ia(e,t,n){var r,a,i;return function(){var o,s,u=n(this);if(null!=u)return(o=this.getAttributeNS(e.space,e.local))===(s=u+"")?null:o===r&&s===a?i:(a=s,i=t(r=o,u));this.removeAttributeNS(e.space,e.local)}}function qa(e,t){var n,r;function a(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&function(e,t){return function(n){this.setAttributeNS(e.space,e.local,t(n))}}(e,a)),n}return a._value=t,a}function Ua(e,t){var n,r;function a(){var a=t.apply(this,arguments);return a!==r&&(n=(r=a)&&function(e,t){return function(n){this.setAttribute(e,t(n))}}(e,a)),n}return a._value=t,a}function Ba(e,t){return function(){Sa(this,e).delay=+t.apply(this,arguments)}}function Ja(e,t){return t=+t,function(){Sa(this,e).delay=t}}function Ga(e,t){return function(){Ha(this,e).duration=+t.apply(this,arguments)}}function Va(e,t){return t=+t,function(){Ha(this,e).duration=t}}function $a(e,t){if("function"!=typeof t)throw new Error;return function(){Ha(this,e).ease=t}}function Xa(e,t,n){var r,a,i=function(e){return(e+"").trim().split(/^|\s+/).every((function(e){var t=e.indexOf(".");return t>=0&&(e=e.slice(0,t)),!e||"start"===e}))}(t)?Sa:Ha;return function(){var o=i(this,e),s=o.on;s!==r&&(a=(r=s).copy()).on(t,n),o.on=a}}var Za=xt.prototype.constructor;function Ka(e){return function(){this.style.removeProperty(e)}}function Qa(e,t,n){var r,a;function i(){var i=t.apply(this,arguments);return i!==a&&(r=(a=i)&&function(e,t,n){return function(r){this.style.setProperty(e,t(r),n)}}(e,i,n)),r}return i._value=t,i}var ei=0;function ti(e,t,n,r){this._groups=e,this._parents=t,this._name=n,this._id=r}function ni(e){return xt().transition(e)}function ri(){return++ei}var ai=xt.prototype;function ii(e){return+e}function oi(e){return e*e}function si(e){return e*(2-e)}function ui(e){return((e*=2)<=1?e*e:--e*(2-e)+1)/2}function di(e){return e*e*e}function ci(e){return--e*e*e+1}function li(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}ti.prototype=ni.prototype={constructor:ti,select:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=Ye(e));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var s,u,d=r[o],c=d.length,l=i[o]=new Array(c),f=0;f<c;++f)(s=d[f])&&(u=e.call(s,s.__data__,f,d))&&("__data__"in s&&(u.__data__=s.__data__),l[f]=u,Ta(l[f],t,n,f,l,ja(s,n)));return new ti(i,this._parents,t,n)},selectAll:function(e){var t=this._name,n=this._id;"function"!=typeof e&&(e=we(e));for(var r=this._groups,a=r.length,i=[],o=[],s=0;s<a;++s)for(var u,d=r[s],c=d.length,l=0;l<c;++l)if(u=d[l]){for(var f,h=e.call(u,u.__data__,l,d),_=ja(u,n),m=0,p=h.length;m<p;++m)(f=h[m])&&Ta(f,t,n,m,h,_);i.push(h),o.push(u)}return new ti(i,o,t,n)},filter:function(e){"function"!=typeof e&&(e=De(e));for(var t=this._groups,n=t.length,r=new Array(n),a=0;a<n;++a)for(var i,o=t[a],s=o.length,u=r[a]=[],d=0;d<s;++d)(i=o[d])&&e.call(i,i.__data__,d,o)&&u.push(i);return new ti(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,n=e._groups,r=t.length,a=n.length,i=Math.min(r,a),o=new Array(r),s=0;s<i;++s)for(var u,d=t[s],c=n[s],l=d.length,f=o[s]=new Array(l),h=0;h<l;++h)(u=d[h]||c[h])&&(f[h]=u);for(;s<r;++s)o[s]=t[s];return new ti(o,this._parents,this._name,this._id)},selection:function(){return new Za(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,n=ri(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,s=r[i],u=s.length,d=0;d<u;++d)if(o=s[d]){var c=ja(o,t);Ta(o,e,n,d,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new ti(r,this._parents,e,n)},call:ai.call,nodes:ai.nodes,node:ai.node,size:ai.size,empty:ai.empty,each:ai.each,on:function(e,t){var n=this._id;return arguments.length<2?ja(this.node(),n).on.on(e):this.each(Xa(n,e,t))},attr:function(e,t){var n=ge(e),r="transform"===n?Or:Oa;return this.attrTween(e,"function"==typeof t?(n.local?Ia:Ra)(n,r,Ca(this,"attr."+e,t)):null==t?(n.local?Wa:Na)(n):(n.local?Fa:za)(n,r,t))},attrTween:function(e,t){var n="attr."+e;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;var r=ge(e);return this.tween(n,(r.local?qa:Ua)(r,t))},style:function(e,t,n){var r="transform"==(e+="")?Cr:Oa;return null==t?this.styleTween(e,function(e,t){var n,r,a;return function(){var i=qe(this,e),o=(this.style.removeProperty(e),qe(this,e));return i===o?null:i===n&&o===r?a:a=t(n=i,r=o)}}(e,r)).on("end.style."+e,Ka(e)):"function"==typeof t?this.styleTween(e,function(e,t,n){var r,a,i;return function(){var o=qe(this,e),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(e),u=s=qe(this,e)),o===u?null:o===r&&u===a?i:(a=u,i=t(r=o,s))}}(e,r,Ca(this,"style."+e,t))).each(function(e,t){var n,r,a,i,o="style."+t,s="end."+o;return function(){var u=Ha(this,e),d=u.on,c=null==u.value[o]?i||(i=Ka(t)):void 0;d===n&&a===c||(r=(n=d).copy()).on(s,a=c),u.on=r}}(this._id,e)):this.styleTween(e,function(e,t,n){var r,a,i=n+"";return function(){var o=qe(this,e);return o===i?null:o===r?a:a=t(r=o,n)}}(e,r,t),n).on("end.style."+e,null)},styleTween:function(e,t,n){var r="style."+(e+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if("function"!=typeof t)throw new Error;return this.tween(r,Qa(e,t,null==n?"":n))},text:function(e){return this.tween("text","function"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?"":t}}(Ca(this,"text",e)):function(e){return function(){this.textContent=e}}(null==e?"":e+""))},remove:function(){return this.on("end.remove",(e=this._id,function(){var t=this.parentNode;for(var n in this.__transition)if(+n!==e)return;t&&t.removeChild(this)}));var e},tween:function(e,t){var n=this._id;if(e+="",arguments.length<2){for(var r,a=ja(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===e)return r.value;return null}return this.each((null==t?Ea:Pa)(n,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Ba:Ja)(t,e)):ja(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each(("function"==typeof e?Ga:Va)(t,e)):ja(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each($a(t,e)):ja(this.node(),t).ease},end:function(){var e,t,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var s={value:o},u={value:function(){0==--a&&i()}};n.each((function(){var n=Ha(this,r),a=n.on;a!==e&&((t=(e=a).copy())._.cancel.push(s),t._.interrupt.push(s),t._.end.push(u)),n.on=t}))}))}};var fi=function e(t){function n(e){return Math.pow(e,t)}return t=+t,n.exponent=e,n}(3),hi=function e(t){function n(e){return 1-Math.pow(1-e,t)}return t=+t,n.exponent=e,n}(3),_i=function e(t){function n(e){return((e*=2)<=1?Math.pow(e,t):2-Math.pow(2-e,t))/2}return t=+t,n.exponent=e,n}(3),mi=Math.PI,pi=mi/2;function yi(e){return 1-Math.cos(e*pi)}function gi(e){return Math.sin(e*pi)}function Mi(e){return(1-Math.cos(mi*e))/2}function vi(e){return Math.pow(2,10*e-10)}function bi(e){return 1-Math.pow(2,-10*e)}function Li(e){return((e*=2)<=1?Math.pow(2,10*e-10):2-Math.pow(2,10-10*e))/2}function Yi(e){return 1-Math.sqrt(1-e*e)}function ki(e){return Math.sqrt(1- --e*e)}function wi(e){return((e*=2)<=1?1-Math.sqrt(1-e*e):Math.sqrt(1-(e-=2)*e)+1)/2}var Di=4/11,xi=6/11,Ti=8/11,Si=.75,Hi=9/11,ji=10/11,Ai=.9375,Ei=21/22,Pi=63/64,Ci=1/Di/Di;function Oi(e){return 1-Ni(1-e)}function Ni(e){return(e=+e)<Di?Ci*e*e:e<Ti?Ci*(e-=xi)*e+Si:e<ji?Ci*(e-=Hi)*e+Ai:Ci*(e-=Ei)*e+Pi}function Wi(e){return((e*=2)<=1?1-Ni(1-e):Ni(e-1)+1)/2}var zi=function e(t){function n(e){return e*e*((t+1)*e-t)}return t=+t,n.overshoot=e,n}(1.70158),Fi=function e(t){function n(e){return--e*e*((t+1)*e+t)+1}return t=+t,n.overshoot=e,n}(1.70158),Ri=function e(t){function n(e){return((e*=2)<1?e*e*((t+1)*e-t):(e-=2)*e*((t+1)*e+t)+2)/2}return t=+t,n.overshoot=e,n}(1.70158),Ii=2*Math.PI,qi=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Ii);function a(e){return t*Math.pow(2,10*--e)*Math.sin((r-e)/n)}return a.amplitude=function(t){return e(t,n*Ii)},a.period=function(n){return e(t,n)},a}(1,.3),Ui=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Ii);function a(e){return 1-t*Math.pow(2,-10*(e=+e))*Math.sin((e+r)/n)}return a.amplitude=function(t){return e(t,n*Ii)},a.period=function(n){return e(t,n)},a}(1,.3),Bi=function e(t,n){var r=Math.asin(1/(t=Math.max(1,t)))*(n/=Ii);function a(e){return((e=2*e-1)<0?t*Math.pow(2,10*e)*Math.sin((r-e)/n):2-t*Math.pow(2,-10*e)*Math.sin((r+e)/n))/2}return a.amplitude=function(t){return e(t,n*Ii)},a.period=function(n){return e(t,n)},a}(1,.3),Ji={time:null,delay:0,duration:250,ease:li};function Gi(e,t){for(var n;!(n=e.__transition)||!(n=n[t]);)if(!(e=e.parentNode))return Ji.time=da(),Ji;return n}xt.prototype.interrupt=function(e){return this.each((function(){Aa(this,e)}))},xt.prototype.transition=function(e){var t,n;e instanceof ti?(t=e._id,e=e._name):(t=ri(),(n=Ji).time=da(),e=null==e?null:e+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,s=r[i],u=s.length,d=0;d<u;++d)(o=s[d])&&Ta(o,e,t,d,s,n||Gi(o,t));return new ti(r,this._parents,e,t)};var Vi=[null],$i=function(e,t){var n,r,a=e.__transition;if(a)for(r in t=null==t?null:t+"",a)if((n=a[r]).state>La&&n.name===t)return new ti([[e]],Vi,t,+r);return null},Xi=function(e){return function(){return e}},Zi=function(e,t,n){this.target=e,this.type=t,this.selection=n};function Ki(){_t.stopImmediatePropagation()}var Qi=function(){_t.preventDefault(),_t.stopImmediatePropagation()},eo={name:"drag"},to={name:"space"},no={name:"handle"},ro={name:"center"};function ao(e){return[+e[0],+e[1]]}function io(e){return[ao(e[0]),ao(e[1])]}var oo={name:"x",handles:["w","e"].map(mo),input:function(e,t){return null==e?null:[[+e[0],t[0][1]],[+e[1],t[1][1]]]},output:function(e){return e&&[e[0][0],e[1][0]]}},so={name:"y",handles:["n","s"].map(mo),input:function(e,t){return null==e?null:[[t[0][0],+e[0]],[t[1][0],+e[1]]]},output:function(e){return e&&[e[0][1],e[1][1]]}},uo={name:"xy",handles:["n","w","e","s","nw","ne","sw","se"].map(mo),input:function(e){return null==e?null:io(e)},output:function(e){return e}},co={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},lo={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},fo={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},ho={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},_o={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function mo(e){return{type:e}}function po(){return!_t.ctrlKey&&!_t.button}function yo(){var e=this.ownerSVGElement||this;return e.hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]}function go(){return navigator.maxTouchPoints||"ontouchstart"in this}function Mo(e){for(;!e.__brush;)if(!(e=e.parentNode))return;return e.__brush}function vo(e){var t=e.__brush;return t?t.dim.output(t.selection):null}function bo(){return ko(oo)}function Lo(){return ko(so)}var Yo=function(){return ko(uo)};function ko(e){var t,n=yo,r=po,a=go,i=!0,o=me(u,"start","brush","end"),s=6;function u(t){var n=t.property("__brush",m).selectAll(".overlay").data([mo("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",co.overlay).merge(n).each((function(){var e=Mo(this).extent;Tt(this).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1])})),t.selectAll(".selection").data([mo("selection")]).enter().append("rect").attr("class","selection").attr("cursor",co.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=t.selectAll(".handle").data(e.handles,(function(e){return e.type}));r.exit().remove(),r.enter().append("rect").attr("class",(function(e){return"handle handle--"+e.type})).attr("cursor",(function(e){return co[e.type]})),t.each(d).attr("fill","none").attr("pointer-events","all").on("mousedown.brush",f).filter(a).on("touchstart.brush",f).on("touchmove.brush",h).on("touchend.brush touchcancel.brush",_).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function d(){var e=Tt(this),t=Mo(this).selection;t?(e.selectAll(".selection").style("display",null).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1]),e.selectAll(".handle").style("display",null).attr("x",(function(e){return"e"===e.type[e.type.length-1]?t[1][0]-s/2:t[0][0]-s/2})).attr("y",(function(e){return"s"===e.type[0]?t[1][1]-s/2:t[0][1]-s/2})).attr("width",(function(e){return"n"===e.type||"s"===e.type?t[1][0]-t[0][0]+s:s})).attr("height",(function(e){return"e"===e.type||"w"===e.type?t[1][1]-t[0][1]+s:s}))):e.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(e,t,n){return!n&&e.__brush.emitter||new l(e,t)}function l(e,t){this.that=e,this.args=t,this.state=e.__brush,this.active=0}function f(){if((!t||_t.touches)&&r.apply(this,arguments)){var n,a,o,s,u,l,f,h,_,m,p,y,g=this,M=_t.target.__data__.type,v="selection"===(i&&_t.metaKey?M="overlay":M)?eo:i&&_t.altKey?ro:no,b=e===so?null:ho[M],L=e===oo?null:_o[M],Y=Mo(g),k=Y.extent,w=Y.selection,D=k[0][0],x=k[0][1],T=k[1][0],S=k[1][1],H=0,j=0,A=b&&L&&i&&_t.shiftKey,E=_t.touches?(y=_t.changedTouches[0].identifier,function(e){return Nt(e,_t.touches,y)}):Ct,P=E(g),C=P,O=c(g,arguments,!0).beforestart();"overlay"===M?(w&&(_=!0),Y.selection=w=[[n=e===so?D:P[0],o=e===oo?x:P[1]],[u=e===so?T:n,f=e===oo?S:o]]):(n=w[0][0],o=w[0][1],u=w[1][0],f=w[1][1]),a=n,s=o,l=u,h=f;var N=Tt(g).attr("pointer-events","none"),W=N.selectAll(".overlay").attr("cursor",co[M]);if(_t.touches)O.moved=F,O.ended=I;else{var z=Tt(_t.view).on("mousemove.brush",F,!0).on("mouseup.brush",I,!0);i&&z.on("keydown.brush",(function(){switch(_t.keyCode){case 16:A=b&&L;break;case 18:v===no&&(b&&(u=l-H*b,n=a+H*b),L&&(f=h-j*L,o=s+j*L),v=ro,R());break;case 32:v!==no&&v!==ro||(b<0?u=l-H:b>0&&(n=a-H),L<0?f=h-j:L>0&&(o=s-j),v=to,W.attr("cursor",co.selection),R());break;default:return}Qi()}),!0).on("keyup.brush",(function(){switch(_t.keyCode){case 16:A&&(m=p=A=!1,R());break;case 18:v===ro&&(b<0?u=l:b>0&&(n=a),L<0?f=h:L>0&&(o=s),v=no,R());break;case 32:v===to&&(_t.altKey?(b&&(u=l-H*b,n=a+H*b),L&&(f=h-j*L,o=s+j*L),v=ro):(b<0?u=l:b>0&&(n=a),L<0?f=h:L>0&&(o=s),v=no),W.attr("cursor",co[M]),R());break;default:return}Qi()}),!0),Rt(_t.view)}Ki(),Aa(g),d.call(g),O.start()}function F(){var e=E(g);!A||m||p||(Math.abs(e[0]-C[0])>Math.abs(e[1]-C[1])?p=!0:m=!0),C=e,_=!0,Qi(),R()}function R(){var e;switch(H=C[0]-P[0],j=C[1]-P[1],v){case to:case eo:b&&(H=Math.max(D-n,Math.min(T-u,H)),a=n+H,l=u+H),L&&(j=Math.max(x-o,Math.min(S-f,j)),s=o+j,h=f+j);break;case no:b<0?(H=Math.max(D-n,Math.min(T-n,H)),a=n+H,l=u):b>0&&(H=Math.max(D-u,Math.min(T-u,H)),a=n,l=u+H),L<0?(j=Math.max(x-o,Math.min(S-o,j)),s=o+j,h=f):L>0&&(j=Math.max(x-f,Math.min(S-f,j)),s=o,h=f+j);break;case ro:b&&(a=Math.max(D,Math.min(T,n-H*b)),l=Math.max(D,Math.min(T,u+H*b))),L&&(s=Math.max(x,Math.min(S,o-j*L)),h=Math.max(x,Math.min(S,f+j*L)))}l<a&&(b*=-1,e=n,n=u,u=e,e=a,a=l,l=e,M in lo&&W.attr("cursor",co[M=lo[M]])),h<s&&(L*=-1,e=o,o=f,f=e,e=s,s=h,h=e,M in fo&&W.attr("cursor",co[M=fo[M]])),Y.selection&&(w=Y.selection),m&&(a=w[0][0],l=w[1][0]),p&&(s=w[0][1],h=w[1][1]),w[0][0]===a&&w[0][1]===s&&w[1][0]===l&&w[1][1]===h||(Y.selection=[[a,s],[l,h]],d.call(g),O.brush())}function I(){if(Ki(),_t.touches){if(_t.touches.length)return;t&&clearTimeout(t),t=setTimeout((function(){t=null}),500)}else It(_t.view,_),z.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);N.attr("pointer-events","all"),W.attr("cursor",co.overlay),Y.selection&&(w=Y.selection),function(e){return e[0][0]===e[1][0]||e[0][1]===e[1][1]}(w)&&(Y.selection=null,d.call(g)),O.end()}}function h(){c(this,arguments).moved()}function _(){c(this,arguments).ended()}function m(){var t=this.__brush||{selection:null};return t.extent=io(n.apply(this,arguments)),t.dim=e,t}return u.move=function(t,n){t.selection?t.on("start.brush",(function(){c(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){c(this,arguments).end()})).tween("brush",(function(){var t=this,r=t.__brush,a=c(t,arguments),i=r.selection,o=e.input("function"==typeof n?n.apply(this,arguments):n,r.extent),s=xr(i,o);function u(e){r.selection=1===e&&null===o?null:s(e),d.call(t),a.brush()}return null!==i&&null!==o?u:u(1)})):t.each((function(){var t=this,r=arguments,a=t.__brush,i=e.input("function"==typeof n?n.apply(t,r):n,a.extent),o=c(t,r).beforestart();Aa(t),a.selection=null===i?null:i,d.call(t),o.start().brush().end()}))},u.clear=function(e){u.move(e,null)},l.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting?(this.starting=!1,this.emit("start")):this.emit("brush"),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){vt(new Zi(u,t,e.output(this.state.selection)),o.apply,o,[t,this.that,this.args])}},u.extent=function(e){return arguments.length?(n="function"==typeof e?e:Xi(io(e)),u):n},u.filter=function(e){return arguments.length?(r="function"==typeof e?e:Xi(!!e),u):r},u.handleSize=function(e){return arguments.length?(s=+e,u):s},u.keyModifiers=function(e){return arguments.length?(i=!!e,u):i},u.on=function(){var e=o.on.apply(o,arguments);return e===o?u:e},u}var wo=Math.cos,Do=Math.sin,xo=Math.PI,To=xo/2,So=2*xo,Ho=Math.max;function jo(e){return function(t,n){return e(t.source.value+t.target.value,n.source.value+n.target.value)}}var Ao=function(){var e=0,t=null,n=null,r=null;function a(a){var i,o,s,u,d,c,l=a.length,f=[],h=L(l),_=[],m=[],p=m.groups=new Array(l),y=new Array(l*l);for(i=0,d=-1;++d<l;){for(o=0,c=-1;++c<l;)o+=a[d][c];f.push(o),_.push(L(l)),i+=o}for(t&&h.sort((function(e,n){return t(f[e],f[n])})),n&&_.forEach((function(e,t){e.sort((function(e,r){return n(a[t][e],a[t][r])}))})),u=(i=Ho(0,So-e*l)/i)?e:So/l,o=0,d=-1;++d<l;){for(s=o,c=-1;++c<l;){var g=h[d],M=_[g][c],v=a[g][M],b=o,Y=o+=v*i;y[M*l+g]={index:g,subindex:M,startAngle:b,endAngle:Y,value:v}}p[g]={index:g,startAngle:s,endAngle:o,value:f[g]},o+=u}for(d=-1;++d<l;)for(c=d-1;++c<l;){var k=y[c*l+d],w=y[d*l+c];(k.value||w.value)&&m.push(k.value<w.value?{source:w,target:k}:{source:k,target:w})}return r?m.sort(r):m}return a.padAngle=function(t){return arguments.length?(e=Ho(0,t),a):e},a.sortGroups=function(e){return arguments.length?(t=e,a):t},a.sortSubgroups=function(e){return arguments.length?(n=e,a):n},a.sortChords=function(e){return arguments.length?(null==e?r=null:(r=jo(e))._=e,a):r&&r._},a},Eo=Array.prototype.slice,Po=function(e){return function(){return e}},Co=Math.PI,Oo=2*Co,No=Oo-1e-6;function Wo(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function zo(){return new Wo}Wo.prototype=zo.prototype={constructor:Wo,moveTo:function(e,t){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(e,t){this._+="L"+(this._x1=+e)+","+(this._y1=+t)},quadraticCurveTo:function(e,t,n,r){this._+="Q"+ +e+","+ +t+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(e,t,n,r,a,i){this._+="C"+ +e+","+ +t+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(e,t,n,r,a){e=+e,t=+t,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,s=n-e,u=r-t,d=i-e,c=o-t,l=d*d+c*c;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=e)+","+(this._y1=t);else if(l>1e-6)if(Math.abs(c*s-u*d)>1e-6&&a){var f=n-i,h=r-o,_=s*s+u*u,m=f*f+h*h,p=Math.sqrt(_),y=Math.sqrt(l),g=a*Math.tan((Co-Math.acos((_+l-m)/(2*p*y)))/2),M=g/y,v=g/p;Math.abs(M-1)>1e-6&&(this._+="L"+(e+M*d)+","+(t+M*c)),this._+="A"+a+","+a+",0,0,"+ +(c*f>d*h)+","+(this._x1=e+v*s)+","+(this._y1=t+v*u)}else this._+="L"+(this._x1=e)+","+(this._y1=t);else;},arc:function(e,t,n,r,a,i){e=+e,t=+t,i=!!i;var o=(n=+n)*Math.cos(r),s=n*Math.sin(r),u=e+o,d=t+s,c=1^i,l=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+d:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-d)>1e-6)&&(this._+="L"+u+","+d),n&&(l<0&&(l=l%Oo+Oo),l>No?this._+="A"+n+","+n+",0,1,"+c+","+(e-o)+","+(t-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=u)+","+(this._y1=d):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=Co)+","+c+","+(this._x1=e+n*Math.cos(a))+","+(this._y1=t+n*Math.sin(a))))},rect:function(e,t,n,r){this._+="M"+(this._x0=this._x1=+e)+","+(this._y0=this._y1=+t)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var Fo=zo;function Ro(e){return e.source}function Io(e){return e.target}function qo(e){return e.radius}function Uo(e){return e.startAngle}function Bo(e){return e.endAngle}var Jo=function(){var e=Ro,t=Io,n=qo,r=Uo,a=Bo,i=null;function o(){var o,s=Eo.call(arguments),u=e.apply(this,s),d=t.apply(this,s),c=+n.apply(this,(s[0]=u,s)),l=r.apply(this,s)-To,f=a.apply(this,s)-To,h=c*wo(l),_=c*Do(l),m=+n.apply(this,(s[0]=d,s)),p=r.apply(this,s)-To,y=a.apply(this,s)-To;if(i||(i=o=Fo()),i.moveTo(h,_),i.arc(0,0,c,l,f),l===p&&f===y||(i.quadraticCurveTo(0,0,m*wo(p),m*Do(p)),i.arc(0,0,m,p,y)),i.quadraticCurveTo(0,0,h,_),i.closePath(),o)return i=null,o+""||null}return o.radius=function(e){return arguments.length?(n="function"==typeof e?e:Po(+e),o):n},o.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:Po(+e),o):r},o.endAngle=function(e){return arguments.length?(a="function"==typeof e?e:Po(+e),o):a},o.source=function(t){return arguments.length?(e=t,o):e},o.target=function(e){return arguments.length?(t=e,o):t},o.context=function(e){return arguments.length?(i=null==e?null:e,o):i},o};function Go(){}function Vo(e,t){var n=new Go;if(e instanceof Go)e.each((function(e,t){n.set(t,e)}));else if(Array.isArray(e)){var r,a=-1,i=e.length;if(null==t)for(;++a<i;)n.set(a,e[a]);else for(;++a<i;)n.set(t(r=e[a],a,e),r)}else if(e)for(var o in e)n.set(o,e[o]);return n}Go.prototype=Vo.prototype={constructor:Go,has:function(e){return"$"+e in this},get:function(e){return this["$"+e]},set:function(e,t){return this["$"+e]=t,this},remove:function(e){var t="$"+e;return t in this&&delete this[t]},clear:function(){for(var e in this)"$"===e[0]&&delete this[e]},keys:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(t.slice(1));return e},values:function(){var e=[];for(var t in this)"$"===t[0]&&e.push(this[t]);return e},entries:function(){var e=[];for(var t in this)"$"===t[0]&&e.push({key:t.slice(1),value:this[t]});return e},size:function(){var e=0;for(var t in this)"$"===t[0]&&++e;return e},empty:function(){for(var e in this)if("$"===e[0])return!1;return!0},each:function(e){for(var t in this)"$"===t[0]&&e(this[t],t.slice(1),this)}};var $o=Vo,Xo=function(){var e,t,n,r=[],a=[];function i(n,a,o,s){if(a>=r.length)return null!=e&&n.sort(e),null!=t?t(n):n;for(var u,d,c,l=-1,f=n.length,h=r[a++],_=$o(),m=o();++l<f;)(c=_.get(u=h(d=n[l])+""))?c.push(d):_.set(u,[d]);return _.each((function(e,t){s(m,t,i(e,a,o,s))})),m}return n={object:function(e){return i(e,0,Zo,Ko)},map:function(e){return i(e,0,Qo,es)},entries:function(e){return function e(n,i){if(++i>r.length)return n;var o,s=a[i-1];return null!=t&&i>=r.length?o=n.entries():(o=[],n.each((function(t,n){o.push({key:n,values:e(t,i)})}))),null!=s?o.sort((function(e,t){return s(e.key,t.key)})):o}(i(e,0,Qo,es),0)},key:function(e){return r.push(e),n},sortKeys:function(e){return a[r.length-1]=e,n},sortValues:function(t){return e=t,n},rollup:function(e){return t=e,n}}};function Zo(){return{}}function Ko(e,t,n){e[t]=n}function Qo(){return $o()}function es(e,t,n){e.set(t,n)}function ts(){}var ns=$o.prototype;function rs(e,t){var n=new ts;if(e instanceof ts)e.each((function(e){n.add(e)}));else if(e){var r=-1,a=e.length;if(null==t)for(;++r<a;)n.add(e[r]);else for(;++r<a;)n.add(t(e[r],r,e))}return n}ts.prototype=rs.prototype={constructor:ts,has:ns.has,add:function(e){return this["$"+(e+="")]=e,this},remove:ns.remove,clear:ns.clear,values:ns.keys,size:ns.size,empty:ns.empty,each:ns.each};var as=rs,is=function(e){var t=[];for(var n in e)t.push(n);return t},os=function(e){var t=[];for(var n in e)t.push(e[n]);return t},ss=function(e){var t=[];for(var n in e)t.push({key:n,value:e[n]});return t},us=Array.prototype.slice,ds=function(e,t){return e-t},cs=function(e){for(var t=0,n=e.length,r=e[n-1][1]*e[0][0]-e[n-1][0]*e[0][1];++t<n;)r+=e[t-1][1]*e[t][0]-e[t-1][0]*e[t][1];return r},ls=function(e){return function(){return e}},fs=function(e,t){for(var n,r=-1,a=t.length;++r<a;)if(n=hs(e,t[r]))return n;return 0};function hs(e,t){for(var n=t[0],r=t[1],a=-1,i=0,o=e.length,s=o-1;i<o;s=i++){var u=e[i],d=u[0],c=u[1],l=e[s],f=l[0],h=l[1];if(_s(u,l,t))return 0;c>r!=h>r&&n<(f-d)*(r-c)/(h-c)+d&&(a=-a)}return a}function _s(e,t,n){var r,a,i,o;return function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])==(n[0]-e[0])*(t[1]-e[1])}(e,t,n)&&(a=e[r=+(e[0]===t[0])],i=n[r],o=t[r],a<=i&&i<=o||o<=i&&i<=a)}var ms=function(){},ps=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]],ys=function(){var e=1,t=1,n=S,r=s;function a(e){var t=n(e);if(Array.isArray(t))t=t.slice().sort(ds);else{var r=p(e),a=r[0],o=r[1];t=T(a,o,t),t=L(Math.floor(a/t)*t,Math.floor(o/t)*t,t)}return t.map((function(t){return i(e,t)}))}function i(n,a){var i=[],s=[];return function(n,r,a){var i,s,u,d,c,l,f=new Array,h=new Array;i=s=-1,d=n[0]>=r,ps[d<<1].forEach(_);for(;++i<e-1;)u=d,d=n[i+1]>=r,ps[u|d<<1].forEach(_);ps[d<<0].forEach(_);for(;++s<t-1;){for(i=-1,d=n[s*e+e]>=r,c=n[s*e]>=r,ps[d<<1|c<<2].forEach(_);++i<e-1;)u=d,d=n[s*e+e+i+1]>=r,l=c,c=n[s*e+i+1]>=r,ps[u|d<<1|c<<2|l<<3].forEach(_);ps[d|c<<3].forEach(_)}i=-1,c=n[s*e]>=r,ps[c<<2].forEach(_);for(;++i<e-1;)l=c,c=n[s*e+i+1]>=r,ps[c<<2|l<<3].forEach(_);function _(e){var t,n,r=[e[0][0]+i,e[0][1]+s],u=[e[1][0]+i,e[1][1]+s],d=o(r),c=o(u);(t=h[d])?(n=f[c])?(delete h[t.end],delete f[n.start],t===n?(t.ring.push(u),a(t.ring)):f[t.start]=h[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete h[t.end],t.ring.push(u),h[t.end=c]=t):(t=f[c])?(n=h[d])?(delete f[t.start],delete h[n.end],t===n?(t.ring.push(u),a(t.ring)):f[n.start]=h[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete f[t.start],t.ring.unshift(r),f[t.start=d]=t):f[d]=h[c]={start:d,end:c,ring:[r,u]}}ps[c<<3].forEach(_)}(n,a,(function(e){r(e,n,a),cs(e)>0?i.push([e]):s.push(e)})),s.forEach((function(e){for(var t,n=0,r=i.length;n<r;++n)if(-1!==fs((t=i[n])[0],e))return void t.push(e)})),{type:"MultiPolygon",value:a,coordinates:i}}function o(t){return 2*t[0]+t[1]*(e+1)*4}function s(n,r,a){n.forEach((function(n){var i,o=n[0],s=n[1],u=0|o,d=0|s,c=r[d*e+u];o>0&&o<e&&u===o&&(i=r[d*e+u-1],n[0]=o+(a-i)/(c-i)-.5),s>0&&s<t&&d===s&&(i=r[(d-1)*e+u],n[1]=s+(a-i)/(c-i)-.5)}))}return a.contour=i,a.size=function(n){if(!arguments.length)return[e,t];var r=Math.ceil(n[0]),i=Math.ceil(n[1]);if(!(r>0&&i>0))throw new Error("invalid size");return e=r,t=i,a},a.thresholds=function(e){return arguments.length?(n="function"==typeof e?e:Array.isArray(e)?ls(us.call(e)):ls(e),a):n},a.smooth=function(e){return arguments.length?(r=e?s:ms,a):r===s},a};function gs(e,t,n){for(var r=e.width,a=e.height,i=1+(n<<1),o=0;o<a;++o)for(var s=0,u=0;s<r+n;++s)s<r&&(u+=e.data[s+o*r]),s>=n&&(s>=i&&(u-=e.data[s-i+o*r]),t.data[s-n+o*r]=u/Math.min(s+1,r-1+i-s,i))}function Ms(e,t,n){for(var r=e.width,a=e.height,i=1+(n<<1),o=0;o<r;++o)for(var s=0,u=0;s<a+n;++s)s<a&&(u+=e.data[o+s*r]),s>=n&&(s>=i&&(u-=e.data[o+(s-i)*r]),t.data[o+(s-n)*r]=u/Math.min(s+1,a-1+i-s,i))}function vs(e){return e[0]}function bs(e){return e[1]}function Ls(){return 1}var Ys=function(){var e=vs,t=bs,n=Ls,r=960,a=500,i=20,o=2,s=3*i,u=r+2*s>>o,d=a+2*s>>o,c=ls(20);function l(r){var a=new Float32Array(u*d),l=new Float32Array(u*d);r.forEach((function(r,i,c){var l=+e(r,i,c)+s>>o,f=+t(r,i,c)+s>>o,h=+n(r,i,c);l>=0&&l<u&&f>=0&&f<d&&(a[l+f*u]+=h)})),gs({width:u,height:d,data:a},{width:u,height:d,data:l},i>>o),Ms({width:u,height:d,data:l},{width:u,height:d,data:a},i>>o),gs({width:u,height:d,data:a},{width:u,height:d,data:l},i>>o),Ms({width:u,height:d,data:l},{width:u,height:d,data:a},i>>o),gs({width:u,height:d,data:a},{width:u,height:d,data:l},i>>o),Ms({width:u,height:d,data:l},{width:u,height:d,data:a},i>>o);var h=c(a);if(!Array.isArray(h)){var _=P(a);h=T(0,_,h),(h=L(0,Math.floor(_/h)*h,h)).shift()}return ys().thresholds(h).size([u,d])(a).map(f)}function f(e){return e.value*=Math.pow(2,-2*o),e.coordinates.forEach(h),e}function h(e){e.forEach(_)}function _(e){e.forEach(m)}function m(e){e[0]=e[0]*Math.pow(2,o)-s,e[1]=e[1]*Math.pow(2,o)-s}function p(){return u=r+2*(s=3*i)>>o,d=a+2*s>>o,l}return l.x=function(t){return arguments.length?(e="function"==typeof t?t:ls(+t),l):e},l.y=function(e){return arguments.length?(t="function"==typeof e?e:ls(+e),l):t},l.weight=function(e){return arguments.length?(n="function"==typeof e?e:ls(+e),l):n},l.size=function(e){if(!arguments.length)return[r,a];var t=Math.ceil(e[0]),n=Math.ceil(e[1]);if(!(t>=0||t>=0))throw new Error("invalid size");return r=t,a=n,p()},l.cellSize=function(e){if(!arguments.length)return 1<<o;if(!((e=+e)>=1))throw new Error("invalid cell size");return o=Math.floor(Math.log(e)/Math.LN2),p()},l.thresholds=function(e){return arguments.length?(c="function"==typeof e?e:Array.isArray(e)?ls(us.call(e)):ls(e),l):c},l.bandwidth=function(e){if(!arguments.length)return Math.sqrt(i*(i+1));if(!((e=+e)>=0))throw new Error("invalid bandwidth");return i=Math.round((Math.sqrt(4*e*e+1)-1)/2),p()},l},ks={},ws={},Ds=34,xs=10,Ts=13;function Ss(e){return new Function("d","return {"+e.map((function(e,t){return JSON.stringify(e)+": d["+t+"]"})).join(",")+"}")}function Hs(e){var t=Object.create(null),n=[];return e.forEach((function(e){for(var r in e)r in t||n.push(t[r]=r)})),n}function js(e,t){var n=e+"",r=n.length;return r<t?new Array(t-r+1).join(0)+n:n}function As(e){var t,n=e.getUTCHours(),r=e.getUTCMinutes(),a=e.getUTCSeconds(),i=e.getUTCMilliseconds();return isNaN(e)?"Invalid Date":((t=e.getUTCFullYear())<0?"-"+js(-t,6):t>9999?"+"+js(t,6):js(t,4))+"-"+js(e.getUTCMonth()+1,2)+"-"+js(e.getUTCDate(),2)+(i?"T"+js(n,2)+":"+js(r,2)+":"+js(a,2)+"."+js(i,3)+"Z":a?"T"+js(n,2)+":"+js(r,2)+":"+js(a,2)+"Z":r||n?"T"+js(n,2)+":"+js(r,2)+"Z":"")}var Es=function(e){var t=new RegExp('["'+e+"\n\r]"),n=e.charCodeAt(0);function r(e,t){var r,a=[],i=e.length,o=0,s=0,u=i<=0,d=!1;function c(){if(u)return ws;if(d)return d=!1,ks;var t,r,a=o;if(e.charCodeAt(a)===Ds){for(;o++<i&&e.charCodeAt(o)!==Ds||e.charCodeAt(++o)===Ds;);return(t=o)>=i?u=!0:(r=e.charCodeAt(o++))===xs?d=!0:r===Ts&&(d=!0,e.charCodeAt(o)===xs&&++o),e.slice(a+1,t-1).replace(/""/g,'"')}for(;o<i;){if((r=e.charCodeAt(t=o++))===xs)d=!0;else if(r===Ts)d=!0,e.charCodeAt(o)===xs&&++o;else if(r!==n)continue;return e.slice(a,t)}return u=!0,e.slice(a,i)}for(e.charCodeAt(i-1)===xs&&--i,e.charCodeAt(i-1)===Ts&&--i;(r=c())!==ws;){for(var l=[];r!==ks&&r!==ws;)l.push(r),r=c();t&&null==(l=t(l,s++))||a.push(l)}return a}function a(t,n){return t.map((function(t){return n.map((function(e){return o(t[e])})).join(e)}))}function i(t){return t.map(o).join(e)}function o(e){return null==e?"":e instanceof Date?As(e):t.test(e+="")?'"'+e.replace(/"/g,'""')+'"':e}return{parse:function(e,t){var n,a,i=r(e,(function(e,r){if(n)return n(e,r-1);a=e,n=t?function(e,t){var n=Ss(e);return function(r,a){return t(n(r),a,e)}}(e,t):Ss(e)}));return i.columns=a||[],i},parseRows:r,format:function(t,n){return null==n&&(n=Hs(t)),[n.map(o).join(e)].concat(a(t,n)).join("\n")},formatBody:function(e,t){return null==t&&(t=Hs(e)),a(e,t).join("\n")},formatRows:function(e){return e.map(i).join("\n")}}},Ps=Es(","),Cs=Ps.parse,Os=Ps.parseRows,Ns=Ps.format,Ws=Ps.formatBody,zs=Ps.formatRows,Fs=Es("\t"),Rs=Fs.parse,Is=Fs.parseRows,qs=Fs.format,Us=Fs.formatBody,Bs=Fs.formatRows;function Js(e){for(var t in e){var n,r=e[t].trim();if(r)if("true"===r)r=!0;else if("false"===r)r=!1;else if("NaN"===r)r=NaN;else if(isNaN(n=+r)){if(!/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/.test(r))continue;r=new Date(r)}else r=n;else r=null;e[t]=r}return e}function Gs(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.blob()}var Vs=function(e,t){return fetch(e,t).then(Gs)};function $s(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.arrayBuffer()}var Xs=function(e,t){return fetch(e,t).then($s)};function Zs(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.text()}var Ks=function(e,t){return fetch(e,t).then(Zs)};function Qs(e){return function(t,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),Ks(t,n).then((function(t){return e(t,r)}))}}function eu(e,t,n,r){3===arguments.length&&"function"==typeof n&&(r=n,n=void 0);var a=Es(e);return Ks(t,n).then((function(e){return a.parse(e,r)}))}var tu=Qs(Cs),nu=Qs(Rs),ru=function(e,t){return new Promise((function(n,r){var a=new Image;for(var i in t)a[i]=t[i];a.onerror=r,a.onload=function(){n(a)},a.src=e}))};function au(e){if(!e.ok)throw new Error(e.status+" "+e.statusText);return e.json()}var iu=function(e,t){return fetch(e,t).then(au)};function ou(e){return function(t,n){return Ks(t,n).then((function(t){return(new DOMParser).parseFromString(t,e)}))}}var su=ou("application/xml"),uu=ou("text/html"),du=ou("image/svg+xml"),cu=function(e,t){var n;function r(){var r,a,i=n.length,o=0,s=0;for(r=0;r<i;++r)o+=(a=n[r]).x,s+=a.y;for(o=o/i-e,s=s/i-t,r=0;r<i;++r)(a=n[r]).x-=o,a.y-=s}return null==e&&(e=0),null==t&&(t=0),r.initialize=function(e){n=e},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(e){return arguments.length?(t=+e,r):t},r},lu=function(e){return function(){return e}},fu=function(){return 1e-6*(Math.random()-.5)};function hu(e,t,n,r){if(isNaN(t)||isNaN(n))return e;var a,i,o,s,u,d,c,l,f,h=e._root,_={data:r},m=e._x0,p=e._y0,y=e._x1,g=e._y1;if(!h)return e._root=_,e;for(;h.length;)if((d=t>=(i=(m+y)/2))?m=i:y=i,(c=n>=(o=(p+g)/2))?p=o:g=o,a=h,!(h=h[l=c<<1|d]))return a[l]=_,e;if(s=+e._x.call(null,h.data),u=+e._y.call(null,h.data),t===s&&n===u)return _.next=h,a?a[l]=_:e._root=_,e;do{a=a?a[l]=new Array(4):e._root=new Array(4),(d=t>=(i=(m+y)/2))?m=i:y=i,(c=n>=(o=(p+g)/2))?p=o:g=o}while((l=c<<1|d)==(f=(u>=o)<<1|s>=i));return a[f]=h,a[l]=_,e}var _u=function(e,t,n,r,a){this.node=e,this.x0=t,this.y0=n,this.x1=r,this.y1=a};function mu(e){return e[0]}function pu(e){return e[1]}function yu(e,t,n){var r=new gu(null==t?mu:t,null==n?pu:n,NaN,NaN,NaN,NaN);return null==e?r:r.addAll(e)}function gu(e,t,n,r,a,i){this._x=e,this._y=t,this._x0=n,this._y0=r,this._x1=a,this._y1=i,this._root=void 0}function Mu(e){for(var t={data:e.data},n=t;e=e.next;)n=n.next={data:e.data};return t}var vu=yu.prototype=gu.prototype;function bu(e){return e.x+e.vx}function Lu(e){return e.y+e.vy}vu.copy=function(){var e,t,n=new gu(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Mu(r),n;for(e=[{source:r,target:n._root=new Array(4)}];r=e.pop();)for(var a=0;a<4;++a)(t=r.source[a])&&(t.length?e.push({source:t,target:r.target[a]=new Array(4)}):r.target[a]=Mu(t));return n},vu.add=function(e){var t=+this._x.call(null,e),n=+this._y.call(null,e);return hu(this.cover(t,n),t,n,e)},vu.addAll=function(e){var t,n,r,a,i=e.length,o=new Array(i),s=new Array(i),u=1/0,d=1/0,c=-1/0,l=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,t=e[n]))||isNaN(a=+this._y.call(null,t))||(o[n]=r,s[n]=a,r<u&&(u=r),r>c&&(c=r),a<d&&(d=a),a>l&&(l=a));if(u>c||d>l)return this;for(this.cover(u,d).cover(c,l),n=0;n<i;++n)hu(this,o[n],s[n],e[n]);return this},vu.cover=function(e,t){if(isNaN(e=+e)||isNaN(t=+t))return this;var n=this._x0,r=this._y0,a=this._x1,i=this._y1;if(isNaN(n))a=(n=Math.floor(e))+1,i=(r=Math.floor(t))+1;else{for(var o,s,u=a-n,d=this._root;n>e||e>=a||r>t||t>=i;)switch(s=(t<r)<<1|e<n,(o=new Array(4))[s]=d,d=o,u*=2,s){case 0:a=n+u,i=r+u;break;case 1:n=a-u,i=r+u;break;case 2:a=n+u,r=i-u;break;case 3:n=a-u,r=i-u}this._root&&this._root.length&&(this._root=d)}return this._x0=n,this._y0=r,this._x1=a,this._y1=i,this},vu.data=function(){var e=[];return this.visit((function(t){if(!t.length)do{e.push(t.data)}while(t=t.next)})),e},vu.extent=function(e){return arguments.length?this.cover(+e[0][0],+e[0][1]).cover(+e[1][0],+e[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},vu.find=function(e,t,n){var r,a,i,o,s,u,d,c=this._x0,l=this._y0,f=this._x1,h=this._y1,_=[],m=this._root;for(m&&_.push(new _u(m,c,l,f,h)),null==n?n=1/0:(c=e-n,l=t-n,f=e+n,h=t+n,n*=n);u=_.pop();)if(!(!(m=u.node)||(a=u.x0)>f||(i=u.y0)>h||(o=u.x1)<c||(s=u.y1)<l))if(m.length){var p=(a+o)/2,y=(i+s)/2;_.push(new _u(m[3],p,y,o,s),new _u(m[2],a,y,p,s),new _u(m[1],p,i,o,y),new _u(m[0],a,i,p,y)),(d=(t>=y)<<1|e>=p)&&(u=_[_.length-1],_[_.length-1]=_[_.length-1-d],_[_.length-1-d]=u)}else{var g=e-+this._x.call(null,m.data),M=t-+this._y.call(null,m.data),v=g*g+M*M;if(v<n){var b=Math.sqrt(n=v);c=e-b,l=t-b,f=e+b,h=t+b,r=m.data}}return r},vu.remove=function(e){if(isNaN(i=+this._x.call(null,e))||isNaN(o=+this._y.call(null,e)))return this;var t,n,r,a,i,o,s,u,d,c,l,f,h=this._root,_=this._x0,m=this._y0,p=this._x1,y=this._y1;if(!h)return this;if(h.length)for(;;){if((d=i>=(s=(_+p)/2))?_=s:p=s,(c=o>=(u=(m+y)/2))?m=u:y=u,t=h,!(h=h[l=c<<1|d]))return this;if(!h.length)break;(t[l+1&3]||t[l+2&3]||t[l+3&3])&&(n=t,f=l)}for(;h.data!==e;)if(r=h,!(h=h.next))return this;return(a=h.next)&&delete h.next,r?(a?r.next=a:delete r.next,this):t?(a?t[l]=a:delete t[l],(h=t[0]||t[1]||t[2]||t[3])&&h===(t[3]||t[2]||t[1]||t[0])&&!h.length&&(n?n[f]=h:this._root=h),this):(this._root=a,this)},vu.removeAll=function(e){for(var t=0,n=e.length;t<n;++t)this.remove(e[t]);return this},vu.root=function(){return this._root},vu.size=function(){var e=0;return this.visit((function(t){if(!t.length)do{++e}while(t=t.next)})),e},vu.visit=function(e){var t,n,r,a,i,o,s=[],u=this._root;for(u&&s.push(new _u(u,this._x0,this._y0,this._x1,this._y1));t=s.pop();)if(!e(u=t.node,r=t.x0,a=t.y0,i=t.x1,o=t.y1)&&u.length){var d=(r+i)/2,c=(a+o)/2;(n=u[3])&&s.push(new _u(n,d,c,i,o)),(n=u[2])&&s.push(new _u(n,r,c,d,o)),(n=u[1])&&s.push(new _u(n,d,a,i,c)),(n=u[0])&&s.push(new _u(n,r,a,d,c))}return this},vu.visitAfter=function(e){var t,n=[],r=[];for(this._root&&n.push(new _u(this._root,this._x0,this._y0,this._x1,this._y1));t=n.pop();){var a=t.node;if(a.length){var i,o=t.x0,s=t.y0,u=t.x1,d=t.y1,c=(o+u)/2,l=(s+d)/2;(i=a[0])&&n.push(new _u(i,o,s,c,l)),(i=a[1])&&n.push(new _u(i,c,s,u,l)),(i=a[2])&&n.push(new _u(i,o,l,c,d)),(i=a[3])&&n.push(new _u(i,c,l,u,d))}r.push(t)}for(;t=r.pop();)e(t.node,t.x0,t.y0,t.x1,t.y1);return this},vu.x=function(e){return arguments.length?(this._x=e,this):this._x},vu.y=function(e){return arguments.length?(this._y=e,this):this._y};var Yu=function(e){var t,n,r=1,a=1;function i(){for(var e,i,s,u,d,c,l,f=t.length,h=0;h<a;++h)for(i=yu(t,bu,Lu).visitAfter(o),e=0;e<f;++e)s=t[e],c=n[s.index],l=c*c,u=s.x+s.vx,d=s.y+s.vy,i.visit(_);function _(e,t,n,a,i){var o=e.data,f=e.r,h=c+f;if(!o)return t>u+h||a<u-h||n>d+h||i<d-h;if(o.index>s.index){var _=u-o.x-o.vx,m=d-o.y-o.vy,p=_*_+m*m;p<h*h&&(0===_&&(p+=(_=fu())*_),0===m&&(p+=(m=fu())*m),p=(h-(p=Math.sqrt(p)))/p*r,s.vx+=(_*=p)*(h=(f*=f)/(l+f)),s.vy+=(m*=p)*h,o.vx-=_*(h=1-h),o.vy-=m*h)}}}function o(e){if(e.data)return e.r=n[e.data.index];for(var t=e.r=0;t<4;++t)e[t]&&e[t].r>e.r&&(e.r=e[t].r)}function s(){if(t){var r,a,i=t.length;for(n=new Array(i),r=0;r<i;++r)a=t[r],n[a.index]=+e(a,r,t)}}return"function"!=typeof e&&(e=lu(null==e?1:+e)),i.initialize=function(e){t=e,s()},i.iterations=function(e){return arguments.length?(a=+e,i):a},i.strength=function(e){return arguments.length?(r=+e,i):r},i.radius=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),s(),i):e},i};function ku(e){return e.index}function wu(e,t){var n=e.get(t);if(!n)throw new Error("missing: "+t);return n}var Du=function(e){var t,n,r,a,i,o=ku,s=function(e){return 1/Math.min(a[e.source.index],a[e.target.index])},u=lu(30),d=1;function c(r){for(var a=0,o=e.length;a<d;++a)for(var s,u,c,l,f,h,_,m=0;m<o;++m)u=(s=e[m]).source,l=(c=s.target).x+c.vx-u.x-u.vx||fu(),f=c.y+c.vy-u.y-u.vy||fu(),l*=h=((h=Math.sqrt(l*l+f*f))-n[m])/h*r*t[m],f*=h,c.vx-=l*(_=i[m]),c.vy-=f*_,u.vx+=l*(_=1-_),u.vy+=f*_}function l(){if(r){var s,u,d=r.length,c=e.length,l=$o(r,o);for(s=0,a=new Array(d);s<c;++s)(u=e[s]).index=s,"object"!=typeof u.source&&(u.source=wu(l,u.source)),"object"!=typeof u.target&&(u.target=wu(l,u.target)),a[u.source.index]=(a[u.source.index]||0)+1,a[u.target.index]=(a[u.target.index]||0)+1;for(s=0,i=new Array(c);s<c;++s)u=e[s],i[s]=a[u.source.index]/(a[u.source.index]+a[u.target.index]);t=new Array(c),f(),n=new Array(c),h()}}function f(){if(r)for(var n=0,a=e.length;n<a;++n)t[n]=+s(e[n],n,e)}function h(){if(r)for(var t=0,a=e.length;t<a;++t)n[t]=+u(e[t],t,e)}return null==e&&(e=[]),c.initialize=function(e){r=e,l()},c.links=function(t){return arguments.length?(e=t,l(),c):e},c.id=function(e){return arguments.length?(o=e,c):o},c.iterations=function(e){return arguments.length?(d=+e,c):d},c.strength=function(e){return arguments.length?(s="function"==typeof e?e:lu(+e),f(),c):s},c.distance=function(e){return arguments.length?(u="function"==typeof e?e:lu(+e),h(),c):u},c};function xu(e){return e.x}function Tu(e){return e.y}var Su=10,Hu=Math.PI*(3-Math.sqrt(5)),ju=function(e){var t,n=1,r=.001,a=1-Math.pow(r,1/300),i=0,o=.6,s=$o(),u=fa(c),d=me("tick","end");function c(){l(),d.call("tick",t),n<r&&(u.stop(),d.call("end",t))}function l(r){var u,d,c=e.length;void 0===r&&(r=1);for(var l=0;l<r;++l)for(n+=(i-n)*a,s.each((function(e){e(n)})),u=0;u<c;++u)null==(d=e[u]).fx?d.x+=d.vx*=o:(d.x=d.fx,d.vx=0),null==d.fy?d.y+=d.vy*=o:(d.y=d.fy,d.vy=0);return t}function f(){for(var t,n=0,r=e.length;n<r;++n){if((t=e[n]).index=n,null!=t.fx&&(t.x=t.fx),null!=t.fy&&(t.y=t.fy),isNaN(t.x)||isNaN(t.y)){var a=Su*Math.sqrt(n),i=n*Hu;t.x=a*Math.cos(i),t.y=a*Math.sin(i)}(isNaN(t.vx)||isNaN(t.vy))&&(t.vx=t.vy=0)}}function h(t){return t.initialize&&t.initialize(e),t}return null==e&&(e=[]),f(),t={tick:l,restart:function(){return u.restart(c),t},stop:function(){return u.stop(),t},nodes:function(n){return arguments.length?(e=n,f(),s.each(h),t):e},alpha:function(e){return arguments.length?(n=+e,t):n},alphaMin:function(e){return arguments.length?(r=+e,t):r},alphaDecay:function(e){return arguments.length?(a=+e,t):+a},alphaTarget:function(e){return arguments.length?(i=+e,t):i},velocityDecay:function(e){return arguments.length?(o=1-e,t):1-o},force:function(e,n){return arguments.length>1?(null==n?s.remove(e):s.set(e,h(n)),t):s.get(e)},find:function(t,n,r){var a,i,o,s,u,d=0,c=e.length;for(null==r?r=1/0:r*=r,d=0;d<c;++d)(o=(a=t-(s=e[d]).x)*a+(i=n-s.y)*i)<r&&(u=s,r=o);return u},on:function(e,n){return arguments.length>1?(d.on(e,n),t):d.on(e)}}},Au=function(){var e,t,n,r,a=lu(-30),i=1,o=1/0,s=.81;function u(r){var a,i=e.length,o=yu(e,xu,Tu).visitAfter(c);for(n=r,a=0;a<i;++a)t=e[a],o.visit(l)}function d(){if(e){var t,n,i=e.length;for(r=new Array(i),t=0;t<i;++t)n=e[t],r[n.index]=+a(n,t,e)}}function c(e){var t,n,a,i,o,s=0,u=0;if(e.length){for(a=i=o=0;o<4;++o)(t=e[o])&&(n=Math.abs(t.value))&&(s+=t.value,u+=n,a+=n*t.x,i+=n*t.y);e.x=a/u,e.y=i/u}else{(t=e).x=t.data.x,t.y=t.data.y;do{s+=r[t.data.index]}while(t=t.next)}e.value=s}function l(e,a,u,d){if(!e.value)return!0;var c=e.x-t.x,l=e.y-t.y,f=d-a,h=c*c+l*l;if(f*f/s<h)return h<o&&(0===c&&(h+=(c=fu())*c),0===l&&(h+=(l=fu())*l),h<i&&(h=Math.sqrt(i*h)),t.vx+=c*e.value*n/h,t.vy+=l*e.value*n/h),!0;if(!(e.length||h>=o)){(e.data!==t||e.next)&&(0===c&&(h+=(c=fu())*c),0===l&&(h+=(l=fu())*l),h<i&&(h=Math.sqrt(i*h)));do{e.data!==t&&(f=r[e.data.index]*n/h,t.vx+=c*f,t.vy+=l*f)}while(e=e.next)}}return u.initialize=function(t){e=t,d()},u.strength=function(e){return arguments.length?(a="function"==typeof e?e:lu(+e),d(),u):a},u.distanceMin=function(e){return arguments.length?(i=e*e,u):Math.sqrt(i)},u.distanceMax=function(e){return arguments.length?(o=e*e,u):Math.sqrt(o)},u.theta=function(e){return arguments.length?(s=e*e,u):Math.sqrt(s)},u},Eu=function(e,t,n){var r,a,i,o=lu(.1);function s(e){for(var o=0,s=r.length;o<s;++o){var u=r[o],d=u.x-t||1e-6,c=u.y-n||1e-6,l=Math.sqrt(d*d+c*c),f=(i[o]-l)*a[o]*e/l;u.vx+=d*f,u.vy+=c*f}}function u(){if(r){var t,n=r.length;for(a=new Array(n),i=new Array(n),t=0;t<n;++t)i[t]=+e(r[t],t,r),a[t]=isNaN(i[t])?0:+o(r[t],t,r)}}return"function"!=typeof e&&(e=lu(+e)),null==t&&(t=0),null==n&&(n=0),s.initialize=function(e){r=e,u()},s.strength=function(e){return arguments.length?(o="function"==typeof e?e:lu(+e),u(),s):o},s.radius=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),u(),s):e},s.x=function(e){return arguments.length?(t=+e,s):t},s.y=function(e){return arguments.length?(n=+e,s):n},s},Pu=function(e){var t,n,r,a=lu(.1);function i(e){for(var a,i=0,o=t.length;i<o;++i)(a=t[i]).vx+=(r[i]-a.x)*n[i]*e}function o(){if(t){var i,o=t.length;for(n=new Array(o),r=new Array(o),i=0;i<o;++i)n[i]=isNaN(r[i]=+e(t[i],i,t))?0:+a(t[i],i,t)}}return"function"!=typeof e&&(e=lu(null==e?0:+e)),i.initialize=function(e){t=e,o()},i.strength=function(e){return arguments.length?(a="function"==typeof e?e:lu(+e),o(),i):a},i.x=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),o(),i):e},i},Cu=function(e){var t,n,r,a=lu(.1);function i(e){for(var a,i=0,o=t.length;i<o;++i)(a=t[i]).vy+=(r[i]-a.y)*n[i]*e}function o(){if(t){var i,o=t.length;for(n=new Array(o),r=new Array(o),i=0;i<o;++i)n[i]=isNaN(r[i]=+e(t[i],i,t))?0:+a(t[i],i,t)}}return"function"!=typeof e&&(e=lu(null==e?0:+e)),i.initialize=function(e){t=e,o()},i.strength=function(e){return arguments.length?(a="function"==typeof e?e:lu(+e),o(),i):a},i.y=function(t){return arguments.length?(e="function"==typeof t?t:lu(+t),o(),i):e},i},Ou=function(e,t){if((n=(e=t?e.toExponential(t-1):e.toExponential()).indexOf("e"))<0)return null;var n,r=e.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+e.slice(n+1)]},Nu=function(e){return(e=Ou(Math.abs(e)))?e[1]:NaN},Wu=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function zu(e){if(!(t=Wu.exec(e)))throw new Error("invalid format: "+e);var t;return new Fu({fill:t[1],align:t[2],sign:t[3],symbol:t[4],zero:t[5],width:t[6],comma:t[7],precision:t[8]&&t[8].slice(1),trim:t[9],type:t[10]})}function Fu(e){this.fill=void 0===e.fill?" ":e.fill+"",this.align=void 0===e.align?">":e.align+"",this.sign=void 0===e.sign?"-":e.sign+"",this.symbol=void 0===e.symbol?"":e.symbol+"",this.zero=!!e.zero,this.width=void 0===e.width?void 0:+e.width,this.comma=!!e.comma,this.precision=void 0===e.precision?void 0:+e.precision,this.trim=!!e.trim,this.type=void 0===e.type?"":e.type+""}zu.prototype=Fu.prototype,Fu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ru,Iu,qu,Uu,Bu=function(e){e:for(var t,n=e.length,r=1,a=-1;r<n;++r)switch(e[r]){case".":a=t=r;break;case"0":0===a&&(a=r),t=r;break;default:if(a>0){if(!+e[r])break e;a=0}}return a>0?e.slice(0,a)+e.slice(t+1):e},Ju=function(e,t){var n=Ou(e,t);if(!n)return e+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")},Gu={"%":function(e,t){return(100*e).toFixed(t)},b:function(e){return Math.round(e).toString(2)},c:function(e){return e+""},d:function(e){return Math.round(e).toString(10)},e:function(e,t){return e.toExponential(t)},f:function(e,t){return e.toFixed(t)},g:function(e,t){return e.toPrecision(t)},o:function(e){return Math.round(e).toString(8)},p:function(e,t){return Ju(100*e,t)},r:Ju,s:function(e,t){var n=Ou(e,t);if(!n)return e+"";var r=n[0],a=n[1],i=a-(Ru=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Ou(e,Math.max(0,t+i-1))[0]},X:function(e){return Math.round(e).toString(16).toUpperCase()},x:function(e){return Math.round(e).toString(16)}},Vu=function(e){return e},$u=Array.prototype.map,Xu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Zu=function(e){var t,n,r=void 0===e.grouping||void 0===e.thousands?Vu:(t=$u.call(e.grouping,Number),n=e.thousands+"",function(e,r){for(var a=e.length,i=[],o=0,s=t[0],u=0;a>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),i.push(e.substring(a-=s,a+s)),!((u+=s+1)>r));)s=t[o=(o+1)%t.length];return i.reverse().join(n)}),a=void 0===e.currency?"":e.currency[0]+"",i=void 0===e.currency?"":e.currency[1]+"",o=void 0===e.decimal?".":e.decimal+"",s=void 0===e.numerals?Vu:function(e){return function(t){return t.replace(/[0-9]/g,(function(t){return e[+t]}))}}($u.call(e.numerals,String)),u=void 0===e.percent?"%":e.percent+"",d=void 0===e.minus?"-":e.minus+"",c=void 0===e.nan?"NaN":e.nan+"";function l(e){var t=(e=zu(e)).fill,n=e.align,l=e.sign,f=e.symbol,h=e.zero,_=e.width,m=e.comma,p=e.precision,y=e.trim,g=e.type;"n"===g?(m=!0,g="g"):Gu[g]||(void 0===p&&(p=12),y=!0,g="g"),(h||"0"===t&&"="===n)&&(h=!0,t="0",n="=");var M="$"===f?a:"#"===f&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",v="$"===f?i:/[%p]/.test(g)?u:"",b=Gu[g],L=/[defgprs%]/.test(g);function Y(e){var a,i,u,f=M,Y=v;if("c"===g)Y=b(e)+Y,e="";else{var k=(e=+e)<0;if(e=isNaN(e)?c:b(Math.abs(e),p),y&&(e=Bu(e)),k&&0==+e&&(k=!1),f=(k?"("===l?l:d:"-"===l||"("===l?"":l)+f,Y=("s"===g?Xu[8+Ru/3]:"")+Y+(k&&"("===l?")":""),L)for(a=-1,i=e.length;++a<i;)if(48>(u=e.charCodeAt(a))||u>57){Y=(46===u?o+e.slice(a+1):e.slice(a))+Y,e=e.slice(0,a);break}}m&&!h&&(e=r(e,1/0));var w=f.length+e.length+Y.length,D=w<_?new Array(_-w+1).join(t):"";switch(m&&h&&(e=r(D+e,D.length?_-Y.length:1/0),D=""),n){case"<":e=f+e+Y+D;break;case"=":e=f+D+e+Y;break;case"^":e=D.slice(0,w=D.length>>1)+f+e+Y+D.slice(w);break;default:e=D+f+e+Y}return s(e)}return p=void 0===p?6:/[gprs]/.test(g)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),Y.toString=function(){return e+""},Y}return{format:l,formatPrefix:function(e,t){var n=l(((e=zu(e)).type="f",e)),r=3*Math.max(-8,Math.min(8,Math.floor(Nu(t)/3))),a=Math.pow(10,-r),i=Xu[8+r/3];return function(e){return n(a*e)+i}}}};function Ku(e){return Iu=Zu(e),qu=Iu.format,Uu=Iu.formatPrefix,Iu}Ku({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"});var Qu=function(e){return Math.max(0,-Nu(Math.abs(e)))},ed=function(e,t){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Nu(t)/3)))-Nu(Math.abs(e)))},td=function(e,t){return e=Math.abs(e),t=Math.abs(t)-e,Math.max(0,Nu(t)-Nu(e))+1},nd=function(){return new rd};function rd(){this.reset()}rd.prototype={constructor:rd,reset:function(){this.s=this.t=0},add:function(e){id(ad,e,this.t),id(this,ad.s,this.s),this.s?this.t+=ad.t:this.s=ad.t},valueOf:function(){return this.s}};var ad=new rd;function id(e,t,n){var r=e.s=t+n,a=r-t,i=r-a;e.t=t-i+(n-a)}var od=1e-6,sd=1e-12,ud=Math.PI,dd=ud/2,cd=ud/4,ld=2*ud,fd=180/ud,hd=ud/180,_d=Math.abs,md=Math.atan,pd=Math.atan2,yd=Math.cos,gd=Math.ceil,Md=Math.exp,vd=(Math.floor,Math.log),bd=Math.pow,Ld=Math.sin,Yd=Math.sign||function(e){return e>0?1:e<0?-1:0},kd=Math.sqrt,wd=Math.tan;function Dd(e){return e>1?0:e<-1?ud:Math.acos(e)}function xd(e){return e>1?dd:e<-1?-dd:Math.asin(e)}function Td(e){return(e=Ld(e/2))*e}function Sd(){}function Hd(e,t){e&&Ad.hasOwnProperty(e.type)&&Ad[e.type](e,t)}var jd={Feature:function(e,t){Hd(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,a=n.length;++r<a;)Hd(n[r].geometry,t)}},Ad={Sphere:function(e,t){t.sphere()},Point:function(e,t){e=e.coordinates,t.point(e[0],e[1],e[2])},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)e=n[r],t.point(e[0],e[1],e[2])},LineString:function(e,t){Ed(e.coordinates,t,0)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)Ed(n[r],t,0)},Polygon:function(e,t){Pd(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)Pd(n[r],t)},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,a=n.length;++r<a;)Hd(n[r],t)}};function Ed(e,t,n){var r,a=-1,i=e.length-n;for(t.lineStart();++a<i;)r=e[a],t.point(r[0],r[1],r[2]);t.lineEnd()}function Pd(e,t){var n=-1,r=e.length;for(t.polygonStart();++n<r;)Ed(e[n],t,1);t.polygonEnd()}var Cd,Od,Nd,Wd,zd,Fd=function(e,t){e&&jd.hasOwnProperty(e.type)?jd[e.type](e,t):Hd(e,t)},Rd=nd(),Id=nd(),qd={point:Sd,lineStart:Sd,lineEnd:Sd,polygonStart:function(){Rd.reset(),qd.lineStart=Ud,qd.lineEnd=Bd},polygonEnd:function(){var e=+Rd;Id.add(e<0?ld+e:e),this.lineStart=this.lineEnd=this.point=Sd},sphere:function(){Id.add(ld)}};function Ud(){qd.point=Jd}function Bd(){Gd(Cd,Od)}function Jd(e,t){qd.point=Gd,Cd=e,Od=t,Nd=e*=hd,Wd=yd(t=(t*=hd)/2+cd),zd=Ld(t)}function Gd(e,t){var n=(e*=hd)-Nd,r=n>=0?1:-1,a=r*n,i=yd(t=(t*=hd)/2+cd),o=Ld(t),s=zd*o,u=Wd*i+s*yd(a),d=s*r*Ld(a);Rd.add(pd(d,u)),Nd=e,Wd=i,zd=o}var Vd=function(e){return Id.reset(),Fd(e,qd),2*Id};function $d(e){return[pd(e[1],e[0]),xd(e[2])]}function Xd(e){var t=e[0],n=e[1],r=yd(n);return[r*yd(t),r*Ld(t),Ld(n)]}function Zd(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function Kd(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function Qd(e,t){e[0]+=t[0],e[1]+=t[1],e[2]+=t[2]}function ec(e,t){return[e[0]*t,e[1]*t,e[2]*t]}function tc(e){var t=kd(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);e[0]/=t,e[1]/=t,e[2]/=t}var nc,rc,ac,ic,oc,sc,uc,dc,cc,lc,fc=nd(),hc={point:_c,lineStart:pc,lineEnd:yc,polygonStart:function(){hc.point=gc,hc.lineStart=Mc,hc.lineEnd=vc,fc.reset(),qd.polygonStart()},polygonEnd:function(){qd.polygonEnd(),hc.point=_c,hc.lineStart=pc,hc.lineEnd=yc,Rd<0?(nc=-(ac=180),rc=-(ic=90)):fc>od?ic=90:fc<-od&&(rc=-90),lc[0]=nc,lc[1]=ac},sphere:function(){nc=-(ac=180),rc=-(ic=90)}};function _c(e,t){cc.push(lc=[nc=e,ac=e]),t<rc&&(rc=t),t>ic&&(ic=t)}function mc(e,t){var n=Xd([e*hd,t*hd]);if(dc){var r=Kd(dc,n),a=Kd([r[1],-r[0],0],r);tc(a),a=$d(a);var i,o=e-oc,s=o>0?1:-1,u=a[0]*fd*s,d=_d(o)>180;d^(s*oc<u&&u<s*e)?(i=a[1]*fd)>ic&&(ic=i):d^(s*oc<(u=(u+360)%360-180)&&u<s*e)?(i=-a[1]*fd)<rc&&(rc=i):(t<rc&&(rc=t),t>ic&&(ic=t)),d?e<oc?bc(nc,e)>bc(nc,ac)&&(ac=e):bc(e,ac)>bc(nc,ac)&&(nc=e):ac>=nc?(e<nc&&(nc=e),e>ac&&(ac=e)):e>oc?bc(nc,e)>bc(nc,ac)&&(ac=e):bc(e,ac)>bc(nc,ac)&&(nc=e)}else cc.push(lc=[nc=e,ac=e]);t<rc&&(rc=t),t>ic&&(ic=t),dc=n,oc=e}function pc(){hc.point=mc}function yc(){lc[0]=nc,lc[1]=ac,hc.point=_c,dc=null}function gc(e,t){if(dc){var n=e-oc;fc.add(_d(n)>180?n+(n>0?360:-360):n)}else sc=e,uc=t;qd.point(e,t),mc(e,t)}function Mc(){qd.lineStart()}function vc(){gc(sc,uc),qd.lineEnd(),_d(fc)>od&&(nc=-(ac=180)),lc[0]=nc,lc[1]=ac,dc=null}function bc(e,t){return(t-=e)<0?t+360:t}function Lc(e,t){return e[0]-t[0]}function Yc(e,t){return e[0]<=e[1]?e[0]<=t&&t<=e[1]:t<e[0]||e[1]<t}var kc,wc,Dc,xc,Tc,Sc,Hc,jc,Ac,Ec,Pc,Cc,Oc,Nc,Wc,zc,Fc=function(e){var t,n,r,a,i,o,s;if(ic=ac=-(nc=rc=1/0),cc=[],Fd(e,hc),n=cc.length){for(cc.sort(Lc),t=1,i=[r=cc[0]];t<n;++t)Yc(r,(a=cc[t])[0])||Yc(r,a[1])?(bc(r[0],a[1])>bc(r[0],r[1])&&(r[1]=a[1]),bc(a[0],r[1])>bc(r[0],r[1])&&(r[0]=a[0])):i.push(r=a);for(o=-1/0,t=0,r=i[n=i.length-1];t<=n;r=a,++t)a=i[t],(s=bc(r[1],a[0]))>o&&(o=s,nc=a[0],ac=r[1])}return cc=lc=null,nc===1/0||rc===1/0?[[NaN,NaN],[NaN,NaN]]:[[nc,rc],[ac,ic]]},Rc={sphere:Sd,point:Ic,lineStart:Uc,lineEnd:Gc,polygonStart:function(){Rc.lineStart=Vc,Rc.lineEnd=$c},polygonEnd:function(){Rc.lineStart=Uc,Rc.lineEnd=Gc}};function Ic(e,t){e*=hd;var n=yd(t*=hd);qc(n*yd(e),n*Ld(e),Ld(t))}function qc(e,t,n){Dc+=(e-Dc)/++kc,xc+=(t-xc)/kc,Tc+=(n-Tc)/kc}function Uc(){Rc.point=Bc}function Bc(e,t){e*=hd;var n=yd(t*=hd);Nc=n*yd(e),Wc=n*Ld(e),zc=Ld(t),Rc.point=Jc,qc(Nc,Wc,zc)}function Jc(e,t){e*=hd;var n=yd(t*=hd),r=n*yd(e),a=n*Ld(e),i=Ld(t),o=pd(kd((o=Wc*i-zc*a)*o+(o=zc*r-Nc*i)*o+(o=Nc*a-Wc*r)*o),Nc*r+Wc*a+zc*i);wc+=o,Sc+=o*(Nc+(Nc=r)),Hc+=o*(Wc+(Wc=a)),jc+=o*(zc+(zc=i)),qc(Nc,Wc,zc)}function Gc(){Rc.point=Ic}function Vc(){Rc.point=Xc}function $c(){Zc(Cc,Oc),Rc.point=Ic}function Xc(e,t){Cc=e,Oc=t,e*=hd,t*=hd,Rc.point=Zc;var n=yd(t);Nc=n*yd(e),Wc=n*Ld(e),zc=Ld(t),qc(Nc,Wc,zc)}function Zc(e,t){e*=hd;var n=yd(t*=hd),r=n*yd(e),a=n*Ld(e),i=Ld(t),o=Wc*i-zc*a,s=zc*r-Nc*i,u=Nc*a-Wc*r,d=kd(o*o+s*s+u*u),c=xd(d),l=d&&-c/d;Ac+=l*o,Ec+=l*s,Pc+=l*u,wc+=c,Sc+=c*(Nc+(Nc=r)),Hc+=c*(Wc+(Wc=a)),jc+=c*(zc+(zc=i)),qc(Nc,Wc,zc)}var Kc=function(e){kc=wc=Dc=xc=Tc=Sc=Hc=jc=Ac=Ec=Pc=0,Fd(e,Rc);var t=Ac,n=Ec,r=Pc,a=t*t+n*n+r*r;return a<sd&&(t=Sc,n=Hc,r=jc,wc<od&&(t=Dc,n=xc,r=Tc),(a=t*t+n*n+r*r)<sd)?[NaN,NaN]:[pd(n,t)*fd,xd(r/kd(a))*fd]},Qc=function(e){return function(){return e}},el=function(e,t){function n(n,r){return n=e(n,r),t(n[0],n[1])}return e.invert&&t.invert&&(n.invert=function(n,r){return(n=t.invert(n,r))&&e.invert(n[0],n[1])}),n};function tl(e,t){return[_d(e)>ud?e+Math.round(-e/ld)*ld:e,t]}function nl(e,t,n){return(e%=ld)?t||n?el(al(e),il(t,n)):al(e):t||n?il(t,n):tl}function rl(e){return function(t,n){return[(t+=e)>ud?t-ld:t<-ud?t+ld:t,n]}}function al(e){var t=rl(e);return t.invert=rl(-e),t}function il(e,t){var n=yd(e),r=Ld(e),a=yd(t),i=Ld(t);function o(e,t){var o=yd(t),s=yd(e)*o,u=Ld(e)*o,d=Ld(t),c=d*n+s*r;return[pd(u*a-c*i,s*n-d*r),xd(c*a+u*i)]}return o.invert=function(e,t){var o=yd(t),s=yd(e)*o,u=Ld(e)*o,d=Ld(t),c=d*a-u*i;return[pd(u*a+d*i,s*n+c*r),xd(c*n-s*r)]},o}tl.invert=tl;var ol=function(e){function t(t){return(t=e(t[0]*hd,t[1]*hd))[0]*=fd,t[1]*=fd,t}return e=nl(e[0]*hd,e[1]*hd,e.length>2?e[2]*hd:0),t.invert=function(t){return(t=e.invert(t[0]*hd,t[1]*hd))[0]*=fd,t[1]*=fd,t},t};function sl(e,t,n,r,a,i){if(n){var o=yd(t),s=Ld(t),u=r*n;null==a?(a=t+r*ld,i=t-u/2):(a=ul(o,a),i=ul(o,i),(r>0?a<i:a>i)&&(a+=r*ld));for(var d,c=a;r>0?c>i:c<i;c-=u)d=$d([o,-s*yd(c),-s*Ld(c)]),e.point(d[0],d[1])}}function ul(e,t){(t=Xd(t))[0]-=e,tc(t);var n=Dd(-t[1]);return((-t[2]<0?-n:n)+ld-od)%ld}var dl=function(){var e,t,n=Qc([0,0]),r=Qc(90),a=Qc(6),i={point:function(n,r){e.push(n=t(n,r)),n[0]*=fd,n[1]*=fd}};function o(){var o=n.apply(this,arguments),s=r.apply(this,arguments)*hd,u=a.apply(this,arguments)*hd;return e=[],t=nl(-o[0]*hd,-o[1]*hd,0).invert,sl(i,s,u,1),o={type:"Polygon",coordinates:[e]},e=t=null,o}return o.center=function(e){return arguments.length?(n="function"==typeof e?e:Qc([+e[0],+e[1]]),o):n},o.radius=function(e){return arguments.length?(r="function"==typeof e?e:Qc(+e),o):r},o.precision=function(e){return arguments.length?(a="function"==typeof e?e:Qc(+e),o):a},o},cl=function(){var e,t=[];return{point:function(t,n){e.push([t,n])},lineStart:function(){t.push(e=[])},lineEnd:Sd,rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))},result:function(){var n=t;return t=[],e=null,n}}},ll=function(e,t){return _d(e[0]-t[0])<od&&_d(e[1]-t[1])<od};function fl(e,t,n,r){this.x=e,this.z=t,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var hl=function(e,t,n,r,a){var i,o,s=[],u=[];if(e.forEach((function(e){if(!((t=e.length-1)<=0)){var t,n,r=e[0],o=e[t];if(ll(r,o)){for(a.lineStart(),i=0;i<t;++i)a.point((r=e[i])[0],r[1]);a.lineEnd()}else s.push(n=new fl(r,e,null,!0)),u.push(n.o=new fl(r,null,n,!1)),s.push(n=new fl(o,e,null,!1)),u.push(n.o=new fl(o,null,n,!0))}})),s.length){for(u.sort(t),_l(s),_l(u),i=0,o=u.length;i<o;++i)u[i].e=n=!n;for(var d,c,l=s[0];;){for(var f=l,h=!0;f.v;)if((f=f.n)===l)return;d=f.z,a.lineStart();do{if(f.v=f.o.v=!0,f.e){if(h)for(i=0,o=d.length;i<o;++i)a.point((c=d[i])[0],c[1]);else r(f.x,f.n.x,1,a);f=f.n}else{if(h)for(d=f.p.z,i=d.length-1;i>=0;--i)a.point((c=d[i])[0],c[1]);else r(f.x,f.p.x,-1,a);f=f.p}d=(f=f.o).z,h=!h}while(!f.v);a.lineEnd()}}};function _l(e){if(t=e.length){for(var t,n,r=0,a=e[0];++r<t;)a.n=n=e[r],n.p=a,a=n;a.n=n=e[0],n.p=a}}var ml=nd();function pl(e){return _d(e[0])<=ud?e[0]:Yd(e[0])*((_d(e[0])+ud)%ld-ud)}var yl=function(e,t){var n=pl(t),r=t[1],a=Ld(r),i=[Ld(n),-yd(n),0],o=0,s=0;ml.reset(),1===a?r=dd+od:-1===a&&(r=-dd-od);for(var u=0,d=e.length;u<d;++u)if(l=(c=e[u]).length)for(var c,l,f=c[l-1],h=pl(f),_=f[1]/2+cd,m=Ld(_),p=yd(_),y=0;y<l;++y,h=M,m=b,p=L,f=g){var g=c[y],M=pl(g),v=g[1]/2+cd,b=Ld(v),L=yd(v),Y=M-h,k=Y>=0?1:-1,w=k*Y,D=w>ud,x=m*b;if(ml.add(pd(x*k*Ld(w),p*L+x*yd(w))),o+=D?Y+k*ld:Y,D^h>=n^M>=n){var T=Kd(Xd(f),Xd(g));tc(T);var S=Kd(i,T);tc(S);var H=(D^Y>=0?-1:1)*xd(S[2]);(r>H||r===H&&(T[0]||T[1]))&&(s+=D^Y>=0?1:-1)}}return(o<-od||o<od&&ml<-od)^1&s},gl=function(e,t,n,r){return function(a){var i,o,s,u=t(a),d=cl(),c=t(d),l=!1,f={point:h,lineStart:m,lineEnd:p,polygonStart:function(){f.point=y,f.lineStart=g,f.lineEnd=M,o=[],i=[]},polygonEnd:function(){f.point=h,f.lineStart=m,f.lineEnd=p,o=N(o);var e=yl(i,r);o.length?(l||(a.polygonStart(),l=!0),hl(o,vl,e,n,a)):e&&(l||(a.polygonStart(),l=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),l&&(a.polygonEnd(),l=!1),o=i=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function h(t,n){e(t,n)&&a.point(t,n)}function _(e,t){u.point(e,t)}function m(){f.point=_,u.lineStart()}function p(){f.point=h,u.lineEnd()}function y(e,t){s.push([e,t]),c.point(e,t)}function g(){c.lineStart(),s=[]}function M(){y(s[0][0],s[0][1]),c.lineEnd();var e,t,n,r,u=c.clean(),f=d.result(),h=f.length;if(s.pop(),i.push(s),s=null,h)if(1&u){if((t=(n=f[0]).length-1)>0){for(l||(a.polygonStart(),l=!0),a.lineStart(),e=0;e<t;++e)a.point((r=n[e])[0],r[1]);a.lineEnd()}}else h>1&&2&u&&f.push(f.pop().concat(f.shift())),o.push(f.filter(Ml))}return f}};function Ml(e){return e.length>1}function vl(e,t){return((e=e.x)[0]<0?e[1]-dd-od:dd-e[1])-((t=t.x)[0]<0?t[1]-dd-od:dd-t[1])}var bl=gl((function(){return!0}),(function(e){var t,n=NaN,r=NaN,a=NaN;return{lineStart:function(){e.lineStart(),t=1},point:function(i,o){var s=i>0?ud:-ud,u=_d(i-n);_d(u-ud)<od?(e.point(n,r=(r+o)/2>0?dd:-dd),e.point(a,r),e.lineEnd(),e.lineStart(),e.point(s,r),e.point(i,r),t=0):a!==s&&u>=ud&&(_d(n-a)<od&&(n-=a*od),_d(i-s)<od&&(i-=s*od),r=function(e,t,n,r){var a,i,o=Ld(e-n);return _d(o)>od?md((Ld(t)*(i=yd(r))*Ld(n)-Ld(r)*(a=yd(t))*Ld(e))/(a*i*o)):(t+r)/2}(n,r,i,o),e.point(a,r),e.lineEnd(),e.lineStart(),e.point(s,r),t=0),e.point(n=i,r=o),a=s},lineEnd:function(){e.lineEnd(),n=r=NaN},clean:function(){return 2-t}}}),(function(e,t,n,r){var a;if(null==e)a=n*dd,r.point(-ud,a),r.point(0,a),r.point(ud,a),r.point(ud,0),r.point(ud,-a),r.point(0,-a),r.point(-ud,-a),r.point(-ud,0),r.point(-ud,a);else if(_d(e[0]-t[0])>od){var i=e[0]<t[0]?ud:-ud;a=n*i/2,r.point(-i,a),r.point(0,a),r.point(i,a)}else r.point(t[0],t[1])}),[-ud,-dd]);var Ll=function(e){var t=yd(e),n=6*hd,r=t>0,a=_d(t)>od;function i(e,n){return yd(e)*yd(n)>t}function o(e,n,r){var a=[1,0,0],i=Kd(Xd(e),Xd(n)),o=Zd(i,i),s=i[0],u=o-s*s;if(!u)return!r&&e;var d=t*o/u,c=-t*s/u,l=Kd(a,i),f=ec(a,d);Qd(f,ec(i,c));var h=l,_=Zd(f,h),m=Zd(h,h),p=_*_-m*(Zd(f,f)-1);if(!(p<0)){var y=kd(p),g=ec(h,(-_-y)/m);if(Qd(g,f),g=$d(g),!r)return g;var M,v=e[0],b=n[0],L=e[1],Y=n[1];b<v&&(M=v,v=b,b=M);var k=b-v,w=_d(k-ud)<od;if(!w&&Y<L&&(M=L,L=Y,Y=M),w||k<od?w?L+Y>0^g[1]<(_d(g[0]-v)<od?L:Y):L<=g[1]&&g[1]<=Y:k>ud^(v<=g[0]&&g[0]<=b)){var D=ec(h,(-_+y)/m);return Qd(D,f),[g,$d(D)]}}}function s(t,n){var a=r?e:ud-e,i=0;return t<-a?i|=1:t>a&&(i|=2),n<-a?i|=4:n>a&&(i|=8),i}return gl(i,(function(e){var t,n,u,d,c;return{lineStart:function(){d=u=!1,c=1},point:function(l,f){var h,_=[l,f],m=i(l,f),p=r?m?0:s(l,f):m?s(l+(l<0?ud:-ud),f):0;if(!t&&(d=u=m)&&e.lineStart(),m!==u&&(!(h=o(t,_))||ll(t,h)||ll(_,h))&&(_[0]+=od,_[1]+=od,m=i(_[0],_[1])),m!==u)c=0,m?(e.lineStart(),h=o(_,t),e.point(h[0],h[1])):(h=o(t,_),e.point(h[0],h[1]),e.lineEnd()),t=h;else if(a&&t&&r^m){var y;p&n||!(y=o(_,t,!0))||(c=0,r?(e.lineStart(),e.point(y[0][0],y[0][1]),e.point(y[1][0],y[1][1]),e.lineEnd()):(e.point(y[1][0],y[1][1]),e.lineEnd(),e.lineStart(),e.point(y[0][0],y[0][1])))}!m||t&&ll(t,_)||e.point(_[0],_[1]),t=_,u=m,n=p},lineEnd:function(){u&&e.lineEnd(),t=null},clean:function(){return c|(d&&u)<<1}}}),(function(t,r,a,i){sl(i,e,n,a,t,r)}),r?[0,-e]:[-ud,e-ud])},Yl=function(e,t,n,r,a,i){var o,s=e[0],u=e[1],d=0,c=1,l=t[0]-s,f=t[1]-u;if(o=n-s,l||!(o>0)){if(o/=l,l<0){if(o<d)return;o<c&&(c=o)}else if(l>0){if(o>c)return;o>d&&(d=o)}if(o=a-s,l||!(o<0)){if(o/=l,l<0){if(o>c)return;o>d&&(d=o)}else if(l>0){if(o<d)return;o<c&&(c=o)}if(o=r-u,f||!(o>0)){if(o/=f,f<0){if(o<d)return;o<c&&(c=o)}else if(f>0){if(o>c)return;o>d&&(d=o)}if(o=i-u,f||!(o<0)){if(o/=f,f<0){if(o>c)return;o>d&&(d=o)}else if(f>0){if(o<d)return;o<c&&(c=o)}return d>0&&(e[0]=s+d*l,e[1]=u+d*f),c<1&&(t[0]=s+c*l,t[1]=u+c*f),!0}}}}},kl=1e9,wl=-kl;function Dl(e,t,n,r){function a(a,i){return e<=a&&a<=n&&t<=i&&i<=r}function i(a,i,s,d){var c=0,l=0;if(null==a||(c=o(a,s))!==(l=o(i,s))||u(a,i)<0^s>0)do{d.point(0===c||3===c?e:n,c>1?r:t)}while((c=(c+s+4)%4)!==l);else d.point(i[0],i[1])}function o(r,a){return _d(r[0]-e)<od?a>0?0:3:_d(r[0]-n)<od?a>0?2:1:_d(r[1]-t)<od?a>0?1:0:a>0?3:2}function s(e,t){return u(e.x,t.x)}function u(e,t){var n=o(e,1),r=o(t,1);return n!==r?n-r:0===n?t[1]-e[1]:1===n?e[0]-t[0]:2===n?e[1]-t[1]:t[0]-e[0]}return function(o){var u,d,c,l,f,h,_,m,p,y,g,M=o,v=cl(),b={point:L,lineStart:function(){b.point=Y,d&&d.push(c=[]);y=!0,p=!1,_=m=NaN},lineEnd:function(){u&&(Y(l,f),h&&p&&v.rejoin(),u.push(v.result()));b.point=L,p&&M.lineEnd()},polygonStart:function(){M=v,u=[],d=[],g=!0},polygonEnd:function(){var t=function(){for(var t=0,n=0,a=d.length;n<a;++n)for(var i,o,s=d[n],u=1,c=s.length,l=s[0],f=l[0],h=l[1];u<c;++u)i=f,o=h,l=s[u],f=l[0],h=l[1],o<=r?h>r&&(f-i)*(r-o)>(h-o)*(e-i)&&++t:h<=r&&(f-i)*(r-o)<(h-o)*(e-i)&&--t;return t}(),n=g&&t,a=(u=N(u)).length;(n||a)&&(o.polygonStart(),n&&(o.lineStart(),i(null,null,1,o),o.lineEnd()),a&&hl(u,s,t,i,o),o.polygonEnd());M=o,u=d=c=null}};function L(e,t){a(e,t)&&M.point(e,t)}function Y(i,o){var s=a(i,o);if(d&&c.push([i,o]),y)l=i,f=o,h=s,y=!1,s&&(M.lineStart(),M.point(i,o));else if(s&&p)M.point(i,o);else{var u=[_=Math.max(wl,Math.min(kl,_)),m=Math.max(wl,Math.min(kl,m))],v=[i=Math.max(wl,Math.min(kl,i)),o=Math.max(wl,Math.min(kl,o))];Yl(u,v,e,t,n,r)?(p||(M.lineStart(),M.point(u[0],u[1])),M.point(v[0],v[1]),s||M.lineEnd(),g=!1):s&&(M.lineStart(),M.point(i,o),g=!1)}_=i,m=o,p=s}return b}}var xl,Tl,Sl,Hl=function(){var e,t,n,r=0,a=0,i=960,o=500;return n={stream:function(n){return e&&t===n?e:e=Dl(r,a,i,o)(t=n)},extent:function(s){return arguments.length?(r=+s[0][0],a=+s[0][1],i=+s[1][0],o=+s[1][1],e=t=null,n):[[r,a],[i,o]]}}},jl=nd(),Al={sphere:Sd,point:Sd,lineStart:function(){Al.point=Pl,Al.lineEnd=El},lineEnd:Sd,polygonStart:Sd,polygonEnd:Sd};function El(){Al.point=Al.lineEnd=Sd}function Pl(e,t){xl=e*=hd,Tl=Ld(t*=hd),Sl=yd(t),Al.point=Cl}function Cl(e,t){e*=hd;var n=Ld(t*=hd),r=yd(t),a=_d(e-xl),i=yd(a),o=r*Ld(a),s=Sl*n-Tl*r*i,u=Tl*n+Sl*r*i;jl.add(pd(kd(o*o+s*s),u)),xl=e,Tl=n,Sl=r}var Ol=function(e){return jl.reset(),Fd(e,Al),+jl},Nl=[null,null],Wl={type:"LineString",coordinates:Nl},zl=function(e,t){return Nl[0]=e,Nl[1]=t,Ol(Wl)},Fl={Feature:function(e,t){return Il(e.geometry,t)},FeatureCollection:function(e,t){for(var n=e.features,r=-1,a=n.length;++r<a;)if(Il(n[r].geometry,t))return!0;return!1}},Rl={Sphere:function(){return!0},Point:function(e,t){return ql(e.coordinates,t)},MultiPoint:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)if(ql(n[r],t))return!0;return!1},LineString:function(e,t){return Ul(e.coordinates,t)},MultiLineString:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)if(Ul(n[r],t))return!0;return!1},Polygon:function(e,t){return Bl(e.coordinates,t)},MultiPolygon:function(e,t){for(var n=e.coordinates,r=-1,a=n.length;++r<a;)if(Bl(n[r],t))return!0;return!1},GeometryCollection:function(e,t){for(var n=e.geometries,r=-1,a=n.length;++r<a;)if(Il(n[r],t))return!0;return!1}};function Il(e,t){return!(!e||!Rl.hasOwnProperty(e.type))&&Rl[e.type](e,t)}function ql(e,t){return 0===zl(e,t)}function Ul(e,t){for(var n,r,a,i=0,o=e.length;i<o;i++){if(0===(r=zl(e[i],t)))return!0;if(i>0&&(a=zl(e[i],e[i-1]))>0&&n<=a&&r<=a&&(n+r-a)*(1-Math.pow((n-r)/a,2))<sd*a)return!0;n=r}return!1}function Bl(e,t){return!!yl(e.map(Jl),Gl(t))}function Jl(e){return(e=e.map(Gl)).pop(),e}function Gl(e){return[e[0]*hd,e[1]*hd]}var Vl=function(e,t){return(e&&Fl.hasOwnProperty(e.type)?Fl[e.type]:Il)(e,t)};function $l(e,t,n){var r=L(e,t-od,n).concat(t);return function(e){return r.map((function(t){return[e,t]}))}}function Xl(e,t,n){var r=L(e,t-od,n).concat(t);return function(e){return r.map((function(t){return[t,e]}))}}function Zl(){var e,t,n,r,a,i,o,s,u,d,c,l,f=10,h=f,_=90,m=360,p=2.5;function y(){return{type:"MultiLineString",coordinates:g()}}function g(){return L(gd(r/_)*_,n,_).map(c).concat(L(gd(s/m)*m,o,m).map(l)).concat(L(gd(t/f)*f,e,f).filter((function(e){return _d(e%_)>od})).map(u)).concat(L(gd(i/h)*h,a,h).filter((function(e){return _d(e%m)>od})).map(d))}return y.lines=function(){return g().map((function(e){return{type:"LineString",coordinates:e}}))},y.outline=function(){return{type:"Polygon",coordinates:[c(r).concat(l(o).slice(1),c(n).reverse().slice(1),l(s).reverse().slice(1))]}},y.extent=function(e){return arguments.length?y.extentMajor(e).extentMinor(e):y.extentMinor()},y.extentMajor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],s=+e[0][1],o=+e[1][1],r>n&&(e=r,r=n,n=e),s>o&&(e=s,s=o,o=e),y.precision(p)):[[r,s],[n,o]]},y.extentMinor=function(n){return arguments.length?(t=+n[0][0],e=+n[1][0],i=+n[0][1],a=+n[1][1],t>e&&(n=t,t=e,e=n),i>a&&(n=i,i=a,a=n),y.precision(p)):[[t,i],[e,a]]},y.step=function(e){return arguments.length?y.stepMajor(e).stepMinor(e):y.stepMinor()},y.stepMajor=function(e){return arguments.length?(_=+e[0],m=+e[1],y):[_,m]},y.stepMinor=function(e){return arguments.length?(f=+e[0],h=+e[1],y):[f,h]},y.precision=function(f){return arguments.length?(p=+f,u=$l(i,a,90),d=Xl(t,e,p),c=$l(s,o,90),l=Xl(r,n,p),y):p},y.extentMajor([[-180,-90+od],[180,90-od]]).extentMinor([[-180,-80-od],[180,80+od]])}function Kl(){return Zl()()}var Ql,ef,tf,nf,rf=function(e,t){var n=e[0]*hd,r=e[1]*hd,a=t[0]*hd,i=t[1]*hd,o=yd(r),s=Ld(r),u=yd(i),d=Ld(i),c=o*yd(n),l=o*Ld(n),f=u*yd(a),h=u*Ld(a),_=2*xd(kd(Td(i-r)+o*u*Td(a-n))),m=Ld(_),p=_?function(e){var t=Ld(e*=_)/m,n=Ld(_-e)/m,r=n*c+t*f,a=n*l+t*h,i=n*s+t*d;return[pd(a,r)*fd,pd(i,kd(r*r+a*a))*fd]}:function(){return[n*fd,r*fd]};return p.distance=_,p},af=function(e){return e},of=nd(),sf=nd(),uf={point:Sd,lineStart:Sd,lineEnd:Sd,polygonStart:function(){uf.lineStart=df,uf.lineEnd=ff},polygonEnd:function(){uf.lineStart=uf.lineEnd=uf.point=Sd,of.add(_d(sf)),sf.reset()},result:function(){var e=of/2;return of.reset(),e}};function df(){uf.point=cf}function cf(e,t){uf.point=lf,Ql=tf=e,ef=nf=t}function lf(e,t){sf.add(nf*e-tf*t),tf=e,nf=t}function ff(){lf(Ql,ef)}var hf=uf,_f=1/0,mf=_f,pf=-_f,yf=pf;var gf,Mf,vf,bf,Lf={point:function(e,t){e<_f&&(_f=e);e>pf&&(pf=e);t<mf&&(mf=t);t>yf&&(yf=t)},lineStart:Sd,lineEnd:Sd,polygonStart:Sd,polygonEnd:Sd,result:function(){var e=[[_f,mf],[pf,yf]];return pf=yf=-(mf=_f=1/0),e}},Yf=0,kf=0,wf=0,Df=0,xf=0,Tf=0,Sf=0,Hf=0,jf=0,Af={point:Ef,lineStart:Pf,lineEnd:Nf,polygonStart:function(){Af.lineStart=Wf,Af.lineEnd=zf},polygonEnd:function(){Af.point=Ef,Af.lineStart=Pf,Af.lineEnd=Nf},result:function(){var e=jf?[Sf/jf,Hf/jf]:Tf?[Df/Tf,xf/Tf]:wf?[Yf/wf,kf/wf]:[NaN,NaN];return Yf=kf=wf=Df=xf=Tf=Sf=Hf=jf=0,e}};function Ef(e,t){Yf+=e,kf+=t,++wf}function Pf(){Af.point=Cf}function Cf(e,t){Af.point=Of,Ef(vf=e,bf=t)}function Of(e,t){var n=e-vf,r=t-bf,a=kd(n*n+r*r);Df+=a*(vf+e)/2,xf+=a*(bf+t)/2,Tf+=a,Ef(vf=e,bf=t)}function Nf(){Af.point=Ef}function Wf(){Af.point=Ff}function zf(){Rf(gf,Mf)}function Ff(e,t){Af.point=Rf,Ef(gf=vf=e,Mf=bf=t)}function Rf(e,t){var n=e-vf,r=t-bf,a=kd(n*n+r*r);Df+=a*(vf+e)/2,xf+=a*(bf+t)/2,Tf+=a,Sf+=(a=bf*e-vf*t)*(vf+e),Hf+=a*(bf+t),jf+=3*a,Ef(vf=e,bf=t)}var If=Af;function qf(e){this._context=e}qf.prototype={_radius:4.5,pointRadius:function(e){return this._radius=e,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._context.moveTo(e,t),this._point=1;break;case 1:this._context.lineTo(e,t);break;default:this._context.moveTo(e+this._radius,t),this._context.arc(e,t,this._radius,0,ld)}},result:Sd};var Uf,Bf,Jf,Gf,Vf,$f=nd(),Xf={point:Sd,lineStart:function(){Xf.point=Zf},lineEnd:function(){Uf&&Kf(Bf,Jf),Xf.point=Sd},polygonStart:function(){Uf=!0},polygonEnd:function(){Uf=null},result:function(){var e=+$f;return $f.reset(),e}};function Zf(e,t){Xf.point=Kf,Bf=Gf=e,Jf=Vf=t}function Kf(e,t){Gf-=e,Vf-=t,$f.add(kd(Gf*Gf+Vf*Vf)),Gf=e,Vf=t}var Qf=Xf;function eh(){this._string=[]}function th(e){return"m0,"+e+"a"+e+","+e+" 0 1,1 0,"+-2*e+"a"+e+","+e+" 0 1,1 0,"+2*e+"z"}eh.prototype={_radius:4.5,_circle:th(4.5),pointRadius:function(e){return(e=+e)!==this._radius&&(this._radius=e,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(e,t){switch(this._point){case 0:this._string.push("M",e,",",t),this._point=1;break;case 1:this._string.push("L",e,",",t);break;default:null==this._circle&&(this._circle=th(this._radius)),this._string.push("M",e,",",t,this._circle)}},result:function(){if(this._string.length){var e=this._string.join("");return this._string=[],e}return null}};var nh=function(e,t){var n,r,a=4.5;function i(e){return e&&("function"==typeof a&&r.pointRadius(+a.apply(this,arguments)),Fd(e,n(r))),r.result()}return i.area=function(e){return Fd(e,n(hf)),hf.result()},i.measure=function(e){return Fd(e,n(Qf)),Qf.result()},i.bounds=function(e){return Fd(e,n(Lf)),Lf.result()},i.centroid=function(e){return Fd(e,n(If)),If.result()},i.projection=function(t){return arguments.length?(n=null==t?(e=null,af):(e=t).stream,i):e},i.context=function(e){return arguments.length?(r=null==e?(t=null,new eh):new qf(t=e),"function"!=typeof a&&r.pointRadius(a),i):t},i.pointRadius=function(e){return arguments.length?(a="function"==typeof e?e:(r.pointRadius(+e),+e),i):a},i.projection(e).context(t)},rh=function(e){return{stream:ah(e)}};function ah(e){return function(t){var n=new ih;for(var r in e)n[r]=e[r];return n.stream=t,n}}function ih(){}function oh(e,t,n){var r=e.clipExtent&&e.clipExtent();return e.scale(150).translate([0,0]),null!=r&&e.clipExtent(null),Fd(n,e.stream(Lf)),t(Lf.result()),null!=r&&e.clipExtent(r),e}function sh(e,t,n){return oh(e,(function(n){var r=t[1][0]-t[0][0],a=t[1][1]-t[0][1],i=Math.min(r/(n[1][0]-n[0][0]),a/(n[1][1]-n[0][1])),o=+t[0][0]+(r-i*(n[1][0]+n[0][0]))/2,s=+t[0][1]+(a-i*(n[1][1]+n[0][1]))/2;e.scale(150*i).translate([o,s])}),n)}function uh(e,t,n){return sh(e,[[0,0],t],n)}function dh(e,t,n){return oh(e,(function(n){var r=+t,a=r/(n[1][0]-n[0][0]),i=(r-a*(n[1][0]+n[0][0]))/2,o=-a*n[0][1];e.scale(150*a).translate([i,o])}),n)}function ch(e,t,n){return oh(e,(function(n){var r=+t,a=r/(n[1][1]-n[0][1]),i=-a*n[0][0],o=(r-a*(n[1][1]+n[0][1]))/2;e.scale(150*a).translate([i,o])}),n)}ih.prototype={constructor:ih,point:function(e,t){this.stream.point(e,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var lh=16,fh=yd(30*hd),hh=function(e,t){return+t?function(e,t){function n(r,a,i,o,s,u,d,c,l,f,h,_,m,p){var y=d-r,g=c-a,M=y*y+g*g;if(M>4*t&&m--){var v=o+f,b=s+h,L=u+_,Y=kd(v*v+b*b+L*L),k=xd(L/=Y),w=_d(_d(L)-1)<od||_d(i-l)<od?(i+l)/2:pd(b,v),D=e(w,k),x=D[0],T=D[1],S=x-r,H=T-a,j=g*S-y*H;(j*j/M>t||_d((y*S+g*H)/M-.5)>.3||o*f+s*h+u*_<fh)&&(n(r,a,i,o,s,u,x,T,w,v/=Y,b/=Y,L,m,p),p.point(x,T),n(x,T,w,v,b,L,d,c,l,f,h,_,m,p))}}return function(t){var r,a,i,o,s,u,d,c,l,f,h,_,m={point:p,lineStart:y,lineEnd:M,polygonStart:function(){t.polygonStart(),m.lineStart=v},polygonEnd:function(){t.polygonEnd(),m.lineStart=y}};function p(n,r){n=e(n,r),t.point(n[0],n[1])}function y(){c=NaN,m.point=g,t.lineStart()}function g(r,a){var i=Xd([r,a]),o=e(r,a);n(c,l,d,f,h,_,c=o[0],l=o[1],d=r,f=i[0],h=i[1],_=i[2],lh,t),t.point(c,l)}function M(){m.point=p,t.lineEnd()}function v(){y(),m.point=b,m.lineEnd=L}function b(e,t){g(r=e,t),a=c,i=l,o=f,s=h,u=_,m.point=g}function L(){n(c,l,d,f,h,_,a,i,r,o,s,u,lh,t),m.lineEnd=M,M()}return m}}(e,t):function(e){return ah({point:function(t,n){t=e(t,n),this.stream.point(t[0],t[1])}})}(e)};var _h=ah({point:function(e,t){this.stream.point(e*hd,t*hd)}});function mh(e,t,n){function r(r,a){return[t+e*r,n-e*a]}return r.invert=function(r,a){return[(r-t)/e,(n-a)/e]},r}function ph(e,t,n,r){var a=yd(r),i=Ld(r),o=a*e,s=i*e,u=a/e,d=i/e,c=(i*n-a*t)/e,l=(i*t+a*n)/e;function f(e,r){return[o*e-s*r+t,n-s*e-o*r]}return f.invert=function(e,t){return[u*e-d*t+c,l-d*e-u*t]},f}function yh(e){return gh((function(){return e}))()}function gh(e){var t,n,r,a,i,o,s,u,d,c,l=150,f=480,h=250,_=0,m=0,p=0,y=0,g=0,M=0,v=null,b=bl,L=null,Y=af,k=.5;function w(e){return u(e[0]*hd,e[1]*hd)}function D(e){return(e=u.invert(e[0],e[1]))&&[e[0]*fd,e[1]*fd]}function x(){var e=ph(l,0,0,M).apply(null,t(_,m)),r=(M?ph:mh)(l,f-e[0],h-e[1],M);return n=nl(p,y,g),s=el(t,r),u=el(n,s),o=hh(s,k),T()}function T(){return d=c=null,w}return w.stream=function(e){return d&&c===e?d:d=_h(function(e){return ah({point:function(t,n){var r=e(t,n);return this.stream.point(r[0],r[1])}})}(n)(b(o(Y(c=e)))))},w.preclip=function(e){return arguments.length?(b=e,v=void 0,T()):b},w.postclip=function(e){return arguments.length?(Y=e,L=r=a=i=null,T()):Y},w.clipAngle=function(e){return arguments.length?(b=+e?Ll(v=e*hd):(v=null,bl),T()):v*fd},w.clipExtent=function(e){return arguments.length?(Y=null==e?(L=r=a=i=null,af):Dl(L=+e[0][0],r=+e[0][1],a=+e[1][0],i=+e[1][1]),T()):null==L?null:[[L,r],[a,i]]},w.scale=function(e){return arguments.length?(l=+e,x()):l},w.translate=function(e){return arguments.length?(f=+e[0],h=+e[1],x()):[f,h]},w.center=function(e){return arguments.length?(_=e[0]%360*hd,m=e[1]%360*hd,x()):[_*fd,m*fd]},w.rotate=function(e){return arguments.length?(p=e[0]%360*hd,y=e[1]%360*hd,g=e.length>2?e[2]%360*hd:0,x()):[p*fd,y*fd,g*fd]},w.angle=function(e){return arguments.length?(M=e%360*hd,x()):M*fd},w.precision=function(e){return arguments.length?(o=hh(s,k=e*e),T()):kd(k)},w.fitExtent=function(e,t){return sh(w,e,t)},w.fitSize=function(e,t){return uh(w,e,t)},w.fitWidth=function(e,t){return dh(w,e,t)},w.fitHeight=function(e,t){return ch(w,e,t)},function(){return t=e.apply(this,arguments),w.invert=t.invert&&D,x()}}function Mh(e){var t=0,n=ud/3,r=gh(e),a=r(t,n);return a.parallels=function(e){return arguments.length?r(t=e[0]*hd,n=e[1]*hd):[t*fd,n*fd]},a}function vh(e,t){var n=Ld(e),r=(n+Ld(t))/2;if(_d(r)<od)return function(e){var t=yd(e);function n(e,n){return[e*t,Ld(n)/t]}return n.invert=function(e,n){return[e/t,xd(n*t)]},n}(e);var a=1+n*(2*r-n),i=kd(a)/r;function o(e,t){var n=kd(a-2*r*Ld(t))/r;return[n*Ld(e*=r),i-n*yd(e)]}return o.invert=function(e,t){var n=i-t;return[pd(e,_d(n))/r*Yd(n),xd((a-(e*e+n*n)*r*r)/(2*r))]},o}var bh=function(){return Mh(vh).scale(155.424).center([0,33.6442])},Lh=function(){return bh().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var Yh=function(){var e,t,n,r,a,i,o=Lh(),s=bh().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=bh().rotate([157,0]).center([-3,19.9]).parallels([8,18]),d={point:function(e,t){i=[e,t]}};function c(e){var t=e[0],o=e[1];return i=null,n.point(t,o),i||(r.point(t,o),i)||(a.point(t,o),i)}function l(){return e=t=null,c}return c.invert=function(e){var t=o.scale(),n=o.translate(),r=(e[0]-n[0])/t,a=(e[1]-n[1])/t;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?s:a>=.166&&a<.234&&r>=-.214&&r<-.115?u:o).invert(e)},c.stream=function(n){return e&&t===n?e:(r=[o.stream(t=n),s.stream(n),u.stream(n)],a=r.length,e={point:function(e,t){for(var n=-1;++n<a;)r[n].point(e,t)},sphere:function(){for(var e=-1;++e<a;)r[e].sphere()},lineStart:function(){for(var e=-1;++e<a;)r[e].lineStart()},lineEnd:function(){for(var e=-1;++e<a;)r[e].lineEnd()},polygonStart:function(){for(var e=-1;++e<a;)r[e].polygonStart()},polygonEnd:function(){for(var e=-1;++e<a;)r[e].polygonEnd()}});var r,a},c.precision=function(e){return arguments.length?(o.precision(e),s.precision(e),u.precision(e),l()):o.precision()},c.scale=function(e){return arguments.length?(o.scale(e),s.scale(.35*e),u.scale(e),c.translate(o.translate())):o.scale()},c.translate=function(e){if(!arguments.length)return o.translate();var t=o.scale(),i=+e[0],c=+e[1];return n=o.translate(e).clipExtent([[i-.455*t,c-.238*t],[i+.455*t,c+.238*t]]).stream(d),r=s.translate([i-.307*t,c+.201*t]).clipExtent([[i-.425*t+od,c+.12*t+od],[i-.214*t-od,c+.234*t-od]]).stream(d),a=u.translate([i-.205*t,c+.212*t]).clipExtent([[i-.214*t+od,c+.166*t+od],[i-.115*t-od,c+.234*t-od]]).stream(d),l()},c.fitExtent=function(e,t){return sh(c,e,t)},c.fitSize=function(e,t){return uh(c,e,t)},c.fitWidth=function(e,t){return dh(c,e,t)},c.fitHeight=function(e,t){return ch(c,e,t)},c.scale(1070)};function kh(e){return function(t,n){var r=yd(t),a=yd(n),i=e(r*a);return[i*a*Ld(t),i*Ld(n)]}}function wh(e){return function(t,n){var r=kd(t*t+n*n),a=e(r),i=Ld(a),o=yd(a);return[pd(t*i,r*o),xd(r&&n*i/r)]}}var Dh=kh((function(e){return kd(2/(1+e))}));Dh.invert=wh((function(e){return 2*xd(e/2)}));var xh=function(){return yh(Dh).scale(124.75).clipAngle(179.999)},Th=kh((function(e){return(e=Dd(e))&&e/Ld(e)}));Th.invert=wh((function(e){return e}));var Sh=function(){return yh(Th).scale(79.4188).clipAngle(179.999)};function Hh(e,t){return[e,vd(wd((dd+t)/2))]}Hh.invert=function(e,t){return[e,2*md(Md(t))-dd]};var jh=function(){return Ah(Hh).scale(961/ld)};function Ah(e){var t,n,r,a=yh(e),i=a.center,o=a.scale,s=a.translate,u=a.clipExtent,d=null;function c(){var i=ud*o(),s=a(ol(a.rotate()).invert([0,0]));return u(null==d?[[s[0]-i,s[1]-i],[s[0]+i,s[1]+i]]:e===Hh?[[Math.max(s[0]-i,d),t],[Math.min(s[0]+i,n),r]]:[[d,Math.max(s[1]-i,t)],[n,Math.min(s[1]+i,r)]])}return a.scale=function(e){return arguments.length?(o(e),c()):o()},a.translate=function(e){return arguments.length?(s(e),c()):s()},a.center=function(e){return arguments.length?(i(e),c()):i()},a.clipExtent=function(e){return arguments.length?(null==e?d=t=n=r=null:(d=+e[0][0],t=+e[0][1],n=+e[1][0],r=+e[1][1]),c()):null==d?null:[[d,t],[n,r]]},c()}function Eh(e){return wd((dd+e)/2)}function Ph(e,t){var n=yd(e),r=e===t?Ld(e):vd(n/yd(t))/vd(Eh(t)/Eh(e)),a=n*bd(Eh(e),r)/r;if(!r)return Hh;function i(e,t){a>0?t<-dd+od&&(t=-dd+od):t>dd-od&&(t=dd-od);var n=a/bd(Eh(t),r);return[n*Ld(r*e),a-n*yd(r*e)]}return i.invert=function(e,t){var n=a-t,i=Yd(r)*kd(e*e+n*n);return[pd(e,_d(n))/r*Yd(n),2*md(bd(a/i,1/r))-dd]},i}var Ch=function(){return Mh(Ph).scale(109.5).parallels([30,30])};function Oh(e,t){return[e,t]}Oh.invert=Oh;var Nh=function(){return yh(Oh).scale(152.63)};function Wh(e,t){var n=yd(e),r=e===t?Ld(e):(n-yd(t))/(t-e),a=n/r+e;if(_d(r)<od)return Oh;function i(e,t){var n=a-t,i=r*e;return[n*Ld(i),a-n*yd(i)]}return i.invert=function(e,t){var n=a-t;return[pd(e,_d(n))/r*Yd(n),a-Yd(r)*kd(e*e+n*n)]},i}var zh=function(){return Mh(Wh).scale(131.154).center([0,13.9389])},Fh=1.340264,Rh=-.081106,Ih=893e-6,qh=.003796,Uh=kd(3)/2;function Bh(e,t){var n=xd(Uh*Ld(t)),r=n*n,a=r*r*r;return[e*yd(n)/(Uh*(Fh+3*Rh*r+a*(7*Ih+9*qh*r))),n*(Fh+Rh*r+a*(Ih+qh*r))]}Bh.invert=function(e,t){for(var n,r=t,a=r*r,i=a*a*a,o=0;o<12&&(i=(a=(r-=n=(r*(Fh+Rh*a+i*(Ih+qh*a))-t)/(Fh+3*Rh*a+i*(7*Ih+9*qh*a)))*r)*a*a,!(_d(n)<sd));++o);return[Uh*e*(Fh+3*Rh*a+i*(7*Ih+9*qh*a))/yd(r),xd(Ld(r)/Uh)]};var Jh=function(){return yh(Bh).scale(177.158)};function Gh(e,t){var n=yd(t),r=yd(e)*n;return[n*Ld(e)/r,Ld(t)/r]}Gh.invert=wh(md);var Vh=function(){return yh(Gh).scale(144.049).clipAngle(60)};function $h(e,t,n,r){return 1===e&&1===t&&0===n&&0===r?af:ah({point:function(a,i){this.stream.point(a*e+n,i*t+r)}})}var Xh=function(){var e,t,n,r,a,i,o=1,s=0,u=0,d=1,c=1,l=af,f=null,h=af;function _(){return r=a=null,i}return i={stream:function(e){return r&&a===e?r:r=l(h(a=e))},postclip:function(r){return arguments.length?(h=r,f=e=t=n=null,_()):h},clipExtent:function(r){return arguments.length?(h=null==r?(f=e=t=n=null,af):Dl(f=+r[0][0],e=+r[0][1],t=+r[1][0],n=+r[1][1]),_()):null==f?null:[[f,e],[t,n]]},scale:function(e){return arguments.length?(l=$h((o=+e)*d,o*c,s,u),_()):o},translate:function(e){return arguments.length?(l=$h(o*d,o*c,s=+e[0],u=+e[1]),_()):[s,u]},reflectX:function(e){return arguments.length?(l=$h(o*(d=e?-1:1),o*c,s,u),_()):d<0},reflectY:function(e){return arguments.length?(l=$h(o*d,o*(c=e?-1:1),s,u),_()):c<0},fitExtent:function(e,t){return sh(i,e,t)},fitSize:function(e,t){return uh(i,e,t)},fitWidth:function(e,t){return dh(i,e,t)},fitHeight:function(e,t){return ch(i,e,t)}}};function Zh(e,t){var n=t*t,r=n*n;return[e*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),t*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}Zh.invert=function(e,t){var n,r=t,a=25;do{var i=r*r,o=i*i;r-=n=(r*(1.007226+i*(.015085+o*(.028874*i-.044475-.005916*o)))-t)/(1.007226+i*(.045255+o*(.259866*i-.311325-.005916*11*o)))}while(_d(n)>od&&--a>0);return[e/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};var Kh=function(){return yh(Zh).scale(175.295)};function Qh(e,t){return[yd(t)*Ld(e),Ld(t)]}Qh.invert=wh(xd);var e_=function(){return yh(Qh).scale(249.5).clipAngle(90+od)};function t_(e,t){var n=yd(t),r=1+yd(e)*n;return[n*Ld(e)/r,Ld(t)/r]}t_.invert=wh((function(e){return 2*md(e)}));var n_=function(){return yh(t_).scale(250).clipAngle(142)};function r_(e,t){return[vd(wd((dd+t)/2)),-e]}r_.invert=function(e,t){return[-t,2*md(Md(e))-dd]};var a_=function(){var e=Ah(r_),t=e.center,n=e.rotate;return e.center=function(e){return arguments.length?t([-e[1],e[0]]):[(e=t())[1],-e[0]]},e.rotate=function(e){return arguments.length?n([e[0],e[1],e.length>2?e[2]+90:90]):[(e=n())[0],e[1],e[2]-90]},n([0,0,90]).scale(159.155)};function i_(e,t){return e.parent===t.parent?1:2}function o_(e,t){return e+t.x}function s_(e,t){return Math.max(e,t.y)}var u_=function(){var e=i_,t=1,n=1,r=!1;function a(a){var i,o=0;a.eachAfter((function(t){var n=t.children;n?(t.x=function(e){return e.reduce(o_,0)/e.length}(n),t.y=function(e){return 1+e.reduce(s_,0)}(n)):(t.x=i?o+=e(t,i):0,t.y=0,i=t)}));var s=function(e){for(var t;t=e.children;)e=t[0];return e}(a),u=function(e){for(var t;t=e.children;)e=t[t.length-1];return e}(a),d=s.x-e(s,u)/2,c=u.x+e(u,s)/2;return a.eachAfter(r?function(e){e.x=(e.x-a.x)*t,e.y=(a.y-e.y)*n}:function(e){e.x=(e.x-d)/(c-d)*t,e.y=(1-(a.y?e.y/a.y:1))*n})}return a.separation=function(t){return arguments.length?(e=t,a):e},a.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],a):r?null:[t,n]},a.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],a):r?[t,n]:null},a};function d_(e){var t=0,n=e.children,r=n&&n.length;if(r)for(;--r>=0;)t+=n[r].value;else t=1;e.value=t}function c_(e,t){var n,r,a,i,o,s=new __(e),u=+e.value&&(s.value=e.value),d=[s];for(null==t&&(t=l_);n=d.pop();)if(u&&(n.value=+n.data.value),(a=t(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)d.push(r=n.children[i]=new __(a[i])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(h_)}function l_(e){return e.children}function f_(e){e.data=e.data.data}function h_(e){var t=0;do{e.height=t}while((e=e.parent)&&e.height<++t)}function __(e){this.data=e,this.depth=this.height=0,this.parent=null}__.prototype=c_.prototype={constructor:__,count:function(){return this.eachAfter(d_)},each:function(e){var t,n,r,a,i=this,o=[i];do{for(t=o.reverse(),o=[];i=t.pop();)if(e(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(e){for(var t,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),t=a.children)for(n=0,r=t.length;n<r;++n)i.push(t[n]);for(;a=o.pop();)e(a);return this},eachBefore:function(e){for(var t,n,r=this,a=[r];r=a.pop();)if(e(r),t=r.children)for(n=t.length-1;n>=0;--n)a.push(t[n]);return this},sum:function(e){return this.eachAfter((function(t){for(var n=+e(t.data)||0,r=t.children,a=r&&r.length;--a>=0;)n+=r[a].value;t.value=n}))},sort:function(e){return this.eachBefore((function(t){t.children&&t.children.sort(e)}))},path:function(e){for(var t=this,n=function(e,t){if(e===t)return e;var n=e.ancestors(),r=t.ancestors(),a=null;e=n.pop(),t=r.pop();for(;e===t;)a=e,e=n.pop(),t=r.pop();return a}(t,e),r=[t];t!==n;)t=t.parent,r.push(t);for(var a=r.length;e!==n;)r.splice(a,0,e),e=e.parent;return r},ancestors:function(){for(var e=this,t=[e];e=e.parent;)t.push(e);return t},descendants:function(){var e=[];return this.each((function(t){e.push(t)})),e},leaves:function(){var e=[];return this.eachBefore((function(t){t.children||e.push(t)})),e},links:function(){var e=this,t=[];return e.each((function(n){n!==e&&t.push({source:n.parent,target:n})})),t},copy:function(){return c_(this).eachBefore(f_)}};var m_=Array.prototype.slice;var p_=function(e){for(var t,n,r=0,a=(e=function(e){for(var t,n,r=e.length;r;)n=Math.random()*r--|0,t=e[r],e[r]=e[n],e[n]=t;return e}(m_.call(e))).length,i=[];r<a;)t=e[r],n&&M_(n,t)?++r:(n=b_(i=y_(i,t)),r=0);return n};function y_(e,t){var n,r;if(v_(t,e))return[t];for(n=0;n<e.length;++n)if(g_(t,e[n])&&v_(L_(e[n],t),e))return[e[n],t];for(n=0;n<e.length-1;++n)for(r=n+1;r<e.length;++r)if(g_(L_(e[n],e[r]),t)&&g_(L_(e[n],t),e[r])&&g_(L_(e[r],t),e[n])&&v_(Y_(e[n],e[r],t),e))return[e[n],e[r],t];throw new Error}function g_(e,t){var n=e.r-t.r,r=t.x-e.x,a=t.y-e.y;return n<0||n*n<r*r+a*a}function M_(e,t){var n=e.r-t.r+1e-6,r=t.x-e.x,a=t.y-e.y;return n>0&&n*n>r*r+a*a}function v_(e,t){for(var n=0;n<t.length;++n)if(!M_(e,t[n]))return!1;return!0}function b_(e){switch(e.length){case 1:return{x:(t=e[0]).x,y:t.y,r:t.r};case 2:return L_(e[0],e[1]);case 3:return Y_(e[0],e[1],e[2])}var t}function L_(e,t){var n=e.x,r=e.y,a=e.r,i=t.x,o=t.y,s=t.r,u=i-n,d=o-r,c=s-a,l=Math.sqrt(u*u+d*d);return{x:(n+i+u/l*c)/2,y:(r+o+d/l*c)/2,r:(l+a+s)/2}}function Y_(e,t,n){var r=e.x,a=e.y,i=e.r,o=t.x,s=t.y,u=t.r,d=n.x,c=n.y,l=n.r,f=r-o,h=r-d,_=a-s,m=a-c,p=u-i,y=l-i,g=r*r+a*a-i*i,M=g-o*o-s*s+u*u,v=g-d*d-c*c+l*l,b=h*_-f*m,L=(_*v-m*M)/(2*b)-r,Y=(m*p-_*y)/b,k=(h*M-f*v)/(2*b)-a,w=(f*y-h*p)/b,D=Y*Y+w*w-1,x=2*(i+L*Y+k*w),T=L*L+k*k-i*i,S=-(D?(x+Math.sqrt(x*x-4*D*T))/(2*D):T/x);return{x:r+L+Y*S,y:a+k+w*S,r:S}}function k_(e,t,n){var r,a,i,o,s=e.x-t.x,u=e.y-t.y,d=s*s+u*u;d?(a=t.r+n.r,a*=a,o=e.r+n.r,a>(o*=o)?(r=(d+o-a)/(2*d),i=Math.sqrt(Math.max(0,o/d-r*r)),n.x=e.x-r*s-i*u,n.y=e.y-r*u+i*s):(r=(d+a-o)/(2*d),i=Math.sqrt(Math.max(0,a/d-r*r)),n.x=t.x+r*s-i*u,n.y=t.y+r*u+i*s)):(n.x=t.x+n.r,n.y=t.y)}function w_(e,t){var n=e.r+t.r-1e-6,r=t.x-e.x,a=t.y-e.y;return n>0&&n*n>r*r+a*a}function D_(e){var t=e._,n=e.next._,r=t.r+n.r,a=(t.x*n.r+n.x*t.r)/r,i=(t.y*n.r+n.y*t.r)/r;return a*a+i*i}function x_(e){this._=e,this.next=null,this.previous=null}function T_(e){if(!(a=e.length))return 0;var t,n,r,a,i,o,s,u,d,c,l;if((t=e[0]).x=0,t.y=0,!(a>1))return t.r;if(n=e[1],t.x=-n.r,n.x=t.r,n.y=0,!(a>2))return t.r+n.r;k_(n,t,r=e[2]),t=new x_(t),n=new x_(n),r=new x_(r),t.next=r.previous=n,n.next=t.previous=r,r.next=n.previous=t;e:for(s=3;s<a;++s){k_(t._,n._,r=e[s]),r=new x_(r),u=n.next,d=t.previous,c=n._.r,l=t._.r;do{if(c<=l){if(w_(u._,r._)){n=u,t.next=n,n.previous=t,--s;continue e}c+=u._.r,u=u.next}else{if(w_(d._,r._)){(t=d).next=n,n.previous=t,--s;continue e}l+=d._.r,d=d.previous}}while(u!==d.next);for(r.previous=t,r.next=n,t.next=n.previous=n=r,i=D_(t);(r=r.next)!==n;)(o=D_(r))<i&&(t=r,i=o);n=t.next}for(t=[n._],r=n;(r=r.next)!==n;)t.push(r._);for(r=p_(t),s=0;s<a;++s)(t=e[s]).x-=r.x,t.y-=r.y;return r.r}var S_=function(e){return T_(e),e};function H_(e){return null==e?null:j_(e)}function j_(e){if("function"!=typeof e)throw new Error;return e}function A_(){return 0}var E_=function(e){return function(){return e}};function P_(e){return Math.sqrt(e.value)}var C_=function(){var e=null,t=1,n=1,r=A_;function a(a){return a.x=t/2,a.y=n/2,e?a.eachBefore(O_(e)).eachAfter(N_(r,.5)).eachBefore(W_(1)):a.eachBefore(O_(P_)).eachAfter(N_(A_,1)).eachAfter(N_(r,a.r/Math.min(t,n))).eachBefore(W_(Math.min(t,n)/(2*a.r))),a}return a.radius=function(t){return arguments.length?(e=H_(t),a):e},a.size=function(e){return arguments.length?(t=+e[0],n=+e[1],a):[t,n]},a.padding=function(e){return arguments.length?(r="function"==typeof e?e:E_(+e),a):r},a};function O_(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function N_(e,t){return function(n){if(r=n.children){var r,a,i,o=r.length,s=e(n)*t||0;if(s)for(a=0;a<o;++a)r[a].r+=s;if(i=T_(r),s)for(a=0;a<o;++a)r[a].r-=s;n.r=i+s}}}function W_(e){return function(t){var n=t.parent;t.r*=e,n&&(t.x=n.x+e*t.x,t.y=n.y+e*t.y)}}var z_=function(e){e.x0=Math.round(e.x0),e.y0=Math.round(e.y0),e.x1=Math.round(e.x1),e.y1=Math.round(e.y1)},F_=function(e,t,n,r,a){for(var i,o=e.children,s=-1,u=o.length,d=e.value&&(r-t)/e.value;++s<u;)(i=o[s]).y0=n,i.y1=a,i.x0=t,i.x1=t+=i.value*d},R_=function(){var e=1,t=1,n=0,r=!1;function a(a){var i=a.height+1;return a.x0=a.y0=n,a.x1=e,a.y1=t/i,a.eachBefore(function(e,t){return function(r){r.children&&F_(r,r.x0,e*(r.depth+1)/t,r.x1,e*(r.depth+2)/t);var a=r.x0,i=r.y0,o=r.x1-n,s=r.y1-n;o<a&&(a=o=(a+o)/2),s<i&&(i=s=(i+s)/2),r.x0=a,r.y0=i,r.x1=o,r.y1=s}}(t,i)),r&&a.eachBefore(z_),a}return a.round=function(e){return arguments.length?(r=!!e,a):r},a.size=function(n){return arguments.length?(e=+n[0],t=+n[1],a):[e,t]},a.padding=function(e){return arguments.length?(n=+e,a):n},a},I_="$",q_={depth:-1},U_={};function B_(e){return e.id}function J_(e){return e.parentId}var G_=function(){var e=B_,t=J_;function n(n){var r,a,i,o,s,u,d,c=n.length,l=new Array(c),f={};for(a=0;a<c;++a)r=n[a],s=l[a]=new __(r),null!=(u=e(r,a,n))&&(u+="")&&(f[d=I_+(s.id=u)]=d in f?U_:s);for(a=0;a<c;++a)if(s=l[a],null!=(u=t(n[a],a,n))&&(u+="")){if(!(o=f[I_+u]))throw new Error("missing: "+u);if(o===U_)throw new Error("ambiguous: "+u);o.children?o.children.push(s):o.children=[s],s.parent=o}else{if(i)throw new Error("multiple roots");i=s}if(!i)throw new Error("no root");if(i.parent=q_,i.eachBefore((function(e){e.depth=e.parent.depth+1,--c})).eachBefore(h_),i.parent=null,c>0)throw new Error("cycle");return i}return n.id=function(t){return arguments.length?(e=j_(t),n):e},n.parentId=function(e){return arguments.length?(t=j_(e),n):t},n};function V_(e,t){return e.parent===t.parent?1:2}function $_(e){var t=e.children;return t?t[0]:e.t}function X_(e){var t=e.children;return t?t[t.length-1]:e.t}function Z_(e,t,n){var r=n/(t.i-e.i);t.c-=r,t.s+=n,e.c+=r,t.z+=n,t.m+=n}function K_(e,t,n){return e.a.parent===t.parent?e.a:n}function Q_(e,t){this._=e,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=t}Q_.prototype=Object.create(__.prototype);var em=function(){var e=V_,t=1,n=1,r=null;function a(a){var u=function(e){for(var t,n,r,a,i,o=new Q_(e,0),s=[o];t=s.pop();)if(r=t._.children)for(t.children=new Array(i=r.length),a=i-1;a>=0;--a)s.push(n=t.children[a]=new Q_(r[a],a)),n.parent=t;return(o.parent=new Q_(null,0)).children=[o],o}(a);if(u.eachAfter(i),u.parent.m=-u.z,u.eachBefore(o),r)a.eachBefore(s);else{var d=a,c=a,l=a;a.eachBefore((function(e){e.x<d.x&&(d=e),e.x>c.x&&(c=e),e.depth>l.depth&&(l=e)}));var f=d===c?1:e(d,c)/2,h=f-d.x,_=t/(c.x+f+h),m=n/(l.depth||1);a.eachBefore((function(e){e.x=(e.x+h)*_,e.y=e.depth*m}))}return a}function i(t){var n=t.children,r=t.parent.children,a=t.i?r[t.i-1]:null;if(n){!function(e){for(var t,n=0,r=0,a=e.children,i=a.length;--i>=0;)(t=a[i]).z+=n,t.m+=n,n+=t.s+(r+=t.c)}(t);var i=(n[0].z+n[n.length-1].z)/2;a?(t.z=a.z+e(t._,a._),t.m=t.z-i):t.z=i}else a&&(t.z=a.z+e(t._,a._));t.parent.A=function(t,n,r){if(n){for(var a,i=t,o=t,s=n,u=i.parent.children[0],d=i.m,c=o.m,l=s.m,f=u.m;s=X_(s),i=$_(i),s&&i;)u=$_(u),(o=X_(o)).a=t,(a=s.z+l-i.z-d+e(s._,i._))>0&&(Z_(K_(s,t,r),t,a),d+=a,c+=a),l+=s.m,d+=i.m,f+=u.m,c+=o.m;s&&!X_(o)&&(o.t=s,o.m+=l-c),i&&!$_(u)&&(u.t=i,u.m+=d-f,r=t)}return r}(t,a,t.parent.A||r[0])}function o(e){e._.x=e.z+e.parent.m,e.m+=e.parent.m}function s(e){e.x*=t,e.y=e.depth*n}return a.separation=function(t){return arguments.length?(e=t,a):e},a.size=function(e){return arguments.length?(r=!1,t=+e[0],n=+e[1],a):r?null:[t,n]},a.nodeSize=function(e){return arguments.length?(r=!0,t=+e[0],n=+e[1],a):r?[t,n]:null},a},tm=function(e,t,n,r,a){for(var i,o=e.children,s=-1,u=o.length,d=e.value&&(a-n)/e.value;++s<u;)(i=o[s]).x0=t,i.x1=r,i.y0=n,i.y1=n+=i.value*d},nm=(1+Math.sqrt(5))/2;function rm(e,t,n,r,a,i){for(var o,s,u,d,c,l,f,h,_,m,p,y=[],g=t.children,M=0,v=0,b=g.length,L=t.value;M<b;){u=a-n,d=i-r;do{c=g[v++].value}while(!c&&v<b);for(l=f=c,p=c*c*(m=Math.max(d/u,u/d)/(L*e)),_=Math.max(f/p,p/l);v<b;++v){if(c+=s=g[v].value,s<l&&(l=s),s>f&&(f=s),p=c*c*m,(h=Math.max(f/p,p/l))>_){c-=s;break}_=h}y.push(o={value:c,dice:u<d,children:g.slice(M,v)}),o.dice?F_(o,n,r,a,L?r+=d*c/L:i):tm(o,n,r,L?n+=u*c/L:a,i),L-=c,M=v}return y}var am=function e(t){function n(e,n,r,a,i){rm(t,e,n,r,a,i)}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(nm),im=function(){var e=am,t=!1,n=1,r=1,a=[0],i=A_,o=A_,s=A_,u=A_,d=A_;function c(e){return e.x0=e.y0=0,e.x1=n,e.y1=r,e.eachBefore(l),a=[0],t&&e.eachBefore(z_),e}function l(t){var n=a[t.depth],r=t.x0+n,c=t.y0+n,l=t.x1-n,f=t.y1-n;l<r&&(r=l=(r+l)/2),f<c&&(c=f=(c+f)/2),t.x0=r,t.y0=c,t.x1=l,t.y1=f,t.children&&(n=a[t.depth+1]=i(t)/2,r+=d(t)-n,c+=o(t)-n,(l-=s(t)-n)<r&&(r=l=(r+l)/2),(f-=u(t)-n)<c&&(c=f=(c+f)/2),e(t,r,c,l,f))}return c.round=function(e){return arguments.length?(t=!!e,c):t},c.size=function(e){return arguments.length?(n=+e[0],r=+e[1],c):[n,r]},c.tile=function(t){return arguments.length?(e=j_(t),c):e},c.padding=function(e){return arguments.length?c.paddingInner(e).paddingOuter(e):c.paddingInner()},c.paddingInner=function(e){return arguments.length?(i="function"==typeof e?e:E_(+e),c):i},c.paddingOuter=function(e){return arguments.length?c.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):c.paddingTop()},c.paddingTop=function(e){return arguments.length?(o="function"==typeof e?e:E_(+e),c):o},c.paddingRight=function(e){return arguments.length?(s="function"==typeof e?e:E_(+e),c):s},c.paddingBottom=function(e){return arguments.length?(u="function"==typeof e?e:E_(+e),c):u},c.paddingLeft=function(e){return arguments.length?(d="function"==typeof e?e:E_(+e),c):d},c},om=function(e,t,n,r,a){var i,o,s=e.children,u=s.length,d=new Array(u+1);for(d[0]=o=i=0;i<u;++i)d[i+1]=o+=s[i].value;!function e(t,n,r,a,i,o,u){if(t>=n-1){var c=s[t];return c.x0=a,c.y0=i,c.x1=o,void(c.y1=u)}var l=d[t],f=r/2+l,h=t+1,_=n-1;for(;h<_;){var m=h+_>>>1;d[m]<f?h=m+1:_=m}f-d[h-1]<d[h]-f&&t+1<h&&--h;var p=d[h]-l,y=r-p;if(o-a>u-i){var g=(a*y+o*p)/r;e(t,h,p,a,i,g,u),e(h,n,y,g,i,o,u)}else{var M=(i*y+u*p)/r;e(t,h,p,a,i,o,M),e(h,n,y,a,M,o,u)}}(0,u,e.value,t,n,r,a)},sm=function(e,t,n,r,a){(1&e.depth?tm:F_)(e,t,n,r,a)},um=function e(t){function n(e,n,r,a,i){if((o=e._squarify)&&o.ratio===t)for(var o,s,u,d,c,l=-1,f=o.length,h=e.value;++l<f;){for(u=(s=o[l]).children,d=s.value=0,c=u.length;d<c;++d)s.value+=u[d].value;s.dice?F_(s,n,r,a,r+=(i-r)*s.value/h):tm(s,n,r,n+=(a-n)*s.value/h,i),h-=s.value}else e._squarify=o=rm(t,e,n,r,a,i),o.ratio=t}return n.ratio=function(t){return e((t=+t)>1?t:1)},n}(nm),dm=function(e){for(var t,n=-1,r=e.length,a=e[r-1],i=0;++n<r;)t=a,a=e[n],i+=t[1]*a[0]-t[0]*a[1];return i/2},cm=function(e){for(var t,n,r=-1,a=e.length,i=0,o=0,s=e[a-1],u=0;++r<a;)t=s,s=e[r],u+=n=t[0]*s[1]-s[0]*t[1],i+=(t[0]+s[0])*n,o+=(t[1]+s[1])*n;return[i/(u*=3),o/u]},lm=function(e,t,n){return(t[0]-e[0])*(n[1]-e[1])-(t[1]-e[1])*(n[0]-e[0])};function fm(e,t){return e[0]-t[0]||e[1]-t[1]}function hm(e){for(var t=e.length,n=[0,1],r=2,a=2;a<t;++a){for(;r>1&&lm(e[n[r-2]],e[n[r-1]],e[a])<=0;)--r;n[r++]=a}return n.slice(0,r)}var _m=function(e){if((n=e.length)<3)return null;var t,n,r=new Array(n),a=new Array(n);for(t=0;t<n;++t)r[t]=[+e[t][0],+e[t][1],t];for(r.sort(fm),t=0;t<n;++t)a[t]=[r[t][0],-r[t][1]];var i=hm(r),o=hm(a),s=o[0]===i[0],u=o[o.length-1]===i[i.length-1],d=[];for(t=i.length-1;t>=0;--t)d.push(e[r[i[t]][2]]);for(t=+s;t<o.length-u;++t)d.push(e[r[o[t]][2]]);return d},mm=function(e,t){for(var n,r,a=e.length,i=e[a-1],o=t[0],s=t[1],u=i[0],d=i[1],c=!1,l=0;l<a;++l)n=(i=e[l])[0],(r=i[1])>s!=d>s&&o<(u-n)*(s-r)/(d-r)+n&&(c=!c),u=n,d=r;return c},pm=function(e){for(var t,n,r=-1,a=e.length,i=e[a-1],o=i[0],s=i[1],u=0;++r<a;)t=o,n=s,t-=o=(i=e[r])[0],n-=s=i[1],u+=Math.sqrt(t*t+n*n);return u},ym=function(){return Math.random()},gm=function e(t){function n(e,n){return e=null==e?0:+e,n=null==n?1:+n,1===arguments.length?(n=e,e=0):n-=e,function(){return t()*n+e}}return n.source=e,n}(ym),Mm=function e(t){function n(e,n){var r,a;return e=null==e?0:+e,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*t()-1,i=2*t()-1,a=r*r+i*i}while(!a||a>1);return e+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=e,n}(ym),vm=function e(t){function n(){var e=Mm.source(t).apply(this,arguments);return function(){return Math.exp(e())}}return n.source=e,n}(ym),bm=function e(t){function n(e){return function(){for(var n=0,r=0;r<e;++r)n+=t();return n}}return n.source=e,n}(ym),Lm=function e(t){function n(e){var n=bm.source(t)(e);return function(){return n()/e}}return n.source=e,n}(ym),Ym=function e(t){function n(e){return function(){return-Math.log(1-t())/e}}return n.source=e,n}(ym);function km(e,t){switch(arguments.length){case 0:break;case 1:this.range(e);break;default:this.range(t).domain(e)}return this}function wm(e,t){switch(arguments.length){case 0:break;case 1:this.interpolator(e);break;default:this.interpolator(t).domain(e)}return this}var Dm=Array.prototype,xm=Dm.map,Tm=Dm.slice,Sm={name:"implicit"};function Hm(){var e=$o(),t=[],n=[],r=Sm;function a(a){var i=a+"",o=e.get(i);if(!o){if(r!==Sm)return r;e.set(i,o=t.push(a))}return n[(o-1)%n.length]}return a.domain=function(n){if(!arguments.length)return t.slice();t=[],e=$o();for(var r,i,o=-1,s=n.length;++o<s;)e.has(i=(r=n[o])+"")||e.set(i,t.push(r));return a},a.range=function(e){return arguments.length?(n=Tm.call(e),a):n.slice()},a.unknown=function(e){return arguments.length?(r=e,a):r},a.copy=function(){return Hm(t,n).unknown(r)},km.apply(a,arguments),a}function jm(){var e,t,n=Hm().unknown(void 0),r=n.domain,a=n.range,i=[0,1],o=!1,s=0,u=0,d=.5;function c(){var n=r().length,c=i[1]<i[0],l=i[c-0],f=i[1-c];e=(f-l)/Math.max(1,n-s+2*u),o&&(e=Math.floor(e)),l+=(f-l-e*(n-s))*d,t=e*(1-s),o&&(l=Math.round(l),t=Math.round(t));var h=L(n).map((function(t){return l+e*t}));return a(c?h.reverse():h)}return delete n.unknown,n.domain=function(e){return arguments.length?(r(e),c()):r()},n.range=function(e){return arguments.length?(i=[+e[0],+e[1]],c()):i.slice()},n.rangeRound=function(e){return i=[+e[0],+e[1]],o=!0,c()},n.bandwidth=function(){return t},n.step=function(){return e},n.round=function(e){return arguments.length?(o=!!e,c()):o},n.padding=function(e){return arguments.length?(s=Math.min(1,u=+e),c()):s},n.paddingInner=function(e){return arguments.length?(s=Math.min(1,e),c()):s},n.paddingOuter=function(e){return arguments.length?(u=+e,c()):u},n.align=function(e){return arguments.length?(d=Math.max(0,Math.min(1,e)),c()):d},n.copy=function(){return jm(r(),i).round(o).paddingInner(s).paddingOuter(u).align(d)},km.apply(c(),arguments)}function Am(){return function e(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return e(n())},t}(jm.apply(null,arguments).paddingInner(1))}var Em=function(e){return function(){return e}},Pm=function(e){return+e},Cm=[0,1];function Om(e){return e}function Nm(e,t){return(t-=e=+e)?function(n){return(n-e)/t}:Em(isNaN(t)?NaN:.5)}function Wm(e){var t,n=e[0],r=e[e.length-1];return n>r&&(t=n,n=r,r=t),function(e){return Math.max(n,Math.min(r,e))}}function zm(e,t,n){var r=e[0],a=e[1],i=t[0],o=t[1];return a<r?(r=Nm(a,r),i=n(o,i)):(r=Nm(r,a),i=n(i,o)),function(e){return i(r(e))}}function Fm(e,t,n){var r=Math.min(e.length,t.length)-1,a=new Array(r),i=new Array(r),o=-1;for(e[r]<e[0]&&(e=e.slice().reverse(),t=t.slice().reverse());++o<r;)a[o]=Nm(e[o],e[o+1]),i[o]=n(t[o],t[o+1]);return function(t){var n=u(e,t,1,r)-1;return i[n](a[n](t))}}function Rm(e,t){return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown())}function Im(){var e,t,n,r,a,i,o=Cm,s=Cm,u=xr,d=Om;function c(){return r=Math.min(o.length,s.length)>2?Fm:zm,a=i=null,l}function l(t){return isNaN(t=+t)?n:(a||(a=r(o.map(e),s,u)))(e(d(t)))}return l.invert=function(n){return d(t((i||(i=r(s,o.map(e),gr)))(n)))},l.domain=function(e){return arguments.length?(o=xm.call(e,Pm),d===Om||(d=Wm(o)),c()):o.slice()},l.range=function(e){return arguments.length?(s=Tm.call(e),c()):s.slice()},l.rangeRound=function(e){return s=Tm.call(e),u=Hr,c()},l.clamp=function(e){return arguments.length?(d=e?Wm(o):Om,l):d!==Om},l.interpolate=function(e){return arguments.length?(u=e,c()):u},l.unknown=function(e){return arguments.length?(n=e,l):n},function(n,r){return e=n,t=r,c()}}function qm(e,t){return Im()(e,t)}var Um=function(e,t,n,r){var a,i=T(e,t,n);switch((r=zu(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(e),Math.abs(t));return null!=r.precision||isNaN(a=ed(i,o))||(r.precision=a),Uu(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=td(i,Math.max(Math.abs(e),Math.abs(t))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=Qu(i))||(r.precision=a-2*("%"===r.type))}return qu(r)};function Bm(e){var t=e.domain;return e.ticks=function(e){var n=t();return D(n[0],n[n.length-1],null==e?10:e)},e.tickFormat=function(e,n){var r=t();return Um(r[0],r[r.length-1],null==e?10:e,n)},e.nice=function(n){null==n&&(n=10);var r,a=t(),i=0,o=a.length-1,s=a[i],u=a[o];return u<s&&(r=s,s=u,u=r,r=i,i=o,o=r),(r=x(s,u,n))>0?r=x(s=Math.floor(s/r)*r,u=Math.ceil(u/r)*r,n):r<0&&(r=x(s=Math.ceil(s*r)/r,u=Math.floor(u*r)/r,n)),r>0?(a[i]=Math.floor(s/r)*r,a[o]=Math.ceil(u/r)*r,t(a)):r<0&&(a[i]=Math.ceil(s*r)/r,a[o]=Math.floor(u*r)/r,t(a)),e},e}function Jm(){var e=qm(Om,Om);return e.copy=function(){return Rm(e,Jm())},km.apply(e,arguments),Bm(e)}function Gm(e){var t;function n(e){return isNaN(e=+e)?t:e}return n.invert=n,n.domain=n.range=function(t){return arguments.length?(e=xm.call(t,Pm),n):e.slice()},n.unknown=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return Gm(e).unknown(t)},e=arguments.length?xm.call(e,Pm):[0,1],Bm(n)}var Vm=function(e,t){var n,r=0,a=(e=e.slice()).length-1,i=e[r],o=e[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),e[r]=t.floor(i),e[a]=t.ceil(o),e};function $m(e){return Math.log(e)}function Xm(e){return Math.exp(e)}function Zm(e){return-Math.log(-e)}function Km(e){return-Math.exp(-e)}function Qm(e){return isFinite(e)?+("1e"+e):e<0?0:e}function ep(e){return function(t){return-e(-t)}}function tp(e){var t,n,r=e($m,Xm),a=r.domain,i=10;function o(){return t=function(e){return e===Math.E?Math.log:10===e&&Math.log10||2===e&&Math.log2||(e=Math.log(e),function(t){return Math.log(t)/e})}(i),n=function(e){return 10===e?Qm:e===Math.E?Math.exp:function(t){return Math.pow(e,t)}}(i),a()[0]<0?(t=ep(t),n=ep(n),e(Zm,Km)):e($m,Xm),r}return r.base=function(e){return arguments.length?(i=+e,o()):i},r.domain=function(e){return arguments.length?(a(e),o()):a()},r.ticks=function(e){var r,o=a(),s=o[0],u=o[o.length-1];(r=u<s)&&(f=s,s=u,u=f);var d,c,l,f=t(s),h=t(u),_=null==e?10:+e,m=[];if(!(i%1)&&h-f<_){if(f=Math.round(f)-1,h=Math.round(h)+1,s>0){for(;f<h;++f)for(c=1,d=n(f);c<i;++c)if(!((l=d*c)<s)){if(l>u)break;m.push(l)}}else for(;f<h;++f)for(c=i-1,d=n(f);c>=1;--c)if(!((l=d*c)<s)){if(l>u)break;m.push(l)}}else m=D(f,h,Math.min(h-f,_)).map(n);return r?m.reverse():m},r.tickFormat=function(e,a){if(null==a&&(a=10===i?".0e":","),"function"!=typeof a&&(a=qu(a)),e===1/0)return a;null==e&&(e=10);var o=Math.max(1,i*e/r.ticks().length);return function(e){var r=e/n(Math.round(t(e)));return r*i<i-.5&&(r*=i),r<=o?a(e):""}},r.nice=function(){return a(Vm(a(),{floor:function(e){return n(Math.floor(t(e)))},ceil:function(e){return n(Math.ceil(t(e)))}}))},r}function np(){var e=tp(Im()).domain([1,10]);return e.copy=function(){return Rm(e,np()).base(e.base())},km.apply(e,arguments),e}function rp(e){return function(t){return Math.sign(t)*Math.log1p(Math.abs(t/e))}}function ap(e){return function(t){return Math.sign(t)*Math.expm1(Math.abs(t))*e}}function ip(e){var t=1,n=e(rp(t),ap(t));return n.constant=function(n){return arguments.length?e(rp(t=+n),ap(t)):t},Bm(n)}function op(){var e=ip(Im());return e.copy=function(){return Rm(e,op()).constant(e.constant())},km.apply(e,arguments)}function sp(e){return function(t){return t<0?-Math.pow(-t,e):Math.pow(t,e)}}function up(e){return e<0?-Math.sqrt(-e):Math.sqrt(e)}function dp(e){return e<0?-e*e:e*e}function cp(e){var t=e(Om,Om),n=1;function r(){return 1===n?e(Om,Om):.5===n?e(up,dp):e(sp(n),sp(1/n))}return t.exponent=function(e){return arguments.length?(n=+e,r()):n},Bm(t)}function lp(){var e=cp(Im());return e.copy=function(){return Rm(e,lp()).exponent(e.exponent())},km.apply(e,arguments),e}function fp(){return lp.apply(null,arguments).exponent(.5)}function hp(){var e,t=[],n=[],a=[];function i(){var e=0,r=Math.max(1,n.length);for(a=new Array(r-1);++e<r;)a[e-1]=j(t,e/r);return o}function o(t){return isNaN(t=+t)?e:n[u(a,t)]}return o.invertExtent=function(e){var r=n.indexOf(e);return r<0?[NaN,NaN]:[r>0?a[r-1]:t[0],r<a.length?a[r]:t[t.length-1]]},o.domain=function(e){if(!arguments.length)return t.slice();t=[];for(var n,a=0,o=e.length;a<o;++a)null==(n=e[a])||isNaN(n=+n)||t.push(n);return t.sort(r),i()},o.range=function(e){return arguments.length?(n=Tm.call(e),i()):n.slice()},o.unknown=function(t){return arguments.length?(e=t,o):e},o.quantiles=function(){return a.slice()},o.copy=function(){return hp().domain(t).range(n).unknown(e)},km.apply(o,arguments)}function _p(){var e,t=0,n=1,r=1,a=[.5],i=[0,1];function o(t){return t<=t?i[u(a,t,0,r)]:e}function s(){var e=-1;for(a=new Array(r);++e<r;)a[e]=((e+1)*n-(e-r)*t)/(r+1);return o}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],s()):[t,n]},o.range=function(e){return arguments.length?(r=(i=Tm.call(e)).length-1,s()):i.slice()},o.invertExtent=function(e){var o=i.indexOf(e);return o<0?[NaN,NaN]:o<1?[t,a[0]]:o>=r?[a[r-1],n]:[a[o-1],a[o]]},o.unknown=function(t){return arguments.length?(e=t,o):o},o.thresholds=function(){return a.slice()},o.copy=function(){return _p().domain([t,n]).range(i).unknown(e)},km.apply(Bm(o),arguments)}function mp(){var e,t=[.5],n=[0,1],r=1;function a(a){return a<=a?n[u(t,a,0,r)]:e}return a.domain=function(e){return arguments.length?(t=Tm.call(e),r=Math.min(t.length,n.length-1),a):t.slice()},a.range=function(e){return arguments.length?(n=Tm.call(e),r=Math.min(t.length,n.length-1),a):n.slice()},a.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},a.unknown=function(t){return arguments.length?(e=t,a):e},a.copy=function(){return mp().domain(t).range(n).unknown(e)},km.apply(a,arguments)}var pp=new Date,yp=new Date;function gp(e,t,n,r){function a(t){return e(t=new Date(+t)),t}return a.floor=a,a.ceil=function(n){return e(n=new Date(n-1)),t(n,1),e(n),n},a.round=function(e){var t=a(e),n=a.ceil(e);return e-t<n-e?t:n},a.offset=function(e,n){return t(e=new Date(+e),null==n?1:Math.floor(n)),e},a.range=function(n,r,i){var o,s=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return s;do{s.push(o=new Date(+n)),t(n,i),e(n)}while(o<n&&n<r);return s},a.filter=function(n){return gp((function(t){if(t>=t)for(;e(t),!n(t);)t.setTime(t-1)}),(function(e,r){if(e>=e)if(r<0)for(;++r<=0;)for(;t(e,-1),!n(e););else for(;--r>=0;)for(;t(e,1),!n(e););}))},n&&(a.count=function(t,r){return pp.setTime(+t),yp.setTime(+r),e(pp),e(yp),Math.floor(n(pp,yp))},a.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?a.filter(r?function(t){return r(t)%e==0}:function(t){return a.count(0,t)%e==0}):a:null}),a}var Mp=gp((function(){}),(function(e,t){e.setTime(+e+t)}),(function(e,t){return t-e}));Mp.every=function(e){return e=Math.floor(e),isFinite(e)&&e>0?e>1?gp((function(t){t.setTime(Math.floor(t/e)*e)}),(function(t,n){t.setTime(+t+n*e)}),(function(t,n){return(n-t)/e})):Mp:null};var vp=Mp,bp=Mp.range,Lp=6e4,Yp=6048e5,kp=gp((function(e){e.setTime(e-e.getMilliseconds())}),(function(e,t){e.setTime(+e+1e3*t)}),(function(e,t){return(t-e)/1e3}),(function(e){return e.getUTCSeconds()})),wp=kp,Dp=kp.range,xp=gp((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds())}),(function(e,t){e.setTime(+e+t*Lp)}),(function(e,t){return(t-e)/Lp}),(function(e){return e.getMinutes()})),Tp=xp,Sp=xp.range,Hp=gp((function(e){e.setTime(e-e.getMilliseconds()-1e3*e.getSeconds()-e.getMinutes()*Lp)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getHours()})),jp=Hp,Ap=Hp.range,Ep=gp((function(e){e.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Lp)/864e5}),(function(e){return e.getDate()-1})),Pp=Ep,Cp=Ep.range;function Op(e){return gp((function(t){t.setDate(t.getDate()-(t.getDay()+7-e)%7),t.setHours(0,0,0,0)}),(function(e,t){e.setDate(e.getDate()+7*t)}),(function(e,t){return(t-e-(t.getTimezoneOffset()-e.getTimezoneOffset())*Lp)/Yp}))}var Np=Op(0),Wp=Op(1),zp=Op(2),Fp=Op(3),Rp=Op(4),Ip=Op(5),qp=Op(6),Up=Np.range,Bp=Wp.range,Jp=zp.range,Gp=Fp.range,Vp=Rp.range,$p=Ip.range,Xp=qp.range,Zp=gp((function(e){e.setDate(1),e.setHours(0,0,0,0)}),(function(e,t){e.setMonth(e.getMonth()+t)}),(function(e,t){return t.getMonth()-e.getMonth()+12*(t.getFullYear()-e.getFullYear())}),(function(e){return e.getMonth()})),Kp=Zp,Qp=Zp.range,ey=gp((function(e){e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,t){e.setFullYear(e.getFullYear()+t)}),(function(e,t){return t.getFullYear()-e.getFullYear()}),(function(e){return e.getFullYear()}));ey.every=function(e){return isFinite(e=Math.floor(e))&&e>0?gp((function(t){t.setFullYear(Math.floor(t.getFullYear()/e)*e),t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n*e)})):null};var ty=ey,ny=ey.range,ry=gp((function(e){e.setUTCSeconds(0,0)}),(function(e,t){e.setTime(+e+t*Lp)}),(function(e,t){return(t-e)/Lp}),(function(e){return e.getUTCMinutes()})),ay=ry,iy=ry.range,oy=gp((function(e){e.setUTCMinutes(0,0,0)}),(function(e,t){e.setTime(+e+36e5*t)}),(function(e,t){return(t-e)/36e5}),(function(e){return e.getUTCHours()})),sy=oy,uy=oy.range,dy=gp((function(e){e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+t)}),(function(e,t){return(t-e)/864e5}),(function(e){return e.getUTCDate()-1})),cy=dy,ly=dy.range;function fy(e){return gp((function(t){t.setUTCDate(t.getUTCDate()-(t.getUTCDay()+7-e)%7),t.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCDate(e.getUTCDate()+7*t)}),(function(e,t){return(t-e)/Yp}))}var hy=fy(0),_y=fy(1),my=fy(2),py=fy(3),yy=fy(4),gy=fy(5),My=fy(6),vy=hy.range,by=_y.range,Ly=my.range,Yy=py.range,ky=yy.range,wy=gy.range,Dy=My.range,xy=gp((function(e){e.setUTCDate(1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCMonth(e.getUTCMonth()+t)}),(function(e,t){return t.getUTCMonth()-e.getUTCMonth()+12*(t.getUTCFullYear()-e.getUTCFullYear())}),(function(e){return e.getUTCMonth()})),Ty=xy,Sy=xy.range,Hy=gp((function(e){e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t)}),(function(e,t){return t.getUTCFullYear()-e.getUTCFullYear()}),(function(e){return e.getUTCFullYear()}));Hy.every=function(e){return isFinite(e=Math.floor(e))&&e>0?gp((function(t){t.setUTCFullYear(Math.floor(t.getUTCFullYear()/e)*e),t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n*e)})):null};var jy=Hy,Ay=Hy.range;function Ey(e){if(0<=e.y&&e.y<100){var t=new Date(-1,e.m,e.d,e.H,e.M,e.S,e.L);return t.setFullYear(e.y),t}return new Date(e.y,e.m,e.d,e.H,e.M,e.S,e.L)}function Py(e){if(0<=e.y&&e.y<100){var t=new Date(Date.UTC(-1,e.m,e.d,e.H,e.M,e.S,e.L));return t.setUTCFullYear(e.y),t}return new Date(Date.UTC(e.y,e.m,e.d,e.H,e.M,e.S,e.L))}function Cy(e){return{y:e,m:0,d:1,H:0,M:0,S:0,L:0}}function Oy(e){var t=e.dateTime,n=e.date,r=e.time,a=e.periods,i=e.days,o=e.shortDays,s=e.months,u=e.shortMonths,d=Vy(a),c=$y(a),l=Vy(i),f=$y(i),h=Vy(o),_=$y(o),m=Vy(s),p=$y(s),y=Vy(u),g=$y(u),M={a:function(e){return o[e.getDay()]},A:function(e){return i[e.getDay()]},b:function(e){return u[e.getMonth()]},B:function(e){return s[e.getMonth()]},c:null,d:mg,e:mg,f:vg,H:pg,I:yg,j:gg,L:Mg,m:bg,M:Lg,p:function(e){return a[+(e.getHours()>=12)]},Q:Xg,s:Zg,S:Yg,u:kg,U:wg,V:Dg,w:xg,W:Tg,x:null,X:null,y:Sg,Y:Hg,Z:jg,"%":$g},v={a:function(e){return o[e.getUTCDay()]},A:function(e){return i[e.getUTCDay()]},b:function(e){return u[e.getUTCMonth()]},B:function(e){return s[e.getUTCMonth()]},c:null,d:Ag,e:Ag,f:Ng,H:Eg,I:Pg,j:Cg,L:Og,m:Wg,M:zg,p:function(e){return a[+(e.getUTCHours()>=12)]},Q:Xg,s:Zg,S:Fg,u:Rg,U:Ig,V:qg,w:Ug,W:Bg,x:null,X:null,y:Jg,Y:Gg,Z:Vg,"%":$g},b={a:function(e,t,n){var r=h.exec(t.slice(n));return r?(e.w=_[r[0].toLowerCase()],n+r[0].length):-1},A:function(e,t,n){var r=l.exec(t.slice(n));return r?(e.w=f[r[0].toLowerCase()],n+r[0].length):-1},b:function(e,t,n){var r=y.exec(t.slice(n));return r?(e.m=g[r[0].toLowerCase()],n+r[0].length):-1},B:function(e,t,n){var r=m.exec(t.slice(n));return r?(e.m=p[r[0].toLowerCase()],n+r[0].length):-1},c:function(e,n,r){return k(e,t,n,r)},d:ig,e:ig,f:lg,H:sg,I:sg,j:og,L:cg,m:ag,M:ug,p:function(e,t,n){var r=d.exec(t.slice(n));return r?(e.p=c[r[0].toLowerCase()],n+r[0].length):-1},Q:hg,s:_g,S:dg,u:Zy,U:Ky,V:Qy,w:Xy,W:eg,x:function(e,t,r){return k(e,n,t,r)},X:function(e,t,n){return k(e,r,t,n)},y:ng,Y:tg,Z:rg,"%":fg};function L(e,t){return function(n){var r,a,i,o=[],s=-1,u=0,d=e.length;for(n instanceof Date||(n=new Date(+n));++s<d;)37===e.charCodeAt(s)&&(o.push(e.slice(u,s)),null!=(a=Iy[r=e.charAt(++s)])?r=e.charAt(++s):a="e"===r?" ":"0",(i=t[r])&&(r=i(n,a)),o.push(r),u=s+1);return o.push(e.slice(u,s)),o.join("")}}function Y(e,t){return function(n){var r,a,i=Cy(1900);if(k(i,e,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Py(Cy(i.y))).getUTCDay(),r=a>4||0===a?_y.ceil(r):_y(r),r=cy.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=t(Cy(i.y))).getDay(),r=a>4||0===a?Wp.ceil(r):Wp(r),r=Pp.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Py(Cy(i.y)).getUTCDay():t(Cy(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Py(i)):t(i)}}function k(e,t,n,r){for(var a,i,o=0,s=t.length,u=n.length;o<s;){if(r>=u)return-1;if(37===(a=t.charCodeAt(o++))){if(a=t.charAt(o++),!(i=b[a in Iy?t.charAt(o++):a])||(r=i(e,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return M.x=L(n,M),M.X=L(r,M),M.c=L(t,M),v.x=L(n,v),v.X=L(r,v),v.c=L(t,v),{format:function(e){var t=L(e+="",M);return t.toString=function(){return e},t},parse:function(e){var t=Y(e+="",Ey);return t.toString=function(){return e},t},utcFormat:function(e){var t=L(e+="",v);return t.toString=function(){return e},t},utcParse:function(e){var t=Y(e,Py);return t.toString=function(){return e},t}}}var Ny,Wy,zy,Fy,Ry,Iy={"-":"",_:" ",0:"0"},qy=/^\s*\d+/,Uy=/^%/,By=/[\\^$*+?|[\]().{}]/g;function Jy(e,t,n){var r=e<0?"-":"",a=(r?-e:e)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(t)+a:a)}function Gy(e){return e.replace(By,"\\$&")}function Vy(e){return new RegExp("^(?:"+e.map(Gy).join("|")+")","i")}function $y(e){for(var t={},n=-1,r=e.length;++n<r;)t[e[n].toLowerCase()]=n;return t}function Xy(e,t,n){var r=qy.exec(t.slice(n,n+1));return r?(e.w=+r[0],n+r[0].length):-1}function Zy(e,t,n){var r=qy.exec(t.slice(n,n+1));return r?(e.u=+r[0],n+r[0].length):-1}function Ky(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.U=+r[0],n+r[0].length):-1}function Qy(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.V=+r[0],n+r[0].length):-1}function eg(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.W=+r[0],n+r[0].length):-1}function tg(e,t,n){var r=qy.exec(t.slice(n,n+4));return r?(e.y=+r[0],n+r[0].length):-1}function ng(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function rg(e,t,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(t.slice(n,n+6));return r?(e.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function ag(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.m=r[0]-1,n+r[0].length):-1}function ig(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.d=+r[0],n+r[0].length):-1}function og(e,t,n){var r=qy.exec(t.slice(n,n+3));return r?(e.m=0,e.d=+r[0],n+r[0].length):-1}function sg(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.H=+r[0],n+r[0].length):-1}function ug(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.M=+r[0],n+r[0].length):-1}function dg(e,t,n){var r=qy.exec(t.slice(n,n+2));return r?(e.S=+r[0],n+r[0].length):-1}function cg(e,t,n){var r=qy.exec(t.slice(n,n+3));return r?(e.L=+r[0],n+r[0].length):-1}function lg(e,t,n){var r=qy.exec(t.slice(n,n+6));return r?(e.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function fg(e,t,n){var r=Uy.exec(t.slice(n,n+1));return r?n+r[0].length:-1}function hg(e,t,n){var r=qy.exec(t.slice(n));return r?(e.Q=+r[0],n+r[0].length):-1}function _g(e,t,n){var r=qy.exec(t.slice(n));return r?(e.Q=1e3*+r[0],n+r[0].length):-1}function mg(e,t){return Jy(e.getDate(),t,2)}function pg(e,t){return Jy(e.getHours(),t,2)}function yg(e,t){return Jy(e.getHours()%12||12,t,2)}function gg(e,t){return Jy(1+Pp.count(ty(e),e),t,3)}function Mg(e,t){return Jy(e.getMilliseconds(),t,3)}function vg(e,t){return Mg(e,t)+"000"}function bg(e,t){return Jy(e.getMonth()+1,t,2)}function Lg(e,t){return Jy(e.getMinutes(),t,2)}function Yg(e,t){return Jy(e.getSeconds(),t,2)}function kg(e){var t=e.getDay();return 0===t?7:t}function wg(e,t){return Jy(Np.count(ty(e),e),t,2)}function Dg(e,t){var n=e.getDay();return e=n>=4||0===n?Rp(e):Rp.ceil(e),Jy(Rp.count(ty(e),e)+(4===ty(e).getDay()),t,2)}function xg(e){return e.getDay()}function Tg(e,t){return Jy(Wp.count(ty(e),e),t,2)}function Sg(e,t){return Jy(e.getFullYear()%100,t,2)}function Hg(e,t){return Jy(e.getFullYear()%1e4,t,4)}function jg(e){var t=e.getTimezoneOffset();return(t>0?"-":(t*=-1,"+"))+Jy(t/60|0,"0",2)+Jy(t%60,"0",2)}function Ag(e,t){return Jy(e.getUTCDate(),t,2)}function Eg(e,t){return Jy(e.getUTCHours(),t,2)}function Pg(e,t){return Jy(e.getUTCHours()%12||12,t,2)}function Cg(e,t){return Jy(1+cy.count(jy(e),e),t,3)}function Og(e,t){return Jy(e.getUTCMilliseconds(),t,3)}function Ng(e,t){return Og(e,t)+"000"}function Wg(e,t){return Jy(e.getUTCMonth()+1,t,2)}function zg(e,t){return Jy(e.getUTCMinutes(),t,2)}function Fg(e,t){return Jy(e.getUTCSeconds(),t,2)}function Rg(e){var t=e.getUTCDay();return 0===t?7:t}function Ig(e,t){return Jy(hy.count(jy(e),e),t,2)}function qg(e,t){var n=e.getUTCDay();return e=n>=4||0===n?yy(e):yy.ceil(e),Jy(yy.count(jy(e),e)+(4===jy(e).getUTCDay()),t,2)}function Ug(e){return e.getUTCDay()}function Bg(e,t){return Jy(_y.count(jy(e),e),t,2)}function Jg(e,t){return Jy(e.getUTCFullYear()%100,t,2)}function Gg(e,t){return Jy(e.getUTCFullYear()%1e4,t,4)}function Vg(){return"+0000"}function $g(){return"%"}function Xg(e){return+e}function Zg(e){return Math.floor(+e/1e3)}function Kg(e){return Ny=Oy(e),Wy=Ny.format,zy=Ny.parse,Fy=Ny.utcFormat,Ry=Ny.utcParse,Ny}Kg({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Qg=Date.prototype.toISOString?function(e){return e.toISOString()}:Fy("%Y-%m-%dT%H:%M:%S.%LZ");var eM=+new Date("2000-01-01T00:00:00.000Z")?function(e){var t=new Date(e);return isNaN(t)?null:t}:Ry("%Y-%m-%dT%H:%M:%S.%LZ"),tM=1e3,nM=60*tM,rM=60*nM,aM=24*rM,iM=7*aM,oM=30*aM,sM=365*aM;function uM(e){return new Date(e)}function dM(e){return e instanceof Date?+e:+new Date(+e)}function cM(e,t,n,r,i,o,s,u,d){var c=qm(Om,Om),l=c.invert,f=c.domain,h=d(".%L"),_=d(":%S"),m=d("%I:%M"),p=d("%I %p"),y=d("%a %d"),g=d("%b %d"),M=d("%B"),v=d("%Y"),b=[[s,1,tM],[s,5,5*tM],[s,15,15*tM],[s,30,30*tM],[o,1,nM],[o,5,5*nM],[o,15,15*nM],[o,30,30*nM],[i,1,rM],[i,3,3*rM],[i,6,6*rM],[i,12,12*rM],[r,1,aM],[r,2,2*aM],[n,1,iM],[t,1,oM],[t,3,3*oM],[e,1,sM]];function L(a){return(s(a)<a?h:o(a)<a?_:i(a)<a?m:r(a)<a?p:t(a)<a?n(a)<a?y:g:e(a)<a?M:v)(a)}function Y(t,n,r,i){if(null==t&&(t=10),"number"==typeof t){var o=Math.abs(r-n)/t,s=a((function(e){return e[2]})).right(b,o);s===b.length?(i=T(n/sM,r/sM,t),t=e):s?(i=(s=b[o/b[s-1][2]<b[s][2]/o?s-1:s])[1],t=s[0]):(i=Math.max(T(n,r,t),1),t=u)}return null==i?t:t.every(i)}return c.invert=function(e){return new Date(l(e))},c.domain=function(e){return arguments.length?f(xm.call(e,dM)):f().map(uM)},c.ticks=function(e,t){var n,r=f(),a=r[0],i=r[r.length-1],o=i<a;return o&&(n=a,a=i,i=n),n=(n=Y(e,a,i,t))?n.range(a,i+1):[],o?n.reverse():n},c.tickFormat=function(e,t){return null==t?L:d(t)},c.nice=function(e,t){var n=f();return(e=Y(e,n[0],n[n.length-1],t))?f(Vm(n,e)):c},c.copy=function(){return Rm(c,cM(e,t,n,r,i,o,s,u,d))},c}var lM=function(){return km.apply(cM(ty,Kp,Np,Pp,jp,Tp,wp,vp,Wy).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)},fM=function(){return km.apply(cM(jy,Ty,hy,cy,sy,ay,wp,vp,Fy).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)]),arguments)};function hM(){var e,t,n,r,a,i=0,o=1,s=Om,u=!1;function d(t){return isNaN(t=+t)?a:s(0===n?.5:(t=(r(t)-e)*n,u?Math.max(0,Math.min(1,t)):t))}return d.domain=function(a){return arguments.length?(e=r(i=+a[0]),t=r(o=+a[1]),n=e===t?0:1/(t-e),d):[i,o]},d.clamp=function(e){return arguments.length?(u=!!e,d):u},d.interpolator=function(e){return arguments.length?(s=e,d):s},d.unknown=function(e){return arguments.length?(a=e,d):a},function(a){return r=a,e=a(i),t=a(o),n=e===t?0:1/(t-e),d}}function _M(e,t){return t.domain(e.domain()).interpolator(e.interpolator()).clamp(e.clamp()).unknown(e.unknown())}function mM(){var e=Bm(hM()(Om));return e.copy=function(){return _M(e,mM())},wm.apply(e,arguments)}function pM(){var e=tp(hM()).domain([1,10]);return e.copy=function(){return _M(e,pM()).base(e.base())},wm.apply(e,arguments)}function yM(){var e=ip(hM());return e.copy=function(){return _M(e,yM()).constant(e.constant())},wm.apply(e,arguments)}function gM(){var e=cp(hM());return e.copy=function(){return _M(e,gM()).exponent(e.exponent())},wm.apply(e,arguments)}function MM(){return gM.apply(null,arguments).exponent(.5)}function vM(){var e=[],t=Om;function n(n){if(!isNaN(n=+n))return t((u(e,n)-1)/(e.length-1))}return n.domain=function(t){if(!arguments.length)return e.slice();e=[];for(var a,i=0,o=t.length;i<o;++i)null==(a=t[i])||isNaN(a=+a)||e.push(a);return e.sort(r),n},n.interpolator=function(e){return arguments.length?(t=e,n):t},n.copy=function(){return vM(t).domain(e)},wm.apply(n,arguments)}function bM(){var e,t,n,r,a,i,o,s=0,u=.5,d=1,c=Om,l=!1;function f(e){return isNaN(e=+e)?o:(e=.5+((e=+i(e))-t)*(e<t?r:a),c(l?Math.max(0,Math.min(1,e)):e))}return f.domain=function(o){return arguments.length?(e=i(s=+o[0]),t=i(u=+o[1]),n=i(d=+o[2]),r=e===t?0:.5/(t-e),a=t===n?0:.5/(n-t),f):[s,u,d]},f.clamp=function(e){return arguments.length?(l=!!e,f):l},f.interpolator=function(e){return arguments.length?(c=e,f):c},f.unknown=function(e){return arguments.length?(o=e,f):o},function(o){return i=o,e=o(s),t=o(u),n=o(d),r=e===t?0:.5/(t-e),a=t===n?0:.5/(n-t),f}}function LM(){var e=Bm(bM()(Om));return e.copy=function(){return _M(e,LM())},wm.apply(e,arguments)}function YM(){var e=tp(bM()).domain([.1,1,10]);return e.copy=function(){return _M(e,YM()).base(e.base())},wm.apply(e,arguments)}function kM(){var e=ip(bM());return e.copy=function(){return _M(e,kM()).constant(e.constant())},wm.apply(e,arguments)}function wM(){var e=cp(bM());return e.copy=function(){return _M(e,wM()).exponent(e.exponent())},wm.apply(e,arguments)}function DM(){return wM.apply(null,arguments).exponent(.5)}var xM=function(e){for(var t=e.length/6|0,n=new Array(t),r=0;r<t;)n[r]="#"+e.slice(6*r,6*++r);return n},TM=xM("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),SM=xM("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),HM=xM("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),jM=xM("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),AM=xM("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),EM=xM("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),PM=xM("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),CM=xM("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),OM=xM("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),NM=xM("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab"),WM=function(e){return _r(e[e.length-1])},zM=new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(xM),FM=WM(zM),RM=new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(xM),IM=WM(RM),qM=new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(xM),UM=WM(qM),BM=new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(xM),JM=WM(BM),GM=new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(xM),VM=WM(GM),$M=new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(xM),XM=WM($M),ZM=new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(xM),KM=WM(ZM),QM=new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(xM),ev=WM(QM),tv=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(xM),nv=WM(tv),rv=new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(xM),av=WM(rv),iv=new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(xM),ov=WM(iv),sv=new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(xM),uv=WM(sv),dv=new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(xM),cv=WM(dv),lv=new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(xM),fv=WM(lv),hv=new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(xM),_v=WM(hv),mv=new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(xM),pv=WM(mv),yv=new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(xM),gv=WM(yv),Mv=new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(xM),vv=WM(Mv),bv=new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(xM),Lv=WM(bv),Yv=new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(xM),kv=WM(Yv),wv=new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(xM),Dv=WM(wv),xv=new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(xM),Tv=WM(xv),Sv=new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(xM),Hv=WM(Sv),jv=new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(xM),Av=WM(jv),Ev=new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(xM),Pv=WM(Ev),Cv=new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(xM),Ov=WM(Cv),Nv=new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(xM),Wv=WM(Nv),zv=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(-4.54-e*(35.34-e*(2381.73-e*(6402.7-e*(7024.72-2710.57*e)))))))+", "+Math.max(0,Math.min(255,Math.round(32.49+e*(170.73+e*(52.82-e*(131.46-e*(176.58-67.37*e)))))))+", "+Math.max(0,Math.min(255,Math.round(81.24+e*(442.36-e*(2482.43-e*(6167.24-e*(6614.94-2475.67*e)))))))+")"},Fv=$r(nr(300,.5,0),nr(-240,.5,1)),Rv=$r(nr(-100,.75,.35),nr(80,1.5,.8)),Iv=$r(nr(260,.75,.35),nr(80,1.5,.8)),qv=nr(),Uv=function(e){(e<0||e>1)&&(e-=Math.floor(e));var t=Math.abs(e-.5);return qv.h=360*e-100,qv.s=1.5-1.5*t,qv.l=.8-.9*t,qv+""},Bv=gn(),Jv=Math.PI/3,Gv=2*Math.PI/3,Vv=function(e){var t;return e=(.5-e)*Math.PI,Bv.r=255*(t=Math.sin(e))*t,Bv.g=255*(t=Math.sin(e+Jv))*t,Bv.b=255*(t=Math.sin(e+Gv))*t,Bv+""},$v=function(e){return e=Math.max(0,Math.min(1,e)),"rgb("+Math.max(0,Math.min(255,Math.round(34.61+e*(1172.33-e*(10793.56-e*(33300.12-e*(38394.49-14825.05*e)))))))+", "+Math.max(0,Math.min(255,Math.round(23.31+e*(557.33+e*(1225.33-e*(3574.96-e*(1073.77+707.56*e)))))))+", "+Math.max(0,Math.min(255,Math.round(27.2+e*(3211.1-e*(15327.97-e*(27814-e*(22569.18-6838.66*e)))))))+")"};function Xv(e){var t=e.length;return function(n){return e[Math.max(0,Math.min(t-1,Math.floor(n*t)))]}}var Zv=Xv(xM("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Kv=Xv(xM("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Qv=Xv(xM("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),eb=Xv(xM("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),tb=function(e){return function(){return e}},nb=Math.abs,rb=Math.atan2,ab=Math.cos,ib=Math.max,ob=Math.min,sb=Math.sin,ub=Math.sqrt,db=1e-12,cb=Math.PI,lb=cb/2,fb=2*cb;function hb(e){return e>=1?lb:e<=-1?-lb:Math.asin(e)}function _b(e){return e.innerRadius}function mb(e){return e.outerRadius}function pb(e){return e.startAngle}function yb(e){return e.endAngle}function gb(e){return e&&e.padAngle}function Mb(e,t,n,r,a,i,o){var s=e-n,u=t-r,d=(o?i:-i)/ub(s*s+u*u),c=d*u,l=-d*s,f=e+c,h=t+l,_=n+c,m=r+l,p=(f+_)/2,y=(h+m)/2,g=_-f,M=m-h,v=g*g+M*M,b=a-i,L=f*m-_*h,Y=(M<0?-1:1)*ub(ib(0,b*b*v-L*L)),k=(L*M-g*Y)/v,w=(-L*g-M*Y)/v,D=(L*M+g*Y)/v,x=(-L*g+M*Y)/v,T=k-p,S=w-y,H=D-p,j=x-y;return T*T+S*S>H*H+j*j&&(k=D,w=x),{cx:k,cy:w,x01:-c,y01:-l,x11:k*(a/b-1),y11:w*(a/b-1)}}var vb=function(){var e=_b,t=mb,n=tb(0),r=null,a=pb,i=yb,o=gb,s=null;function u(){var u,d,c,l=+e.apply(this,arguments),f=+t.apply(this,arguments),h=a.apply(this,arguments)-lb,_=i.apply(this,arguments)-lb,m=nb(_-h),p=_>h;if(s||(s=u=Fo()),f<l&&(d=f,f=l,l=d),f>db)if(m>fb-db)s.moveTo(f*ab(h),f*sb(h)),s.arc(0,0,f,h,_,!p),l>db&&(s.moveTo(l*ab(_),l*sb(_)),s.arc(0,0,l,_,h,p));else{var y,g,M=h,v=_,b=h,L=_,Y=m,k=m,w=o.apply(this,arguments)/2,D=w>db&&(r?+r.apply(this,arguments):ub(l*l+f*f)),x=ob(nb(f-l)/2,+n.apply(this,arguments)),T=x,S=x;if(D>db){var H=hb(D/l*sb(w)),j=hb(D/f*sb(w));(Y-=2*H)>db?(b+=H*=p?1:-1,L-=H):(Y=0,b=L=(h+_)/2),(k-=2*j)>db?(M+=j*=p?1:-1,v-=j):(k=0,M=v=(h+_)/2)}var A=f*ab(M),E=f*sb(M),P=l*ab(L),C=l*sb(L);if(x>db){var O,N=f*ab(v),W=f*sb(v),z=l*ab(b),F=l*sb(b);if(m<cb&&(O=function(e,t,n,r,a,i,o,s){var u=n-e,d=r-t,c=o-a,l=s-i,f=l*u-c*d;if(!(f*f<db))return[e+(f=(c*(t-i)-l*(e-a))/f)*u,t+f*d]}(A,E,z,F,N,W,P,C))){var R=A-O[0],I=E-O[1],q=N-O[0],U=W-O[1],B=1/sb(((c=(R*q+I*U)/(ub(R*R+I*I)*ub(q*q+U*U)))>1?0:c<-1?cb:Math.acos(c))/2),J=ub(O[0]*O[0]+O[1]*O[1]);T=ob(x,(l-J)/(B-1)),S=ob(x,(f-J)/(B+1))}}k>db?S>db?(y=Mb(z,F,A,E,f,S,p),g=Mb(N,W,P,C,f,S,p),s.moveTo(y.cx+y.x01,y.cy+y.y01),S<x?s.arc(y.cx,y.cy,S,rb(y.y01,y.x01),rb(g.y01,g.x01),!p):(s.arc(y.cx,y.cy,S,rb(y.y01,y.x01),rb(y.y11,y.x11),!p),s.arc(0,0,f,rb(y.cy+y.y11,y.cx+y.x11),rb(g.cy+g.y11,g.cx+g.x11),!p),s.arc(g.cx,g.cy,S,rb(g.y11,g.x11),rb(g.y01,g.x01),!p))):(s.moveTo(A,E),s.arc(0,0,f,M,v,!p)):s.moveTo(A,E),l>db&&Y>db?T>db?(y=Mb(P,C,N,W,l,-T,p),g=Mb(A,E,z,F,l,-T,p),s.lineTo(y.cx+y.x01,y.cy+y.y01),T<x?s.arc(y.cx,y.cy,T,rb(y.y01,y.x01),rb(g.y01,g.x01),!p):(s.arc(y.cx,y.cy,T,rb(y.y01,y.x01),rb(y.y11,y.x11),!p),s.arc(0,0,l,rb(y.cy+y.y11,y.cx+y.x11),rb(g.cy+g.y11,g.cx+g.x11),p),s.arc(g.cx,g.cy,T,rb(g.y11,g.x11),rb(g.y01,g.x01),!p))):s.arc(0,0,l,L,b,p):s.lineTo(P,C)}else s.moveTo(0,0);if(s.closePath(),u)return s=null,u+""||null}return u.centroid=function(){var n=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-cb/2;return[ab(r)*n,sb(r)*n]},u.innerRadius=function(t){return arguments.length?(e="function"==typeof t?t:tb(+t),u):e},u.outerRadius=function(e){return arguments.length?(t="function"==typeof e?e:tb(+e),u):t},u.cornerRadius=function(e){return arguments.length?(n="function"==typeof e?e:tb(+e),u):n},u.padRadius=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:tb(+e),u):r},u.startAngle=function(e){return arguments.length?(a="function"==typeof e?e:tb(+e),u):a},u.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:tb(+e),u):i},u.padAngle=function(e){return arguments.length?(o="function"==typeof e?e:tb(+e),u):o},u.context=function(e){return arguments.length?(s=null==e?null:e,u):s},u};function bb(e){this._context=e}bb.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}};var Lb=function(e){return new bb(e)};function Yb(e){return e[0]}function kb(e){return e[1]}var wb=function(){var e=Yb,t=kb,n=tb(!0),r=null,a=Lb,i=null;function o(o){var s,u,d,c=o.length,l=!1;for(null==r&&(i=a(d=Fo())),s=0;s<=c;++s)!(s<c&&n(u=o[s],s,o))===l&&((l=!l)?i.lineStart():i.lineEnd()),l&&i.point(+e(u,s,o),+t(u,s,o));if(d)return i=null,d+""||null}return o.x=function(t){return arguments.length?(e="function"==typeof t?t:tb(+t),o):e},o.y=function(e){return arguments.length?(t="function"==typeof e?e:tb(+e),o):t},o.defined=function(e){return arguments.length?(n="function"==typeof e?e:tb(!!e),o):n},o.curve=function(e){return arguments.length?(a=e,null!=r&&(i=a(r)),o):a},o.context=function(e){return arguments.length?(null==e?r=i=null:i=a(r=e),o):r},o},Db=function(){var e=Yb,t=null,n=tb(0),r=kb,a=tb(!0),i=null,o=Lb,s=null;function u(u){var d,c,l,f,h,_=u.length,m=!1,p=new Array(_),y=new Array(_);for(null==i&&(s=o(h=Fo())),d=0;d<=_;++d){if(!(d<_&&a(f=u[d],d,u))===m)if(m=!m)c=d,s.areaStart(),s.lineStart();else{for(s.lineEnd(),s.lineStart(),l=d-1;l>=c;--l)s.point(p[l],y[l]);s.lineEnd(),s.areaEnd()}m&&(p[d]=+e(f,d,u),y[d]=+n(f,d,u),s.point(t?+t(f,d,u):p[d],r?+r(f,d,u):y[d]))}if(h)return s=null,h+""||null}function d(){return wb().defined(a).curve(o).context(i)}return u.x=function(n){return arguments.length?(e="function"==typeof n?n:tb(+n),t=null,u):e},u.x0=function(t){return arguments.length?(e="function"==typeof t?t:tb(+t),u):e},u.x1=function(e){return arguments.length?(t=null==e?null:"function"==typeof e?e:tb(+e),u):t},u.y=function(e){return arguments.length?(n="function"==typeof e?e:tb(+e),r=null,u):n},u.y0=function(e){return arguments.length?(n="function"==typeof e?e:tb(+e),u):n},u.y1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:tb(+e),u):r},u.lineX0=u.lineY0=function(){return d().x(e).y(n)},u.lineY1=function(){return d().x(e).y(r)},u.lineX1=function(){return d().x(t).y(n)},u.defined=function(e){return arguments.length?(a="function"==typeof e?e:tb(!!e),u):a},u.curve=function(e){return arguments.length?(o=e,null!=i&&(s=o(i)),u):o},u.context=function(e){return arguments.length?(null==e?i=s=null:s=o(i=e),u):i},u},xb=function(e,t){return t<e?-1:t>e?1:t>=e?0:NaN},Tb=function(e){return e},Sb=function(){var e=Tb,t=xb,n=null,r=tb(0),a=tb(fb),i=tb(0);function o(o){var s,u,d,c,l,f=o.length,h=0,_=new Array(f),m=new Array(f),p=+r.apply(this,arguments),y=Math.min(fb,Math.max(-fb,a.apply(this,arguments)-p)),g=Math.min(Math.abs(y)/f,i.apply(this,arguments)),M=g*(y<0?-1:1);for(s=0;s<f;++s)(l=m[_[s]=s]=+e(o[s],s,o))>0&&(h+=l);for(null!=t?_.sort((function(e,n){return t(m[e],m[n])})):null!=n&&_.sort((function(e,t){return n(o[e],o[t])})),s=0,d=h?(y-f*M)/h:0;s<f;++s,p=c)u=_[s],c=p+((l=m[u])>0?l*d:0)+M,m[u]={data:o[u],index:s,value:l,startAngle:p,endAngle:c,padAngle:g};return m}return o.value=function(t){return arguments.length?(e="function"==typeof t?t:tb(+t),o):e},o.sortValues=function(e){return arguments.length?(t=e,n=null,o):t},o.sort=function(e){return arguments.length?(n=e,t=null,o):n},o.startAngle=function(e){return arguments.length?(r="function"==typeof e?e:tb(+e),o):r},o.endAngle=function(e){return arguments.length?(a="function"==typeof e?e:tb(+e),o):a},o.padAngle=function(e){return arguments.length?(i="function"==typeof e?e:tb(+e),o):i},o},Hb=Ab(Lb);function jb(e){this._curve=e}function Ab(e){function t(t){return new jb(e(t))}return t._curve=e,t}function Eb(e){var t=e.curve;return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e.curve=function(e){return arguments.length?t(Ab(e)):t()._curve},e}jb.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(e,t){this._curve.point(t*Math.sin(e),t*-Math.cos(e))}};var Pb=function(){return Eb(wb().curve(Hb))},Cb=function(){var e=Db().curve(Hb),t=e.curve,n=e.lineX0,r=e.lineX1,a=e.lineY0,i=e.lineY1;return e.angle=e.x,delete e.x,e.startAngle=e.x0,delete e.x0,e.endAngle=e.x1,delete e.x1,e.radius=e.y,delete e.y,e.innerRadius=e.y0,delete e.y0,e.outerRadius=e.y1,delete e.y1,e.lineStartAngle=function(){return Eb(n())},delete e.lineX0,e.lineEndAngle=function(){return Eb(r())},delete e.lineX1,e.lineInnerRadius=function(){return Eb(a())},delete e.lineY0,e.lineOuterRadius=function(){return Eb(i())},delete e.lineY1,e.curve=function(e){return arguments.length?t(Ab(e)):t()._curve},e},Ob=function(e,t){return[(t=+t)*Math.cos(e-=Math.PI/2),t*Math.sin(e)]},Nb=Array.prototype.slice;function Wb(e){return e.source}function zb(e){return e.target}function Fb(e){var t=Wb,n=zb,r=Yb,a=kb,i=null;function o(){var o,s=Nb.call(arguments),u=t.apply(this,s),d=n.apply(this,s);if(i||(i=o=Fo()),e(i,+r.apply(this,(s[0]=u,s)),+a.apply(this,s),+r.apply(this,(s[0]=d,s)),+a.apply(this,s)),o)return i=null,o+""||null}return o.source=function(e){return arguments.length?(t=e,o):t},o.target=function(e){return arguments.length?(n=e,o):n},o.x=function(e){return arguments.length?(r="function"==typeof e?e:tb(+e),o):r},o.y=function(e){return arguments.length?(a="function"==typeof e?e:tb(+e),o):a},o.context=function(e){return arguments.length?(i=null==e?null:e,o):i},o}function Rb(e,t,n,r,a){e.moveTo(t,n),e.bezierCurveTo(t=(t+r)/2,n,t,a,r,a)}function Ib(e,t,n,r,a){e.moveTo(t,n),e.bezierCurveTo(t,n=(n+a)/2,r,n,r,a)}function qb(e,t,n,r,a){var i=Ob(t,n),o=Ob(t,n=(n+a)/2),s=Ob(r,n),u=Ob(r,a);e.moveTo(i[0],i[1]),e.bezierCurveTo(o[0],o[1],s[0],s[1],u[0],u[1])}function Ub(){return Fb(Rb)}function Bb(){return Fb(Ib)}function Jb(){var e=Fb(qb);return e.angle=e.x,delete e.x,e.radius=e.y,delete e.y,e}var Gb={draw:function(e,t){var n=Math.sqrt(t/cb);e.moveTo(n,0),e.arc(0,0,n,0,fb)}},Vb={draw:function(e,t){var n=Math.sqrt(t/5)/2;e.moveTo(-3*n,-n),e.lineTo(-n,-n),e.lineTo(-n,-3*n),e.lineTo(n,-3*n),e.lineTo(n,-n),e.lineTo(3*n,-n),e.lineTo(3*n,n),e.lineTo(n,n),e.lineTo(n,3*n),e.lineTo(-n,3*n),e.lineTo(-n,n),e.lineTo(-3*n,n),e.closePath()}},$b=Math.sqrt(1/3),Xb=2*$b,Zb={draw:function(e,t){var n=Math.sqrt(t/Xb),r=n*$b;e.moveTo(0,-n),e.lineTo(r,0),e.lineTo(0,n),e.lineTo(-r,0),e.closePath()}},Kb=Math.sin(cb/10)/Math.sin(7*cb/10),Qb=Math.sin(fb/10)*Kb,eL=-Math.cos(fb/10)*Kb,tL={draw:function(e,t){var n=Math.sqrt(.8908130915292852*t),r=Qb*n,a=eL*n;e.moveTo(0,-n),e.lineTo(r,a);for(var i=1;i<5;++i){var o=fb*i/5,s=Math.cos(o),u=Math.sin(o);e.lineTo(u*n,-s*n),e.lineTo(s*r-u*a,u*r+s*a)}e.closePath()}},nL={draw:function(e,t){var n=Math.sqrt(t),r=-n/2;e.rect(r,r,n,n)}},rL=Math.sqrt(3),aL={draw:function(e,t){var n=-Math.sqrt(t/(3*rL));e.moveTo(0,2*n),e.lineTo(-rL*n,-n),e.lineTo(rL*n,-n),e.closePath()}},iL=Math.sqrt(3)/2,oL=1/Math.sqrt(12),sL=3*(oL/2+1),uL={draw:function(e,t){var n=Math.sqrt(t/sL),r=n/2,a=n*oL,i=r,o=n*oL+n,s=-i,u=o;e.moveTo(r,a),e.lineTo(i,o),e.lineTo(s,u),e.lineTo(-.5*r-iL*a,iL*r+-.5*a),e.lineTo(-.5*i-iL*o,iL*i+-.5*o),e.lineTo(-.5*s-iL*u,iL*s+-.5*u),e.lineTo(-.5*r+iL*a,-.5*a-iL*r),e.lineTo(-.5*i+iL*o,-.5*o-iL*i),e.lineTo(-.5*s+iL*u,-.5*u-iL*s),e.closePath()}},dL=[Gb,Vb,Zb,nL,tL,aL,uL],cL=function(){var e=tb(Gb),t=tb(64),n=null;function r(){var r;if(n||(n=r=Fo()),e.apply(this,arguments).draw(n,+t.apply(this,arguments)),r)return n=null,r+""||null}return r.type=function(t){return arguments.length?(e="function"==typeof t?t:tb(t),r):e},r.size=function(e){return arguments.length?(t="function"==typeof e?e:tb(+e),r):t},r.context=function(e){return arguments.length?(n=null==e?null:e,r):n},r},lL=function(){};function fL(e,t,n){e._context.bezierCurveTo((2*e._x0+e._x1)/3,(2*e._y0+e._y1)/3,(e._x0+2*e._x1)/3,(e._y0+2*e._y1)/3,(e._x0+4*e._x1+t)/6,(e._y0+4*e._y1+n)/6)}function hL(e){this._context=e}hL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:fL(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:fL(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var _L=function(e){return new hL(e)};function mL(e){this._context=e}mL.prototype={areaStart:lL,areaEnd:lL,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x2=e,this._y2=t;break;case 1:this._point=2,this._x3=e,this._y3=t;break;case 2:this._point=3,this._x4=e,this._y4=t,this._context.moveTo((this._x0+4*this._x1+e)/6,(this._y0+4*this._y1+t)/6);break;default:fL(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var pL=function(e){return new mL(e)};function yL(e){this._context=e}yL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+e)/6,r=(this._y0+4*this._y1+t)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:fL(this,e,t)}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t}};var gL=function(e){return new yL(e)};function ML(e,t){this._basis=new hL(e),this._beta=t}ML.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var e=this._x,t=this._y,n=e.length-1;if(n>0)for(var r,a=e[0],i=t[0],o=e[n]-a,s=t[n]-i,u=-1;++u<=n;)r=u/n,this._basis.point(this._beta*e[u]+(1-this._beta)*(a+r*o),this._beta*t[u]+(1-this._beta)*(i+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var vL=function e(t){function n(e){return 1===t?new hL(e):new ML(e,t)}return n.beta=function(t){return e(+t)},n}(.85);function bL(e,t,n){e._context.bezierCurveTo(e._x1+e._k*(e._x2-e._x0),e._y1+e._k*(e._y2-e._y0),e._x2+e._k*(e._x1-t),e._y2+e._k*(e._y1-n),e._x2,e._y2)}function LL(e,t){this._context=e,this._k=(1-t)/6}LL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:bL(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2,this._x1=e,this._y1=t;break;case 2:this._point=3;default:bL(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var YL=function e(t){function n(e){return new LL(e,t)}return n.tension=function(t){return e(+t)},n}(0);function kL(e,t){this._context=e,this._k=(1-t)/6}kL.prototype={areaStart:lL,areaEnd:lL,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:bL(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var wL=function e(t){function n(e){return new kL(e,t)}return n.tension=function(t){return e(+t)},n}(0);function DL(e,t){this._context=e,this._k=(1-t)/6}DL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:bL(this,e,t)}this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var xL=function e(t){function n(e){return new DL(e,t)}return n.tension=function(t){return e(+t)},n}(0);function TL(e,t,n){var r=e._x1,a=e._y1,i=e._x2,o=e._y2;if(e._l01_a>db){var s=2*e._l01_2a+3*e._l01_a*e._l12_a+e._l12_2a,u=3*e._l01_a*(e._l01_a+e._l12_a);r=(r*s-e._x0*e._l12_2a+e._x2*e._l01_2a)/u,a=(a*s-e._y0*e._l12_2a+e._y2*e._l01_2a)/u}if(e._l23_a>db){var d=2*e._l23_2a+3*e._l23_a*e._l12_a+e._l12_2a,c=3*e._l23_a*(e._l23_a+e._l12_a);i=(i*d+e._x1*e._l23_2a-t*e._l12_2a)/c,o=(o*d+e._y1*e._l23_2a-n*e._l12_2a)/c}e._context.bezierCurveTo(r,a,i,o,e._x2,e._y2)}function SL(e,t){this._context=e,this._alpha=t}SL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3;default:TL(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var HL=function e(t){function n(e){return t?new SL(e,t):new LL(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function jL(e,t){this._context=e,this._alpha=t}jL.prototype={areaStart:lL,areaEnd:lL,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=e,this._y3=t;break;case 1:this._point=2,this._context.moveTo(this._x4=e,this._y4=t);break;case 2:this._point=3,this._x5=e,this._y5=t;break;default:TL(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var AL=function e(t){function n(e){return t?new jL(e,t):new kL(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function EL(e,t){this._context=e,this._alpha=t}EL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){if(e=+e,t=+t,this._point){var n=this._x2-e,r=this._y2-t;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:TL(this,e,t)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=e,this._y0=this._y1,this._y1=this._y2,this._y2=t}};var PL=function e(t){function n(e){return t?new EL(e,t):new DL(e,0)}return n.alpha=function(t){return e(+t)},n}(.5);function CL(e){this._context=e}CL.prototype={areaStart:lL,areaEnd:lL,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(e,t){e=+e,t=+t,this._point?this._context.lineTo(e,t):(this._point=1,this._context.moveTo(e,t))}};var OL=function(e){return new CL(e)};function NL(e){return e<0?-1:1}function WL(e,t,n){var r=e._x1-e._x0,a=t-e._x1,i=(e._y1-e._y0)/(r||a<0&&-0),o=(n-e._y1)/(a||r<0&&-0),s=(i*a+o*r)/(r+a);return(NL(i)+NL(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(s))||0}function zL(e,t){var n=e._x1-e._x0;return n?(3*(e._y1-e._y0)/n-t)/2:t}function FL(e,t,n){var r=e._x0,a=e._y0,i=e._x1,o=e._y1,s=(i-r)/3;e._context.bezierCurveTo(r+s,a+s*t,i-s,o-s*n,i,o)}function RL(e){this._context=e}function IL(e){this._context=new qL(e)}function qL(e){this._context=e}function UL(e){return new RL(e)}function BL(e){return new IL(e)}function JL(e){this._context=e}function GL(e){var t,n,r=e.length-1,a=new Array(r),i=new Array(r),o=new Array(r);for(a[0]=0,i[0]=2,o[0]=e[0]+2*e[1],t=1;t<r-1;++t)a[t]=1,i[t]=4,o[t]=4*e[t]+2*e[t+1];for(a[r-1]=2,i[r-1]=7,o[r-1]=8*e[r-1]+e[r],t=1;t<r;++t)n=a[t]/i[t-1],i[t]-=n,o[t]-=n*o[t-1];for(a[r-1]=o[r-1]/i[r-1],t=r-2;t>=0;--t)a[t]=(o[t]-a[t+1])/i[t];for(i[r-1]=(e[r]+a[r-1])/2,t=0;t<r-1;++t)i[t]=2*e[t+1]-a[t+1];return[a,i]}RL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:FL(this,this._t0,zL(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){var n=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,FL(this,zL(this,n=WL(this,e,t)),n);break;default:FL(this,this._t0,n=WL(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=n}}},(IL.prototype=Object.create(RL.prototype)).point=function(e,t){RL.prototype.point.call(this,t,e)},qL.prototype={moveTo:function(e,t){this._context.moveTo(t,e)},closePath:function(){this._context.closePath()},lineTo:function(e,t){this._context.lineTo(t,e)},bezierCurveTo:function(e,t,n,r,a,i){this._context.bezierCurveTo(t,e,r,n,i,a)}},JL.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var e=this._x,t=this._y,n=e.length;if(n)if(this._line?this._context.lineTo(e[0],t[0]):this._context.moveTo(e[0],t[0]),2===n)this._context.lineTo(e[1],t[1]);else for(var r=GL(e),a=GL(t),i=0,o=1;o<n;++i,++o)this._context.bezierCurveTo(r[0][i],a[0][i],r[1][i],a[1][i],e[o],t[o]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(e,t){this._x.push(+e),this._y.push(+t)}};var VL=function(e){return new JL(e)};function $L(e,t){this._context=e,this._t=t}$L.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,t),this._context.lineTo(e,t);else{var n=this._x*(1-this._t)+e*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,t)}}this._x=e,this._y=t}};var XL=function(e){return new $L(e,.5)};function ZL(e){return new $L(e,0)}function KL(e){return new $L(e,1)}var QL=function(e,t){if((a=e.length)>1)for(var n,r,a,i=1,o=e[t[0]],s=o.length;i<a;++i)for(r=o,o=e[t[i]],n=0;n<s;++n)o[n][1]+=o[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]},eY=function(e){for(var t=e.length,n=new Array(t);--t>=0;)n[t]=t;return n};function tY(e,t){return e[t]}var nY=function(){var e=tb([]),t=eY,n=QL,r=tY;function a(a){var i,o,s=e.apply(this,arguments),u=a.length,d=s.length,c=new Array(d);for(i=0;i<d;++i){for(var l,f=s[i],h=c[i]=new Array(u),_=0;_<u;++_)h[_]=l=[0,+r(a[_],f,_,a)],l.data=a[_];h.key=f}for(i=0,o=t(c);i<d;++i)c[o[i]].index=i;return n(c,o),c}return a.keys=function(t){return arguments.length?(e="function"==typeof t?t:tb(Nb.call(t)),a):e},a.value=function(e){return arguments.length?(r="function"==typeof e?e:tb(+e),a):r},a.order=function(e){return arguments.length?(t=null==e?eY:"function"==typeof e?e:tb(Nb.call(e)),a):t},a.offset=function(e){return arguments.length?(n=null==e?QL:e,a):n},a},rY=function(e,t){if((r=e.length)>0){for(var n,r,a,i=0,o=e[0].length;i<o;++i){for(a=n=0;n<r;++n)a+=e[n][i][1]||0;if(a)for(n=0;n<r;++n)e[n][i][1]/=a}QL(e,t)}},aY=function(e,t){if((s=e.length)>0)for(var n,r,a,i,o,s,u=0,d=e[t[0]].length;u<d;++u)for(i=o=0,n=0;n<s;++n)(a=(r=e[t[n]][u])[1]-r[0])>=0?(r[0]=i,r[1]=i+=a):a<0?(r[1]=o,r[0]=o+=a):r[0]=i},iY=function(e,t){if((n=e.length)>0){for(var n,r=0,a=e[t[0]],i=a.length;r<i;++r){for(var o=0,s=0;o<n;++o)s+=e[o][r][1]||0;a[r][1]+=a[r][0]=-s/2}QL(e,t)}},oY=function(e,t){if((a=e.length)>0&&(r=(n=e[t[0]]).length)>0){for(var n,r,a,i=0,o=1;o<r;++o){for(var s=0,u=0,d=0;s<a;++s){for(var c=e[t[s]],l=c[o][1]||0,f=(l-(c[o-1][1]||0))/2,h=0;h<s;++h){var _=e[t[h]];f+=(_[o][1]||0)-(_[o-1][1]||0)}u+=l,d+=f*l}n[o-1][1]+=n[o-1][0]=i,u&&(i-=d/u)}n[o-1][1]+=n[o-1][0]=i,QL(e,t)}},sY=function(e){var t=e.map(uY);return eY(e).sort((function(e,n){return t[e]-t[n]}))};function uY(e){for(var t,n=-1,r=0,a=e.length,i=-1/0;++n<a;)(t=+e[n][1])>i&&(i=t,r=n);return r}var dY=function(e){var t=e.map(cY);return eY(e).sort((function(e,n){return t[e]-t[n]}))};function cY(e){for(var t,n=0,r=-1,a=e.length;++r<a;)(t=+e[r][1])&&(n+=t);return n}var lY=function(e){return dY(e).reverse()},fY=function(e){var t,n,r=e.length,a=e.map(cY),i=sY(e),o=0,s=0,u=[],d=[];for(t=0;t<r;++t)n=i[t],o<s?(o+=a[n],u.push(n)):(s+=a[n],d.push(n));return d.reverse().concat(u)},hY=function(e){return eY(e).reverse()},_Y=function(e){return function(){return e}};function mY(e){return e[0]}function pY(e){return e[1]}function yY(){this._=null}function gY(e){e.U=e.C=e.L=e.R=e.P=e.N=null}function MY(e,t){var n=t,r=t.R,a=n.U;a?a.L===n?a.L=r:a.R=r:e._=r,r.U=a,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function vY(e,t){var n=t,r=t.L,a=n.U;a?a.L===n?a.L=r:a.R=r:e._=r,r.U=a,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function bY(e){for(;e.L;)e=e.L;return e}yY.prototype={constructor:yY,insert:function(e,t){var n,r,a;if(e){if(t.P=e,t.N=e.N,e.N&&(e.N.P=t),e.N=t,e.R){for(e=e.R;e.L;)e=e.L;e.L=t}else e.R=t;n=e}else this._?(e=bY(this._),t.P=null,t.N=e,e.P=e.L=t,n=e):(t.P=t.N=null,this._=t,n=null);for(t.L=t.R=null,t.U=n,t.C=!0,e=t;n&&n.C;)n===(r=n.U).L?(a=r.R)&&a.C?(n.C=a.C=!1,r.C=!0,e=r):(e===n.R&&(MY(this,n),n=(e=n).U),n.C=!1,r.C=!0,vY(this,r)):(a=r.L)&&a.C?(n.C=a.C=!1,r.C=!0,e=r):(e===n.L&&(vY(this,n),n=(e=n).U),n.C=!1,r.C=!0,MY(this,r)),n=e.U;this._.C=!1},remove:function(e){e.N&&(e.N.P=e.P),e.P&&(e.P.N=e.N),e.N=e.P=null;var t,n,r,a=e.U,i=e.L,o=e.R;if(n=i?o?bY(o):i:o,a?a.L===e?a.L=n:a.R=n:this._=n,i&&o?(r=n.C,n.C=e.C,n.L=i,i.U=n,n!==o?(a=n.U,n.U=e.U,e=n.R,a.L=e,n.R=o,o.U=n):(n.U=a,a=n,e=n.R)):(r=e.C,e=n),e&&(e.U=a),!r)if(e&&e.C)e.C=!1;else{do{if(e===this._)break;if(e===a.L){if((t=a.R).C&&(t.C=!1,a.C=!0,MY(this,a),t=a.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,vY(this,t),t=a.R),t.C=a.C,a.C=t.R.C=!1,MY(this,a),e=this._;break}}else if((t=a.L).C&&(t.C=!1,a.C=!0,vY(this,a),t=a.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,MY(this,t),t=a.L),t.C=a.C,a.C=t.L.C=!1,vY(this,a),e=this._;break}t.C=!0,e=a,a=a.U}while(!e.C);e&&(e.C=!1)}}};var LY=yY;function YY(e,t,n,r){var a=[null,null],i=GY.push(a)-1;return a.left=e,a.right=t,n&&wY(a,e,t,n),r&&wY(a,t,e,r),BY[e.index].halfedges.push(i),BY[t.index].halfedges.push(i),a}function kY(e,t,n){var r=[t,n];return r.left=e,r}function wY(e,t,n,r){e[0]||e[1]?e.left===n?e[1]=r:e[0]=r:(e[0]=r,e.left=t,e.right=n)}function DY(e,t,n,r,a){var i,o=e[0],s=e[1],u=o[0],d=o[1],c=0,l=1,f=s[0]-u,h=s[1]-d;if(i=t-u,f||!(i>0)){if(i/=f,f<0){if(i<c)return;i<l&&(l=i)}else if(f>0){if(i>l)return;i>c&&(c=i)}if(i=r-u,f||!(i<0)){if(i/=f,f<0){if(i>l)return;i>c&&(c=i)}else if(f>0){if(i<c)return;i<l&&(l=i)}if(i=n-d,h||!(i>0)){if(i/=h,h<0){if(i<c)return;i<l&&(l=i)}else if(h>0){if(i>l)return;i>c&&(c=i)}if(i=a-d,h||!(i<0)){if(i/=h,h<0){if(i>l)return;i>c&&(c=i)}else if(h>0){if(i<c)return;i<l&&(l=i)}return!(c>0||l<1)||(c>0&&(e[0]=[u+c*f,d+c*h]),l<1&&(e[1]=[u+l*f,d+l*h]),!0)}}}}}function xY(e,t,n,r,a){var i=e[1];if(i)return!0;var o,s,u=e[0],d=e.left,c=e.right,l=d[0],f=d[1],h=c[0],_=c[1],m=(l+h)/2,p=(f+_)/2;if(_===f){if(m<t||m>=r)return;if(l>h){if(u){if(u[1]>=a)return}else u=[m,n];i=[m,a]}else{if(u){if(u[1]<n)return}else u=[m,a];i=[m,n]}}else if(s=p-(o=(l-h)/(_-f))*m,o<-1||o>1)if(l>h){if(u){if(u[1]>=a)return}else u=[(n-s)/o,n];i=[(a-s)/o,a]}else{if(u){if(u[1]<n)return}else u=[(a-s)/o,a];i=[(n-s)/o,n]}else if(f<_){if(u){if(u[0]>=r)return}else u=[t,o*t+s];i=[r,o*r+s]}else{if(u){if(u[0]<t)return}else u=[r,o*r+s];i=[t,o*t+s]}return e[0]=u,e[1]=i,!0}function TY(e,t){var n=e.site,r=t.left,a=t.right;return n===a&&(a=r,r=n),a?Math.atan2(a[1]-r[1],a[0]-r[0]):(n===r?(r=t[1],a=t[0]):(r=t[0],a=t[1]),Math.atan2(r[0]-a[0],a[1]-r[1]))}function SY(e,t){return t[+(t.left!==e.site)]}function HY(e,t){return t[+(t.left===e.site)]}var jY,AY=[];function EY(){gY(this),this.x=this.y=this.arc=this.site=this.cy=null}function PY(e){var t=e.P,n=e.N;if(t&&n){var r=t.site,a=e.site,i=n.site;if(r!==i){var o=a[0],s=a[1],u=r[0]-o,d=r[1]-s,c=i[0]-o,l=i[1]-s,f=2*(u*l-d*c);if(!(f>=-$Y)){var h=u*u+d*d,_=c*c+l*l,m=(l*h-d*_)/f,p=(u*_-c*h)/f,y=AY.pop()||new EY;y.arc=e,y.site=a,y.x=m+o,y.y=(y.cy=p+s)+Math.sqrt(m*m+p*p),e.circle=y;for(var g=null,M=JY._;M;)if(y.y<M.y||y.y===M.y&&y.x<=M.x){if(!M.L){g=M.P;break}M=M.L}else{if(!M.R){g=M;break}M=M.R}JY.insert(g,y),g||(jY=y)}}}}function CY(e){var t=e.circle;t&&(t.P||(jY=t.N),JY.remove(t),AY.push(t),gY(t),e.circle=null)}var OY=[];function NY(){gY(this),this.edge=this.site=this.circle=null}function WY(e){var t=OY.pop()||new NY;return t.site=e,t}function zY(e){CY(e),UY.remove(e),OY.push(e),gY(e)}function FY(e){var t=e.circle,n=t.x,r=t.cy,a=[n,r],i=e.P,o=e.N,s=[e];zY(e);for(var u=i;u.circle&&Math.abs(n-u.circle.x)<VY&&Math.abs(r-u.circle.cy)<VY;)i=u.P,s.unshift(u),zY(u),u=i;s.unshift(u),CY(u);for(var d=o;d.circle&&Math.abs(n-d.circle.x)<VY&&Math.abs(r-d.circle.cy)<VY;)o=d.N,s.push(d),zY(d),d=o;s.push(d),CY(d);var c,l=s.length;for(c=1;c<l;++c)d=s[c],u=s[c-1],wY(d.edge,u.site,d.site,a);u=s[0],(d=s[l-1]).edge=YY(u.site,d.site,null,a),PY(u),PY(d)}function RY(e){for(var t,n,r,a,i=e[0],o=e[1],s=UY._;s;)if((r=IY(s,o)-i)>VY)s=s.L;else{if(!((a=i-qY(s,o))>VY)){r>-VY?(t=s.P,n=s):a>-VY?(t=s,n=s.N):t=n=s;break}if(!s.R){t=s;break}s=s.R}!function(e){BY[e.index]={site:e,halfedges:[]}}(e);var u=WY(e);if(UY.insert(t,u),t||n){if(t===n)return CY(t),n=WY(t.site),UY.insert(u,n),u.edge=n.edge=YY(t.site,u.site),PY(t),void PY(n);if(n){CY(t),CY(n);var d=t.site,c=d[0],l=d[1],f=e[0]-c,h=e[1]-l,_=n.site,m=_[0]-c,p=_[1]-l,y=2*(f*p-h*m),g=f*f+h*h,M=m*m+p*p,v=[(p*g-h*M)/y+c,(f*M-m*g)/y+l];wY(n.edge,d,_,v),u.edge=YY(d,e,null,v),n.edge=YY(e,_,null,v),PY(t),PY(n)}else u.edge=YY(t.site,u.site)}}function IY(e,t){var n=e.site,r=n[0],a=n[1],i=a-t;if(!i)return r;var o=e.P;if(!o)return-1/0;var s=(n=o.site)[0],u=n[1],d=u-t;if(!d)return s;var c=s-r,l=1/i-1/d,f=c/d;return l?(-f+Math.sqrt(f*f-2*l*(c*c/(-2*d)-u+d/2+a-i/2)))/l+r:(r+s)/2}function qY(e,t){var n=e.N;if(n)return IY(n,t);var r=e.site;return r[1]===t?r[0]:1/0}var UY,BY,JY,GY,VY=1e-6,$Y=1e-12;function XY(e,t){return t[1]-e[1]||t[0]-e[0]}function ZY(e,t){var n,r,a,i=e.sort(XY).pop();for(GY=[],BY=new Array(e.length),UY=new LY,JY=new LY;;)if(a=jY,i&&(!a||i[1]<a.y||i[1]===a.y&&i[0]<a.x))i[0]===n&&i[1]===r||(RY(i),n=i[0],r=i[1]),i=e.pop();else{if(!a)break;FY(a.arc)}if(function(){for(var e,t,n,r,a=0,i=BY.length;a<i;++a)if((e=BY[a])&&(r=(t=e.halfedges).length)){var o=new Array(r),s=new Array(r);for(n=0;n<r;++n)o[n]=n,s[n]=TY(e,GY[t[n]]);for(o.sort((function(e,t){return s[t]-s[e]})),n=0;n<r;++n)s[n]=t[o[n]];for(n=0;n<r;++n)t[n]=s[n]}}(),t){var o=+t[0][0],s=+t[0][1],u=+t[1][0],d=+t[1][1];!function(e,t,n,r){for(var a,i=GY.length;i--;)xY(a=GY[i],e,t,n,r)&&DY(a,e,t,n,r)&&(Math.abs(a[0][0]-a[1][0])>VY||Math.abs(a[0][1]-a[1][1])>VY)||delete GY[i]}(o,s,u,d),function(e,t,n,r){var a,i,o,s,u,d,c,l,f,h,_,m,p=BY.length,y=!0;for(a=0;a<p;++a)if(i=BY[a]){for(o=i.site,s=(u=i.halfedges).length;s--;)GY[u[s]]||u.splice(s,1);for(s=0,d=u.length;s<d;)_=(h=HY(i,GY[u[s]]))[0],m=h[1],l=(c=SY(i,GY[u[++s%d]]))[0],f=c[1],(Math.abs(_-l)>VY||Math.abs(m-f)>VY)&&(u.splice(s,0,GY.push(kY(o,h,Math.abs(_-e)<VY&&r-m>VY?[e,Math.abs(l-e)<VY?f:r]:Math.abs(m-r)<VY&&n-_>VY?[Math.abs(f-r)<VY?l:n,r]:Math.abs(_-n)<VY&&m-t>VY?[n,Math.abs(l-n)<VY?f:t]:Math.abs(m-t)<VY&&_-e>VY?[Math.abs(f-t)<VY?l:e,t]:null))-1),++d);d&&(y=!1)}if(y){var g,M,v,b=1/0;for(a=0,y=null;a<p;++a)(i=BY[a])&&(v=(g=(o=i.site)[0]-e)*g+(M=o[1]-t)*M)<b&&(b=v,y=i);if(y){var L=[e,t],Y=[e,r],k=[n,r],w=[n,t];y.halfedges.push(GY.push(kY(o=y.site,L,Y))-1,GY.push(kY(o,Y,k))-1,GY.push(kY(o,k,w))-1,GY.push(kY(o,w,L))-1)}}for(a=0;a<p;++a)(i=BY[a])&&(i.halfedges.length||delete BY[a])}(o,s,u,d)}this.edges=GY,this.cells=BY,UY=JY=GY=BY=null}ZY.prototype={constructor:ZY,polygons:function(){var e=this.edges;return this.cells.map((function(t){var n=t.halfedges.map((function(n){return SY(t,e[n])}));return n.data=t.site.data,n}))},triangles:function(){var e=[],t=this.edges;return this.cells.forEach((function(n,r){if(i=(a=n.halfedges).length)for(var a,i,o,s,u,d,c=n.site,l=-1,f=t[a[i-1]],h=f.left===c?f.right:f.left;++l<i;)o=h,h=(f=t[a[l]]).left===c?f.right:f.left,o&&h&&r<o.index&&r<h.index&&(u=o,d=h,((s=c)[0]-d[0])*(u[1]-s[1])-(s[0]-u[0])*(d[1]-s[1])<0)&&e.push([c.data,o.data,h.data])})),e},links:function(){return this.edges.filter((function(e){return e.right})).map((function(e){return{source:e.left.data,target:e.right.data}}))},find:function(e,t,n){for(var r,a,i=this,o=i._found||0,s=i.cells.length;!(a=i.cells[o]);)if(++o>=s)return null;var u=e-a.site[0],d=t-a.site[1],c=u*u+d*d;do{a=i.cells[r=o],o=null,a.halfedges.forEach((function(n){var r=i.edges[n],s=r.left;if(s!==a.site&&s||(s=r.right)){var u=e-s[0],d=t-s[1],l=u*u+d*d;l<c&&(c=l,o=s.index)}}))}while(null!==o);return i._found=r,null==n||c<=n*n?a.site:null}};var KY=function(){var e=mY,t=pY,n=null;function r(r){return new ZY(r.map((function(n,a){var i=[Math.round(e(n,a,r)/VY)*VY,Math.round(t(n,a,r)/VY)*VY];return i.index=a,i.data=n,i})),n)}return r.polygons=function(e){return r(e).polygons()},r.links=function(e){return r(e).links()},r.triangles=function(e){return r(e).triangles()},r.x=function(t){return arguments.length?(e="function"==typeof t?t:_Y(+t),r):e},r.y=function(e){return arguments.length?(t="function"==typeof e?e:_Y(+e),r):t},r.extent=function(e){return arguments.length?(n=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],r):n&&[[n[0][0],n[0][1]],[n[1][0],n[1][1]]]},r.size=function(e){return arguments.length?(n=null==e?null:[[0,0],[+e[0],+e[1]]],r):n&&[n[1][0]-n[0][0],n[1][1]-n[0][1]]},r},QY=function(e){return function(){return e}};function ek(e,t,n){this.target=e,this.type=t,this.transform=n}function tk(e,t,n){this.k=e,this.x=t,this.y=n}tk.prototype={constructor:tk,scale:function(e){return 1===e?this:new tk(this.k*e,this.x,this.y)},translate:function(e,t){return 0===e&0===t?this:new tk(this.k,this.x+this.k*e,this.y+this.k*t)},apply:function(e){return[e[0]*this.k+this.x,e[1]*this.k+this.y]},applyX:function(e){return e*this.k+this.x},applyY:function(e){return e*this.k+this.y},invert:function(e){return[(e[0]-this.x)/this.k,(e[1]-this.y)/this.k]},invertX:function(e){return(e-this.x)/this.k},invertY:function(e){return(e-this.y)/this.k},rescaleX:function(e){return e.copy().domain(e.range().map(this.invertX,this).map(e.invert,e))},rescaleY:function(e){return e.copy().domain(e.range().map(this.invertY,this).map(e.invert,e))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var nk=new tk(1,0,0);function rk(e){for(;!e.__zoom;)if(!(e=e.parentNode))return nk;return e.__zoom}function ak(){_t.stopImmediatePropagation()}rk.prototype=tk.prototype;var ik=function(){_t.preventDefault(),_t.stopImmediatePropagation()};function ok(){return!_t.ctrlKey&&!_t.button}function sk(){var e=this;return e instanceof SVGElement?(e=e.ownerSVGElement||e).hasAttribute("viewBox")?[[(e=e.viewBox.baseVal).x,e.y],[e.x+e.width,e.y+e.height]]:[[0,0],[e.width.baseVal.value,e.height.baseVal.value]]:[[0,0],[e.clientWidth,e.clientHeight]]}function uk(){return this.__zoom||nk}function dk(){return-_t.deltaY*(1===_t.deltaMode?.05:_t.deltaMode?1:.002)}function ck(){return navigator.maxTouchPoints||"ontouchstart"in this}function lk(e,t,n){var r=e.invertX(t[0][0])-n[0][0],a=e.invertX(t[1][0])-n[1][0],i=e.invertY(t[0][1])-n[0][1],o=e.invertY(t[1][1])-n[1][1];return e.translate(a>r?(r+a)/2:Math.min(0,r)||Math.max(0,a),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}var fk=function(){var e,t,n=ok,r=sk,a=lk,i=dk,o=ck,s=[0,1/0],u=[[-1/0,-1/0],[1/0,1/0]],d=250,c=zr,l=me("start","zoom","end"),f=500,h=150,_=0;function m(e){e.property("__zoom",uk).on("wheel.zoom",L).on("mousedown.zoom",Y).on("dblclick.zoom",k).filter(o).on("touchstart.zoom",w).on("touchmove.zoom",D).on("touchend.zoom touchcancel.zoom",x).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function p(e,t){return(t=Math.max(s[0],Math.min(s[1],t)))===e.k?e:new tk(t,e.x,e.y)}function y(e,t,n){var r=t[0]-n[0]*e.k,a=t[1]-n[1]*e.k;return r===e.x&&a===e.y?e:new tk(e.k,r,a)}function g(e){return[(+e[0][0]+ +e[1][0])/2,(+e[0][1]+ +e[1][1])/2]}function M(e,t,n){e.on("start.zoom",(function(){v(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){v(this,arguments).end()})).tween("zoom",(function(){var e=this,a=arguments,i=v(e,a),o=r.apply(e,a),s=null==n?g(o):"function"==typeof n?n.apply(e,a):n,u=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),d=e.__zoom,l="function"==typeof t?t.apply(e,a):t,f=c(d.invert(s).concat(u/d.k),l.invert(s).concat(u/l.k));return function(e){if(1===e)e=l;else{var t=f(e),n=u/t[2];e=new tk(n,s[0]-t[0]*n,s[1]-t[1]*n)}i.zoom(null,e)}}))}function v(e,t,n){return!n&&e.__zooming||new b(e,t)}function b(e,t){this.that=e,this.args=t,this.active=0,this.extent=r.apply(e,t),this.taps=0}function L(){if(n.apply(this,arguments)){var e=v(this,arguments),t=this.__zoom,r=Math.max(s[0],Math.min(s[1],t.k*Math.pow(2,i.apply(this,arguments)))),o=Ct(this);if(e.wheel)e.mouse[0][0]===o[0]&&e.mouse[0][1]===o[1]||(e.mouse[1]=t.invert(e.mouse[0]=o)),clearTimeout(e.wheel);else{if(t.k===r)return;e.mouse=[o,t.invert(o)],Aa(this),e.start()}ik(),e.wheel=setTimeout((function(){e.wheel=null,e.end()}),h),e.zoom("mouse",a(y(p(t,r),e.mouse[0],e.mouse[1]),e.extent,u))}}function Y(){if(!t&&n.apply(this,arguments)){var e=v(this,arguments,!0),r=Tt(_t.view).on("mousemove.zoom",(function(){if(ik(),!e.moved){var t=_t.clientX-o,n=_t.clientY-s;e.moved=t*t+n*n>_}e.zoom("mouse",a(y(e.that.__zoom,e.mouse[0]=Ct(e.that),e.mouse[1]),e.extent,u))}),!0).on("mouseup.zoom",(function(){r.on("mousemove.zoom mouseup.zoom",null),It(_t.view,e.moved),ik(),e.end()}),!0),i=Ct(this),o=_t.clientX,s=_t.clientY;Rt(_t.view),ak(),e.mouse=[i,this.__zoom.invert(i)],Aa(this),e.start()}}function k(){if(n.apply(this,arguments)){var e=this.__zoom,t=Ct(this),i=e.invert(t),o=e.k*(_t.shiftKey?.5:2),s=a(y(p(e,o),t,i),r.apply(this,arguments),u);ik(),d>0?Tt(this).transition().duration(d).call(M,s,t):Tt(this).call(m.transform,s)}}function w(){if(n.apply(this,arguments)){var t,r,a,i,o=_t.touches,s=o.length,u=v(this,arguments,_t.changedTouches.length===s);for(ak(),r=0;r<s;++r)a=o[r],i=[i=Nt(this,o,a.identifier),this.__zoom.invert(i),a.identifier],u.touch0?u.touch1||u.touch0[2]===i[2]||(u.touch1=i,u.taps=0):(u.touch0=i,t=!0,u.taps=1+!!e);e&&(e=clearTimeout(e)),t&&(u.taps<2&&(e=setTimeout((function(){e=null}),f)),Aa(this),u.start())}}function D(){if(this.__zooming){var t,n,r,i,o=v(this,arguments),s=_t.changedTouches,d=s.length;for(ik(),e&&(e=clearTimeout(e)),o.taps=0,t=0;t<d;++t)n=s[t],r=Nt(this,s,n.identifier),o.touch0&&o.touch0[2]===n.identifier?o.touch0[0]=r:o.touch1&&o.touch1[2]===n.identifier&&(o.touch1[0]=r);if(n=o.that.__zoom,o.touch1){var c=o.touch0[0],l=o.touch0[1],f=o.touch1[0],h=o.touch1[1],_=(_=f[0]-c[0])*_+(_=f[1]-c[1])*_,m=(m=h[0]-l[0])*m+(m=h[1]-l[1])*m;n=p(n,Math.sqrt(_/m)),r=[(c[0]+f[0])/2,(c[1]+f[1])/2],i=[(l[0]+h[0])/2,(l[1]+h[1])/2]}else{if(!o.touch0)return;r=o.touch0[0],i=o.touch0[1]}o.zoom("touch",a(y(n,r,i),o.extent,u))}}function x(){if(this.__zooming){var e,n,r=v(this,arguments),a=_t.changedTouches,i=a.length;for(ak(),t&&clearTimeout(t),t=setTimeout((function(){t=null}),f),e=0;e<i;++e)n=a[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;if(r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0)r.touch0[1]=this.__zoom.invert(r.touch0[0]);else if(r.end(),2===r.taps){var o=Tt(this).on("dblclick.zoom");o&&o.apply(this,arguments)}}}return m.transform=function(e,t,n){var r=e.selection?e.selection():e;r.property("__zoom",uk),e!==r?M(e,t,n):r.interrupt().each((function(){v(this,arguments).start().zoom(null,"function"==typeof t?t.apply(this,arguments):t).end()}))},m.scaleBy=function(e,t,n){m.scaleTo(e,(function(){var e=this.__zoom.k,n="function"==typeof t?t.apply(this,arguments):t;return e*n}),n)},m.scaleTo=function(e,t,n){m.transform(e,(function(){var e=r.apply(this,arguments),i=this.__zoom,o=null==n?g(e):"function"==typeof n?n.apply(this,arguments):n,s=i.invert(o),d="function"==typeof t?t.apply(this,arguments):t;return a(y(p(i,d),o,s),e,u)}),n)},m.translateBy=function(e,t,n){m.transform(e,(function(){return a(this.__zoom.translate("function"==typeof t?t.apply(this,arguments):t,"function"==typeof n?n.apply(this,arguments):n),r.apply(this,arguments),u)}))},m.translateTo=function(e,t,n,i){m.transform(e,(function(){var e=r.apply(this,arguments),o=this.__zoom,s=null==i?g(e):"function"==typeof i?i.apply(this,arguments):i;return a(nk.translate(s[0],s[1]).scale(o.k).translate("function"==typeof t?-t.apply(this,arguments):-t,"function"==typeof n?-n.apply(this,arguments):-n),e,u)}),i)},b.prototype={start:function(){return 1==++this.active&&(this.that.__zooming=this,this.emit("start")),this},zoom:function(e,t){return this.mouse&&"mouse"!==e&&(this.mouse[1]=t.invert(this.mouse[0])),this.touch0&&"touch"!==e&&(this.touch0[1]=t.invert(this.touch0[0])),this.touch1&&"touch"!==e&&(this.touch1[1]=t.invert(this.touch1[0])),this.that.__zoom=t,this.emit("zoom"),this},end:function(){return 0==--this.active&&(delete this.that.__zooming,this.emit("end")),this},emit:function(e){vt(new ek(m,e,this.that.__zoom),l.apply,l,[e,this.that,this.args])}},m.wheelDelta=function(e){return arguments.length?(i="function"==typeof e?e:QY(+e),m):i},m.filter=function(e){return arguments.length?(n="function"==typeof e?e:QY(!!e),m):n},m.touchable=function(e){return arguments.length?(o="function"==typeof e?e:QY(!!e),m):o},m.extent=function(e){return arguments.length?(r="function"==typeof e?e:QY([[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]]),m):r},m.scaleExtent=function(e){return arguments.length?(s[0]=+e[0],s[1]=+e[1],m):[s[0],s[1]]},m.translateExtent=function(e){return arguments.length?(u[0][0]=+e[0][0],u[1][0]=+e[1][0],u[0][1]=+e[0][1],u[1][1]=+e[1][1],m):[[u[0][0],u[0][1]],[u[1][0],u[1][1]]]},m.constrain=function(e){return arguments.length?(a=e,m):a},m.duration=function(e){return arguments.length?(d=+e,m):d},m.interpolate=function(e){return arguments.length?(c=e,m):c},m.on=function(){var e=l.on.apply(l,arguments);return e===l?m:e},m.clickDistance=function(e){return arguments.length?(_=(e=+e)*e,m):Math.sqrt(_)},m};n.d(t,"version",(function(){return"5.12.0"})),n.d(t,"bisect",(function(){return u})),n.d(t,"bisectRight",(function(){return o})),n.d(t,"bisectLeft",(function(){return s})),n.d(t,"ascending",(function(){return r})),n.d(t,"bisector",(function(){return a})),n.d(t,"cross",(function(){return l})),n.d(t,"descending",(function(){return f})),n.d(t,"deviation",(function(){return m})),n.d(t,"extent",(function(){return p})),n.d(t,"histogram",(function(){return H})),n.d(t,"thresholdFreedmanDiaconis",(function(){return A})),n.d(t,"thresholdScott",(function(){return E})),n.d(t,"thresholdSturges",(function(){return S})),n.d(t,"max",(function(){return P})),n.d(t,"mean",(function(){return C})),n.d(t,"median",(function(){return O})),n.d(t,"merge",(function(){return N})),n.d(t,"min",(function(){return W})),n.d(t,"pairs",(function(){return d})),n.d(t,"permute",(function(){return z})),n.d(t,"quantile",(function(){return j})),n.d(t,"range",(function(){return L})),n.d(t,"scan",(function(){return F})),n.d(t,"shuffle",(function(){return R})),n.d(t,"sum",(function(){return I})),n.d(t,"ticks",(function(){return D})),n.d(t,"tickIncrement",(function(){return x})),n.d(t,"tickStep",(function(){return T})),n.d(t,"transpose",(function(){return q})),n.d(t,"variance",(function(){return _})),n.d(t,"zip",(function(){return B})),n.d(t,"axisTop",(function(){return ie})),n.d(t,"axisRight",(function(){return oe})),n.d(t,"axisBottom",(function(){return se})),n.d(t,"axisLeft",(function(){return ue})),n.d(t,"brush",(function(){return Yo})),n.d(t,"brushX",(function(){return bo})),n.d(t,"brushY",(function(){return Lo})),n.d(t,"brushSelection",(function(){return vo})),n.d(t,"chord",(function(){return Ao})),n.d(t,"ribbon",(function(){return Jo})),n.d(t,"nest",(function(){return Xo})),n.d(t,"set",(function(){return as})),n.d(t,"map",(function(){return $o})),n.d(t,"keys",(function(){return is})),n.d(t,"values",(function(){return os})),n.d(t,"entries",(function(){return ss})),n.d(t,"color",(function(){return _n})),n.d(t,"rgb",(function(){return gn})),n.d(t,"hsl",(function(){return wn})),n.d(t,"lab",(function(){return zn})),n.d(t,"hcl",(function(){return Gn})),n.d(t,"lch",(function(){return Jn})),n.d(t,"gray",(function(){return Wn})),n.d(t,"cubehelix",(function(){return nr})),n.d(t,"contours",(function(){return ys})),n.d(t,"contourDensity",(function(){return Ys})),n.d(t,"dispatch",(function(){return me})),n.d(t,"drag",(function(){return $t})),n.d(t,"dragDisable",(function(){return Rt})),n.d(t,"dragEnable",(function(){return It})),n.d(t,"dsvFormat",(function(){return Es})),n.d(t,"csvParse",(function(){return Cs})),n.d(t,"csvParseRows",(function(){return Os})),n.d(t,"csvFormat",(function(){return Ns})),n.d(t,"csvFormatBody",(function(){return Ws})),n.d(t,"csvFormatRows",(function(){return zs})),n.d(t,"tsvParse",(function(){return Rs})),n.d(t,"tsvParseRows",(function(){return Is})),n.d(t,"tsvFormat",(function(){return qs})),n.d(t,"tsvFormatBody",(function(){return Us})),n.d(t,"tsvFormatRows",(function(){return Bs})),n.d(t,"autoType",(function(){return Js})),n.d(t,"easeLinear",(function(){return ii})),n.d(t,"easeQuad",(function(){return ui})),n.d(t,"easeQuadIn",(function(){return oi})),n.d(t,"easeQuadOut",(function(){return si})),n.d(t,"easeQuadInOut",(function(){return ui})),n.d(t,"easeCubic",(function(){return li})),n.d(t,"easeCubicIn",(function(){return di})),n.d(t,"easeCubicOut",(function(){return ci})),n.d(t,"easeCubicInOut",(function(){return li})),n.d(t,"easePoly",(function(){return _i})),n.d(t,"easePolyIn",(function(){return fi})),n.d(t,"easePolyOut",(function(){return hi})),n.d(t,"easePolyInOut",(function(){return _i})),n.d(t,"easeSin",(function(){return Mi})),n.d(t,"easeSinIn",(function(){return yi})),n.d(t,"easeSinOut",(function(){return gi})),n.d(t,"easeSinInOut",(function(){return Mi})),n.d(t,"easeExp",(function(){return Li})),n.d(t,"easeExpIn",(function(){return vi})),n.d(t,"easeExpOut",(function(){return bi})),n.d(t,"easeExpInOut",(function(){return Li})),n.d(t,"easeCircle",(function(){return wi})),n.d(t,"easeCircleIn",(function(){return Yi})),n.d(t,"easeCircleOut",(function(){return ki})),n.d(t,"easeCircleInOut",(function(){return wi})),n.d(t,"easeBounce",(function(){return Ni})),n.d(t,"easeBounceIn",(function(){return Oi})),n.d(t,"easeBounceOut",(function(){return Ni})),n.d(t,"easeBounceInOut",(function(){return Wi})),n.d(t,"easeBack",(function(){return Ri})),n.d(t,"easeBackIn",(function(){return zi})),n.d(t,"easeBackOut",(function(){return Fi})),n.d(t,"easeBackInOut",(function(){return Ri})),n.d(t,"easeElastic",(function(){return Ui})),n.d(t,"easeElasticIn",(function(){return qi})),n.d(t,"easeElasticOut",(function(){return Ui})),n.d(t,"easeElasticInOut",(function(){return Bi})),n.d(t,"blob",(function(){return Vs})),n.d(t,"buffer",(function(){return Xs})),n.d(t,"dsv",(function(){return eu})),n.d(t,"csv",(function(){return tu})),n.d(t,"tsv",(function(){return nu})),n.d(t,"image",(function(){return ru})),n.d(t,"json",(function(){return iu})),n.d(t,"text",(function(){return Ks})),n.d(t,"xml",(function(){return su})),n.d(t,"html",(function(){return uu})),n.d(t,"svg",(function(){return du})),n.d(t,"forceCenter",(function(){return cu})),n.d(t,"forceCollide",(function(){return Yu})),n.d(t,"forceLink",(function(){return Du})),n.d(t,"forceManyBody",(function(){return Au})),n.d(t,"forceRadial",(function(){return Eu})),n.d(t,"forceSimulation",(function(){return ju})),n.d(t,"forceX",(function(){return Pu})),n.d(t,"forceY",(function(){return Cu})),n.d(t,"formatDefaultLocale",(function(){return Ku})),n.d(t,"format",(function(){return qu})),n.d(t,"formatPrefix",(function(){return Uu})),n.d(t,"formatLocale",(function(){return Zu})),n.d(t,"formatSpecifier",(function(){return zu})),n.d(t,"FormatSpecifier",(function(){return Fu})),n.d(t,"precisionFixed",(function(){return Qu})),n.d(t,"precisionPrefix",(function(){return ed})),n.d(t,"precisionRound",(function(){return td})),n.d(t,"geoArea",(function(){return Vd})),n.d(t,"geoBounds",(function(){return Fc})),n.d(t,"geoCentroid",(function(){return Kc})),n.d(t,"geoCircle",(function(){return dl})),n.d(t,"geoClipAntimeridian",(function(){return bl})),n.d(t,"geoClipCircle",(function(){return Ll})),n.d(t,"geoClipExtent",(function(){return Hl})),n.d(t,"geoClipRectangle",(function(){return Dl})),n.d(t,"geoContains",(function(){return Vl})),n.d(t,"geoDistance",(function(){return zl})),n.d(t,"geoGraticule",(function(){return Zl})),n.d(t,"geoGraticule10",(function(){return Kl})),n.d(t,"geoInterpolate",(function(){return rf})),n.d(t,"geoLength",(function(){return Ol})),n.d(t,"geoPath",(function(){return nh})),n.d(t,"geoAlbers",(function(){return Lh})),n.d(t,"geoAlbersUsa",(function(){return Yh})),n.d(t,"geoAzimuthalEqualArea",(function(){return xh})),n.d(t,"geoAzimuthalEqualAreaRaw",(function(){return Dh})),n.d(t,"geoAzimuthalEquidistant",(function(){return Sh})),n.d(t,"geoAzimuthalEquidistantRaw",(function(){return Th})),n.d(t,"geoConicConformal",(function(){return Ch})),n.d(t,"geoConicConformalRaw",(function(){return Ph})),n.d(t,"geoConicEqualArea",(function(){return bh})),n.d(t,"geoConicEqualAreaRaw",(function(){return vh})),n.d(t,"geoConicEquidistant",(function(){return zh})),n.d(t,"geoConicEquidistantRaw",(function(){return Wh})),n.d(t,"geoEqualEarth",(function(){return Jh})),n.d(t,"geoEqualEarthRaw",(function(){return Bh})),n.d(t,"geoEquirectangular",(function(){return Nh})),n.d(t,"geoEquirectangularRaw",(function(){return Oh})),n.d(t,"geoGnomonic",(function(){return Vh})),n.d(t,"geoGnomonicRaw",(function(){return Gh})),n.d(t,"geoIdentity",(function(){return Xh})),n.d(t,"geoProjection",(function(){return yh})),n.d(t,"geoProjectionMutator",(function(){return gh})),n.d(t,"geoMercator",(function(){return jh})),n.d(t,"geoMercatorRaw",(function(){return Hh})),n.d(t,"geoNaturalEarth1",(function(){return Kh})),n.d(t,"geoNaturalEarth1Raw",(function(){return Zh})),n.d(t,"geoOrthographic",(function(){return e_})),n.d(t,"geoOrthographicRaw",(function(){return Qh})),n.d(t,"geoStereographic",(function(){return n_})),n.d(t,"geoStereographicRaw",(function(){return t_})),n.d(t,"geoTransverseMercator",(function(){return a_})),n.d(t,"geoTransverseMercatorRaw",(function(){return r_})),n.d(t,"geoRotation",(function(){return ol})),n.d(t,"geoStream",(function(){return Fd})),n.d(t,"geoTransform",(function(){return rh})),n.d(t,"cluster",(function(){return u_})),n.d(t,"hierarchy",(function(){return c_})),n.d(t,"pack",(function(){return C_})),n.d(t,"packSiblings",(function(){return S_})),n.d(t,"packEnclose",(function(){return p_})),n.d(t,"partition",(function(){return R_})),n.d(t,"stratify",(function(){return G_})),n.d(t,"tree",(function(){return em})),n.d(t,"treemap",(function(){return im})),n.d(t,"treemapBinary",(function(){return om})),n.d(t,"treemapDice",(function(){return F_})),n.d(t,"treemapSlice",(function(){return tm})),n.d(t,"treemapSliceDice",(function(){return sm})),n.d(t,"treemapSquarify",(function(){return am})),n.d(t,"treemapResquarify",(function(){return um})),n.d(t,"interpolate",(function(){return xr})),n.d(t,"interpolateArray",(function(){return pr})),n.d(t,"interpolateBasis",(function(){return ir})),n.d(t,"interpolateBasisClosed",(function(){return or})),n.d(t,"interpolateDate",(function(){return yr})),n.d(t,"interpolateDiscrete",(function(){return Tr})),n.d(t,"interpolateHue",(function(){return Sr})),n.d(t,"interpolateNumber",(function(){return gr})),n.d(t,"interpolateObject",(function(){return Mr})),n.d(t,"interpolateRound",(function(){return Hr})),n.d(t,"interpolateString",(function(){return Dr})),n.d(t,"interpolateTransformCss",(function(){return Cr})),n.d(t,"interpolateTransformSvg",(function(){return Or})),n.d(t,"interpolateZoom",(function(){return zr})),n.d(t,"interpolateRgb",(function(){return fr})),n.d(t,"interpolateRgbBasis",(function(){return _r})),n.d(t,"interpolateRgbBasisClosed",(function(){return mr})),n.d(t,"interpolateHsl",(function(){return Rr})),n.d(t,"interpolateHslLong",(function(){return Ir})),n.d(t,"interpolateLab",(function(){return qr})),n.d(t,"interpolateHcl",(function(){return Br})),n.d(t,"interpolateHclLong",(function(){return Jr})),n.d(t,"interpolateCubehelix",(function(){return Vr})),n.d(t,"interpolateCubehelixLong",(function(){return $r})),n.d(t,"piecewise",(function(){return Xr})),n.d(t,"quantize",(function(){return Qr})),n.d(t,"path",(function(){return Fo})),n.d(t,"polygonArea",(function(){return dm})),n.d(t,"polygonCentroid",(function(){return cm})),n.d(t,"polygonHull",(function(){return _m})),n.d(t,"polygonContains",(function(){return mm})),n.d(t,"polygonLength",(function(){return pm})),n.d(t,"quadtree",(function(){return yu})),n.d(t,"randomUniform",(function(){return gm})),n.d(t,"randomNormal",(function(){return Mm})),n.d(t,"randomLogNormal",(function(){return vm})),n.d(t,"randomBates",(function(){return Lm})),n.d(t,"randomIrwinHall",(function(){return bm})),n.d(t,"randomExponential",(function(){return Ym})),n.d(t,"scaleBand",(function(){return jm})),n.d(t,"scalePoint",(function(){return Am})),n.d(t,"scaleIdentity",(function(){return Gm})),n.d(t,"scaleLinear",(function(){return Jm})),n.d(t,"scaleLog",(function(){return np})),n.d(t,"scaleSymlog",(function(){return op})),n.d(t,"scaleOrdinal",(function(){return Hm})),n.d(t,"scaleImplicit",(function(){return Sm})),n.d(t,"scalePow",(function(){return lp})),n.d(t,"scaleSqrt",(function(){return fp})),n.d(t,"scaleQuantile",(function(){return hp})),n.d(t,"scaleQuantize",(function(){return _p})),n.d(t,"scaleThreshold",(function(){return mp})),n.d(t,"scaleTime",(function(){return lM})),n.d(t,"scaleUtc",(function(){return fM})),n.d(t,"scaleSequential",(function(){return mM})),n.d(t,"scaleSequentialLog",(function(){return pM})),n.d(t,"scaleSequentialPow",(function(){return gM})),n.d(t,"scaleSequentialSqrt",(function(){return MM})),n.d(t,"scaleSequentialSymlog",(function(){return yM})),n.d(t,"scaleSequentialQuantile",(function(){return vM})),n.d(t,"scaleDiverging",(function(){return LM})),n.d(t,"scaleDivergingLog",(function(){return YM})),n.d(t,"scaleDivergingPow",(function(){return wM})),n.d(t,"scaleDivergingSqrt",(function(){return DM})),n.d(t,"scaleDivergingSymlog",(function(){return kM})),n.d(t,"tickFormat",(function(){return Um})),n.d(t,"schemeCategory10",(function(){return TM})),n.d(t,"schemeAccent",(function(){return SM})),n.d(t,"schemeDark2",(function(){return HM})),n.d(t,"schemePaired",(function(){return jM})),n.d(t,"schemePastel1",(function(){return AM})),n.d(t,"schemePastel2",(function(){return EM})),n.d(t,"schemeSet1",(function(){return PM})),n.d(t,"schemeSet2",(function(){return CM})),n.d(t,"schemeSet3",(function(){return OM})),n.d(t,"schemeTableau10",(function(){return NM})),n.d(t,"interpolateBrBG",(function(){return FM})),n.d(t,"schemeBrBG",(function(){return zM})),n.d(t,"interpolatePRGn",(function(){return IM})),n.d(t,"schemePRGn",(function(){return RM})),n.d(t,"interpolatePiYG",(function(){return UM})),n.d(t,"schemePiYG",(function(){return qM})),n.d(t,"interpolatePuOr",(function(){return JM})),n.d(t,"schemePuOr",(function(){return BM})),n.d(t,"interpolateRdBu",(function(){return VM})),n.d(t,"schemeRdBu",(function(){return GM})),n.d(t,"interpolateRdGy",(function(){return XM})),n.d(t,"schemeRdGy",(function(){return $M})),n.d(t,"interpolateRdYlBu",(function(){return KM})),n.d(t,"schemeRdYlBu",(function(){return ZM})),n.d(t,"interpolateRdYlGn",(function(){return ev})),n.d(t,"schemeRdYlGn",(function(){return QM})),n.d(t,"interpolateSpectral",(function(){return nv})),n.d(t,"schemeSpectral",(function(){return tv})),n.d(t,"interpolateBuGn",(function(){return av})),n.d(t,"schemeBuGn",(function(){return rv})),n.d(t,"interpolateBuPu",(function(){return ov})),n.d(t,"schemeBuPu",(function(){return iv})),n.d(t,"interpolateGnBu",(function(){return uv})),n.d(t,"schemeGnBu",(function(){return sv})),n.d(t,"interpolateOrRd",(function(){return cv})),n.d(t,"schemeOrRd",(function(){return dv})),n.d(t,"interpolatePuBuGn",(function(){return fv})),n.d(t,"schemePuBuGn",(function(){return lv})),n.d(t,"interpolatePuBu",(function(){return _v})),n.d(t,"schemePuBu",(function(){return hv})),n.d(t,"interpolatePuRd",(function(){return pv})),n.d(t,"schemePuRd",(function(){return mv})),n.d(t,"interpolateRdPu",(function(){return gv})),n.d(t,"schemeRdPu",(function(){return yv})),n.d(t,"interpolateYlGnBu",(function(){return vv})),n.d(t,"schemeYlGnBu",(function(){return Mv})),n.d(t,"interpolateYlGn",(function(){return Lv})),n.d(t,"schemeYlGn",(function(){return bv})),n.d(t,"interpolateYlOrBr",(function(){return kv})),n.d(t,"schemeYlOrBr",(function(){return Yv})),n.d(t,"interpolateYlOrRd",(function(){return Dv})),n.d(t,"schemeYlOrRd",(function(){return wv})),n.d(t,"interpolateBlues",(function(){return Tv})),n.d(t,"schemeBlues",(function(){return xv})),n.d(t,"interpolateGreens",(function(){return Hv})),n.d(t,"schemeGreens",(function(){return Sv})),n.d(t,"interpolateGreys",(function(){return Av})),n.d(t,"schemeGreys",(function(){return jv})),n.d(t,"interpolatePurples",(function(){return Pv})),n.d(t,"schemePurples",(function(){return Ev})),n.d(t,"interpolateReds",(function(){return Ov})),n.d(t,"schemeReds",(function(){return Cv})),n.d(t,"interpolateOranges",(function(){return Wv})),n.d(t,"schemeOranges",(function(){return Nv})),n.d(t,"interpolateCividis",(function(){return zv})),n.d(t,"interpolateCubehelixDefault",(function(){return Fv})),n.d(t,"interpolateRainbow",(function(){return Uv})),n.d(t,"interpolateWarm",(function(){return Rv})),n.d(t,"interpolateCool",(function(){return Iv})),n.d(t,"interpolateSinebow",(function(){return Vv})),n.d(t,"interpolateTurbo",(function(){return $v})),n.d(t,"interpolateViridis",(function(){return Zv})),n.d(t,"interpolateMagma",(function(){return Kv})),n.d(t,"interpolateInferno",(function(){return Qv})),n.d(t,"interpolatePlasma",(function(){return eb})),n.d(t,"create",(function(){return St})),n.d(t,"creator",(function(){return be})),n.d(t,"local",(function(){return jt})),n.d(t,"matcher",(function(){return De})),n.d(t,"mouse",(function(){return Ct})),n.d(t,"namespace",(function(){return ge})),n.d(t,"namespaces",(function(){return ye})),n.d(t,"clientPoint",(function(){return Pt})),n.d(t,"select",(function(){return Tt})),n.d(t,"selectAll",(function(){return Ot})),n.d(t,"selection",(function(){return xt})),n.d(t,"selector",(function(){return Ye})),n.d(t,"selectorAll",(function(){return we})),n.d(t,"style",(function(){return qe})),n.d(t,"touch",(function(){return Nt})),n.d(t,"touches",(function(){return Wt})),n.d(t,"window",(function(){return ze})),n.d(t,"event",(function(){return _t})),n.d(t,"customEvent",(function(){return vt})),n.d(t,"arc",(function(){return vb})),n.d(t,"area",(function(){return Db})),n.d(t,"line",(function(){return wb})),n.d(t,"pie",(function(){return Sb})),n.d(t,"areaRadial",(function(){return Cb})),n.d(t,"radialArea",(function(){return Cb})),n.d(t,"lineRadial",(function(){return Pb})),n.d(t,"radialLine",(function(){return Pb})),n.d(t,"pointRadial",(function(){return Ob})),n.d(t,"linkHorizontal",(function(){return Ub})),n.d(t,"linkVertical",(function(){return Bb})),n.d(t,"linkRadial",(function(){return Jb})),n.d(t,"symbol",(function(){return cL})),n.d(t,"symbols",(function(){return dL})),n.d(t,"symbolCircle",(function(){return Gb})),n.d(t,"symbolCross",(function(){return Vb})),n.d(t,"symbolDiamond",(function(){return Zb})),n.d(t,"symbolSquare",(function(){return nL})),n.d(t,"symbolStar",(function(){return tL})),n.d(t,"symbolTriangle",(function(){return aL})),n.d(t,"symbolWye",(function(){return uL})),n.d(t,"curveBasisClosed",(function(){return pL})),n.d(t,"curveBasisOpen",(function(){return gL})),n.d(t,"curveBasis",(function(){return _L})),n.d(t,"curveBundle",(function(){return vL})),n.d(t,"curveCardinalClosed",(function(){return wL})),n.d(t,"curveCardinalOpen",(function(){return xL})),n.d(t,"curveCardinal",(function(){return YL})),n.d(t,"curveCatmullRomClosed",(function(){return AL})),n.d(t,"curveCatmullRomOpen",(function(){return PL})),n.d(t,"curveCatmullRom",(function(){return HL})),n.d(t,"curveLinearClosed",(function(){return OL})),n.d(t,"curveLinear",(function(){return Lb})),n.d(t,"curveMonotoneX",(function(){return UL})),n.d(t,"curveMonotoneY",(function(){return BL})),n.d(t,"curveNatural",(function(){return VL})),n.d(t,"curveStep",(function(){return XL})),n.d(t,"curveStepAfter",(function(){return KL})),n.d(t,"curveStepBefore",(function(){return ZL})),n.d(t,"stack",(function(){return nY})),n.d(t,"stackOffsetExpand",(function(){return rY})),n.d(t,"stackOffsetDiverging",(function(){return aY})),n.d(t,"stackOffsetNone",(function(){return QL})),n.d(t,"stackOffsetSilhouette",(function(){return iY})),n.d(t,"stackOffsetWiggle",(function(){return oY})),n.d(t,"stackOrderAppearance",(function(){return sY})),n.d(t,"stackOrderAscending",(function(){return dY})),n.d(t,"stackOrderDescending",(function(){return lY})),n.d(t,"stackOrderInsideOut",(function(){return fY})),n.d(t,"stackOrderNone",(function(){return eY})),n.d(t,"stackOrderReverse",(function(){return hY})),n.d(t,"timeInterval",(function(){return gp})),n.d(t,"timeMillisecond",(function(){return vp})),n.d(t,"timeMilliseconds",(function(){return bp})),n.d(t,"utcMillisecond",(function(){return vp})),n.d(t,"utcMilliseconds",(function(){return bp})),n.d(t,"timeSecond",(function(){return wp})),n.d(t,"timeSeconds",(function(){return Dp})),n.d(t,"utcSecond",(function(){return wp})),n.d(t,"utcSeconds",(function(){return Dp})),n.d(t,"timeMinute",(function(){return Tp})),n.d(t,"timeMinutes",(function(){return Sp})),n.d(t,"timeHour",(function(){return jp})),n.d(t,"timeHours",(function(){return Ap})),n.d(t,"timeDay",(function(){return Pp})),n.d(t,"timeDays",(function(){return Cp})),n.d(t,"timeWeek",(function(){return Np})),n.d(t,"timeWeeks",(function(){return Up})),n.d(t,"timeSunday",(function(){return Np})),n.d(t,"timeSundays",(function(){return Up})),n.d(t,"timeMonday",(function(){return Wp})),n.d(t,"timeMondays",(function(){return Bp})),n.d(t,"timeTuesday",(function(){return zp})),n.d(t,"timeTuesdays",(function(){return Jp})),n.d(t,"timeWednesday",(function(){return Fp})),n.d(t,"timeWednesdays",(function(){return Gp})),n.d(t,"timeThursday",(function(){return Rp})),n.d(t,"timeThursdays",(function(){return Vp})),n.d(t,"timeFriday",(function(){return Ip})),n.d(t,"timeFridays",(function(){return $p})),n.d(t,"timeSaturday",(function(){return qp})),n.d(t,"timeSaturdays",(function(){return Xp})),n.d(t,"timeMonth",(function(){return Kp})),n.d(t,"timeMonths",(function(){return Qp})),n.d(t,"timeYear",(function(){return ty})),n.d(t,"timeYears",(function(){return ny})),n.d(t,"utcMinute",(function(){return ay})),n.d(t,"utcMinutes",(function(){return iy})),n.d(t,"utcHour",(function(){return sy})),n.d(t,"utcHours",(function(){return uy})),n.d(t,"utcDay",(function(){return cy})),n.d(t,"utcDays",(function(){return ly})),n.d(t,"utcWeek",(function(){return hy})),n.d(t,"utcWeeks",(function(){return vy})),n.d(t,"utcSunday",(function(){return hy})),n.d(t,"utcSundays",(function(){return vy})),n.d(t,"utcMonday",(function(){return _y})),n.d(t,"utcMondays",(function(){return by})),n.d(t,"utcTuesday",(function(){return my})),n.d(t,"utcTuesdays",(function(){return Ly})),n.d(t,"utcWednesday",(function(){return py})),n.d(t,"utcWednesdays",(function(){return Yy})),n.d(t,"utcThursday",(function(){return yy})),n.d(t,"utcThursdays",(function(){return ky})),n.d(t,"utcFriday",(function(){return gy})),n.d(t,"utcFridays",(function(){return wy})),n.d(t,"utcSaturday",(function(){return My})),n.d(t,"utcSaturdays",(function(){return Dy})),n.d(t,"utcMonth",(function(){return Ty})),n.d(t,"utcMonths",(function(){return Sy})),n.d(t,"utcYear",(function(){return jy})),n.d(t,"utcYears",(function(){return Ay})),n.d(t,"timeFormatDefaultLocale",(function(){return Kg})),n.d(t,"timeFormat",(function(){return Wy})),n.d(t,"timeParse",(function(){return zy})),n.d(t,"utcFormat",(function(){return Fy})),n.d(t,"utcParse",(function(){return Ry})),n.d(t,"timeFormatLocale",(function(){return Oy})),n.d(t,"isoFormat",(function(){return Qg})),n.d(t,"isoParse",(function(){return eM})),n.d(t,"now",(function(){return da})),n.d(t,"timer",(function(){return fa})),n.d(t,"timerFlush",(function(){return ha})),n.d(t,"timeout",(function(){return ya})),n.d(t,"interval",(function(){return ga})),n.d(t,"transition",(function(){return ni})),n.d(t,"active",(function(){return $i})),n.d(t,"interrupt",(function(){return Aa})),n.d(t,"voronoi",(function(){return KY})),n.d(t,"zoom",(function(){return fk})),n.d(t,"zoomTransform",(function(){return rk})),n.d(t,"zoomIdentity",(function(){return nk}))},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var a=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),i=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot).concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}var o,s,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2],"{").concat(n,"}"):n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var o=0;o<e.length;o++){var s=e[o];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="(".concat(s[2],") and (").concat(n,")")),t.push(s))}},t}},function(e,t,n){"use strict";var r,a={},i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}();function s(e,t){for(var n=[],r={},a=0;a<e.length;a++){var i=e[a],o=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[o]?r[o].parts.push(s):n.push(r[o]={id:o,parts:[s]})}return n}function u(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=a[r.id],o=0;if(i){for(i.refs++;o<i.parts.length;o++)i.parts[o](r.parts[o]);for(;o<r.parts.length;o++)i.parts.push(p(r.parts[o],t))}else{for(var s=[];o<r.parts.length;o++)s.push(p(r.parts[o],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function d(e){var t=document.createElement("style");if(void 0===e.attributes.nonce){var r=n.nc;r&&(e.attributes.nonce=r)}if(Object.keys(e.attributes).forEach((function(n){t.setAttribute(n,e.attributes[n])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function f(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function h(e,t,n){var r=n.css,a=n.media,i=n.sourceMap;if(a&&e.setAttribute("media",a),i&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var _=null,m=0;function p(e,t){var n,r,a;if(t.singleton){var i=m++;n=_||(_=d(t)),r=f.bind(null,n,i,!1),a=f.bind(null,n,i,!0)}else n=d(t),r=h.bind(null,n,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).attributes="object"==typeof t.attributes?t.attributes:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=s(e,t);return u(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var o=n[i],d=a[o.id];d&&(d.refs--,r.push(d))}e&&u(s(e,t),t);for(var c=0;c<r.length;c++){var l=r[c];if(0===l.refs){for(var f=0;f<l.parts.length;f++)l.parts[f]();delete a[l.id]}}}}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,o){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,o){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function o(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:o,ss:o,m:o,mm:o,h:o,hh:o,d:o,dd:o,M:o,MM:o,y:o,yy:o},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var o="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":return i?"sekunnin":"sekuntia";case"m":return i?"minuutin":"minuutti";case"mm":o=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":o=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":o=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":o=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":o=i?"vuoden":"vuotta"}return o=function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+o}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voranim",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,o){var s=e+" ";return 1===e?s+n(0,t,i[0],o):t?s+(r(e)?a(i)[1]:a(i)[0]):o?s+a(i)[1]:s+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t?e:"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r?a[n][0]:t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(0))},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,a){"use strict";var i=[],o=n.document,s=Object.getPrototypeOf,u=i.slice,d=i.concat,c=i.push,l=i.indexOf,f={},h=f.toString,_=f.hasOwnProperty,m=_.toString,p=m.call(Object),y={},g=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},M=function(e){return null!=e&&e===e.window},v={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,a,i=(n=n||o).createElement("script");if(i.text=e,t)for(r in v)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);n.head.appendChild(i).parentNode.removeChild(i)}function L(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[h.call(e)]||"object":typeof e}var Y=function(e,t){return new Y.fn.init(e,t)},k=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function w(e){var t=!!e&&"length"in e&&e.length,n=L(e);return!g(e)&&!M(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}Y.fn=Y.prototype={jquery:"3.4.1",constructor:Y,length:0,toArray:function(){return u.call(this)},get:function(e){return null==e?u.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=Y.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return Y.each(this,e)},map:function(e){return this.pushStack(Y.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(u.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},Y.extend=Y.fn.extend=function(){var e,t,n,r,a,i,o=arguments[0]||{},s=1,u=arguments.length,d=!1;for("boolean"==typeof o&&(d=o,o=arguments[s]||{},s++),"object"==typeof o||g(o)||(o={}),s===u&&(o=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&o!==r&&(d&&r&&(Y.isPlainObject(r)||(a=Array.isArray(r)))?(n=o[t],i=a&&!Array.isArray(n)?[]:a||Y.isPlainObject(n)?n:{},a=!1,o[t]=Y.extend(d,i,r)):void 0!==r&&(o[t]=r));return o},Y.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=s(e))||"function"==typeof(n=_.call(t,"constructor")&&t.constructor)&&m.call(n)===p)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(w(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(k,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(w(Object(e))?Y.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,o=!n;a<i;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,o=[];if(w(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&o.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&o.push(a);return d.apply([],o)},guid:1,support:y}),"function"==typeof Symbol&&(Y.fn[Symbol.iterator]=i[Symbol.iterator]),Y.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var D=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){var t,n,r,a,i,o,s,u,d,c,l,f,h,_,m,p,y,g,M,v="sizzle"+1*new Date,b=e.document,L=0,Y=0,k=ue(),w=ue(),D=ue(),x=ue(),T=function(e,t){return e===t&&(l=!0),0},S={}.hasOwnProperty,H=[],j=H.pop,A=H.push,E=H.push,P=H.slice,C=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",N="[\\x20\\t\\r\\n\\f]",W="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",z="\\["+N+"*("+W+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+W+"))|)"+N+"*\\]",F=":("+W+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+z+")*)|.*)\\)|)",R=new RegExp(N+"+","g"),I=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g"),q=new RegExp("^"+N+"*,"+N+"*"),U=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),B=new RegExp(N+"|>"),J=new RegExp(F),G=new RegExp("^"+W+"$"),V={ID:new RegExp("^#("+W+")"),CLASS:new RegExp("^\\.("+W+")"),TAG:new RegExp("^("+W+"|[*])"),ATTR:new RegExp("^"+z),PSEUDO:new RegExp("^"+F),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},$=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+N+"?|("+N+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ae=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},oe=ve((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{E.apply(H=P.call(b.childNodes),b.childNodes),H[b.childNodes.length].nodeType}catch(e){E={apply:H.length?function(e,t){A.apply(e,P.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,a){var i,s,d,c,l,_,y,g=t&&t.ownerDocument,L=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==L&&9!==L&&11!==L)return r;if(!a&&((t?t.ownerDocument||t:b)!==h&&f(t),t=t||h,m)){if(11!==L&&(l=Q.exec(e)))if(i=l[1]){if(9===L){if(!(d=t.getElementById(i)))return r;if(d.id===i)return r.push(d),r}else if(g&&(d=g.getElementById(i))&&M(t,d)&&d.id===i)return r.push(d),r}else{if(l[2])return E.apply(r,t.getElementsByTagName(e)),r;if((i=l[3])&&n.getElementsByClassName&&t.getElementsByClassName)return E.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!x[e+" "]&&(!p||!p.test(e))&&(1!==L||"object"!==t.nodeName.toLowerCase())){if(y=e,g=t,1===L&&B.test(e)){for((c=t.getAttribute("id"))?c=c.replace(re,ae):t.setAttribute("id",c=v),s=(_=o(e)).length;s--;)_[s]="#"+c+" "+Me(_[s]);y=_.join(","),g=ee.test(e)&&ye(t.parentNode)||t}try{return E.apply(r,g.querySelectorAll(y)),r}catch(t){x(e,!0)}finally{c===v&&t.removeAttribute("id")}}}return u(e.replace(I,"$1"),t,r,a)}function ue(){var e=[];return function t(n,a){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=a}}function de(e){return e[v]=!0,e}function ce(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){for(var n=e.split("|"),a=n.length;a--;)r.attrHandle[n[a]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function _e(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&oe(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pe(e){return de((function(t){return t=+t,de((function(n,r){for(var a,i=e([],n.length,t),o=i.length;o--;)n[a=i[o]]&&(n[a]=!(r[a]=n[a]))}))}))}function ye(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!$.test(t||n&&n.nodeName||"HTML")},f=se.setDocument=function(e){var t,a,o=e?e.ownerDocument||e:b;return o!==h&&9===o.nodeType&&o.documentElement?(_=(h=o).documentElement,m=!i(h),b!==h&&(a=h.defaultView)&&a.top!==a&&(a.addEventListener?a.addEventListener("unload",ie,!1):a.attachEvent&&a.attachEvent("onunload",ie)),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=ce((function(e){return _.appendChild(e).id=v,!h.getElementsByName||!h.getElementsByName(v).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[a++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},y=[],p=[],(n.qsa=K.test(h.querySelectorAll))&&(ce((function(e){_.appendChild(e).innerHTML="<a id='"+v+"'></a><select id='"+v+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&p.push("[*^$]="+N+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||p.push("\\["+N+"*(?:value|"+O+")"),e.querySelectorAll("[id~="+v+"-]").length||p.push("~="),e.querySelectorAll(":checked").length||p.push(":checked"),e.querySelectorAll("a#"+v+"+*").length||p.push(".#.+[+~]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&p.push("name"+N+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&p.push(":enabled",":disabled"),_.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&p.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),p.push(",.*:")}))),(n.matchesSelector=K.test(g=_.matches||_.webkitMatchesSelector||_.mozMatchesSelector||_.oMatchesSelector||_.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),y.push("!=",F)})),p=p.length&&new RegExp(p.join("|")),y=y.length&&new RegExp(y.join("|")),t=K.test(_.compareDocumentPosition),M=t||K.test(_.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},T=t?function(e,t){if(e===t)return l=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===h||e.ownerDocument===b&&M(b,e)?-1:t===h||t.ownerDocument===b&&M(b,t)?1:c?C(c,e)-C(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return l=!0,0;var n,r=0,a=e.parentNode,i=t.parentNode,o=[e],s=[t];if(!a||!i)return e===h?-1:t===h?1:a?-1:i?1:c?C(c,e)-C(c,t):0;if(a===i)return fe(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?fe(o[r],s[r]):o[r]===b?-1:s[r]===b?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&f(e),n.matchesSelector&&m&&!x[t+" "]&&(!y||!y.test(t))&&(!p||!p.test(t)))try{var r=g.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){x(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==h&&f(e),M(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==h&&f(e);var a=r.attrHandle[t.toLowerCase()],i=a&&S.call(r.attrHandle,t.toLowerCase())?a(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,ae)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],a=0,i=0;if(l=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(T),l){for(;t=e[i++];)t===e[i]&&(a=r.push(i));for(;a--;)e.splice(r[a],1)}return c=null,e},a=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=a(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=a(t);return n},(r=se.selectors={cacheLength:50,createPseudo:de,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&J.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=k[e+" "];return t||(t=new RegExp("(^|"+N+")"+e+"("+N+"|$)"))&&k(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var a=se.attr(r,e);return null==a?"!="===t:!t||(a+="","="===t?a===n:"!="===t?a!==n:"^="===t?n&&0===a.indexOf(n):"*="===t?n&&a.indexOf(n)>-1:"$="===t?n&&a.slice(-n.length)===n:"~="===t?(" "+a.replace(R," ")+" ").indexOf(n)>-1:"|="===t&&(a===n||a.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,a){var i="nth"!==e.slice(0,3),o="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===a?function(e){return!!e.parentNode}:function(t,n,u){var d,c,l,f,h,_,m=i!==o?"nextSibling":"previousSibling",p=t.parentNode,y=s&&t.nodeName.toLowerCase(),g=!u&&!s,M=!1;if(p){if(i){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===y:1===f.nodeType)return!1;_=m="only"===e&&!_&&"nextSibling"}return!0}if(_=[o?p.firstChild:p.lastChild],o&&g){for(M=(h=(d=(c=(l=(f=p)[v]||(f[v]={}))[f.uniqueID]||(l[f.uniqueID]={}))[e]||[])[0]===L&&d[1])&&d[2],f=h&&p.childNodes[h];f=++h&&f&&f[m]||(M=h=0)||_.pop();)if(1===f.nodeType&&++M&&f===t){c[e]=[L,h,M];break}}else if(g&&(M=h=(d=(c=(l=(f=t)[v]||(f[v]={}))[f.uniqueID]||(l[f.uniqueID]={}))[e]||[])[0]===L&&d[1]),!1===M)for(;(f=++h&&f&&f[m]||(M=h=0)||_.pop())&&((s?f.nodeName.toLowerCase()!==y:1!==f.nodeType)||!++M||(g&&((c=(l=f[v]||(f[v]={}))[f.uniqueID]||(l[f.uniqueID]={}))[e]=[L,M]),f!==t)););return(M-=a)===r||M%r==0&&M/r>=0}}},PSEUDO:function(e,t){var n,a=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[v]?a(t):a.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?de((function(e,n){for(var r,i=a(e,t),o=i.length;o--;)e[r=C(e,i[o])]=!(n[r]=i[o])})):function(e){return a(e,0,n)}):a}},pseudos:{not:de((function(e){var t=[],n=[],r=s(e.replace(I,"$1"));return r[v]?de((function(e,t,n,a){for(var i,o=r(e,null,a,[]),s=e.length;s--;)(i=o[s])&&(e[s]=!(t[s]=i))})):function(e,a,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:de((function(e){return function(t){return se(e,t).length>0}})),contains:de((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||a(t)).indexOf(e)>-1}})),lang:de((function(e){return G.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===_},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Z.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:pe((function(){return[0]})),last:pe((function(e,t){return[t-1]})),eq:pe((function(e,t,n){return[n<0?n+t:n]})),even:pe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:pe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:pe((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:pe((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=_e(t);function ge(){}function Me(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function ve(e,t,n){var r=t.dir,a=t.next,i=a||r,o=n&&"parentNode"===i,s=Y++;return t.first?function(t,n,a){for(;t=t[r];)if(1===t.nodeType||o)return e(t,n,a);return!1}:function(t,n,u){var d,c,l,f=[L,s];if(u){for(;t=t[r];)if((1===t.nodeType||o)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||o)if(c=(l=t[v]||(t[v]={}))[t.uniqueID]||(l[t.uniqueID]={}),a&&a===t.nodeName.toLowerCase())t=t[r]||t;else{if((d=c[i])&&d[0]===L&&d[1]===s)return f[2]=d[2];if(c[i]=f,f[2]=e(t,n,u))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var a=e.length;a--;)if(!e[a](t,n,r))return!1;return!0}:e[0]}function Le(e,t,n,r,a){for(var i,o=[],s=0,u=e.length,d=null!=t;s<u;s++)(i=e[s])&&(n&&!n(i,r,a)||(o.push(i),d&&t.push(s)));return o}function Ye(e,t,n,r,a,i){return r&&!r[v]&&(r=Ye(r)),a&&!a[v]&&(a=Ye(a,i)),de((function(i,o,s,u){var d,c,l,f=[],h=[],_=o.length,m=i||function(e,t,n){for(var r=0,a=t.length;r<a;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),p=!e||!i&&t?m:Le(m,f,e,s,u),y=n?a||(i?e:_||r)?[]:o:p;if(n&&n(p,y,s,u),r)for(d=Le(y,h),r(d,[],s,u),c=d.length;c--;)(l=d[c])&&(y[h[c]]=!(p[h[c]]=l));if(i){if(a||e){if(a){for(d=[],c=y.length;c--;)(l=y[c])&&d.push(p[c]=l);a(null,y=[],d,u)}for(c=y.length;c--;)(l=y[c])&&(d=a?C(i,l):f[c])>-1&&(i[d]=!(o[d]=l))}}else y=Le(y===o?y.splice(_,y.length):y),a?a(null,o,y,u):E.apply(o,y)}))}function ke(e){for(var t,n,a,i=e.length,o=r.relative[e[0].type],s=o||r.relative[" "],u=o?1:0,c=ve((function(e){return e===t}),s,!0),l=ve((function(e){return C(t,e)>-1}),s,!0),f=[function(e,n,r){var a=!o&&(r||n!==d)||((t=n).nodeType?c(e,n,r):l(e,n,r));return t=null,a}];u<i;u++)if(n=r.relative[e[u].type])f=[ve(be(f),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[v]){for(a=++u;a<i&&!r.relative[e[a].type];a++);return Ye(u>1&&be(f),u>1&&Me(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(I,"$1"),n,u<a&&ke(e.slice(u,a)),a<i&&ke(e=e.slice(a)),a<i&&Me(e))}f.push(n)}return be(f)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,o=se.tokenize=function(e,t){var n,a,i,o,s,u,d,c=w[e+" "];if(c)return t?0:c.slice(0);for(s=e,u=[],d=r.preFilter;s;){for(o in n&&!(a=q.exec(s))||(a&&(s=s.slice(a[0].length)||s),u.push(i=[])),n=!1,(a=U.exec(s))&&(n=a.shift(),i.push({value:n,type:a[0].replace(I," ")}),s=s.slice(n.length)),r.filter)!(a=V[o].exec(s))||d[o]&&!(a=d[o](a))||(n=a.shift(),i.push({value:n,type:o,matches:a}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):w(e,u).slice(0)},s=se.compile=function(e,t){var n,a=[],i=[],s=D[e+" "];if(!s){for(t||(t=o(e)),n=t.length;n--;)(s=ke(t[n]))[v]?a.push(s):i.push(s);(s=D(e,function(e,t){var n=t.length>0,a=e.length>0,i=function(i,o,s,u,c){var l,_,p,y=0,g="0",M=i&&[],v=[],b=d,Y=i||a&&r.find.TAG("*",c),k=L+=null==b?1:Math.random()||.1,w=Y.length;for(c&&(d=o===h||o||c);g!==w&&null!=(l=Y[g]);g++){if(a&&l){for(_=0,o||l.ownerDocument===h||(f(l),s=!m);p=e[_++];)if(p(l,o||h,s)){u.push(l);break}c&&(L=k)}n&&((l=!p&&l)&&y--,i&&M.push(l))}if(y+=g,n&&g!==y){for(_=0;p=t[_++];)p(M,v,o,s);if(i){if(y>0)for(;g--;)M[g]||v[g]||(v[g]=j.call(u));v=Le(v)}E.apply(u,v),c&&!i&&v.length>0&&y+t.length>1&&se.uniqueSort(u)}return c&&(L=k,d=b),M};return n?de(i):i}(i,a))).selector=e}return s},u=se.select=function(e,t,n,a){var i,u,d,c,l,f="function"==typeof e&&e,h=!a&&o(e=f.selector||e);if(n=n||[],1===h.length){if((u=h[0]=h[0].slice(0)).length>2&&"ID"===(d=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(d.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=V.needsContext.test(e)?0:u.length;i--&&(d=u[i],!r.relative[c=d.type]);)if((l=r.find[c])&&(a=l(d.matches[0].replace(te,ne),ee.test(u[0].type)&&ye(t.parentNode)||t))){if(u.splice(i,1),!(e=a.length&&Me(u)))return E.apply(n,a),n;break}}return(f||s(e,h))(a,t,!m,n,!t||ee.test(e)&&ye(t.parentNode)||t),n},n.sortStable=v.split("").sort(T).join("")===v,n.detectDuplicates=!!l,f(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||le("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||le("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||le(O,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);Y.find=D,Y.expr=D.selectors,Y.expr[":"]=Y.expr.pseudos,Y.uniqueSort=Y.unique=D.uniqueSort,Y.text=D.getText,Y.isXMLDoc=D.isXML,Y.contains=D.contains,Y.escapeSelector=D.escape;var x=function(e,t,n){for(var r=[],a=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&Y(e).is(n))break;r.push(e)}return r},T=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},S=Y.expr.match.needsContext;function H(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var j=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return g(t)?Y.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?Y.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?Y.grep(e,(function(e){return l.call(t,e)>-1!==n})):Y.filter(t,e,n)}Y.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?Y.find.matchesSelector(r,e)?[r]:[]:Y.find.matches(e,Y.grep(t,(function(e){return 1===e.nodeType})))},Y.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(Y(e).filter((function(){for(t=0;t<r;t++)if(Y.contains(a[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)Y.find(e,a[t],n);return r>1?Y.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&S.test(e)?Y(e):e||[],!1).length}});var E,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(Y.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||E,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:P.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof Y?t[0]:t,Y.merge(this,Y.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),j.test(r[1])&&Y.isPlainObject(t))for(r in t)g(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=o.getElementById(r[2]))&&(this[0]=a,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(Y):Y.makeArray(e,this)}).prototype=Y.fn,E=Y(o);var C=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}Y.fn.extend({has:function(e){var t=Y(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(Y.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,a=this.length,i=[],o="string"!=typeof e&&Y(e);if(!S.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&Y.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?Y.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?l.call(Y(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Y.uniqueSort(Y.merge(this.get(),Y(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Y.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x(e,"parentNode")},parentsUntil:function(e,t,n){return x(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return x(e,"nextSibling")},prevAll:function(e){return x(e,"previousSibling")},nextUntil:function(e,t,n){return x(e,"nextSibling",n)},prevUntil:function(e,t,n){return x(e,"previousSibling",n)},siblings:function(e){return T((e.parentNode||{}).firstChild,e)},children:function(e){return T(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(H(e,"template")&&(e=e.content||e),Y.merge([],e.childNodes))}},(function(e,t){Y.fn[e]=function(n,r){var a=Y.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(a=Y.filter(r,a)),this.length>1&&(O[e]||Y.uniqueSort(a),C.test(e)&&a.reverse()),this.pushStack(a)}}));var W=/[^\x20\t\r\n\f]+/g;function z(e){return e}function F(e){throw e}function R(e,t,n,r){var a;try{e&&g(a=e.promise)?a.call(e).done(t).fail(n):e&&g(a=e.then)?a.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}Y.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return Y.each(e.match(W)||[],(function(e,n){t[n]=!0})),t}(e):Y.extend({},e);var t,n,r,a,i=[],o=[],s=-1,u=function(){for(a=a||e.once,r=t=!0;o.length;s=-1)for(n=o.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,a&&(i=n?[]:"")},d={add:function(){return i&&(n&&!t&&(s=i.length-1,o.push(n)),function t(n){Y.each(n,(function(n,r){g(r)?e.unique&&d.has(r)||i.push(r):r&&r.length&&"string"!==L(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return Y.each(arguments,(function(e,t){for(var n;(n=Y.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?Y.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return a=o=[],i=n="",this},disabled:function(){return!i},lock:function(){return a=o=[],n||t||(i=n=""),this},locked:function(){return!!a},fireWith:function(e,n){return a||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||u()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},Y.extend({Deferred:function(e){var t=[["notify","progress",Y.Callbacks("memory"),Y.Callbacks("memory"),2],["resolve","done",Y.Callbacks("once memory"),Y.Callbacks("once memory"),0,"resolved"],["reject","fail",Y.Callbacks("once memory"),Y.Callbacks("once memory"),1,"rejected"]],r="pending",a={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return Y.Deferred((function(n){Y.each(t,(function(t,r){var a=g(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=a&&a.apply(this,arguments);e&&g(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,a?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,a){var i=0;function o(e,t,r,a){return function(){var s=this,u=arguments,d=function(){var n,d;if(!(e<i)){if((n=r.apply(s,u))===t.promise())throw new TypeError("Thenable self-resolution");d=n&&("object"==typeof n||"function"==typeof n)&&n.then,g(d)?a?d.call(n,o(i,t,z,a),o(i,t,F,a)):(i++,d.call(n,o(i,t,z,a),o(i,t,F,a),o(i,t,z,t.notifyWith))):(r!==z&&(s=void 0,u=[n]),(a||t.resolveWith)(s,u))}},c=a?d:function(){try{d()}catch(n){Y.Deferred.exceptionHook&&Y.Deferred.exceptionHook(n,c.stackTrace),e+1>=i&&(r!==F&&(s=void 0,u=[n]),t.rejectWith(s,u))}};e?c():(Y.Deferred.getStackHook&&(c.stackTrace=Y.Deferred.getStackHook()),n.setTimeout(c))}}return Y.Deferred((function(n){t[0][3].add(o(0,n,g(a)?a:z,n.notifyWith)),t[1][3].add(o(0,n,g(e)?e:z)),t[2][3].add(o(0,n,g(r)?r:F))})).promise()},promise:function(e){return null!=e?Y.extend(e,a):a}},i={};return Y.each(t,(function(e,n){var o=n[2],s=n[5];a[n[1]]=o.add,s&&o.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=o.fireWith})),a.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),a=u.call(arguments),i=Y.Deferred(),o=function(e){return function(n){r[e]=this,a[e]=arguments.length>1?u.call(arguments):n,--t||i.resolveWith(r,a)}};if(t<=1&&(R(e,i.done(o(n)).resolve,i.reject,!t),"pending"===i.state()||g(a[n]&&a[n].then)))return i.then();for(;n--;)R(a[n],o(n),i.reject);return i.promise()}});var I=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;Y.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&I.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},Y.readyException=function(e){n.setTimeout((function(){throw e}))};var q=Y.Deferred();function U(){o.removeEventListener("DOMContentLoaded",U),n.removeEventListener("load",U),Y.ready()}Y.fn.ready=function(e){return q.then(e).catch((function(e){Y.readyException(e)})),this},Y.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--Y.readyWait:Y.isReady)||(Y.isReady=!0,!0!==e&&--Y.readyWait>0||q.resolveWith(o,[Y]))}}),Y.ready.then=q.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?n.setTimeout(Y.ready):(o.addEventListener("DOMContentLoaded",U),n.addEventListener("load",U));var B=function(e,t,n,r,a,i,o){var s=0,u=e.length,d=null==n;if("object"===L(n))for(s in a=!0,n)B(e,t,s,n[s],!0,i,o);else if(void 0!==r&&(a=!0,g(r)||(o=!0),d&&(o?(t.call(e,r),t=null):(d=t,t=function(e,t,n){return d.call(Y(e),n)})),t))for(;s<u;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return a?e:d?t.call(e):u?t(e[0],n):i},J=/^-ms-/,G=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function $(e){return e.replace(J,"ms-").replace(G,V)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Z(){this.expando=Y.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[$(t)]=n;else for(r in t)a[$(r)]=t[r];return a},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][$(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map($):(t=$(t))in r?[t]:t.match(W)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||Y.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!Y.isEmptyObject(t)}};var K=new Z,Q=new Z,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}Y.extend({hasData:function(e){return Q.hasData(e)||K.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return K.access(e,t,n)},_removeData:function(e,t){K.remove(e,t)}}),Y.fn.extend({data:function(e,t){var n,r,a,i=this[0],o=i&&i.attributes;if(void 0===e){if(this.length&&(a=Q.get(i),1===i.nodeType&&!K.get(i,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(r=o[n].name).indexOf("data-")&&(r=$(r.slice(5)),ne(i,r,a[r]));K.set(i,"hasDataAttrs",!0)}return a}return"object"==typeof e?this.each((function(){Q.set(this,e)})):B(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Q.get(i,e))?n:void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Q.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Q.remove(this,e)}))}}),Y.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=K.get(e,t),n&&(!r||Array.isArray(n)?r=K.access(e,t,Y.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=Y.queue(e,t),r=n.length,a=n.shift(),i=Y._queueHooks(e,t);"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,(function(){Y.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return K.get(e,n)||K.access(e,n,{empty:Y.Callbacks("once memory").add((function(){K.remove(e,[t+"queue",n])}))})}}),Y.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?Y.queue(this[0],e):void 0===t?this:this.each((function(){var n=Y.queue(this,e,t);Y._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&Y.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){Y.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=Y.Deferred(),i=this,o=this.length,s=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=K.get(i[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ae=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=o.documentElement,se=function(e){return Y.contains(e.ownerDocument,e)},ue={composed:!0};oe.getRootNode&&(se=function(e){return Y.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var de=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===Y.css(e,"display")},ce=function(e,t,n,r){var a,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in a=n.apply(e,r||[]),t)e.style[i]=o[i];return a};function le(e,t,n,r){var a,i,o=20,s=r?function(){return r.cur()}:function(){return Y.css(e,t,"")},u=s(),d=n&&n[3]||(Y.cssNumber[t]?"":"px"),c=e.nodeType&&(Y.cssNumber[t]||"px"!==d&&+u)&&ae.exec(Y.css(e,t));if(c&&c[3]!==d){for(u/=2,d=d||c[3],c=+u||1;o--;)Y.style(e,t,c+d),(1-i)*(1-(i=s()/u||.5))<=0&&(o=0),c/=i;c*=2,Y.style(e,t,c+d),n=n||[]}return n&&(c=+c||+u||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=d,r.start=c,r.end=a)),a}var fe={};function he(e){var t,n=e.ownerDocument,r=e.nodeName,a=fe[r];return a||(t=n.body.appendChild(n.createElement(r)),a=Y.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),fe[r]=a,a)}function _e(e,t){for(var n,r,a=[],i=0,o=e.length;i<o;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=K.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&de(r)&&(a[i]=he(r))):"none"!==n&&(a[i]="none",K.set(r,"display",n)));for(i=0;i<o;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}Y.fn.extend({show:function(){return _e(this,!0)},hide:function(){return _e(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){de(this)?Y(this).show():Y(this).hide()}))}});var me=/^(?:checkbox|radio)$/i,pe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ye=/^$|^module$|\/(?:java|ecma)script/i,ge={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Me(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&H(e,t)?Y.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)K.set(e[n],"globalEval",!t||K.get(t[n],"globalEval"))}ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;var be,Le,Ye=/<|&#?\w+;/;function ke(e,t,n,r,a){for(var i,o,s,u,d,c,l=t.createDocumentFragment(),f=[],h=0,_=e.length;h<_;h++)if((i=e[h])||0===i)if("object"===L(i))Y.merge(f,i.nodeType?[i]:i);else if(Ye.test(i)){for(o=o||l.appendChild(t.createElement("div")),s=(pe.exec(i)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,o.innerHTML=u[1]+Y.htmlPrefilter(i)+u[2],c=u[0];c--;)o=o.lastChild;Y.merge(f,o.childNodes),(o=l.firstChild).textContent=""}else f.push(t.createTextNode(i));for(l.textContent="",h=0;i=f[h++];)if(r&&Y.inArray(i,r)>-1)a&&a.push(i);else if(d=se(i),o=Me(l.appendChild(i),"script"),d&&ve(o),n)for(c=0;i=o[c++];)ye.test(i.type||"")&&n.push(i);return l}be=o.createDocumentFragment().appendChild(o.createElement("div")),(Le=o.createElement("input")).setAttribute("type","radio"),Le.setAttribute("checked","checked"),Le.setAttribute("name","t"),be.appendChild(Le),y.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var we=/^key/,De=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xe=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Se(){return!1}function He(e,t){return e===function(){try{return o.activeElement}catch(e){}}()==("focus"===t)}function je(e,t,n,r,a,i){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)je(e,s,n,r,t[s],i);return e}if(null==r&&null==a?(a=n,r=n=void 0):null==a&&("string"==typeof n?(a=r,r=void 0):(a=r,r=n,n=void 0)),!1===a)a=Se;else if(!a)return e;return 1===i&&(o=a,(a=function(e){return Y().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=Y.guid++)),e.each((function(){Y.event.add(this,t,a,r,n)}))}function Ae(e,t,n){n?(K.set(e,t,!1),Y.event.add(e,t,{namespace:!1,handler:function(e){var r,a,i=K.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(Y.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=u.call(arguments),K.set(this,t,i),r=n(this,t),this[t](),i!==(a=K.get(this,t))||r?K.set(this,t,!1):a={},i!==a)return e.stopImmediatePropagation(),e.preventDefault(),a.value}else i.length&&(K.set(this,t,{value:Y.event.trigger(Y.extend(i[0],Y.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===K.get(e,t)&&Y.event.add(e,t,Te)}Y.event={global:{},add:function(e,t,n,r,a){var i,o,s,u,d,c,l,f,h,_,m,p=K.get(e);if(p)for(n.handler&&(n=(i=n).handler,a=i.selector),a&&Y.find.matchesSelector(oe,a),n.guid||(n.guid=Y.guid++),(u=p.events)||(u=p.events={}),(o=p.handle)||(o=p.handle=function(t){return void 0!==Y&&Y.event.triggered!==t.type?Y.event.dispatch.apply(e,arguments):void 0}),d=(t=(t||"").match(W)||[""]).length;d--;)h=m=(s=xe.exec(t[d])||[])[1],_=(s[2]||"").split(".").sort(),h&&(l=Y.event.special[h]||{},h=(a?l.delegateType:l.bindType)||h,l=Y.event.special[h]||{},c=Y.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&Y.expr.match.needsContext.test(a),namespace:_.join(".")},i),(f=u[h])||((f=u[h]=[]).delegateCount=0,l.setup&&!1!==l.setup.call(e,r,_,o)||e.addEventListener&&e.addEventListener(h,o)),l.add&&(l.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),a?f.splice(f.delegateCount++,0,c):f.push(c),Y.event.global[h]=!0)},remove:function(e,t,n,r,a){var i,o,s,u,d,c,l,f,h,_,m,p=K.hasData(e)&&K.get(e);if(p&&(u=p.events)){for(d=(t=(t||"").match(W)||[""]).length;d--;)if(h=m=(s=xe.exec(t[d])||[])[1],_=(s[2]||"").split(".").sort(),h){for(l=Y.event.special[h]||{},f=u[h=(r?l.delegateType:l.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+_.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=f.length;i--;)c=f[i],!a&&m!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(i,1),c.selector&&f.delegateCount--,l.remove&&l.remove.call(e,c));o&&!f.length&&(l.teardown&&!1!==l.teardown.call(e,_,p.handle)||Y.removeEvent(e,h,p.handle),delete u[h])}else for(h in u)Y.event.remove(e,h+t[d],n,r,!0);Y.isEmptyObject(u)&&K.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,o,s=Y.event.fix(e),u=new Array(arguments.length),d=(K.get(this,"events")||{})[s.type]||[],c=Y.event.special[s.type]||{};for(u[0]=s,t=1;t<arguments.length;t++)u[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(o=Y.event.handlers.call(this,s,d),t=0;(a=o[t++])&&!s.isPropagationStopped();)for(s.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(r=((Y.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,u))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,a,i,o,s=[],u=t.delegateCount,d=e.target;if(u&&d.nodeType&&!("click"===e.type&&e.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==e.type||!0!==d.disabled)){for(i=[],o={},n=0;n<u;n++)void 0===o[a=(r=t[n]).selector+" "]&&(o[a]=r.needsContext?Y(a,this).index(d)>-1:Y.find(a,this,null,[d]).length),o[a]&&i.push(r);i.length&&s.push({elem:d,handlers:i})}return d=this,u<t.length&&s.push({elem:d,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(Y.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[Y.expando]?e:new Y.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&H(t,"input")&&Ae(t,"click",Te),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&H(t,"input")&&Ae(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&H(t,"input")&&K.get(t,"click")||H(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},Y.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},Y.Event=function(e,t){if(!(this instanceof Y.Event))return new Y.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&Y.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[Y.expando]=!0},Y.Event.prototype={constructor:Y.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},Y.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&De.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},Y.event.addProp),Y.each({focus:"focusin",blur:"focusout"},(function(e,t){Y.event.special[e]={setup:function(){return Ae(this,e,He),!1},trigger:function(){return Ae(this,e),!0},delegateType:t}})),Y.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){Y.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,a=e.relatedTarget,i=e.handleObj;return a&&(a===r||Y.contains(r,a))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),Y.fn.extend({on:function(e,t,n,r){return je(this,e,t,n,r)},one:function(e,t,n,r){return je(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,Y(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(a in e)this.off(a,t,e[a]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each((function(){Y.event.remove(this,e,n,t)}))}});var Ee=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Pe=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ne(e,t){return H(e,"table")&&H(11!==t.nodeType?t:t.firstChild,"tr")&&Y(e).children("tbody")[0]||e}function We(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function ze(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Fe(e,t){var n,r,a,i,o,s,u,d;if(1===t.nodeType){if(K.hasData(e)&&(i=K.access(e),o=K.set(t,i),d=i.events))for(a in delete o.handle,o.events={},d)for(n=0,r=d[a].length;n<r;n++)Y.event.add(t,a,d[a][n]);Q.hasData(e)&&(s=Q.access(e),u=Y.extend({},s),Q.set(t,u))}}function Re(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Ie(e,t,n,r){t=d.apply([],t);var a,i,o,s,u,c,l=0,f=e.length,h=f-1,_=t[0],m=g(_);if(m||f>1&&"string"==typeof _&&!y.checkClone&&Ce.test(_))return e.each((function(a){var i=e.eq(a);m&&(t[0]=_.call(this,a,i.html())),Ie(i,t,n,r)}));if(f&&(i=(a=ke(t,e[0].ownerDocument,!1,e,r)).firstChild,1===a.childNodes.length&&(a=i),i||r)){for(s=(o=Y.map(Me(a,"script"),We)).length;l<f;l++)u=a,l!==h&&(u=Y.clone(u,!0,!0),s&&Y.merge(o,Me(u,"script"))),n.call(e[l],u,l);if(s)for(c=o[o.length-1].ownerDocument,Y.map(o,ze),l=0;l<s;l++)u=o[l],ye.test(u.type||"")&&!K.access(u,"globalEval")&&Y.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?Y._evalUrl&&!u.noModule&&Y._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")}):b(u.textContent.replace(Oe,""),u,c))}return e}function qe(e,t,n){for(var r,a=t?Y.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||Y.cleanData(Me(r)),r.parentNode&&(n&&se(r)&&ve(Me(r,"script")),r.parentNode.removeChild(r));return e}Y.extend({htmlPrefilter:function(e){return e.replace(Ee,"<$1></$2>")},clone:function(e,t,n){var r,a,i,o,s=e.cloneNode(!0),u=se(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Y.isXMLDoc(e)))for(o=Me(s),r=0,a=(i=Me(e)).length;r<a;r++)Re(i[r],o[r]);if(t)if(n)for(i=i||Me(e),o=o||Me(s),r=0,a=i.length;r<a;r++)Fe(i[r],o[r]);else Fe(e,s);return(o=Me(s,"script")).length>0&&ve(o,!u&&Me(e,"script")),s},cleanData:function(e){for(var t,n,r,a=Y.event.special,i=0;void 0!==(n=e[i]);i++)if(X(n)){if(t=n[K.expando]){if(t.events)for(r in t.events)a[r]?Y.event.remove(n,r):Y.removeEvent(n,r,t.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),Y.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return B(this,(function(e){return void 0===e?Y.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Ie(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ne(this,e).appendChild(e)}))},prepend:function(){return Ie(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ne(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Ie(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Ie(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Y.cleanData(Me(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return Y.clone(this,e,t)}))},html:function(e){return B(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Pe.test(e)&&!ge[(pe.exec(e)||["",""])[1].toLowerCase()]){e=Y.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(Y.cleanData(Me(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Ie(this,arguments,(function(t){var n=this.parentNode;Y.inArray(this,e)<0&&(Y.cleanData(Me(this)),n&&n.replaceChild(t,this))}),e)}}),Y.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){Y.fn[e]=function(e){for(var n,r=[],a=Y(e),i=a.length-1,o=0;o<=i;o++)n=o===i?this:this.clone(!0),Y(a[o])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var Ue=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Be=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Je=new RegExp(ie.join("|"),"i");function Ge(e,t,n){var r,a,i,o,s=e.style;return(n=n||Be(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||se(e)||(o=Y.style(e,t)),!y.pixelBoxStyles()&&Ue.test(o)&&Je.test(t)&&(r=s.width,a=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=a,s.maxWidth=i)),void 0!==o?o+"":o}function Ve(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){d.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(d).appendChild(c);var e=n.getComputedStyle(c);r="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",s=36===t(e.right),a=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),oe.removeChild(d),c=null}}function t(e){return Math.round(parseFloat(e))}var r,a,i,s,u,d=o.createElement("div"),c=o.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===c.style.backgroundClip,Y.extend(y,{boxSizingReliable:function(){return e(),a},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i}}))}();var $e=["Webkit","Moz","ms"],Xe=o.createElement("div").style,Ze={};function Ke(e){var t=Y.cssProps[e]||Ze[e];return t||(e in Xe?e:Ze[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=$e.length;n--;)if((e=$e[n]+t)in Xe)return e}(e)||e)}var Qe=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=ae.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function at(e,t,n,r,a,i){var o="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(u+=Y.css(e,n+ie[o],!0,a)),r?("content"===n&&(u-=Y.css(e,"padding"+ie[o],!0,a)),"margin"!==n&&(u-=Y.css(e,"border"+ie[o]+"Width",!0,a))):(u+=Y.css(e,"padding"+ie[o],!0,a),"padding"!==n?u+=Y.css(e,"border"+ie[o]+"Width",!0,a):s+=Y.css(e,"border"+ie[o]+"Width",!0,a));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-s-.5))||0),u}function it(e,t,n){var r=Be(e),a=(!y.boxSizingReliable()||n)&&"border-box"===Y.css(e,"boxSizing",!1,r),i=a,o=Ge(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(o)){if(!n)return o;o="auto"}return(!y.boxSizingReliable()&&a||"auto"===o||!parseFloat(o)&&"inline"===Y.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===Y.css(e,"boxSizing",!1,r),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+at(e,t,n||(a?"border":"content"),i,r,o)+"px"}function ot(e,t,n,r,a){return new ot.prototype.init(e,t,n,r,a)}Y.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ge(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,o,s=$(t),u=et.test(t),d=e.style;if(u||(t=Ke(s)),o=Y.cssHooks[t]||Y.cssHooks[s],void 0===n)return o&&"get"in o&&void 0!==(a=o.get(e,!1,r))?a:d[t];"string"===(i=typeof n)&&(a=ae.exec(n))&&a[1]&&(n=le(e,t,a),i="number"),null!=n&&n==n&&("number"!==i||u||(n+=a&&a[3]||(Y.cssNumber[s]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(d[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,r))||(u?d.setProperty(t,n):d[t]=n))}},css:function(e,t,n,r){var a,i,o,s=$(t);return et.test(t)||(t=Ke(s)),(o=Y.cssHooks[t]||Y.cssHooks[s])&&"get"in o&&(a=o.get(e,!0,n)),void 0===a&&(a=Ge(e,t,r)),"normal"===a&&t in nt&&(a=nt[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),Y.each(["height","width"],(function(e,t){Y.cssHooks[t]={get:function(e,n,r){if(n)return!Qe.test(Y.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?it(e,t,r):ce(e,tt,(function(){return it(e,t,r)}))},set:function(e,n,r){var a,i=Be(e),o=!y.scrollboxSize()&&"absolute"===i.position,s=(o||r)&&"border-box"===Y.css(e,"boxSizing",!1,i),u=r?at(e,t,r,s,i):0;return s&&o&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-at(e,t,"border",!1,i)-.5)),u&&(a=ae.exec(n))&&"px"!==(a[3]||"px")&&(e.style[t]=n,n=Y.css(e,t)),rt(0,n,u)}}})),Y.cssHooks.marginLeft=Ve(y.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ge(e,"marginLeft"))||e.getBoundingClientRect().left-ce(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),Y.each({margin:"",padding:"",border:"Width"},(function(e,t){Y.cssHooks[e+t]={expand:function(n){for(var r=0,a={},i="string"==typeof n?n.split(" "):[n];r<4;r++)a[e+ie[r]+t]=i[r]||i[r-2]||i[0];return a}},"margin"!==e&&(Y.cssHooks[e+t].set=rt)})),Y.fn.extend({css:function(e,t){return B(this,(function(e,t,n){var r,a,i={},o=0;if(Array.isArray(t)){for(r=Be(e),a=t.length;o<a;o++)i[t[o]]=Y.css(e,t[o],!1,r);return i}return void 0!==n?Y.style(e,t,n):Y.css(e,t)}),e,t,arguments.length>1)}}),Y.Tween=ot,ot.prototype={constructor:ot,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||Y.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(Y.cssNumber[n]?"":"px")},cur:function(){var e=ot.propHooks[this.prop];return e&&e.get?e.get(this):ot.propHooks._default.get(this)},run:function(e){var t,n=ot.propHooks[this.prop];return this.options.duration?this.pos=t=Y.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ot.propHooks._default.set(this),this}},ot.prototype.init.prototype=ot.prototype,ot.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=Y.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){Y.fx.step[e.prop]?Y.fx.step[e.prop](e):1!==e.elem.nodeType||!Y.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:Y.style(e.elem,e.prop,e.now+e.unit)}}},ot.propHooks.scrollTop=ot.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Y.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},Y.fx=ot.prototype.init,Y.fx.step={};var st,ut,dt=/^(?:toggle|show|hide)$/,ct=/queueHooks$/;function lt(){ut&&(!1===o.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(lt):n.setTimeout(lt,Y.fx.interval),Y.fx.tick())}function ft(){return n.setTimeout((function(){st=void 0})),st=Date.now()}function ht(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=ie[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function _t(e,t,n){for(var r,a=(mt.tweeners[t]||[]).concat(mt.tweeners["*"]),i=0,o=a.length;i<o;i++)if(r=a[i].call(n,t,e))return r}function mt(e,t,n){var r,a,i=0,o=mt.prefilters.length,s=Y.Deferred().always((function(){delete u.elem})),u=function(){if(a)return!1;for(var t=st||ft(),n=Math.max(0,d.startTime+d.duration-t),r=1-(n/d.duration||0),i=0,o=d.tweens.length;i<o;i++)d.tweens[i].run(r);return s.notifyWith(e,[d,r,n]),r<1&&o?n:(o||s.notifyWith(e,[d,1,0]),s.resolveWith(e,[d]),!1)},d=s.promise({elem:e,props:Y.extend({},t),opts:Y.extend(!0,{specialEasing:{},easing:Y.easing._default},n),originalProperties:t,originalOptions:n,startTime:st||ft(),duration:n.duration,tweens:[],createTween:function(t,n){var r=Y.Tween(e,d.opts,t,n,d.opts.specialEasing[t]||d.opts.easing);return d.tweens.push(r),r},stop:function(t){var n=0,r=t?d.tweens.length:0;if(a)return this;for(a=!0;n<r;n++)d.tweens[n].run(1);return t?(s.notifyWith(e,[d,1,0]),s.resolveWith(e,[d,t])):s.rejectWith(e,[d,t]),this}}),c=d.props;for(!function(e,t){var n,r,a,i,o;for(n in e)if(a=t[r=$(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(o=Y.cssHooks[r])&&"expand"in o)for(n in i=o.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}(c,d.opts.specialEasing);i<o;i++)if(r=mt.prefilters[i].call(d,e,c,d.opts))return g(r.stop)&&(Y._queueHooks(d.elem,d.opts.queue).stop=r.stop.bind(r)),r;return Y.map(c,_t,d),g(d.opts.start)&&d.opts.start.call(e,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),Y.fx.timer(Y.extend(u,{elem:e,anim:d,queue:d.opts.queue})),d}Y.Animation=Y.extend(mt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ae.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(W);for(var n,r=0,a=e.length;r<a;r++)n=e[r],mt.tweeners[n]=mt.tweeners[n]||[],mt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,a,i,o,s,u,d,c,l="width"in t||"height"in t,f=this,h={},_=e.style,m=e.nodeType&&de(e),p=K.get(e,"fxshow");for(r in n.queue||(null==(o=Y._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,f.always((function(){f.always((function(){o.unqueued--,Y.queue(e,"fx").length||o.empty.fire()}))}))),t)if(a=t[r],dt.test(a)){if(delete t[r],i=i||"toggle"===a,a===(m?"hide":"show")){if("show"!==a||!p||void 0===p[r])continue;m=!0}h[r]=p&&p[r]||Y.style(e,r)}if((u=!Y.isEmptyObject(t))||!Y.isEmptyObject(h))for(r in l&&1===e.nodeType&&(n.overflow=[_.overflow,_.overflowX,_.overflowY],null==(d=p&&p.display)&&(d=K.get(e,"display")),"none"===(c=Y.css(e,"display"))&&(d?c=d:(_e([e],!0),d=e.style.display||d,c=Y.css(e,"display"),_e([e]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===Y.css(e,"float")&&(u||(f.done((function(){_.display=d})),null==d&&(c=_.display,d="none"===c?"":c)),_.display="inline-block")),n.overflow&&(_.overflow="hidden",f.always((function(){_.overflow=n.overflow[0],_.overflowX=n.overflow[1],_.overflowY=n.overflow[2]}))),u=!1,h)u||(p?"hidden"in p&&(m=p.hidden):p=K.access(e,"fxshow",{display:d}),i&&(p.hidden=!m),m&&_e([e],!0),f.done((function(){for(r in m||_e([e]),K.remove(e,"fxshow"),h)Y.style(e,r,h[r])}))),u=_t(m?p[r]:0,r,f),r in p||(p[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?mt.prefilters.unshift(e):mt.prefilters.push(e)}}),Y.speed=function(e,t,n){var r=e&&"object"==typeof e?Y.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return Y.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in Y.fx.speeds?r.duration=Y.fx.speeds[r.duration]:r.duration=Y.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&Y.dequeue(this,r.queue)},r},Y.fn.extend({fadeTo:function(e,t,n,r){return this.filter(de).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var a=Y.isEmptyObject(e),i=Y.speed(t,n,r),o=function(){var t=mt(this,Y.extend({},e),i);(a||K.get(this,"finish"))&&t.stop(!0)};return o.finish=o,a||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,a=null!=e&&e+"queueHooks",i=Y.timers,o=K.get(this);if(a)o[a]&&o[a].stop&&r(o[a]);else for(a in o)o[a]&&o[a].stop&&ct.test(a)&&r(o[a]);for(a=i.length;a--;)i[a].elem!==this||null!=e&&i[a].queue!==e||(i[a].anim.stop(n),t=!1,i.splice(a,1));!t&&n||Y.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=K.get(this),r=n[e+"queue"],a=n[e+"queueHooks"],i=Y.timers,o=r?r.length:0;for(n.finish=!0,Y.queue(this,e,[]),a&&a.stop&&a.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<o;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),Y.each(["toggle","show","hide"],(function(e,t){var n=Y.fn[t];Y.fn[t]=function(e,r,a){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ht(t,!0),e,r,a)}})),Y.each({slideDown:ht("show"),slideUp:ht("hide"),slideToggle:ht("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){Y.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),Y.timers=[],Y.fx.tick=function(){var e,t=0,n=Y.timers;for(st=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||Y.fx.stop(),st=void 0},Y.fx.timer=function(e){Y.timers.push(e),Y.fx.start()},Y.fx.interval=13,Y.fx.start=function(){ut||(ut=!0,lt())},Y.fx.stop=function(){ut=null},Y.fx.speeds={slow:600,fast:200,_default:400},Y.fn.delay=function(e,t){return e=Y.fx&&Y.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var a=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(a)}}))},function(){var e=o.createElement("input"),t=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=o.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var pt,yt=Y.expr.attrHandle;Y.fn.extend({attr:function(e,t){return B(this,Y.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){Y.removeAttr(this,e)}))}}),Y.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?Y.prop(e,t,n):(1===i&&Y.isXMLDoc(e)||(a=Y.attrHooks[t.toLowerCase()]||(Y.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void Y.removeAttr(e,t):a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=Y.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&H(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(W);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?Y.removeAttr(e,n):e.setAttribute(n,n),n}},Y.each(Y.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=yt[t]||Y.find.attr;yt[t]=function(e,t,r){var a,i,o=t.toLowerCase();return r||(i=yt[o],yt[o]=a,a=null!=n(e,t,r)?o:null,yt[o]=i),a}}));var gt=/^(?:input|select|textarea|button)$/i,Mt=/^(?:a|area)$/i;function vt(e){return(e.match(W)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function Lt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(W)||[]}Y.fn.extend({prop:function(e,t){return B(this,Y.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[Y.propFix[e]||e]}))}}),Y.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&Y.isXMLDoc(e)||(t=Y.propFix[t]||t,a=Y.propHooks[t]),void 0!==n?a&&"set"in a&&void 0!==(r=a.set(e,n,t))?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=Y.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||Mt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(Y.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),Y.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){Y.propFix[this.toLowerCase()]=this})),Y.fn.extend({addClass:function(e){var t,n,r,a,i,o,s,u=0;if(g(e))return this.each((function(t){Y(this).addClass(e.call(this,t,bt(this)))}));if((t=Lt(e)).length)for(;n=this[u++];)if(a=bt(n),r=1===n.nodeType&&" "+vt(a)+" "){for(o=0;i=t[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,a,i,o,s,u=0;if(g(e))return this.each((function(t){Y(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=Lt(e)).length)for(;n=this[u++];)if(a=bt(n),r=1===n.nodeType&&" "+vt(a)+" "){for(o=0;i=t[o++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");a!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each((function(n){Y(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,a,i,o;if(r)for(a=0,i=Y(this),o=Lt(e);t=o[a++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":K.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Yt=/\r/g;Y.fn.extend({val:function(e){var t,n,r,a=this[0];return arguments.length?(r=g(e),this.each((function(n){var a;1===this.nodeType&&(null==(a=r?e.call(this,n,Y(this).val()):e)?a="":"number"==typeof a?a+="":Array.isArray(a)&&(a=Y.map(a,(function(e){return null==e?"":e+""}))),(t=Y.valHooks[this.type]||Y.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,a,"value")||(this.value=a))}))):a?(t=Y.valHooks[a.type]||Y.valHooks[a.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(a,"value"))?n:"string"==typeof(n=a.value)?n.replace(Yt,""):null==n?"":n:void 0}}),Y.extend({valHooks:{option:{get:function(e){var t=Y.find.attr(e,"value");return null!=t?t:vt(Y.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],u=o?i+1:a.length;for(r=i<0?u:o?i:0;r<u;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!H(n.parentNode,"optgroup"))){if(t=Y(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,i=Y.makeArray(t),o=a.length;o--;)((r=a[o]).selected=Y.inArray(Y.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),Y.each(["radio","checkbox"],(function(){Y.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=Y.inArray(Y(e).val(),t)>-1}},y.checkOn||(Y.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),y.focusin="onfocusin"in n;var kt=/^(?:focusinfocus|focusoutblur)$/,wt=function(e){e.stopPropagation()};Y.extend(Y.event,{trigger:function(e,t,r,a){var i,s,u,d,c,l,f,h,m=[r||o],p=_.call(e,"type")?e.type:e,y=_.call(e,"namespace")?e.namespace.split("."):[];if(s=h=u=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!kt.test(p+Y.event.triggered)&&(p.indexOf(".")>-1&&(y=p.split("."),p=y.shift(),y.sort()),c=p.indexOf(":")<0&&"on"+p,(e=e[Y.expando]?e:new Y.Event(p,"object"==typeof e&&e)).isTrigger=a?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:Y.makeArray(t,[e]),f=Y.event.special[p]||{},a||!f.trigger||!1!==f.trigger.apply(r,t))){if(!a&&!f.noBubble&&!M(r)){for(d=f.delegateType||p,kt.test(d+p)||(s=s.parentNode);s;s=s.parentNode)m.push(s),u=s;u===(r.ownerDocument||o)&&m.push(u.defaultView||u.parentWindow||n)}for(i=0;(s=m[i++])&&!e.isPropagationStopped();)h=s,e.type=i>1?d:f.bindType||p,(l=(K.get(s,"events")||{})[e.type]&&K.get(s,"handle"))&&l.apply(s,t),(l=c&&s[c])&&l.apply&&X(s)&&(e.result=l.apply(s,t),!1===e.result&&e.preventDefault());return e.type=p,a||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(m.pop(),t)||!X(r)||c&&g(r[p])&&!M(r)&&((u=r[c])&&(r[c]=null),Y.event.triggered=p,e.isPropagationStopped()&&h.addEventListener(p,wt),r[p](),e.isPropagationStopped()&&h.removeEventListener(p,wt),Y.event.triggered=void 0,u&&(r[c]=u)),e.result}},simulate:function(e,t,n){var r=Y.extend(new Y.Event,n,{type:e,isSimulated:!0});Y.event.trigger(r,null,t)}}),Y.fn.extend({trigger:function(e,t){return this.each((function(){Y.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return Y.event.trigger(e,t,n,!0)}}),y.focusin||Y.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){Y.event.simulate(t,e.target,Y.event.fix(e))};Y.event.special[t]={setup:function(){var r=this.ownerDocument||this,a=K.access(r,t);a||r.addEventListener(e,n,!0),K.access(r,t,(a||0)+1)},teardown:function(){var r=this.ownerDocument||this,a=K.access(r,t)-1;a?K.access(r,t,a):(r.removeEventListener(e,n,!0),K.remove(r,t))}}}));var Dt=n.location,xt=Date.now(),Tt=/\?/;Y.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||Y.error("Invalid XML: "+e),t};var St=/\[\]$/,Ht=/\r?\n/g,jt=/^(?:submit|button|image|reset|file)$/i,At=/^(?:input|select|textarea|keygen)/i;function Et(e,t,n,r){var a;if(Array.isArray(t))Y.each(t,(function(t,a){n||St.test(e)?r(e,a):Et(e+"["+("object"==typeof a&&null!=a?t:"")+"]",a,n,r)}));else if(n||"object"!==L(t))r(e,t);else for(a in t)Et(e+"["+a+"]",t[a],n,r)}Y.param=function(e,t){var n,r=[],a=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!Y.isPlainObject(e))Y.each(e,(function(){a(this.name,this.value)}));else for(n in e)Et(n,e[n],t,a);return r.join("&")},Y.fn.extend({serialize:function(){return Y.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=Y.prop(this,"elements");return e?Y.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!Y(this).is(":disabled")&&At.test(this.nodeName)&&!jt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=Y(this).val();return null==n?null:Array.isArray(n)?Y.map(n,(function(e){return{name:t.name,value:e.replace(Ht,"\r\n")}})):{name:t.name,value:n.replace(Ht,"\r\n")}})).get()}});var Pt=/%20/g,Ct=/#.*$/,Ot=/([?&])_=[^&]*/,Nt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Wt=/^(?:GET|HEAD)$/,zt=/^\/\//,Ft={},Rt={},It="*/".concat("*"),qt=o.createElement("a");function Ut(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,a=0,i=t.toLowerCase().match(W)||[];if(g(n))for(;r=i[a++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Bt(e,t,n,r){var a={},i=e===Rt;function o(s){var u;return a[s]=!0,Y.each(e[s]||[],(function(e,s){var d=s(t,n,r);return"string"!=typeof d||i||a[d]?i?!(u=d):void 0:(t.dataTypes.unshift(d),o(d),!1)})),u}return o(t.dataTypes[0])||!a["*"]&&o("*")}function Jt(e,t){var n,r,a=Y.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&Y.extend(!0,e,r),e}qt.href=Dt.href,Y.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":It,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":Y.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,Y.ajaxSettings),t):Jt(Y.ajaxSettings,e)},ajaxPrefilter:Ut(Ft),ajaxTransport:Ut(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,a,i,s,u,d,c,l,f,h,_=Y.ajaxSetup({},t),m=_.context||_,p=_.context&&(m.nodeType||m.jquery)?Y(m):Y.event,y=Y.Deferred(),g=Y.Callbacks("once memory"),M=_.statusCode||{},v={},b={},L="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s)for(s={};t=Nt.exec(i);)s[t[1].toLowerCase()+" "]=(s[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=s[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,v[e]=t),this},overrideMimeType:function(e){return null==c&&(_.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)M[t]=[M[t],e[t]];return this},abort:function(e){var t=e||L;return r&&r.abort(t),w(0,t),this}};if(y.promise(k),_.url=((e||_.url||Dt.href)+"").replace(zt,Dt.protocol+"//"),_.type=t.method||t.type||_.method||_.type,_.dataTypes=(_.dataType||"*").toLowerCase().match(W)||[""],null==_.crossDomain){d=o.createElement("a");try{d.href=_.url,d.href=d.href,_.crossDomain=qt.protocol+"//"+qt.host!=d.protocol+"//"+d.host}catch(e){_.crossDomain=!0}}if(_.data&&_.processData&&"string"!=typeof _.data&&(_.data=Y.param(_.data,_.traditional)),Bt(Ft,_,t,k),c)return k;for(f in(l=Y.event&&_.global)&&0==Y.active++&&Y.event.trigger("ajaxStart"),_.type=_.type.toUpperCase(),_.hasContent=!Wt.test(_.type),a=_.url.replace(Ct,""),_.hasContent?_.data&&_.processData&&0===(_.contentType||"").indexOf("application/x-www-form-urlencoded")&&(_.data=_.data.replace(Pt,"+")):(h=_.url.slice(a.length),_.data&&(_.processData||"string"==typeof _.data)&&(a+=(Tt.test(a)?"&":"?")+_.data,delete _.data),!1===_.cache&&(a=a.replace(Ot,"$1"),h=(Tt.test(a)?"&":"?")+"_="+xt+++h),_.url=a+h),_.ifModified&&(Y.lastModified[a]&&k.setRequestHeader("If-Modified-Since",Y.lastModified[a]),Y.etag[a]&&k.setRequestHeader("If-None-Match",Y.etag[a])),(_.data&&_.hasContent&&!1!==_.contentType||t.contentType)&&k.setRequestHeader("Content-Type",_.contentType),k.setRequestHeader("Accept",_.dataTypes[0]&&_.accepts[_.dataTypes[0]]?_.accepts[_.dataTypes[0]]+("*"!==_.dataTypes[0]?", "+It+"; q=0.01":""):_.accepts["*"]),_.headers)k.setRequestHeader(f,_.headers[f]);if(_.beforeSend&&(!1===_.beforeSend.call(m,k,_)||c))return k.abort();if(L="abort",g.add(_.complete),k.done(_.success),k.fail(_.error),r=Bt(Rt,_,t,k)){if(k.readyState=1,l&&p.trigger("ajaxSend",[k,_]),c)return k;_.async&&_.timeout>0&&(u=n.setTimeout((function(){k.abort("timeout")}),_.timeout));try{c=!1,r.send(v,w)}catch(e){if(c)throw e;w(-1,e)}}else w(-1,"No Transport");function w(e,t,o,s){var d,f,h,v,b,L=t;c||(c=!0,u&&n.clearTimeout(u),r=void 0,i=s||"",k.readyState=e>0?4:0,d=e>=200&&e<300||304===e,o&&(v=function(e,t,n){for(var r,a,i,o,s=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){u.unshift(a);break}if(u[0]in n)i=u[0];else{for(a in n){if(!u[0]||e.converters[a+" "+u[0]]){i=a;break}o||(o=a)}i=i||o}if(i)return i!==u[0]&&u.unshift(i),n[i]}(_,k,o)),v=function(e,t,n,r){var a,i,o,s,u,d={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)d[o.toLowerCase()]=e.converters[o];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(o=d[u+" "+i]||d["* "+i]))for(a in d)if((s=a.split(" "))[1]===i&&(o=d[u+" "+s[0]]||d["* "+s[0]])){!0===o?o=d[a]:!0!==d[a]&&(i=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(_,v,k,d),d?(_.ifModified&&((b=k.getResponseHeader("Last-Modified"))&&(Y.lastModified[a]=b),(b=k.getResponseHeader("etag"))&&(Y.etag[a]=b)),204===e||"HEAD"===_.type?L="nocontent":304===e?L="notmodified":(L=v.state,f=v.data,d=!(h=v.error))):(h=L,!e&&L||(L="error",e<0&&(e=0))),k.status=e,k.statusText=(t||L)+"",d?y.resolveWith(m,[f,L,k]):y.rejectWith(m,[k,L,h]),k.statusCode(M),M=void 0,l&&p.trigger(d?"ajaxSuccess":"ajaxError",[k,_,d?f:h]),g.fireWith(m,[k,L]),l&&(p.trigger("ajaxComplete",[k,_]),--Y.active||Y.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return Y.get(e,t,n,"json")},getScript:function(e,t){return Y.get(e,void 0,t,"script")}}),Y.each(["get","post"],(function(e,t){Y[t]=function(e,n,r,a){return g(n)&&(a=a||r,r=n,n=void 0),Y.ajax(Y.extend({url:e,type:t,dataType:a,data:n,success:r},Y.isPlainObject(e)&&e))}})),Y._evalUrl=function(e,t){return Y.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){Y.globalEval(e,t)}})},Y.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=Y(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return g(e)?this.each((function(t){Y(this).wrapInner(e.call(this,t))})):this.each((function(){var t=Y(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=g(e);return this.each((function(n){Y(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){Y(this).replaceWith(this.childNodes)})),this}}),Y.expr.pseudos.hidden=function(e){return!Y.expr.pseudos.visible(e)},Y.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},Y.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Gt={0:200,1223:204},Vt=Y.ajaxSettings.xhr();y.cors=!!Vt&&"withCredentials"in Vt,y.ajax=Vt=!!Vt,Y.ajaxTransport((function(e){var t,r;if(y.cors||Vt&&!e.crossDomain)return{send:function(a,i){var o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)s[o]=e.xhrFields[o];for(o in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||a["X-Requested-With"]||(a["X-Requested-With"]="XMLHttpRequest"),a)s.setRequestHeader(o,a[o]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Gt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),Y.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),Y.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return Y.globalEval(e),e}}}),Y.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),Y.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,a){t=Y("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&a("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}));var $t,Xt=[],Zt=/(=)\?(?=&|$)|\?\?/;Y.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||Y.expando+"_"+xt++;return this[e]=!0,e}}),Y.ajaxPrefilter("json jsonp",(function(e,t,r){var a,i,o,s=!1!==e.jsonp&&(Zt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return a=e.jsonpCallback=g(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Zt,"$1"+a):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+a),e.converters["script json"]=function(){return o||Y.error(a+" was not called"),o[0]},e.dataTypes[0]="json",i=n[a],n[a]=function(){o=arguments},r.always((function(){void 0===i?Y(n).removeProp(a):n[a]=i,e[a]&&(e.jsonpCallback=t.jsonpCallback,Xt.push(a)),o&&g(i)&&i(o[0]),o=i=void 0})),"script"})),y.createHTMLDocument=(($t=o.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$t.childNodes.length),Y.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,t.head.appendChild(r)):t=o),i=!n&&[],(a=j.exec(e))?[t.createElement(a[1])]:(a=ke([e],t,i),i&&i.length&&Y(i).remove(),Y.merge([],a.childNodes)));var r,a,i},Y.fn.load=function(e,t,n){var r,a,i,o=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(a="POST"),o.length>0&&Y.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done((function(e){i=arguments,o.html(r?Y("<div>").append(Y.parseHTML(e)).find(r):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},Y.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){Y.fn[t]=function(e){return this.on(t,e)}})),Y.expr.pseudos.animated=function(e){return Y.grep(Y.timers,(function(t){return e===t.elem})).length},Y.offset={setOffset:function(e,t,n){var r,a,i,o,s,u,d=Y.css(e,"position"),c=Y(e),l={};"static"===d&&(e.style.position="relative"),s=c.offset(),i=Y.css(e,"top"),u=Y.css(e,"left"),("absolute"===d||"fixed"===d)&&(i+u).indexOf("auto")>-1?(o=(r=c.position()).top,a=r.left):(o=parseFloat(i)||0,a=parseFloat(u)||0),g(t)&&(t=t.call(e,n,Y.extend({},s))),null!=t.top&&(l.top=t.top-s.top+o),null!=t.left&&(l.left=t.left-s.left+a),"using"in t?t.using.call(e,l):c.css(l)}},Y.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){Y.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===Y.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===Y.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=Y(e).offset()).top+=Y.css(e,"borderTopWidth",!0),a.left+=Y.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-Y.css(r,"marginTop",!0),left:t.left-a.left-Y.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===Y.css(e,"position");)e=e.offsetParent;return e||oe}))}}),Y.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;Y.fn[e]=function(r){return B(this,(function(e,r,a){var i;if(M(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===a)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:a,n?a:i.pageYOffset):e[r]=a}),e,r,arguments.length)}})),Y.each(["top","left"],(function(e,t){Y.cssHooks[t]=Ve(y.pixelPosition,(function(e,n){if(n)return n=Ge(e,t),Ue.test(n)?Y(e).position()[t]+"px":n}))})),Y.each({Height:"height",Width:"width"},(function(e,t){Y.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){Y.fn[r]=function(a,i){var o=arguments.length&&(n||"boolean"!=typeof a),s=n||(!0===a||!0===i?"margin":"border");return B(this,(function(t,n,a){var i;return M(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===a?Y.css(t,n,s):Y.style(t,n,a,s)}),t,o?a:void 0,o)}}))})),Y.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){Y.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}})),Y.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),Y.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),Y.proxy=function(e,t){var n,r,a;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=u.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(u.call(arguments)))}).guid=e.guid=e.guid||Y.guid++,a},Y.holdReady=function(e){e?Y.readyWait++:Y.ready(!0)},Y.isArray=Array.isArray,Y.parseJSON=JSON.parse,Y.nodeName=H,Y.isFunction=g,Y.isWindow=M,Y.camelCase=$,Y.type=L,Y.now=Date.now,Y.isNumeric=function(e){var t=Y.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return Y}.apply(t,[]))||(e.exports=r);var Kt=n.jQuery,Qt=n.$;return Y.noConflict=function(e){return n.$===Y&&(n.$=Qt),e&&n.jQuery===Y&&(n.jQuery=Kt),Y},a||(n.jQuery=n.$=Y),Y}))},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(133);var i=n(135),o=n(137),s=n(139),u=n(145),d=r(n(1)),c=a(n(131));window.$=c.default;var l=n(150),f=n(151);document.addEventListener("DOMContentLoaded",(function(e){d.csv(f,l.preprocesar).then((function(e){o.Mapa({padreSelector:".mapa"}),u.nubes(".nubePalabras");var t=e,n=l.totalizarPorBarrio(t),r=l.convertirAMatriz(n),a=l.calcularMaxMin(r.datos),d=i.MapaCalor({padreSelector:".mapaCalor",labelscol:r.servicios,labelsrow:r.barrios,start_color:"rgb(215, 215, 215)",end_color:"rgb(0, 78, 255)",minValue:a.minValue,maxValue:a.maxValue,callback_Mapa:o.MapaEdit,callback_Barrio:o.ColorBarrio});s.SelectorTiempo({padreSelector:".selectorTiempo"},e,(function(t,n){var r=t&&n?e.filter((function(e){return e.timestamp>t&&e.timestamp<n})):e,a=l.totalizarPorBarrio(r.length>1?r:e),i=l.convertirAMatriz(a);i.datos.length>0&&d(i.datos)}))}))}))},function(e,t,n){var r=n(134);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(3)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,"h1{font-size: 1rem;text-align: center;font-family: 'Roboto', sans-serif;padding: 5px 0 0;font-weight: 700;}\r\nh2{font-size: 0.8rem;background: #5696AC;color:white;font-family: 'Roboto', sans-serif;padding: 5px;font-weight: 400;}\r\n\r\n.mapa,\r\n.mapaCalor{height: 410px;text-align: center;}\r\n.mapa svg{width: 500px;height: 400px;}\r\n.mapaCalor svg{width: 300px;}\r\n.mapa text.label {font-size: 8pt;font-weight: 700;}\r\n\r\n.background.bar {fill: #ccc;}\r\n.foreground.bar {fill: steelblue;}\r\n.daterangepicker {background-color: lightsteelblue !important;}\r\n\r\n.bt-tiempo{margin-left: 5px;}\r\n\r\n@media  only screen and (max-width: 1000px) {\r\n    .mapa > * {\r\n        flex: 1 100%;\r\n    }\r\n}\r\n\r\n\r\n/* Small devices (landscape phones, 576px and up) */\r\n@media (min-width: 576px) {}\r\n\r\n/* Medium devices (tablets, 768px and up) */\r\n@media (min-width: 768px) {}\r\n\r\n/* Large devices (desktops, 992px and up) */\r\n@media (min-width: 992px) {}\r\n\r\n/* Extra large devices (large desktops, 1200px and up) */\r\n@media (min-width: 1200px) {}",""])},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(1)),i=(n(136),[]);function o(e){if(0===e.length)return-1;for(var t=e[0],n=0,r=1;r<e.length;r++)e[r]>t&&(n=r,t=e[r]);return n}i[0]="rgb(28, 199, 240,",i[1]="rgb(111, 160, 176,",i[2]="rgb(153,0,204,",i[3]="rgb(255,0,0,",i[4]="rgb(77,218,72,",t.indexOfMax=o,t.MapaCalor=function(e){var t=5,n=100,r=100,s=e.padreSelector,u=e.labelscol,d=e.labelsrow,c=e.start_color,l=e.end_color,f=e.minValue,h=e.maxValue,_=a.select(s).append("svg").attr("width","100%").attr("height","100%").append("g").attr("transform","translate("+r+","+t+")"),m=(_.append("rect").style("stroke","black").style("stroke-width","2px").attr("width",190).attr("height",310),a.scaleBand().domain(a.range(u.length)).range([0,190])),p=a.scaleBand().domain(a.range(d.length)).range([0,310]),y=_.append("g").attr("class","labels"),g=y.selectAll(".column-label").data(u).enter().append("g").attr("class","column-label").attr("transform",(function(e,t){return"translate("+m(t)+",310)"})).style("stroke",(function(e,t){return i[t]+"255)"}));g.append("line").style("stroke","black").style("stroke-width","1px").attr("x1",m.bandwidth()/2).attr("x2",m.bandwidth()/2).attr("y1",0).attr("y2",5);var M=g.append("text").attr("x",0).attr("y",p.bandwidth()/2).attr("dy",".82em").attr("text-anchor","end").attr("transform","rotate(-60)").attr("id",(function(e,t){return u[t].replace(/\s/g,"-")})).text((function(e,t){return e})),v=y.selectAll(".row-label").data(d).enter().append("g").attr("class","row-label").attr("transform",(function(e,t){return"translate(0,"+p(t)+")"}));v.append("line").style("stroke","black").style("stroke-width","1px").attr("x1",0).attr("x2",-5).attr("y1",p.bandwidth()/2).attr("y2",p.bandwidth()/2);var b=v.append("text").attr("x",-8).attr("y",p.bandwidth()/2).attr("dy",".32em").attr("text-anchor","end").attr("id",(function(e,t){return d[t].replace(/\s/g,"-")})).text((function(e,t){return e})).attr("font-size","12px").attr("fill","black").style("stroke","black"),L=a.select("#legend").append("svg").attr("width",130).attr("height",310+t+n),Y=L.append("defs").append("svg:linearGradient").attr("id","gradient").attr("x1","100%").attr("y1","0%").attr("x2","100%").attr("y2","100%").attr("spreadMethod","pad");Y.append("stop").attr("offset","0%").attr("stop-color",l).attr("stop-opacity",1),Y.append("stop").attr("offset","100%").attr("stop-color",c).attr("stop-opacity",1),L.append("rect").attr("width",55).attr("height",310).style("fill","url(#gradient)").attr("transform","translate(0,"+t+")");var k=null,w=null;return function(n){if(M.on("mouseover",(function(t,r){g.selectAll("text").data(u).transition().duration(200).attr("font-size","16px").attr("fill","black");var a=(a="#").concat(u[r]).replace(/\s/g,"-");g.select(a).transition().duration(200).attr("font-size","21px").attr("fill","rgb(0, 78, 255)"),k=t,w=r,e.callback_Mapa(t,n.map((function(e){return e[r]})),d,i,w)})).on("mouseout",(function(t,r){g.selectAll("text").data(u).transition().duration(200).attr("font-size","16px").attr("fill","black"),k=null;for(var s=[],c=[],l=0;l<n.length;l++)s[l]=a.max(n[l]),s[l]>0?c[l]=i[o(n[l])]:c[l]="rgb(255, 255, 255,";e.callback_Mapa(k,s,d,c,0)})),b.on("mouseover",(function(e,t){})).on("mouseout",(function(e,t){})),k&&e.callback_Mapa(k,n.map((function(e){return e[w]})),d,i,w),null==k){for(var r=[],s=[],y=0;y<n.length;y++)r[y]=a.max(n[y]),r[y]>0?s[y]=i[o(n[y])]:s[y]="rgb(255, 255, 255,";e.callback_Mapa(k,r,d,s,0)}if(!Array.isArray(n)||!n.length||!Array.isArray(n[0]))throw new Error("It should be a 2-D array");var v=a.scaleLinear().domain([f,h]).range([c,l]),Y=_.selectAll(".row").data(n);Y.enter().append("g").attr("class","row").attr("transform",(function(e,t){return"translate(0,"+p(t)+")"})),Y.on("mouseover",(function(e,t){})).on("mouseout",(function(e,t){}));var D=Y.selectAll(".cell").data((function(e){return e}));D.enter().append("g").attr("class","cell").attr("transform",(function(e,t){return"translate("+m(t)+", 0)"})).on("mouseover",(function(e,t){})).on("mouseout",(function(e,t){})),D.append("rect").attr("width",m.bandwidth()).attr("height",p.bandwidth()).style("stroke-width",0),D.append("text").attr("dy",".32em").attr("x",m.bandwidth()/2).attr("y",p.bandwidth()/2).attr("text-anchor","middle").style("fill",(function(e,t){return e>=h/2?"white":"black"})).text((function(e,t){return e})),Y.selectAll(".cell").data((function(e,t){return n[t]})).style("fill",v);var x=a.scaleLinear().range([310,0]).domain([f,h]),T=a.axisRight(x);L.append("g").attr("class","y axis").attr("transform","translate(41,"+t+")").call(T)}}},function(e,t,n){e.exports=n.p+"6cd990e7d6c621b1a25a151754174c1b.csv"},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(1)),i=n(138);t.Mapa=function(e){var t=a.select(e.padreSelector).append("svg").attr("width","100%").attr("height","100%");a.json(i).then((function(e){!function(e,t){var n=a.geoMercator().fitSize([500,375],e),r=a.geoPath().projection(n);t.selectAll("path").data(e.features).enter().append("path").attr("d",r).attr("fill","white").attr("stroke","black").attr("id",(function(t,n){return e.features[n].properties.Nbrhood.replace(/\s/g,"-")})).on("mouseover",(function(){})).on("mouseout",(function(e,t){})),t.selectAll("text").data(e.features).enter().append("text").attr("class","label").attr("transform",(function(t,n){return"translate("+[r.centroid(e.features[n])[0]-e.features[n].properties.Nbrhood.length/2*6,r.centroid(e.features[n])[1]]+")"})).text((function(t,n){return e.features[n].properties.Nbrhood}))}(e,t)}))},t.ColorBarrio=function(e){if(a.selectAll("path").transition().duration(200).attr("fill","white"),""!==e){var t=(t="#").concat(e);a.select(t).transition().duration(200).attr("fill","red")}},t.MapaEdit=function(e,t,n,r,i){if(e){var o=Math.max.apply(null,t),s=0;o>0?n.forEach((function(e){e=e.replace(/\s/g,"-");var n=(n="#").concat(e);a.select(n).transition().duration(200).attr("fill",r[i]+t[s]/o+")"),s++})):n.forEach((function(e){e=e.replace(/\s/g,"-");var t=(t="#").concat(e);a.select(t).transition().duration(200).attr("fill","none"),s++}))}if(null==e){o=Math.max.apply(null,t),s=0;o>0?n.forEach((function(e){e=e.replace(/\s/g,"-");var n=(n="#").concat(e);a.select(n).transition().duration(200).attr("fill",r[s]+t[s]/o+")"),s++})):n.forEach((function(e){e=e.replace(/\s/g,"-");var t=(t="#").concat(e);a.select(t).transition().duration(200).attr("fill","none"),s++}))}}},function(e,t,n){e.exports=n.p+"cb6ae8e485b9404895c4983ffadae2c5.geojson"},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=r(n(1)),o=a(n(0));n(142),n(143);var s="DD/MM HH:mm",u=o.default("2020-04-06 00:00:00"),d=o.default("2020-04-11 00:00:00");t.SelectorTiempo=function(e,t,n){var r=i.nest().key((function(e){return new Date(18e5*Math.round(e.timestamp.getTime()/18e5)).toString()})).rollup((function(e){return{total:i.sum(e,(function(e){return e.total}))}})).entries(t).map((function(e){return Object.assign({},e,{timestamp:new Date(e.key)})})),a=10,c=10,l=10,f=31,h=1400-(f+c),_=140-(a+l),m=o.default("2020-04-08T08:36:00-03:00").toDate(),p=o.default("2020-04-08T08:36:00-03:00").toDate(),y=o.default("2020-04-08T13:36:00-03:00").toDate();i.select("#ir_terremoto_btb").on("click",(function(){var e=o.default(y).diff(o.default(p)),t=m,n=o.default(m).add(e).toDate();D(t,n),w.call(k.move,[t,n].map(b))})),i.select("#mover_ventana_der").on("click",(function(){var e=o.default(y).diff(o.default(p)),t=y,n=o.default(y).add(e).toDate();D(t,n),w.call(k.move,[t,n].map(b))})),i.select("#mover_ventana_izq").on("click",(function(){var e=o.default(p).diff(o.default(y)),t=o.default(p).add(e).toDate(),n=p;D(t,n),w.call(k.move,[t,n].map(b))}));var g=i.select(e.padreSelector).append("svg").attr("height","100%").attr("width","100%"),M=i.scaleLinear().range([_,0]).domain([0,50]),v=g.append("g").attr("transform","translate("+f+", 0)"),b=i.scaleTime().domain([u.toDate(),d.toDate()]).rangeRound([0,h]);v.append("g").attr("transform","translate(0, "+_+")").call(i.axisBottom(b)),v.selectAll().data(r).enter().append("rect").attr("x",(function(e){return b(e.timestamp)})).attr("y",(function(e){return M(e.value.total)})).attr("height",(function(e){return _-M(e.value.total)})).attr("width",5).style("fill","steelblue").style("stroke","black").style("stoke-width",1);var L=function(e){var t=+("e"==e.type),n=t?1:-1,r=_/2;return"M"+.5*n+","+r+"A6,6 0 0 "+t+" "+6.5*n+","+(r+6)+"V"+(2*r-6)+"A6,6 0 0 "+t+" "+.5*n+","+2*r+"ZM"+2.5*n+","+(r+8)+"V"+(2*r-8)+"M"+4.5*n+","+(r+8)+"V"+(2*r-8)},Y=function(e){var t=[b(p),b(y)];return e.selectAll(".handle--custom").data([{type:"w"},{type:"e"}]).join((function(e){return e.append("path").attr("class","handle--custom").attr("fill","#666").attr("fill-opacity",.8).attr("stroke","#000").attr("stroke-width",1.5).attr("cursor","ew-resize").attr("d",L)})).attr("transform",(function(e,n){return"translate("+t[n]+","+(-a-l)+")"}))},k=i.brushX();k.extent([[0,a],[h-(f+c),_]]).on("brush",(function(){var e=i.event.selection;if(null===e)D(p,y);else{var t=e.map(b.invert);D(t[0],t[1])}i.select(this).call(Y)}));var w=v.append("g").call(k);function D(e,t){if(e!=p||t!=y){var r=u.toDate(),a=d.toDate();p=r>e?r:e,y=a<t||t<r?a:t,$('input[name="datetimes"]').daterangepicker({timePicker:!0,showDropdowns:!0,drops:"up",startDate:o.default(p),endDate:o.default(d),timePicker24Hour:!0,minDate:u,maxDate:d,locale:{format:s}}),$('input[name="datetimes"]').on("apply.daterangepicker",(function(e,t){D(t.startDate.toDate(),t.endDate.toDate()),w.call(k.move,[t.startDate.toDate(),t.endDate.toDate()].map(b))})),$('input[name="datetimes"]').val(o.default(p).format(s)+"hs - "+o.default(y).format(s)),n&&n(e,t)}}D(p,y),n&&n(p,y),n&&n(p,y),w.call(k.move,[p,y].map(b))}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":4,"./af.js":4,"./ar":5,"./ar-dz":6,"./ar-dz.js":6,"./ar-kw":7,"./ar-kw.js":7,"./ar-ly":8,"./ar-ly.js":8,"./ar-ma":9,"./ar-ma.js":9,"./ar-sa":10,"./ar-sa.js":10,"./ar-tn":11,"./ar-tn.js":11,"./ar.js":5,"./az":12,"./az.js":12,"./be":13,"./be.js":13,"./bg":14,"./bg.js":14,"./bm":15,"./bm.js":15,"./bn":16,"./bn.js":16,"./bo":17,"./bo.js":17,"./br":18,"./br.js":18,"./bs":19,"./bs.js":19,"./ca":20,"./ca.js":20,"./cs":21,"./cs.js":21,"./cv":22,"./cv.js":22,"./cy":23,"./cy.js":23,"./da":24,"./da.js":24,"./de":25,"./de-at":26,"./de-at.js":26,"./de-ch":27,"./de-ch.js":27,"./de.js":25,"./dv":28,"./dv.js":28,"./el":29,"./el.js":29,"./en-SG":30,"./en-SG.js":30,"./en-au":31,"./en-au.js":31,"./en-ca":32,"./en-ca.js":32,"./en-gb":33,"./en-gb.js":33,"./en-ie":34,"./en-ie.js":34,"./en-il":35,"./en-il.js":35,"./en-nz":36,"./en-nz.js":36,"./eo":37,"./eo.js":37,"./es":38,"./es-do":39,"./es-do.js":39,"./es-us":40,"./es-us.js":40,"./es.js":38,"./et":41,"./et.js":41,"./eu":42,"./eu.js":42,"./fa":43,"./fa.js":43,"./fi":44,"./fi.js":44,"./fo":45,"./fo.js":45,"./fr":46,"./fr-ca":47,"./fr-ca.js":47,"./fr-ch":48,"./fr-ch.js":48,"./fr.js":46,"./fy":49,"./fy.js":49,"./ga":50,"./ga.js":50,"./gd":51,"./gd.js":51,"./gl":52,"./gl.js":52,"./gom-latn":53,"./gom-latn.js":53,"./gu":54,"./gu.js":54,"./he":55,"./he.js":55,"./hi":56,"./hi.js":56,"./hr":57,"./hr.js":57,"./hu":58,"./hu.js":58,"./hy-am":59,"./hy-am.js":59,"./id":60,"./id.js":60,"./is":61,"./is.js":61,"./it":62,"./it-ch":63,"./it-ch.js":63,"./it.js":62,"./ja":64,"./ja.js":64,"./jv":65,"./jv.js":65,"./ka":66,"./ka.js":66,"./kk":67,"./kk.js":67,"./km":68,"./km.js":68,"./kn":69,"./kn.js":69,"./ko":70,"./ko.js":70,"./ku":71,"./ku.js":71,"./ky":72,"./ky.js":72,"./lb":73,"./lb.js":73,"./lo":74,"./lo.js":74,"./lt":75,"./lt.js":75,"./lv":76,"./lv.js":76,"./me":77,"./me.js":77,"./mi":78,"./mi.js":78,"./mk":79,"./mk.js":79,"./ml":80,"./ml.js":80,"./mn":81,"./mn.js":81,"./mr":82,"./mr.js":82,"./ms":83,"./ms-my":84,"./ms-my.js":84,"./ms.js":83,"./mt":85,"./mt.js":85,"./my":86,"./my.js":86,"./nb":87,"./nb.js":87,"./ne":88,"./ne.js":88,"./nl":89,"./nl-be":90,"./nl-be.js":90,"./nl.js":89,"./nn":91,"./nn.js":91,"./pa-in":92,"./pa-in.js":92,"./pl":93,"./pl.js":93,"./pt":94,"./pt-br":95,"./pt-br.js":95,"./pt.js":94,"./ro":96,"./ro.js":96,"./ru":97,"./ru.js":97,"./sd":98,"./sd.js":98,"./se":99,"./se.js":99,"./si":100,"./si.js":100,"./sk":101,"./sk.js":101,"./sl":102,"./sl.js":102,"./sq":103,"./sq.js":103,"./sr":104,"./sr-cyrl":105,"./sr-cyrl.js":105,"./sr.js":104,"./ss":106,"./ss.js":106,"./sv":107,"./sv.js":107,"./sw":108,"./sw.js":108,"./ta":109,"./ta.js":109,"./te":110,"./te.js":110,"./tet":111,"./tet.js":111,"./tg":112,"./tg.js":112,"./th":113,"./th.js":113,"./tl-ph":114,"./tl-ph.js":114,"./tlh":115,"./tlh.js":115,"./tr":116,"./tr.js":116,"./tzl":117,"./tzl.js":117,"./tzm":118,"./tzm-latn":119,"./tzm-latn.js":119,"./tzm.js":118,"./ug-cn":120,"./ug-cn.js":120,"./uk":121,"./uk.js":121,"./ur":122,"./ur.js":122,"./uz":123,"./uz-latn":124,"./uz-latn.js":124,"./uz.js":123,"./vi":125,"./vi.js":125,"./x-pseudo":126,"./x-pseudo.js":126,"./yo":127,"./yo.js":127,"./zh-cn":128,"./zh-cn.js":128,"./zh-hk":129,"./zh-hk.js":129,"./zh-tw":130,"./zh-tw.js":130};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=141},function(e,t,n){var r,a;
/**
* @version: 3.0.5
* @author: Dan Grossman http://www.dangrossman.info/
* @copyright: Copyright (c) 2012-2019 Dan Grossman. All rights reserved.
* @license: Licensed under the MIT license. See http://www.opensource.org/licenses/mit-license.php
* @website: http://www.daterangepicker.com/
*/r=[n(0),n(131)],void 0===(a=function(e,t){return t.fn||(t.fn={}),"function"!=typeof e&&e.default&&(e=e.default),function(e,t){var n=function(n,r,a){if(this.parentEl="body",this.element=t(n),this.startDate=e().startOf("day"),this.endDate=e().endOf("day"),this.minDate=!1,this.maxDate=!1,this.maxSpan=!1,this.autoApply=!1,this.singleDatePicker=!1,this.showDropdowns=!1,this.minYear=e().subtract(100,"year").format("YYYY"),this.maxYear=e().add(100,"year").format("YYYY"),this.showWeekNumbers=!1,this.showISOWeekNumbers=!1,this.showCustomRangeLabel=!0,this.timePicker=!1,this.timePicker24Hour=!1,this.timePickerIncrement=1,this.timePickerSeconds=!1,this.linkedCalendars=!0,this.autoUpdateInput=!0,this.alwaysShowCalendars=!1,this.ranges={},this.opens="right",this.element.hasClass("pull-right")&&(this.opens="left"),this.drops="down",this.element.hasClass("dropup")&&(this.drops="up"),this.buttonClasses="btn btn-sm",this.applyButtonClasses="btn-primary",this.cancelButtonClasses="btn-default",this.locale={direction:"ltr",format:e.localeData().longDateFormat("L"),separator:" - ",applyLabel:"Apply",cancelLabel:"Cancel",weekLabel:"W",customRangeLabel:"Custom Range",daysOfWeek:e.weekdaysMin(),monthNames:e.monthsShort(),firstDay:e.localeData().firstDayOfWeek()},this.callback=function(){},this.isShowing=!1,this.leftCalendar={},this.rightCalendar={},"object"==typeof r&&null!==r||(r={}),"string"==typeof(r=t.extend(this.element.data(),r)).template||r.template instanceof t||(r.template='<div class="daterangepicker"><div class="ranges"></div><div class="drp-calendar left"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-calendar right"><div class="calendar-table"></div><div class="calendar-time"></div></div><div class="drp-buttons"><span class="drp-selected"></span><button class="cancelBtn" type="button"></button><button class="applyBtn" disabled="disabled" type="button"></button> </div></div>'),this.parentEl=r.parentEl&&t(r.parentEl).length?t(r.parentEl):t(this.parentEl),this.container=t(r.template).appendTo(this.parentEl),"object"==typeof r.locale&&("string"==typeof r.locale.direction&&(this.locale.direction=r.locale.direction),"string"==typeof r.locale.format&&(this.locale.format=r.locale.format),"string"==typeof r.locale.separator&&(this.locale.separator=r.locale.separator),"object"==typeof r.locale.daysOfWeek&&(this.locale.daysOfWeek=r.locale.daysOfWeek.slice()),"object"==typeof r.locale.monthNames&&(this.locale.monthNames=r.locale.monthNames.slice()),"number"==typeof r.locale.firstDay&&(this.locale.firstDay=r.locale.firstDay),"string"==typeof r.locale.applyLabel&&(this.locale.applyLabel=r.locale.applyLabel),"string"==typeof r.locale.cancelLabel&&(this.locale.cancelLabel=r.locale.cancelLabel),"string"==typeof r.locale.weekLabel&&(this.locale.weekLabel=r.locale.weekLabel),"string"==typeof r.locale.customRangeLabel)){(f=document.createElement("textarea")).innerHTML=r.locale.customRangeLabel;var i=f.value;this.locale.customRangeLabel=i}if(this.container.addClass(this.locale.direction),"string"==typeof r.startDate&&(this.startDate=e(r.startDate,this.locale.format)),"string"==typeof r.endDate&&(this.endDate=e(r.endDate,this.locale.format)),"string"==typeof r.minDate&&(this.minDate=e(r.minDate,this.locale.format)),"string"==typeof r.maxDate&&(this.maxDate=e(r.maxDate,this.locale.format)),"object"==typeof r.startDate&&(this.startDate=e(r.startDate)),"object"==typeof r.endDate&&(this.endDate=e(r.endDate)),"object"==typeof r.minDate&&(this.minDate=e(r.minDate)),"object"==typeof r.maxDate&&(this.maxDate=e(r.maxDate)),this.minDate&&this.startDate.isBefore(this.minDate)&&(this.startDate=this.minDate.clone()),this.maxDate&&this.endDate.isAfter(this.maxDate)&&(this.endDate=this.maxDate.clone()),"string"==typeof r.applyButtonClasses&&(this.applyButtonClasses=r.applyButtonClasses),"string"==typeof r.applyClass&&(this.applyButtonClasses=r.applyClass),"string"==typeof r.cancelButtonClasses&&(this.cancelButtonClasses=r.cancelButtonClasses),"string"==typeof r.cancelClass&&(this.cancelButtonClasses=r.cancelClass),"object"==typeof r.maxSpan&&(this.maxSpan=r.maxSpan),"object"==typeof r.dateLimit&&(this.maxSpan=r.dateLimit),"string"==typeof r.opens&&(this.opens=r.opens),"string"==typeof r.drops&&(this.drops=r.drops),"boolean"==typeof r.showWeekNumbers&&(this.showWeekNumbers=r.showWeekNumbers),"boolean"==typeof r.showISOWeekNumbers&&(this.showISOWeekNumbers=r.showISOWeekNumbers),"string"==typeof r.buttonClasses&&(this.buttonClasses=r.buttonClasses),"object"==typeof r.buttonClasses&&(this.buttonClasses=r.buttonClasses.join(" ")),"boolean"==typeof r.showDropdowns&&(this.showDropdowns=r.showDropdowns),"number"==typeof r.minYear&&(this.minYear=r.minYear),"number"==typeof r.maxYear&&(this.maxYear=r.maxYear),"boolean"==typeof r.showCustomRangeLabel&&(this.showCustomRangeLabel=r.showCustomRangeLabel),"boolean"==typeof r.singleDatePicker&&(this.singleDatePicker=r.singleDatePicker,this.singleDatePicker&&(this.endDate=this.startDate.clone())),"boolean"==typeof r.timePicker&&(this.timePicker=r.timePicker),"boolean"==typeof r.timePickerSeconds&&(this.timePickerSeconds=r.timePickerSeconds),"number"==typeof r.timePickerIncrement&&(this.timePickerIncrement=r.timePickerIncrement),"boolean"==typeof r.timePicker24Hour&&(this.timePicker24Hour=r.timePicker24Hour),"boolean"==typeof r.autoApply&&(this.autoApply=r.autoApply),"boolean"==typeof r.autoUpdateInput&&(this.autoUpdateInput=r.autoUpdateInput),"boolean"==typeof r.linkedCalendars&&(this.linkedCalendars=r.linkedCalendars),"function"==typeof r.isInvalidDate&&(this.isInvalidDate=r.isInvalidDate),"function"==typeof r.isCustomDate&&(this.isCustomDate=r.isCustomDate),"boolean"==typeof r.alwaysShowCalendars&&(this.alwaysShowCalendars=r.alwaysShowCalendars),0!=this.locale.firstDay)for(var o=this.locale.firstDay;o>0;)this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()),o--;var s,u,d;if(void 0===r.startDate&&void 0===r.endDate&&t(this.element).is(":text")){var c=t(this.element).val(),l=c.split(this.locale.separator);s=u=null,2==l.length?(s=e(l[0],this.locale.format),u=e(l[1],this.locale.format)):this.singleDatePicker&&""!==c&&(s=e(c,this.locale.format),u=e(c,this.locale.format)),null!==s&&null!==u&&(this.setStartDate(s),this.setEndDate(u))}if("object"==typeof r.ranges){for(d in r.ranges){s="string"==typeof r.ranges[d][0]?e(r.ranges[d][0],this.locale.format):e(r.ranges[d][0]),u="string"==typeof r.ranges[d][1]?e(r.ranges[d][1],this.locale.format):e(r.ranges[d][1]),this.minDate&&s.isBefore(this.minDate)&&(s=this.minDate.clone());var f,h=this.maxDate;if(this.maxSpan&&h&&s.clone().add(this.maxSpan).isAfter(h)&&(h=s.clone().add(this.maxSpan)),h&&u.isAfter(h)&&(u=h.clone()),!(this.minDate&&u.isBefore(this.minDate,this.timepicker?"minute":"day")||h&&s.isAfter(h,this.timepicker?"minute":"day")))(f=document.createElement("textarea")).innerHTML=d,i=f.value,this.ranges[i]=[s,u]}var _="<ul>";for(d in this.ranges)_+='<li data-range-key="'+d+'">'+d+"</li>";this.showCustomRangeLabel&&(_+='<li data-range-key="'+this.locale.customRangeLabel+'">'+this.locale.customRangeLabel+"</li>"),_+="</ul>",this.container.find(".ranges").prepend(_)}"function"==typeof a&&(this.callback=a),this.timePicker||(this.startDate=this.startDate.startOf("day"),this.endDate=this.endDate.endOf("day"),this.container.find(".calendar-time").hide()),this.timePicker&&this.autoApply&&(this.autoApply=!1),this.autoApply&&this.container.addClass("auto-apply"),"object"==typeof r.ranges&&this.container.addClass("show-ranges"),this.singleDatePicker&&(this.container.addClass("single"),this.container.find(".drp-calendar.left").addClass("single"),this.container.find(".drp-calendar.left").show(),this.container.find(".drp-calendar.right").hide(),this.timePicker||this.container.addClass("auto-apply")),(void 0===r.ranges&&!this.singleDatePicker||this.alwaysShowCalendars)&&this.container.addClass("show-calendar"),this.container.addClass("opens"+this.opens),this.container.find(".applyBtn, .cancelBtn").addClass(this.buttonClasses),this.applyButtonClasses.length&&this.container.find(".applyBtn").addClass(this.applyButtonClasses),this.cancelButtonClasses.length&&this.container.find(".cancelBtn").addClass(this.cancelButtonClasses),this.container.find(".applyBtn").html(this.locale.applyLabel),this.container.find(".cancelBtn").html(this.locale.cancelLabel),this.container.find(".drp-calendar").on("click.daterangepicker",".prev",t.proxy(this.clickPrev,this)).on("click.daterangepicker",".next",t.proxy(this.clickNext,this)).on("mousedown.daterangepicker","td.available",t.proxy(this.clickDate,this)).on("mouseenter.daterangepicker","td.available",t.proxy(this.hoverDate,this)).on("change.daterangepicker","select.yearselect",t.proxy(this.monthOrYearChanged,this)).on("change.daterangepicker","select.monthselect",t.proxy(this.monthOrYearChanged,this)).on("change.daterangepicker","select.hourselect,select.minuteselect,select.secondselect,select.ampmselect",t.proxy(this.timeChanged,this)),this.container.find(".ranges").on("click.daterangepicker","li",t.proxy(this.clickRange,this)),this.container.find(".drp-buttons").on("click.daterangepicker","button.applyBtn",t.proxy(this.clickApply,this)).on("click.daterangepicker","button.cancelBtn",t.proxy(this.clickCancel,this)),this.element.is("input")||this.element.is("button")?this.element.on({"click.daterangepicker":t.proxy(this.show,this),"focus.daterangepicker":t.proxy(this.show,this),"keyup.daterangepicker":t.proxy(this.elementChanged,this),"keydown.daterangepicker":t.proxy(this.keydown,this)}):(this.element.on("click.daterangepicker",t.proxy(this.toggle,this)),this.element.on("keydown.daterangepicker",t.proxy(this.toggle,this))),this.updateElement()};return n.prototype={constructor:n,setStartDate:function(t){"string"==typeof t&&(this.startDate=e(t,this.locale.format)),"object"==typeof t&&(this.startDate=e(t)),this.timePicker||(this.startDate=this.startDate.startOf("day")),this.timePicker&&this.timePickerIncrement&&this.startDate.minute(Math.round(this.startDate.minute()/this.timePickerIncrement)*this.timePickerIncrement),this.minDate&&this.startDate.isBefore(this.minDate)&&(this.startDate=this.minDate.clone(),this.timePicker&&this.timePickerIncrement&&this.startDate.minute(Math.round(this.startDate.minute()/this.timePickerIncrement)*this.timePickerIncrement)),this.maxDate&&this.startDate.isAfter(this.maxDate)&&(this.startDate=this.maxDate.clone(),this.timePicker&&this.timePickerIncrement&&this.startDate.minute(Math.floor(this.startDate.minute()/this.timePickerIncrement)*this.timePickerIncrement)),this.isShowing||this.updateElement(),this.updateMonthsInView()},setEndDate:function(t){"string"==typeof t&&(this.endDate=e(t,this.locale.format)),"object"==typeof t&&(this.endDate=e(t)),this.timePicker||(this.endDate=this.endDate.endOf("day")),this.timePicker&&this.timePickerIncrement&&this.endDate.minute(Math.round(this.endDate.minute()/this.timePickerIncrement)*this.timePickerIncrement),this.endDate.isBefore(this.startDate)&&(this.endDate=this.startDate.clone()),this.maxDate&&this.endDate.isAfter(this.maxDate)&&(this.endDate=this.maxDate.clone()),this.maxSpan&&this.startDate.clone().add(this.maxSpan).isBefore(this.endDate)&&(this.endDate=this.startDate.clone().add(this.maxSpan)),this.previousRightTime=this.endDate.clone(),this.container.find(".drp-selected").html(this.startDate.format(this.locale.format)+this.locale.separator+this.endDate.format(this.locale.format)),this.isShowing||this.updateElement(),this.updateMonthsInView()},isInvalidDate:function(){return!1},isCustomDate:function(){return!1},updateView:function(){this.timePicker&&(this.renderTimePicker("left"),this.renderTimePicker("right"),this.endDate?this.container.find(".right .calendar-time select").removeAttr("disabled").removeClass("disabled"):this.container.find(".right .calendar-time select").attr("disabled","disabled").addClass("disabled")),this.endDate&&this.container.find(".drp-selected").html(this.startDate.format(this.locale.format)+this.locale.separator+this.endDate.format(this.locale.format)),this.updateMonthsInView(),this.updateCalendars(),this.updateFormInputs()},updateMonthsInView:function(){if(this.endDate){if(!this.singleDatePicker&&this.leftCalendar.month&&this.rightCalendar.month&&(this.startDate.format("YYYY-MM")==this.leftCalendar.month.format("YYYY-MM")||this.startDate.format("YYYY-MM")==this.rightCalendar.month.format("YYYY-MM"))&&(this.endDate.format("YYYY-MM")==this.leftCalendar.month.format("YYYY-MM")||this.endDate.format("YYYY-MM")==this.rightCalendar.month.format("YYYY-MM")))return;this.leftCalendar.month=this.startDate.clone().date(2),this.linkedCalendars||this.endDate.month()==this.startDate.month()&&this.endDate.year()==this.startDate.year()?this.rightCalendar.month=this.startDate.clone().date(2).add(1,"month"):this.rightCalendar.month=this.endDate.clone().date(2)}else this.leftCalendar.month.format("YYYY-MM")!=this.startDate.format("YYYY-MM")&&this.rightCalendar.month.format("YYYY-MM")!=this.startDate.format("YYYY-MM")&&(this.leftCalendar.month=this.startDate.clone().date(2),this.rightCalendar.month=this.startDate.clone().date(2).add(1,"month"));this.maxDate&&this.linkedCalendars&&!this.singleDatePicker&&this.rightCalendar.month>this.maxDate&&(this.rightCalendar.month=this.maxDate.clone().date(2),this.leftCalendar.month=this.maxDate.clone().date(2).subtract(1,"month"))},updateCalendars:function(){var e,t,n,r;this.timePicker&&(this.endDate?(e=parseInt(this.container.find(".left .hourselect").val(),10),t=parseInt(this.container.find(".left .minuteselect").val(),10),isNaN(t)&&(t=parseInt(this.container.find(".left .minuteselect option:last").val(),10)),n=this.timePickerSeconds?parseInt(this.container.find(".left .secondselect").val(),10):0,this.timePicker24Hour||("PM"===(r=this.container.find(".left .ampmselect").val())&&e<12&&(e+=12),"AM"===r&&12===e&&(e=0))):(e=parseInt(this.container.find(".right .hourselect").val(),10),t=parseInt(this.container.find(".right .minuteselect").val(),10),isNaN(t)&&(t=parseInt(this.container.find(".right .minuteselect option:last").val(),10)),n=this.timePickerSeconds?parseInt(this.container.find(".right .secondselect").val(),10):0,this.timePicker24Hour||("PM"===(r=this.container.find(".right .ampmselect").val())&&e<12&&(e+=12),"AM"===r&&12===e&&(e=0))),this.leftCalendar.month.hour(e).minute(t).second(n),this.rightCalendar.month.hour(e).minute(t).second(n));this.renderCalendar("left"),this.renderCalendar("right"),this.container.find(".ranges li").removeClass("active"),null!=this.endDate&&this.calculateChosenLabel()},renderCalendar:function(n){var r,a=(r="left"==n?this.leftCalendar:this.rightCalendar).month.month(),i=r.month.year(),o=r.month.hour(),s=r.month.minute(),u=r.month.second(),d=e([i,a]).daysInMonth(),c=e([i,a,1]),l=e([i,a,d]),f=e(c).subtract(1,"month").month(),h=e(c).subtract(1,"month").year(),_=e([h,f]).daysInMonth(),m=c.day();(r=[]).firstDay=c,r.lastDay=l;for(var p=0;p<6;p++)r[p]=[];var y=_-m+this.locale.firstDay+1;y>_&&(y-=7),m==this.locale.firstDay&&(y=_-6);for(var g=e([h,f,y,12,s,u]),M=(p=0,0),v=0;p<42;p++,M++,g=e(g).add(24,"hour"))p>0&&M%7==0&&(M=0,v++),r[v][M]=g.clone().hour(o).minute(s).second(u),g.hour(12),this.minDate&&r[v][M].format("YYYY-MM-DD")==this.minDate.format("YYYY-MM-DD")&&r[v][M].isBefore(this.minDate)&&"left"==n&&(r[v][M]=this.minDate.clone()),this.maxDate&&r[v][M].format("YYYY-MM-DD")==this.maxDate.format("YYYY-MM-DD")&&r[v][M].isAfter(this.maxDate)&&"right"==n&&(r[v][M]=this.maxDate.clone());"left"==n?this.leftCalendar.calendar=r:this.rightCalendar.calendar=r;var b="left"==n?this.minDate:this.startDate,L=this.maxDate,Y=("left"==n?this.startDate:this.endDate,this.locale.direction,'<table class="table-condensed">');Y+="<thead>",Y+="<tr>",(this.showWeekNumbers||this.showISOWeekNumbers)&&(Y+="<th></th>"),b&&!b.isBefore(r.firstDay)||this.linkedCalendars&&"left"!=n?Y+="<th></th>":Y+='<th class="prev available"><span></span></th>';var k=this.locale.monthNames[r[1][1].month()]+r[1][1].format(" YYYY");if(this.showDropdowns){for(var w=r[1][1].month(),D=r[1][1].year(),x=L&&L.year()||this.maxYear,T=b&&b.year()||this.minYear,S=D==T,H=D==x,j='<select class="monthselect">',A=0;A<12;A++)(!S||b&&A>=b.month())&&(!H||L&&A<=L.month())?j+="<option value='"+A+"'"+(A===w?" selected='selected'":"")+">"+this.locale.monthNames[A]+"</option>":j+="<option value='"+A+"'"+(A===w?" selected='selected'":"")+" disabled='disabled'>"+this.locale.monthNames[A]+"</option>";j+="</select>";for(var E='<select class="yearselect">',P=T;P<=x;P++)E+='<option value="'+P+'"'+(P===D?' selected="selected"':"")+">"+P+"</option>";k=j+(E+="</select>")}if(Y+='<th colspan="5" class="month">'+k+"</th>",L&&!L.isAfter(r.lastDay)||this.linkedCalendars&&"right"!=n&&!this.singleDatePicker?Y+="<th></th>":Y+='<th class="next available"><span></span></th>',Y+="</tr>",Y+="<tr>",(this.showWeekNumbers||this.showISOWeekNumbers)&&(Y+='<th class="week">'+this.locale.weekLabel+"</th>"),t.each(this.locale.daysOfWeek,(function(e,t){Y+="<th>"+t+"</th>"})),Y+="</tr>",Y+="</thead>",Y+="<tbody>",null==this.endDate&&this.maxSpan){var C=this.startDate.clone().add(this.maxSpan).endOf("day");L&&!C.isBefore(L)||(L=C)}for(v=0;v<6;v++){for(Y+="<tr>",this.showWeekNumbers?Y+='<td class="week">'+r[v][0].week()+"</td>":this.showISOWeekNumbers&&(Y+='<td class="week">'+r[v][0].isoWeek()+"</td>"),M=0;M<7;M++){var O=[];r[v][M].isSame(new Date,"day")&&O.push("today"),r[v][M].isoWeekday()>5&&O.push("weekend"),r[v][M].month()!=r[1][1].month()&&O.push("off","ends"),this.minDate&&r[v][M].isBefore(this.minDate,"day")&&O.push("off","disabled"),L&&r[v][M].isAfter(L,"day")&&O.push("off","disabled"),this.isInvalidDate(r[v][M])&&O.push("off","disabled"),r[v][M].format("YYYY-MM-DD")==this.startDate.format("YYYY-MM-DD")&&O.push("active","start-date"),null!=this.endDate&&r[v][M].format("YYYY-MM-DD")==this.endDate.format("YYYY-MM-DD")&&O.push("active","end-date"),null!=this.endDate&&r[v][M]>this.startDate&&r[v][M]<this.endDate&&O.push("in-range");var N=this.isCustomDate(r[v][M]);!1!==N&&("string"==typeof N?O.push(N):Array.prototype.push.apply(O,N));var W="",z=!1;for(p=0;p<O.length;p++)W+=O[p]+" ","disabled"==O[p]&&(z=!0);z||(W+="available"),Y+='<td class="'+W.replace(/^\s+|\s+$/g,"")+'" data-title="r'+v+"c"+M+'">'+r[v][M].date()+"</td>"}Y+="</tr>"}Y+="</tbody>",Y+="</table>",this.container.find(".drp-calendar."+n+" .calendar-table").html(Y)},renderTimePicker:function(e){if("right"!=e||this.endDate){var t,n,r,a=this.maxDate;if(!this.maxSpan||this.maxDate&&!this.startDate.clone().add(this.maxSpan).isBefore(this.maxDate)||(a=this.startDate.clone().add(this.maxSpan)),"left"==e)n=this.startDate.clone(),r=this.minDate;else if("right"==e){n=this.endDate.clone(),r=this.startDate;var i=this.container.find(".drp-calendar.right .calendar-time");if(""!=i.html()&&(n.hour(isNaN(n.hour())?i.find(".hourselect option:selected").val():n.hour()),n.minute(isNaN(n.minute())?i.find(".minuteselect option:selected").val():n.minute()),n.second(isNaN(n.second())?i.find(".secondselect option:selected").val():n.second()),!this.timePicker24Hour)){var o=i.find(".ampmselect option:selected").val();"PM"===o&&n.hour()<12&&n.hour(n.hour()+12),"AM"===o&&12===n.hour()&&n.hour(0)}n.isBefore(this.startDate)&&(n=this.startDate.clone()),a&&n.isAfter(a)&&(n=a.clone())}t='<select class="hourselect">';for(var s=this.timePicker24Hour?0:1,u=this.timePicker24Hour?23:12,d=s;d<=u;d++){var c=d;this.timePicker24Hour||(c=n.hour()>=12?12==d?12:d+12:12==d?0:d);var l=n.clone().hour(c),f=!1;r&&l.minute(59).isBefore(r)&&(f=!0),a&&l.minute(0).isAfter(a)&&(f=!0),c!=n.hour()||f?t+=f?'<option value="'+d+'" disabled="disabled" class="disabled">'+d+"</option>":'<option value="'+d+'">'+d+"</option>":t+='<option value="'+d+'" selected="selected">'+d+"</option>"}for(t+="</select> ",t+=': <select class="minuteselect">',d=0;d<60;d+=this.timePickerIncrement){var h=d<10?"0"+d:d;l=n.clone().minute(d),f=!1,r&&l.second(59).isBefore(r)&&(f=!0),a&&l.second(0).isAfter(a)&&(f=!0),n.minute()!=d||f?t+=f?'<option value="'+d+'" disabled="disabled" class="disabled">'+h+"</option>":'<option value="'+d+'">'+h+"</option>":t+='<option value="'+d+'" selected="selected">'+h+"</option>"}if(t+="</select> ",this.timePickerSeconds){for(t+=': <select class="secondselect">',d=0;d<60;d++)h=d<10?"0"+d:d,l=n.clone().second(d),f=!1,r&&l.isBefore(r)&&(f=!0),a&&l.isAfter(a)&&(f=!0),n.second()!=d||f?t+=f?'<option value="'+d+'" disabled="disabled" class="disabled">'+h+"</option>":'<option value="'+d+'">'+h+"</option>":t+='<option value="'+d+'" selected="selected">'+h+"</option>";t+="</select> "}if(!this.timePicker24Hour){t+='<select class="ampmselect">';var _="",m="";r&&n.clone().hour(12).minute(0).second(0).isBefore(r)&&(_=' disabled="disabled" class="disabled"'),a&&n.clone().hour(0).minute(0).second(0).isAfter(a)&&(m=' disabled="disabled" class="disabled"'),n.hour()>=12?t+='<option value="AM"'+_+'>AM</option><option value="PM" selected="selected"'+m+">PM</option>":t+='<option value="AM" selected="selected"'+_+'>AM</option><option value="PM"'+m+">PM</option>",t+="</select>"}this.container.find(".drp-calendar."+e+" .calendar-time").html(t)}},updateFormInputs:function(){this.singleDatePicker||this.endDate&&(this.startDate.isBefore(this.endDate)||this.startDate.isSame(this.endDate))?this.container.find("button.applyBtn").removeAttr("disabled"):this.container.find("button.applyBtn").attr("disabled","disabled")},move:function(){var e,n={top:0,left:0},r=t(window).width();this.parentEl.is("body")||(n={top:this.parentEl.offset().top-this.parentEl.scrollTop(),left:this.parentEl.offset().left-this.parentEl.scrollLeft()},r=this.parentEl[0].clientWidth+this.parentEl.offset().left),e="up"==this.drops?this.element.offset().top-this.container.outerHeight()-n.top:this.element.offset().top+this.element.outerHeight()-n.top,this.container.css({top:0,left:0,right:"auto"});var a=this.container.outerWidth();if(this.container["up"==this.drops?"addClass":"removeClass"]("drop-up"),"left"==this.opens){var i=r-this.element.offset().left-this.element.outerWidth();a+i>t(window).width()?this.container.css({top:e,right:"auto",left:9}):this.container.css({top:e,right:i,left:"auto"})}else if("center"==this.opens)(o=this.element.offset().left-n.left+this.element.outerWidth()/2-a/2)<0?this.container.css({top:e,right:"auto",left:9}):o+a>t(window).width()?this.container.css({top:e,left:"auto",right:0}):this.container.css({top:e,left:o,right:"auto"});else{var o;(o=this.element.offset().left-n.left)+a>t(window).width()?this.container.css({top:e,left:"auto",right:0}):this.container.css({top:e,left:o,right:"auto"})}},show:function(e){this.isShowing||(this._outsideClickProxy=t.proxy((function(e){this.outsideClick(e)}),this),t(document).on("mousedown.daterangepicker",this._outsideClickProxy).on("touchend.daterangepicker",this._outsideClickProxy).on("click.daterangepicker","[data-toggle=dropdown]",this._outsideClickProxy).on("focusin.daterangepicker",this._outsideClickProxy),t(window).on("resize.daterangepicker",t.proxy((function(e){this.move(e)}),this)),this.oldStartDate=this.startDate.clone(),this.oldEndDate=this.endDate.clone(),this.previousRightTime=this.endDate.clone(),this.updateView(),this.container.show(),this.move(),this.element.trigger("show.daterangepicker",this),this.isShowing=!0)},hide:function(e){this.isShowing&&(this.endDate||(this.startDate=this.oldStartDate.clone(),this.endDate=this.oldEndDate.clone()),this.startDate.isSame(this.oldStartDate)&&this.endDate.isSame(this.oldEndDate)||this.callback(this.startDate.clone(),this.endDate.clone(),this.chosenLabel),this.updateElement(),t(document).off(".daterangepicker"),t(window).off(".daterangepicker"),this.container.hide(),this.element.trigger("hide.daterangepicker",this),this.isShowing=!1)},toggle:function(e){this.isShowing?this.hide():this.show()},outsideClick:function(e){var n=t(e.target);"focusin"==e.type||n.closest(this.element).length||n.closest(this.container).length||n.closest(".calendar-table").length||(this.hide(),this.element.trigger("outsideClick.daterangepicker",this))},showCalendars:function(){this.container.addClass("show-calendar"),this.move(),this.element.trigger("showCalendar.daterangepicker",this)},hideCalendars:function(){this.container.removeClass("show-calendar"),this.element.trigger("hideCalendar.daterangepicker",this)},clickRange:function(e){var t=e.target.getAttribute("data-range-key");if(this.chosenLabel=t,t==this.locale.customRangeLabel)this.showCalendars();else{var n=this.ranges[t];this.startDate=n[0],this.endDate=n[1],this.timePicker||(this.startDate.startOf("day"),this.endDate.endOf("day")),this.alwaysShowCalendars||this.hideCalendars(),this.clickApply()}},clickPrev:function(e){t(e.target).parents(".drp-calendar").hasClass("left")?(this.leftCalendar.month.subtract(1,"month"),this.linkedCalendars&&this.rightCalendar.month.subtract(1,"month")):this.rightCalendar.month.subtract(1,"month"),this.updateCalendars()},clickNext:function(e){t(e.target).parents(".drp-calendar").hasClass("left")?this.leftCalendar.month.add(1,"month"):(this.rightCalendar.month.add(1,"month"),this.linkedCalendars&&this.leftCalendar.month.add(1,"month")),this.updateCalendars()},hoverDate:function(e){if(t(e.target).hasClass("available")){var n=t(e.target).attr("data-title"),r=n.substr(1,1),a=n.substr(3,1),i=t(e.target).parents(".drp-calendar").hasClass("left")?this.leftCalendar.calendar[r][a]:this.rightCalendar.calendar[r][a],o=this.leftCalendar,s=this.rightCalendar,u=this.startDate;this.endDate||this.container.find(".drp-calendar tbody td").each((function(e,n){if(!t(n).hasClass("week")){var r=t(n).attr("data-title"),a=r.substr(1,1),d=r.substr(3,1),c=t(n).parents(".drp-calendar").hasClass("left")?o.calendar[a][d]:s.calendar[a][d];c.isAfter(u)&&c.isBefore(i)||c.isSame(i,"day")?t(n).addClass("in-range"):t(n).removeClass("in-range")}}))}},clickDate:function(e){if(t(e.target).hasClass("available")){var n=t(e.target).attr("data-title"),r=n.substr(1,1),a=n.substr(3,1),i=t(e.target).parents(".drp-calendar").hasClass("left")?this.leftCalendar.calendar[r][a]:this.rightCalendar.calendar[r][a];if(this.endDate||i.isBefore(this.startDate,"day")){if(this.timePicker){var o=parseInt(this.container.find(".left .hourselect").val(),10);this.timePicker24Hour||("PM"===(d=this.container.find(".left .ampmselect").val())&&o<12&&(o+=12),"AM"===d&&12===o&&(o=0));var s=parseInt(this.container.find(".left .minuteselect").val(),10);isNaN(s)&&(s=parseInt(this.container.find(".left .minuteselect option:last").val(),10));var u=this.timePickerSeconds?parseInt(this.container.find(".left .secondselect").val(),10):0;i=i.clone().hour(o).minute(s).second(u)}this.endDate=null,this.setStartDate(i.clone())}else if(!this.endDate&&i.isBefore(this.startDate))this.setEndDate(this.startDate.clone());else{var d;if(this.timePicker)o=parseInt(this.container.find(".right .hourselect").val(),10),this.timePicker24Hour||("PM"===(d=this.container.find(".right .ampmselect").val())&&o<12&&(o+=12),"AM"===d&&12===o&&(o=0)),s=parseInt(this.container.find(".right .minuteselect").val(),10),isNaN(s)&&(s=parseInt(this.container.find(".right .minuteselect option:last").val(),10)),u=this.timePickerSeconds?parseInt(this.container.find(".right .secondselect").val(),10):0,i=i.clone().hour(o).minute(s).second(u);this.setEndDate(i.clone()),this.autoApply&&(this.calculateChosenLabel(),this.clickApply())}this.singleDatePicker&&(this.setEndDate(this.startDate),this.timePicker||this.clickApply()),this.updateView(),e.stopPropagation()}},calculateChosenLabel:function(){var e=!0,t=0;for(var n in this.ranges){if(this.timePicker){var r=this.timePickerSeconds?"YYYY-MM-DD HH:mm:ss":"YYYY-MM-DD HH:mm";if(this.startDate.format(r)==this.ranges[n][0].format(r)&&this.endDate.format(r)==this.ranges[n][1].format(r)){e=!1,this.chosenLabel=this.container.find(".ranges li:eq("+t+")").addClass("active").attr("data-range-key");break}}else if(this.startDate.format("YYYY-MM-DD")==this.ranges[n][0].format("YYYY-MM-DD")&&this.endDate.format("YYYY-MM-DD")==this.ranges[n][1].format("YYYY-MM-DD")){e=!1,this.chosenLabel=this.container.find(".ranges li:eq("+t+")").addClass("active").attr("data-range-key");break}t++}e&&(this.showCustomRangeLabel?this.chosenLabel=this.container.find(".ranges li:last").addClass("active").attr("data-range-key"):this.chosenLabel=null,this.showCalendars())},clickApply:function(e){this.hide(),this.element.trigger("apply.daterangepicker",this)},clickCancel:function(e){this.startDate=this.oldStartDate,this.endDate=this.oldEndDate,this.hide(),this.element.trigger("cancel.daterangepicker",this)},monthOrYearChanged:function(e){var n=t(e.target).closest(".drp-calendar").hasClass("left"),r=n?"left":"right",a=this.container.find(".drp-calendar."+r),i=parseInt(a.find(".monthselect").val(),10),o=a.find(".yearselect").val();n||(o<this.startDate.year()||o==this.startDate.year()&&i<this.startDate.month())&&(i=this.startDate.month(),o=this.startDate.year()),this.minDate&&(o<this.minDate.year()||o==this.minDate.year()&&i<this.minDate.month())&&(i=this.minDate.month(),o=this.minDate.year()),this.maxDate&&(o>this.maxDate.year()||o==this.maxDate.year()&&i>this.maxDate.month())&&(i=this.maxDate.month(),o=this.maxDate.year()),n?(this.leftCalendar.month.month(i).year(o),this.linkedCalendars&&(this.rightCalendar.month=this.leftCalendar.month.clone().add(1,"month"))):(this.rightCalendar.month.month(i).year(o),this.linkedCalendars&&(this.leftCalendar.month=this.rightCalendar.month.clone().subtract(1,"month"))),this.updateCalendars()},timeChanged:function(e){var n=t(e.target).closest(".drp-calendar"),r=n.hasClass("left"),a=parseInt(n.find(".hourselect").val(),10),i=parseInt(n.find(".minuteselect").val(),10);isNaN(i)&&(i=parseInt(n.find(".minuteselect option:last").val(),10));var o=this.timePickerSeconds?parseInt(n.find(".secondselect").val(),10):0;if(!this.timePicker24Hour){var s=n.find(".ampmselect").val();"PM"===s&&a<12&&(a+=12),"AM"===s&&12===a&&(a=0)}if(r){var u=this.startDate.clone();u.hour(a),u.minute(i),u.second(o),this.setStartDate(u),this.singleDatePicker?this.endDate=this.startDate.clone():this.endDate&&this.endDate.format("YYYY-MM-DD")==u.format("YYYY-MM-DD")&&this.endDate.isBefore(u)&&this.setEndDate(u.clone())}else if(this.endDate){var d=this.endDate.clone();d.hour(a),d.minute(i),d.second(o),this.setEndDate(d)}this.updateCalendars(),this.updateFormInputs(),this.renderTimePicker("left"),this.renderTimePicker("right")},elementChanged:function(){if(this.element.is("input")&&this.element.val().length){var t=this.element.val().split(this.locale.separator),n=null,r=null;2===t.length&&(n=e(t[0],this.locale.format),r=e(t[1],this.locale.format)),(this.singleDatePicker||null===n||null===r)&&(r=n=e(this.element.val(),this.locale.format)),n.isValid()&&r.isValid()&&(this.setStartDate(n),this.setEndDate(r),this.updateView())}},keydown:function(e){9!==e.keyCode&&13!==e.keyCode||this.hide(),27===e.keyCode&&(e.preventDefault(),e.stopPropagation(),this.hide())},updateElement:function(){if(this.element.is("input")&&this.autoUpdateInput){var e=this.startDate.format(this.locale.format);this.singleDatePicker||(e+=this.locale.separator+this.endDate.format(this.locale.format)),e!==this.element.val()&&this.element.val(e).trigger("change")}},remove:function(){this.container.remove(),this.element.off(".daterangepicker"),this.element.removeData()}},t.fn.daterangepicker=function(e,r){var a=t.extend(!0,{},t.fn.daterangepicker.defaultOptions,e);return this.each((function(){var e=t(this);e.data("daterangepicker")&&e.data("daterangepicker").remove(),e.data("daterangepicker",new n(e,a,r))})),this},n}(e,t)}.apply(t,r))||(e.exports=a)},function(e,t,n){var r=n(144);"string"==typeof r&&(r=[[e.i,r,""]]);var a={insert:"head",singleton:!1};n(3)(r,a);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(2)(!1)).push([e.i,".daterangepicker {\r\n  position: absolute;\r\n  color: inherit;\r\n  background-color: #fff;\r\n  border-radius: 4px;\r\n  border: 1px solid #ddd;\r\n  width: 278px;\r\n  max-width: none;\r\n  padding: 0;\r\n  margin-top: 7px;\r\n  top: 100px;\r\n  left: 20px;\r\n  z-index: 3001;\r\n  display: none;\r\n  font-family: arial;\r\n  font-size: 15px;\r\n  line-height: 1em;\r\n}\r\n\r\n.daterangepicker:before, .daterangepicker:after {\r\n  position: absolute;\r\n  display: inline-block;\r\n  border-bottom-color: rgba(0, 0, 0, 0.2);\r\n  content: '';\r\n}\r\n\r\n.daterangepicker:before {\r\n  top: -7px;\r\n  border-right: 7px solid transparent;\r\n  border-left: 7px solid transparent;\r\n  border-bottom: 7px solid #ccc;\r\n}\r\n\r\n.daterangepicker:after {\r\n  top: -6px;\r\n  border-right: 6px solid transparent;\r\n  border-bottom: 6px solid #fff;\r\n  border-left: 6px solid transparent;\r\n}\r\n\r\n.daterangepicker.opensleft:before {\r\n  right: 9px;\r\n}\r\n\r\n.daterangepicker.opensleft:after {\r\n  right: 10px;\r\n}\r\n\r\n.daterangepicker.openscenter:before {\r\n  left: 0;\r\n  right: 0;\r\n  width: 0;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.daterangepicker.openscenter:after {\r\n  left: 0;\r\n  right: 0;\r\n  width: 0;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n\r\n.daterangepicker.opensright:before {\r\n  left: 9px;\r\n}\r\n\r\n.daterangepicker.opensright:after {\r\n  left: 10px;\r\n}\r\n\r\n.daterangepicker.drop-up {\r\n  margin-top: -7px;\r\n}\r\n\r\n.daterangepicker.drop-up:before {\r\n  top: initial;\r\n  bottom: -7px;\r\n  border-bottom: initial;\r\n  border-top: 7px solid #ccc;\r\n}\r\n\r\n.daterangepicker.drop-up:after {\r\n  top: initial;\r\n  bottom: -6px;\r\n  border-bottom: initial;\r\n  border-top: 6px solid #fff;\r\n}\r\n\r\n.daterangepicker.single .daterangepicker .ranges, .daterangepicker.single .drp-calendar {\r\n  float: none;\r\n}\r\n\r\n.daterangepicker.single .drp-selected {\r\n  display: none;\r\n}\r\n\r\n.daterangepicker.show-calendar .drp-calendar {\r\n  display: block;\r\n}\r\n\r\n.daterangepicker.show-calendar .drp-buttons {\r\n  display: block;\r\n}\r\n\r\n.daterangepicker.auto-apply .drp-buttons {\r\n  display: none;\r\n}\r\n\r\n.daterangepicker .drp-calendar {\r\n  display: none;\r\n  max-width: 270px;\r\n}\r\n\r\n.daterangepicker .drp-calendar.left {\r\n  padding: 8px 0 8px 8px;\r\n}\r\n\r\n.daterangepicker .drp-calendar.right {\r\n  padding: 8px;\r\n}\r\n\r\n.daterangepicker .drp-calendar.single .calendar-table {\r\n  border: none;\r\n}\r\n\r\n.daterangepicker .calendar-table .next span, .daterangepicker .calendar-table .prev span {\r\n  color: #fff;\r\n  border: solid black;\r\n  border-width: 0 2px 2px 0;\r\n  border-radius: 0;\r\n  display: inline-block;\r\n  padding: 3px;\r\n}\r\n\r\n.daterangepicker .calendar-table .next span {\r\n  transform: rotate(-45deg);\r\n  -webkit-transform: rotate(-45deg);\r\n}\r\n\r\n.daterangepicker .calendar-table .prev span {\r\n  transform: rotate(135deg);\r\n  -webkit-transform: rotate(135deg);\r\n}\r\n\r\n.daterangepicker .calendar-table th, .daterangepicker .calendar-table td {\r\n  white-space: nowrap;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  min-width: 32px;\r\n  width: 32px;\r\n  height: 24px;\r\n  line-height: 24px;\r\n  font-size: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid transparent;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n}\r\n\r\n.daterangepicker .calendar-table {\r\n  border: 1px solid #fff;\r\n  border-radius: 4px;\r\n  background-color: #fff;\r\n}\r\n\r\n.daterangepicker .calendar-table table {\r\n  width: 100%;\r\n  margin: 0;\r\n  border-spacing: 0;\r\n  border-collapse: collapse;\r\n}\r\n\r\n.daterangepicker td.available:hover, .daterangepicker th.available:hover {\r\n  background-color: #eee;\r\n  border-color: transparent;\r\n  color: inherit;\r\n}\r\n\r\n.daterangepicker td.week, .daterangepicker th.week {\r\n  font-size: 80%;\r\n  color: #ccc;\r\n}\r\n\r\n.daterangepicker td.off, .daterangepicker td.off.in-range, .daterangepicker td.off.start-date, .daterangepicker td.off.end-date {\r\n  background-color: #fff;\r\n  border-color: transparent;\r\n  color: #999;\r\n}\r\n\r\n.daterangepicker td.in-range {\r\n  background-color: #ebf4f8;\r\n  border-color: transparent;\r\n  color: #000;\r\n  border-radius: 0;\r\n}\r\n\r\n.daterangepicker td.start-date {\r\n  border-radius: 4px 0 0 4px;\r\n}\r\n\r\n.daterangepicker td.end-date {\r\n  border-radius: 0 4px 4px 0;\r\n}\r\n\r\n.daterangepicker td.start-date.end-date {\r\n  border-radius: 4px;\r\n}\r\n\r\n.daterangepicker td.active, .daterangepicker td.active:hover {\r\n  background-color: #357ebd;\r\n  border-color: transparent;\r\n  color: #fff;\r\n}\r\n\r\n.daterangepicker th.month {\r\n  width: auto;\r\n}\r\n\r\n.daterangepicker td.disabled, .daterangepicker option.disabled {\r\n  color: #999;\r\n  cursor: not-allowed;\r\n  text-decoration: line-through;\r\n}\r\n\r\n.daterangepicker select.monthselect, .daterangepicker select.yearselect {\r\n  font-size: 12px;\r\n  padding: 1px;\r\n  height: auto;\r\n  margin: 0;\r\n  cursor: default;\r\n}\r\n\r\n.daterangepicker select.monthselect {\r\n  margin-right: 2%;\r\n  width: 56%;\r\n}\r\n\r\n.daterangepicker select.yearselect {\r\n  width: 40%;\r\n}\r\n\r\n.daterangepicker select.hourselect, .daterangepicker select.minuteselect, .daterangepicker select.secondselect, .daterangepicker select.ampmselect {\r\n  width: 50px;\r\n  margin: 0 auto;\r\n  background: #eee;\r\n  border: 1px solid #eee;\r\n  padding: 2px;\r\n  outline: 0;\r\n  font-size: 12px;\r\n}\r\n\r\n.daterangepicker .calendar-time {\r\n  text-align: center;\r\n  margin: 4px auto 0 auto;\r\n  line-height: 30px;\r\n  position: relative;\r\n}\r\n\r\n.daterangepicker .calendar-time select.disabled {\r\n  color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.daterangepicker .drp-buttons {\r\n  clear: both;\r\n  text-align: right;\r\n  padding: 8px;\r\n  border-top: 1px solid #ddd;\r\n  display: none;\r\n  line-height: 12px;\r\n  vertical-align: middle;\r\n}\r\n\r\n.daterangepicker .drp-selected {\r\n  display: inline-block;\r\n  font-size: 12px;\r\n  padding-right: 8px;\r\n}\r\n\r\n.daterangepicker .drp-buttons .btn {\r\n  margin-left: 8px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  padding: 4px 8px;\r\n}\r\n\r\n.daterangepicker.show-ranges.single.rtl .drp-calendar.left {\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.daterangepicker.show-ranges.single.ltr .drp-calendar.left {\r\n  border-left: 1px solid #ddd;\r\n}\r\n\r\n.daterangepicker.show-ranges.rtl .drp-calendar.right {\r\n  border-right: 1px solid #ddd;\r\n}\r\n\r\n.daterangepicker.show-ranges.ltr .drp-calendar.left {\r\n  border-left: 1px solid #ddd;\r\n}\r\n\r\n.daterangepicker .ranges {\r\n  float: none;\r\n  text-align: left;\r\n  margin: 0;\r\n}\r\n\r\n.daterangepicker.show-calendar .ranges {\r\n  margin-top: 8px;\r\n}\r\n\r\n.daterangepicker .ranges ul {\r\n  list-style: none;\r\n  margin: 0 auto;\r\n  padding: 0;\r\n  width: 100%;\r\n}\r\n\r\n.daterangepicker .ranges li {\r\n  font-size: 12px;\r\n  padding: 8px 12px;\r\n  cursor: pointer;\r\n}\r\n\r\n.daterangepicker .ranges li:hover {\r\n  background-color: #eee;\r\n}\r\n\r\n.daterangepicker .ranges li.active {\r\n  background-color: #08c;\r\n  color: #fff;\r\n}\r\n\r\n/*  Larger Screen Styling */\r\n@media (min-width: 564px) {\r\n  .daterangepicker {\r\n    width: auto;\r\n  }\r\n\r\n  .daterangepicker .ranges ul {\r\n    width: 140px;\r\n  }\r\n\r\n  .daterangepicker.single .ranges ul {\r\n    width: 100%;\r\n  }\r\n\r\n  .daterangepicker.single .drp-calendar.left {\r\n    clear: none;\r\n  }\r\n\r\n  .daterangepicker.single .ranges, .daterangepicker.single .drp-calendar {\r\n    float: left;\r\n  }\r\n\r\n  .daterangepicker {\r\n    direction: ltr;\r\n    text-align: left;\r\n  }\r\n\r\n  .daterangepicker .drp-calendar.left {\r\n    clear: left;\r\n    margin-right: 0;\r\n  }\r\n\r\n  .daterangepicker .drp-calendar.left .calendar-table {\r\n    border-right: none;\r\n    border-top-right-radius: 0;\r\n    border-bottom-right-radius: 0;\r\n  }\r\n\r\n  .daterangepicker .drp-calendar.right {\r\n    margin-left: 0;\r\n  }\r\n\r\n  .daterangepicker .drp-calendar.right .calendar-table {\r\n    border-left: none;\r\n    border-top-left-radius: 0;\r\n    border-bottom-left-radius: 0;\r\n  }\r\n\r\n  .daterangepicker .drp-calendar.left .calendar-table {\r\n    padding-right: 8px;\r\n  }\r\n\r\n  .daterangepicker .ranges, .daterangepicker .drp-calendar {\r\n    float: left;\r\n  }\r\n}\r\n\r\n@media (min-width: 730px) {\r\n  .daterangepicker .ranges {\r\n    width: auto;\r\n  }\r\n\r\n  .daterangepicker .ranges {\r\n    float: left;\r\n  }\r\n\r\n  .daterangepicker.rtl .ranges {\r\n    float: right;\r\n  }\r\n\r\n  .daterangepicker .drp-calendar.left {\r\n    clear: none !important;\r\n  }\r\n}\r\n",""])},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(1)),i=n(146),o=n(147),s=n(148),u=n(149),d=["¿De qué se habla? (Antes)","¿De qué se habla? (Después)","¿Qué se siente? (Antes)","¿Qué se siente? (Después)"],c=[i,o,s,u];t.nubes=function(e){a.select(e).append("select").attr("id","dropdown").style("transform","translate(20%, 0%)").selectAll("option").data(d).enter().append("option").text((function(e){return e})).attr("value",(function(e,t){return t}));var t=0;a.select("#dropdown").property("selectedIndex",t),a.select("#dropdown").on("change",(function(e,r){t=a.select(this).property("value"),function(e,r){n.selectAll("image").remove();n.append("image").attr("xlink:href",c[t]).attr("width",300).attr("height",350)}()}));var n=a.select(e).append("svg").attr("width",300).attr("height",350).attr("stroke","black").attr("fill","red");n.append("image").attr("xlink:href",c[t]).attr("width",300).attr("height",350)}},function(e,t,n){e.exports=n.p+"ee1b64b089b29ed90750ed6b363cfac1.png"},function(e,t,n){e.exports=n.p+"041661e2e341ac362fb7f0838b4a8c67.png"},function(e,t,n){e.exports=n.p+"e6fd5ae235043a79437d26ec076ff99a.png"},function(e,t,n){e.exports=n.p+"829801c875287f5410ffee3f20209370.png"},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var a=r(n(1));t.preprocesar=function(e){return e.dia=+e.dia,e.hora=+e.hora,e.minuto=+e.minuto,e.timestamp=new Date(2020,3,e.dia,e.hora,e.minuto),e.total=+e.total,e.gas=+e.gas,e.water=+e.water,e.healthcare=+e.healthcare,e.power=+e.power,e.roadways=+e.roadways,e},t.totalizarPorBarrio=function(e){return a.nest().key((function(e){return e.location})).rollup((function(e){return{total:a.sum(e,(function(e){return e.total})),water:a.sum(e,(function(e){return e.water})),roadways:a.sum(e,(function(e){return e.roadways})),gas:a.sum(e,(function(e){return e.gas})),power:a.sum(e,(function(e){return e.power})),healthcare:a.sum(e,(function(e){return e.healthcare}))}})).entries(e)},t.convertirAMatriz=function(e){for(var t=[],n=[],r=0;r<e.length;r++)n.push(e[r].key),t[r]=[],t[r][0]=e[r].value.water,t[r][1]=e[r].value.roadways,t[r][2]=e[r].value.gas,t[r][3]=e[r].value.power,t[r][4]=e[r].value.healthcare;return{barrios:n,servicios:["water","roadways","gas","power","healthcare"],datos:t}},t.calcularMaxMin=function(e){return{maxValue:a.max(e,(function(e){return a.max(e,(function(e){return e}))})),minValue:a.min(e,(function(e){return a.min(e,(function(e){return e}))}))}}},function(e,t,n){e.exports=n.p+"ae45e76d7b76fb45eb9f697e4bf82af0.csv"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,